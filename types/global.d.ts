/* eslint-disable no-use-before-define */
/* eslint-disable no-unused-vars */
/* eslint-disable max-classes-per-file */

// https://stackoverflow.com/a/69288824
private type Expand<T> = T extends (...args: infer A) => infer R
? (...args: Expand<A>) => Expand<R>
: T extends infer O
? { [K in keyof O]: O[K] }
: never;

declare type byte<N = void> = string
declare type uint64<N = void> = N extends number ? number[] : number;
declare type bytes = string
declare type StaticArray<T, N extends number> = T[]

declare class Asset {
  static fromIndex(index: uint64): Asset;

  static readonly zeroIndex: Asset;

  readonly total: uint64;

  readonly decimals: uint64;

  readonly defaultFrozen: uint64;

  readonly name: string;

  readonly unitName: string;

  readonly url: string;

  readonly metadataHash: string;

  readonly manager: Address;

  readonly reserve: Address;

  readonly freeze: Address;

  readonly clawback: Address;

  readonly creator: Address;
}

declare class Address {
  static fromBytes(addr: BytesLike): Address;

  static readonly zeroAddress: Address;

  readonly balance: uint64;

  readonly hasBalance: uint64;

  readonly minBalance: uint64;

  readonly totalAssets: uint64;

  // eslint-disable-next-line no-use-before-define
  readonly authAddr: Address;

  readonly totalNumUint: uint64;

  readonly totalNumByteSlice: uint64;

  readonly totalExtraAppPages: uint64;

  readonly totalAppsCreated: uint64;

  readonly totalAppsOptedIn: uint64;

  readonly totalAssetsCreated: uint64;

  readonly totalBoxes: uint64;

  readonly totalBoxBytes: uint64;

  assetBalance(asa: Asset): uint64

  hasAsset(asa: Asset): uint64

  assetFrozen(asa: Asset): uint64
}

type Account = Address

type BytesLike = bytes | Address

declare class Application {
  static fromIndex(appID: uint64)

  static readonly zeroIndex: Application;

  readonly approvalProgram: bytes;

  readonly clearStateProgram: bytes;

  readonly globalNumUint: uint64;

  readonly globalNumByteSlice: uint64;

  readonly localNumUint: uint64;

  readonly localNumByteSlice: uint64;

  readonly extraProgramPages: uint64;

  readonly creator: Address;

  readonly address: Address;

  global(key: BytesLike): BytesLike | IntLike
}

declare class BoxMap<KeyType, ValueType> {
  constructor(options?: { defaultSize?: number, dynamicSize?: boolean, prefix?: string })

  get(key: KeyType): ValueType

  exists(key: KeyType): uint64

  delete(key: KeyType): void

  put(key: KeyType, value: ValueType): void
}

declare class BoxReference<ValueType> {
  constructor(options?: { defaultSize?: number, key?: string, dynamicSize?: boolean })

  get(): ValueType

  exists(): uint64

  delete(): void

  put(value: ValueType): void
}

declare class GlobalMap<KeyType, ValueType> {
  constructor()

  get(key: KeyType): ValueType

  exists(key: KeyType): uint64

  delete(key: KeyType): void

  put(key: KeyType, value: ValueType): void
}

declare class GlobalReference<ValueType> {
  constructor(options?: { key?: string })

  get(): ValueType

  exists(): uint64

  delete(): void

  put(value: ValueType): void
}

declare class LocalMap<KeyType, ValueType> {
  constructor()

  get(account: Address, key: KeyType): ValueType

  exists(account: Address, key: KeyType): uint64

  delete(account: Address, key: KeyType): void

  put(account: Address, key: KeyType, value: ValueType): void
}

declare class LocalReference<ValueType> {
  constructor(options?: { key?: string })

  get(account: Address): ValueType

  exists(account: Address): uint64

  delete(account: Address): void

  put(account: Address, value: ValueType): void
}

type IntLike = uint64 | Asset | Application | boolean

interface CommonTransactionParams {
  fee: uint64
  sender?: Address
  rekeyTo?: Address
  note?: string
}

interface CommonOnChainTransactionParams extends Required<CommonTransactionParams> {
  groupIndex: uint64,
  txID: string,
}

interface AppOnChainTransactionParams extends CommonOnChainTransactionParams {
  createdAssetID: Asset,
  createdApplicationID: Application,
  lastLog: bytes,
  numAppArgs: uint64,
  numAccounts: uint64,
  numAssets: uint64,
  numApplicatons: uint64,
  numLogs: uint64,
  numApprovalProgrammPages: uint64,
  numClearStateProgramPages: uint64,
}

interface AssetTransferParams extends CommonTransactionParams {
  xferAsset: Asset
  assetAmount: uint64
  assetSender?: Address
  assetReceiver: Address
  assetCloseTo?: Address
}

interface AssetConfigParams extends CommonTransactionParams {
  configAsset: Asset
  configAssetManager?: Address
  configAssetReserve?: Address
  configAssetFreeze?: Address
  configAssetClawback?: Address
}

interface AssetCreateParams extends CommonTransactionParams {
  configAssetName?: bytes
  configAssetUnitName?: bytes
  configAssetTotal: uint64
  configAssetDecimals: uint64
  configAssetManager?: Address
  configAssetReserve?: Address
  configAssetFreeze?: Address
  configAssetClawback?: Address
  configAssetDefaultFrozen?: uint64
  configAssetURL?: bytes
  configAssetMetadataHash?: bytes
}

interface AssetFreezeParams extends CommonTransactionParams {
  freezeAsset: Asset
  freezeAssetAccount: Address
  freezeAssetFrozen: uint64
}

interface PaymentParams extends CommonTransactionParams {
  amount: uint64
  receiver: Address
  closeRemainderTo?: Address
}

interface AppParams extends CommonTransactionParams {
  applicationID?: Application
  onCompletion: 'NoOp' | 'OptIn' | 'CloseOut' | 'ClearState' | 'UpdateApplication' | 'DeleteApplication' | 'CreateApplication'
  accounts?: Address[]
  approvalProgram?: bytes | NewableFunction
  applicationArgs?: bytes[]
  clearStateProgram?: bytes
  applications?: Array<Application>
  assets?: Array<Asset>
  globalNumByteSlice?: uint64
  globalNumUint?: uint64
  localNumByteSlice?: uint64
  localNumUint?: uint64
}

interface KeyRegParams extends CommonTransactionParams {
  votePk?: bytes
  selectionPK?: bytes
  stateProofPk?: bytes
  voteFirst?: uint64
  voteLast?: uint64
  voteKeyDilution?: uint64
}

interface OnlineKeyRegParams extends CommonTransactionParams {
  votePK: bytes
  selectionPK: bytes
  stateProofPK: bytes
  voteFirst: uint64
  voteLast: uint64
  voteKeyDilution: uint64
}

declare type PayTxn = Required<PaymentParams>
declare type AssetTransferTxn = Required<AssetTransferParams>
declare type AppCallTxn = AppOnChainTransactionParams & Required<AppParams>
declare type KeyRegTxn = Required<KeyRegParams>
declare type AssetConfigTxn = Required<AssetConfigParams>
declare type AssetFreezeTxn = Required<AssetFreezeParams>

interface MethodCallParams<ArgsType> extends AppParams {
  /** ABI method arguments */
  methodArgs?: ArgsType
  /** Name of the ABI method */
  name: string
}

type ThisTxnParams = AppOnChainTransactionParams

type Txn = PayTxn & AssetTransferTxn & AppCallTxn & KeyRegTxn & AssetConfigTxn & AssetFreezeTxn

declare const globals: {
  minTxnFee: uint64
  minBalance: uint64
  maxTxnLife: uint64
  zeroAddress: Address
  groupSize: uint64
  logicSigVersion: uint64
  round: uint64
  latestTimestamp: uint64
  currentApplicationID: Application
  creatorAddress: Address
  currentApplicationAddress: Address
  groupID: bytes
  opcodeBudget: uint64
  callerApplicationID: Application
  callerApplicationAddress: Address
};

declare function method(signature: string): bytes
declare function addr(address: string): Address

declare function sendPayment(params: Expand<PaymentParams>): void
declare function sendAppCall(params: Expand<AppParams>): void
declare function sendAssetTransfer(params: Expand<AssetTransferParams>): void
declare function sendAssetCreation(params: Expand<AssetCreateParams>): Asset
declare function sendOnlineKeyRegistration(params: Expand<OnlineKeyRegParams>): void
declare function sendOfflineKeyRegistration(params: Expand<CommonTransactionParams>): void
declare function sendAssetConfig(params: Expand<AssetConfigParams>): void
declare function sendAssetFreeze(params: Expand<AssetFreezeParams>): void

/**
 * Sends ABI method call. The two type arguments in combination with the
 * name argument are used to form the the method signature to ensure typesafety.
 *
 * @example
 * Calling a method and getting the return value
 * ```ts
 * // call createNFT(string,string)uint64
 * const createdAsset = sendMethodCall<[string, string], Asset>({
 *     applicationID: factoryApp,
 *     name: 'createNFT',
 *     methodArgs: ['My NFT', 'MNFT'],
 *     onCompletion: 'NoOp',
 *     fee: 0,
 * });
 * ```
 *
 * @returns The return value of the method call
 *
 * @typeParam ArgsType - A tuple type corresponding to the types of the method arguments
 * @typeParam ReturnType - The return type of the method
 *
 * @param params - The parameters of the method call
 *
 */
declare function sendMethodCall<ArgsType, ReturnType>(
  params: Expand<MethodCallParams<ArgsType>>
): ReturnType
declare function btoi(byteslice: BytesLike): uint64
declare function itob(int: IntLike): bytes
declare function log(content: BytesLike): void
declare function sha256(arg0: BytesLike)
declare function keccak256(arg0: BytesLike)
declare function sha512_256(arg0: BytesLike)
declare function ed25519verify(arg0: BytesLike, arg1: BytesLike, arg2: BytesLike)
declare function len(arg0: BytesLike)
declare function mulw(arg0: IntLike, arg1: IntLike)
declare function addw(arg0: IntLike, arg1: IntLike)
declare function divmodw(arg0: IntLike, arg1: IntLike, arg2: IntLike, arg3: IntLike)
declare function assert(arg0: IntLike)
declare function concat(arg0: BytesLike, arg1: BytesLike)
declare function substring3(arg0: BytesLike, arg1: IntLike, arg2: IntLike)
declare function getbtest(arg0: BytesLike, arg1: IntLike)
declare function setbtest(arg0: BytesLike, arg1: IntLike, arg2: IntLike)
declare function getbyte(arg0: BytesLike, arg1: IntLike): uint64
declare function setbyte(arg0: BytesLike, arg1: IntLike, arg2: IntLike)
declare function extract3(arg0: BytesLike, arg1: IntLike, arg2: IntLike)
declare function extract_uint16(arg0: BytesLike, arg1: IntLike)
declare function extract_uint32(arg0: BytesLike, arg1: IntLike)
declare function extract_uint64(arg0: BytesLike, arg1: IntLike)
declare function replace3(arg0: BytesLike, arg1: IntLike, arg2: BytesLike)
declare function ed25519verify_bare(arg0: BytesLike, arg1: BytesLike, arg2: BytesLike)
declare function sqrt(arg0: IntLike)
declare function bitlen(arg0: BytesLike)
declare function exp(arg0: IntLike, arg1: IntLike)
declare function expw(arg0: IntLike, arg1: IntLike)
declare function bsqrt(arg0: BytesLike)
declare function divw(arg0: IntLike, arg1: IntLike, arg2: IntLike)
declare function sha3_256(arg0: BytesLike)

declare function wideRatio(numeratorFactors: uint64[], denominatorFactors: uint64[]): uint64
declare function hex(input: string): bytes

declare type decorator = (
  target: Object,
  key: string | symbol,
  descriptor: PropertyDescriptor
) => PropertyDescriptor

declare const handle: {
  clearState: decorator;
  noOp: decorator;
  optIn: decorator;
  closeOut: decorator;
  updateApplication: decorator;
  deleteApplication: decorator;
  createApplication: decorator;
 };

declare type uint8<N = void> = N extends number ? number[] : number;
declare type uint16<N = void> = N extends number ? number[] : number;
declare type uint24<N = void> = N extends number ? number[] : number;
declare type uint32<N = void> = N extends number ? number[] : number;
declare type uint40<N = void> = N extends number ? number[] : number;
declare type uint48<N = void> = N extends number ? number[] : number;
declare type uint56<N = void> = N extends number ? number[] : number;
declare type uint72<N = void> = N extends number ? number[] : number;
declare type uint80<N = void> = N extends number ? number[] : number;
declare type uint88<N = void> = N extends number ? number[] : number;
declare type uint96<N = void> = N extends number ? number[] : number;
declare type uint104<N = void> = N extends number ? number[] : number;
declare type uint112<N = void> = N extends number ? number[] : number;
declare type uint120<N = void> = N extends number ? number[] : number;
declare type uint128<N = void> = N extends number ? number[] : number;
declare type uint136<N = void> = N extends number ? number[] : number;
declare type uint144<N = void> = N extends number ? number[] : number;
declare type uint152<N = void> = N extends number ? number[] : number;
declare type uint160<N = void> = N extends number ? number[] : number;
declare type uint168<N = void> = N extends number ? number[] : number;
declare type uint176<N = void> = N extends number ? number[] : number;
declare type uint184<N = void> = N extends number ? number[] : number;
declare type uint192<N = void> = N extends number ? number[] : number;
declare type uint200<N = void> = N extends number ? number[] : number;
declare type uint208<N = void> = N extends number ? number[] : number;
declare type uint216<N = void> = N extends number ? number[] : number;
declare type uint224<N = void> = N extends number ? number[] : number;
declare type uint232<N = void> = N extends number ? number[] : number;
declare type uint240<N = void> = N extends number ? number[] : number;
declare type uint248<N = void> = N extends number ? number[] : number;
declare type uint256<N = void> = N extends number ? number[] : number;
declare type uint264<N = void> = N extends number ? number[] : number;
declare type uint272<N = void> = N extends number ? number[] : number;
declare type uint280<N = void> = N extends number ? number[] : number;
declare type uint288<N = void> = N extends number ? number[] : number;
declare type uint296<N = void> = N extends number ? number[] : number;
declare type uint304<N = void> = N extends number ? number[] : number;
declare type uint312<N = void> = N extends number ? number[] : number;
declare type uint320<N = void> = N extends number ? number[] : number;
declare type uint328<N = void> = N extends number ? number[] : number;
declare type uint336<N = void> = N extends number ? number[] : number;
declare type uint344<N = void> = N extends number ? number[] : number;
declare type uint352<N = void> = N extends number ? number[] : number;
declare type uint360<N = void> = N extends number ? number[] : number;
declare type uint368<N = void> = N extends number ? number[] : number;
declare type uint376<N = void> = N extends number ? number[] : number;
declare type uint384<N = void> = N extends number ? number[] : number;
declare type uint392<N = void> = N extends number ? number[] : number;
declare type uint400<N = void> = N extends number ? number[] : number;
declare type uint408<N = void> = N extends number ? number[] : number;
declare type uint416<N = void> = N extends number ? number[] : number;
declare type uint424<N = void> = N extends number ? number[] : number;
declare type uint432<N = void> = N extends number ? number[] : number;
declare type uint440<N = void> = N extends number ? number[] : number;
declare type uint448<N = void> = N extends number ? number[] : number;
declare type uint456<N = void> = N extends number ? number[] : number;
declare type uint464<N = void> = N extends number ? number[] : number;
declare type uint472<N = void> = N extends number ? number[] : number;
declare type uint480<N = void> = N extends number ? number[] : number;
declare type uint488<N = void> = N extends number ? number[] : number;
declare type uint496<N = void> = N extends number ? number[] : number;
declare type uint504<N = void> = N extends number ? number[] : number;
declare type uint512<N = void> = N extends number ? number[] : number;

 declare type ufixed8x1<N = void> = N extends number ? number[] : number;
declare type ufixed8x2<N = void> = N extends number ? number[] : number;
declare type ufixed8x3<N = void> = N extends number ? number[] : number;
declare type ufixed8x4<N = void> = N extends number ? number[] : number;
declare type ufixed8x5<N = void> = N extends number ? number[] : number;
declare type ufixed8x6<N = void> = N extends number ? number[] : number;
declare type ufixed8x7<N = void> = N extends number ? number[] : number;
declare type ufixed8x8<N = void> = N extends number ? number[] : number;
declare type ufixed8x9<N = void> = N extends number ? number[] : number;
declare type ufixed8x10<N = void> = N extends number ? number[] : number;
declare type ufixed8x11<N = void> = N extends number ? number[] : number;
declare type ufixed8x12<N = void> = N extends number ? number[] : number;
declare type ufixed8x13<N = void> = N extends number ? number[] : number;
declare type ufixed8x14<N = void> = N extends number ? number[] : number;
declare type ufixed8x15<N = void> = N extends number ? number[] : number;
declare type ufixed8x16<N = void> = N extends number ? number[] : number;
declare type ufixed8x17<N = void> = N extends number ? number[] : number;
declare type ufixed8x18<N = void> = N extends number ? number[] : number;
declare type ufixed8x19<N = void> = N extends number ? number[] : number;
declare type ufixed8x20<N = void> = N extends number ? number[] : number;
declare type ufixed8x21<N = void> = N extends number ? number[] : number;
declare type ufixed8x22<N = void> = N extends number ? number[] : number;
declare type ufixed8x23<N = void> = N extends number ? number[] : number;
declare type ufixed8x24<N = void> = N extends number ? number[] : number;
declare type ufixed8x25<N = void> = N extends number ? number[] : number;
declare type ufixed8x26<N = void> = N extends number ? number[] : number;
declare type ufixed8x27<N = void> = N extends number ? number[] : number;
declare type ufixed8x28<N = void> = N extends number ? number[] : number;
declare type ufixed8x29<N = void> = N extends number ? number[] : number;
declare type ufixed8x30<N = void> = N extends number ? number[] : number;
declare type ufixed8x31<N = void> = N extends number ? number[] : number;
declare type ufixed8x32<N = void> = N extends number ? number[] : number;
declare type ufixed8x33<N = void> = N extends number ? number[] : number;
declare type ufixed8x34<N = void> = N extends number ? number[] : number;
declare type ufixed8x35<N = void> = N extends number ? number[] : number;
declare type ufixed8x36<N = void> = N extends number ? number[] : number;
declare type ufixed8x37<N = void> = N extends number ? number[] : number;
declare type ufixed8x38<N = void> = N extends number ? number[] : number;
declare type ufixed8x39<N = void> = N extends number ? number[] : number;
declare type ufixed8x40<N = void> = N extends number ? number[] : number;
declare type ufixed8x41<N = void> = N extends number ? number[] : number;
declare type ufixed8x42<N = void> = N extends number ? number[] : number;
declare type ufixed8x43<N = void> = N extends number ? number[] : number;
declare type ufixed8x44<N = void> = N extends number ? number[] : number;
declare type ufixed8x45<N = void> = N extends number ? number[] : number;
declare type ufixed8x46<N = void> = N extends number ? number[] : number;
declare type ufixed8x47<N = void> = N extends number ? number[] : number;
declare type ufixed8x48<N = void> = N extends number ? number[] : number;
declare type ufixed8x49<N = void> = N extends number ? number[] : number;
declare type ufixed8x50<N = void> = N extends number ? number[] : number;
declare type ufixed8x51<N = void> = N extends number ? number[] : number;
declare type ufixed8x52<N = void> = N extends number ? number[] : number;
declare type ufixed8x53<N = void> = N extends number ? number[] : number;
declare type ufixed8x54<N = void> = N extends number ? number[] : number;
declare type ufixed8x55<N = void> = N extends number ? number[] : number;
declare type ufixed8x56<N = void> = N extends number ? number[] : number;
declare type ufixed8x57<N = void> = N extends number ? number[] : number;
declare type ufixed8x58<N = void> = N extends number ? number[] : number;
declare type ufixed8x59<N = void> = N extends number ? number[] : number;
declare type ufixed8x60<N = void> = N extends number ? number[] : number;
declare type ufixed8x61<N = void> = N extends number ? number[] : number;
declare type ufixed8x62<N = void> = N extends number ? number[] : number;
declare type ufixed8x63<N = void> = N extends number ? number[] : number;
declare type ufixed8x64<N = void> = N extends number ? number[] : number;
declare type ufixed8x65<N = void> = N extends number ? number[] : number;
declare type ufixed8x66<N = void> = N extends number ? number[] : number;
declare type ufixed8x67<N = void> = N extends number ? number[] : number;
declare type ufixed8x68<N = void> = N extends number ? number[] : number;
declare type ufixed8x69<N = void> = N extends number ? number[] : number;
declare type ufixed8x70<N = void> = N extends number ? number[] : number;
declare type ufixed8x71<N = void> = N extends number ? number[] : number;
declare type ufixed8x72<N = void> = N extends number ? number[] : number;
declare type ufixed8x73<N = void> = N extends number ? number[] : number;
declare type ufixed8x74<N = void> = N extends number ? number[] : number;
declare type ufixed8x75<N = void> = N extends number ? number[] : number;
declare type ufixed8x76<N = void> = N extends number ? number[] : number;
declare type ufixed8x77<N = void> = N extends number ? number[] : number;
declare type ufixed8x78<N = void> = N extends number ? number[] : number;
declare type ufixed8x79<N = void> = N extends number ? number[] : number;
declare type ufixed8x80<N = void> = N extends number ? number[] : number;
declare type ufixed8x81<N = void> = N extends number ? number[] : number;
declare type ufixed8x82<N = void> = N extends number ? number[] : number;
declare type ufixed8x83<N = void> = N extends number ? number[] : number;
declare type ufixed8x84<N = void> = N extends number ? number[] : number;
declare type ufixed8x85<N = void> = N extends number ? number[] : number;
declare type ufixed8x86<N = void> = N extends number ? number[] : number;
declare type ufixed8x87<N = void> = N extends number ? number[] : number;
declare type ufixed8x88<N = void> = N extends number ? number[] : number;
declare type ufixed8x89<N = void> = N extends number ? number[] : number;
declare type ufixed8x90<N = void> = N extends number ? number[] : number;
declare type ufixed8x91<N = void> = N extends number ? number[] : number;
declare type ufixed8x92<N = void> = N extends number ? number[] : number;
declare type ufixed8x93<N = void> = N extends number ? number[] : number;
declare type ufixed8x94<N = void> = N extends number ? number[] : number;
declare type ufixed8x95<N = void> = N extends number ? number[] : number;
declare type ufixed8x96<N = void> = N extends number ? number[] : number;
declare type ufixed8x97<N = void> = N extends number ? number[] : number;
declare type ufixed8x98<N = void> = N extends number ? number[] : number;
declare type ufixed8x99<N = void> = N extends number ? number[] : number;
declare type ufixed8x100<N = void> = N extends number ? number[] : number;
declare type ufixed8x101<N = void> = N extends number ? number[] : number;
declare type ufixed8x102<N = void> = N extends number ? number[] : number;
declare type ufixed8x103<N = void> = N extends number ? number[] : number;
declare type ufixed8x104<N = void> = N extends number ? number[] : number;
declare type ufixed8x105<N = void> = N extends number ? number[] : number;
declare type ufixed8x106<N = void> = N extends number ? number[] : number;
declare type ufixed8x107<N = void> = N extends number ? number[] : number;
declare type ufixed8x108<N = void> = N extends number ? number[] : number;
declare type ufixed8x109<N = void> = N extends number ? number[] : number;
declare type ufixed8x110<N = void> = N extends number ? number[] : number;
declare type ufixed8x111<N = void> = N extends number ? number[] : number;
declare type ufixed8x112<N = void> = N extends number ? number[] : number;
declare type ufixed8x113<N = void> = N extends number ? number[] : number;
declare type ufixed8x114<N = void> = N extends number ? number[] : number;
declare type ufixed8x115<N = void> = N extends number ? number[] : number;
declare type ufixed8x116<N = void> = N extends number ? number[] : number;
declare type ufixed8x117<N = void> = N extends number ? number[] : number;
declare type ufixed8x118<N = void> = N extends number ? number[] : number;
declare type ufixed8x119<N = void> = N extends number ? number[] : number;
declare type ufixed8x120<N = void> = N extends number ? number[] : number;
declare type ufixed8x121<N = void> = N extends number ? number[] : number;
declare type ufixed8x122<N = void> = N extends number ? number[] : number;
declare type ufixed8x123<N = void> = N extends number ? number[] : number;
declare type ufixed8x124<N = void> = N extends number ? number[] : number;
declare type ufixed8x125<N = void> = N extends number ? number[] : number;
declare type ufixed8x126<N = void> = N extends number ? number[] : number;
declare type ufixed8x127<N = void> = N extends number ? number[] : number;
declare type ufixed8x128<N = void> = N extends number ? number[] : number;
declare type ufixed8x129<N = void> = N extends number ? number[] : number;
declare type ufixed8x130<N = void> = N extends number ? number[] : number;
declare type ufixed8x131<N = void> = N extends number ? number[] : number;
declare type ufixed8x132<N = void> = N extends number ? number[] : number;
declare type ufixed8x133<N = void> = N extends number ? number[] : number;
declare type ufixed8x134<N = void> = N extends number ? number[] : number;
declare type ufixed8x135<N = void> = N extends number ? number[] : number;
declare type ufixed8x136<N = void> = N extends number ? number[] : number;
declare type ufixed8x137<N = void> = N extends number ? number[] : number;
declare type ufixed8x138<N = void> = N extends number ? number[] : number;
declare type ufixed8x139<N = void> = N extends number ? number[] : number;
declare type ufixed8x140<N = void> = N extends number ? number[] : number;
declare type ufixed8x141<N = void> = N extends number ? number[] : number;
declare type ufixed8x142<N = void> = N extends number ? number[] : number;
declare type ufixed8x143<N = void> = N extends number ? number[] : number;
declare type ufixed8x144<N = void> = N extends number ? number[] : number;
declare type ufixed8x145<N = void> = N extends number ? number[] : number;
declare type ufixed8x146<N = void> = N extends number ? number[] : number;
declare type ufixed8x147<N = void> = N extends number ? number[] : number;
declare type ufixed8x148<N = void> = N extends number ? number[] : number;
declare type ufixed8x149<N = void> = N extends number ? number[] : number;
declare type ufixed8x150<N = void> = N extends number ? number[] : number;
declare type ufixed8x151<N = void> = N extends number ? number[] : number;
declare type ufixed8x152<N = void> = N extends number ? number[] : number;
declare type ufixed8x153<N = void> = N extends number ? number[] : number;
declare type ufixed8x154<N = void> = N extends number ? number[] : number;
declare type ufixed8x155<N = void> = N extends number ? number[] : number;
declare type ufixed8x156<N = void> = N extends number ? number[] : number;
declare type ufixed8x157<N = void> = N extends number ? number[] : number;
declare type ufixed8x158<N = void> = N extends number ? number[] : number;
declare type ufixed8x159<N = void> = N extends number ? number[] : number;
declare type ufixed8x160<N = void> = N extends number ? number[] : number;
declare type ufixed16x1<N = void> = N extends number ? number[] : number;
declare type ufixed16x2<N = void> = N extends number ? number[] : number;
declare type ufixed16x3<N = void> = N extends number ? number[] : number;
declare type ufixed16x4<N = void> = N extends number ? number[] : number;
declare type ufixed16x5<N = void> = N extends number ? number[] : number;
declare type ufixed16x6<N = void> = N extends number ? number[] : number;
declare type ufixed16x7<N = void> = N extends number ? number[] : number;
declare type ufixed16x8<N = void> = N extends number ? number[] : number;
declare type ufixed16x9<N = void> = N extends number ? number[] : number;
declare type ufixed16x10<N = void> = N extends number ? number[] : number;
declare type ufixed16x11<N = void> = N extends number ? number[] : number;
declare type ufixed16x12<N = void> = N extends number ? number[] : number;
declare type ufixed16x13<N = void> = N extends number ? number[] : number;
declare type ufixed16x14<N = void> = N extends number ? number[] : number;
declare type ufixed16x15<N = void> = N extends number ? number[] : number;
declare type ufixed16x16<N = void> = N extends number ? number[] : number;
declare type ufixed16x17<N = void> = N extends number ? number[] : number;
declare type ufixed16x18<N = void> = N extends number ? number[] : number;
declare type ufixed16x19<N = void> = N extends number ? number[] : number;
declare type ufixed16x20<N = void> = N extends number ? number[] : number;
declare type ufixed16x21<N = void> = N extends number ? number[] : number;
declare type ufixed16x22<N = void> = N extends number ? number[] : number;
declare type ufixed16x23<N = void> = N extends number ? number[] : number;
declare type ufixed16x24<N = void> = N extends number ? number[] : number;
declare type ufixed16x25<N = void> = N extends number ? number[] : number;
declare type ufixed16x26<N = void> = N extends number ? number[] : number;
declare type ufixed16x27<N = void> = N extends number ? number[] : number;
declare type ufixed16x28<N = void> = N extends number ? number[] : number;
declare type ufixed16x29<N = void> = N extends number ? number[] : number;
declare type ufixed16x30<N = void> = N extends number ? number[] : number;
declare type ufixed16x31<N = void> = N extends number ? number[] : number;
declare type ufixed16x32<N = void> = N extends number ? number[] : number;
declare type ufixed16x33<N = void> = N extends number ? number[] : number;
declare type ufixed16x34<N = void> = N extends number ? number[] : number;
declare type ufixed16x35<N = void> = N extends number ? number[] : number;
declare type ufixed16x36<N = void> = N extends number ? number[] : number;
declare type ufixed16x37<N = void> = N extends number ? number[] : number;
declare type ufixed16x38<N = void> = N extends number ? number[] : number;
declare type ufixed16x39<N = void> = N extends number ? number[] : number;
declare type ufixed16x40<N = void> = N extends number ? number[] : number;
declare type ufixed16x41<N = void> = N extends number ? number[] : number;
declare type ufixed16x42<N = void> = N extends number ? number[] : number;
declare type ufixed16x43<N = void> = N extends number ? number[] : number;
declare type ufixed16x44<N = void> = N extends number ? number[] : number;
declare type ufixed16x45<N = void> = N extends number ? number[] : number;
declare type ufixed16x46<N = void> = N extends number ? number[] : number;
declare type ufixed16x47<N = void> = N extends number ? number[] : number;
declare type ufixed16x48<N = void> = N extends number ? number[] : number;
declare type ufixed16x49<N = void> = N extends number ? number[] : number;
declare type ufixed16x50<N = void> = N extends number ? number[] : number;
declare type ufixed16x51<N = void> = N extends number ? number[] : number;
declare type ufixed16x52<N = void> = N extends number ? number[] : number;
declare type ufixed16x53<N = void> = N extends number ? number[] : number;
declare type ufixed16x54<N = void> = N extends number ? number[] : number;
declare type ufixed16x55<N = void> = N extends number ? number[] : number;
declare type ufixed16x56<N = void> = N extends number ? number[] : number;
declare type ufixed16x57<N = void> = N extends number ? number[] : number;
declare type ufixed16x58<N = void> = N extends number ? number[] : number;
declare type ufixed16x59<N = void> = N extends number ? number[] : number;
declare type ufixed16x60<N = void> = N extends number ? number[] : number;
declare type ufixed16x61<N = void> = N extends number ? number[] : number;
declare type ufixed16x62<N = void> = N extends number ? number[] : number;
declare type ufixed16x63<N = void> = N extends number ? number[] : number;
declare type ufixed16x64<N = void> = N extends number ? number[] : number;
declare type ufixed16x65<N = void> = N extends number ? number[] : number;
declare type ufixed16x66<N = void> = N extends number ? number[] : number;
declare type ufixed16x67<N = void> = N extends number ? number[] : number;
declare type ufixed16x68<N = void> = N extends number ? number[] : number;
declare type ufixed16x69<N = void> = N extends number ? number[] : number;
declare type ufixed16x70<N = void> = N extends number ? number[] : number;
declare type ufixed16x71<N = void> = N extends number ? number[] : number;
declare type ufixed16x72<N = void> = N extends number ? number[] : number;
declare type ufixed16x73<N = void> = N extends number ? number[] : number;
declare type ufixed16x74<N = void> = N extends number ? number[] : number;
declare type ufixed16x75<N = void> = N extends number ? number[] : number;
declare type ufixed16x76<N = void> = N extends number ? number[] : number;
declare type ufixed16x77<N = void> = N extends number ? number[] : number;
declare type ufixed16x78<N = void> = N extends number ? number[] : number;
declare type ufixed16x79<N = void> = N extends number ? number[] : number;
declare type ufixed16x80<N = void> = N extends number ? number[] : number;
declare type ufixed16x81<N = void> = N extends number ? number[] : number;
declare type ufixed16x82<N = void> = N extends number ? number[] : number;
declare type ufixed16x83<N = void> = N extends number ? number[] : number;
declare type ufixed16x84<N = void> = N extends number ? number[] : number;
declare type ufixed16x85<N = void> = N extends number ? number[] : number;
declare type ufixed16x86<N = void> = N extends number ? number[] : number;
declare type ufixed16x87<N = void> = N extends number ? number[] : number;
declare type ufixed16x88<N = void> = N extends number ? number[] : number;
declare type ufixed16x89<N = void> = N extends number ? number[] : number;
declare type ufixed16x90<N = void> = N extends number ? number[] : number;
declare type ufixed16x91<N = void> = N extends number ? number[] : number;
declare type ufixed16x92<N = void> = N extends number ? number[] : number;
declare type ufixed16x93<N = void> = N extends number ? number[] : number;
declare type ufixed16x94<N = void> = N extends number ? number[] : number;
declare type ufixed16x95<N = void> = N extends number ? number[] : number;
declare type ufixed16x96<N = void> = N extends number ? number[] : number;
declare type ufixed16x97<N = void> = N extends number ? number[] : number;
declare type ufixed16x98<N = void> = N extends number ? number[] : number;
declare type ufixed16x99<N = void> = N extends number ? number[] : number;
declare type ufixed16x100<N = void> = N extends number ? number[] : number;
declare type ufixed16x101<N = void> = N extends number ? number[] : number;
declare type ufixed16x102<N = void> = N extends number ? number[] : number;
declare type ufixed16x103<N = void> = N extends number ? number[] : number;
declare type ufixed16x104<N = void> = N extends number ? number[] : number;
declare type ufixed16x105<N = void> = N extends number ? number[] : number;
declare type ufixed16x106<N = void> = N extends number ? number[] : number;
declare type ufixed16x107<N = void> = N extends number ? number[] : number;
declare type ufixed16x108<N = void> = N extends number ? number[] : number;
declare type ufixed16x109<N = void> = N extends number ? number[] : number;
declare type ufixed16x110<N = void> = N extends number ? number[] : number;
declare type ufixed16x111<N = void> = N extends number ? number[] : number;
declare type ufixed16x112<N = void> = N extends number ? number[] : number;
declare type ufixed16x113<N = void> = N extends number ? number[] : number;
declare type ufixed16x114<N = void> = N extends number ? number[] : number;
declare type ufixed16x115<N = void> = N extends number ? number[] : number;
declare type ufixed16x116<N = void> = N extends number ? number[] : number;
declare type ufixed16x117<N = void> = N extends number ? number[] : number;
declare type ufixed16x118<N = void> = N extends number ? number[] : number;
declare type ufixed16x119<N = void> = N extends number ? number[] : number;
declare type ufixed16x120<N = void> = N extends number ? number[] : number;
declare type ufixed16x121<N = void> = N extends number ? number[] : number;
declare type ufixed16x122<N = void> = N extends number ? number[] : number;
declare type ufixed16x123<N = void> = N extends number ? number[] : number;
declare type ufixed16x124<N = void> = N extends number ? number[] : number;
declare type ufixed16x125<N = void> = N extends number ? number[] : number;
declare type ufixed16x126<N = void> = N extends number ? number[] : number;
declare type ufixed16x127<N = void> = N extends number ? number[] : number;
declare type ufixed16x128<N = void> = N extends number ? number[] : number;
declare type ufixed16x129<N = void> = N extends number ? number[] : number;
declare type ufixed16x130<N = void> = N extends number ? number[] : number;
declare type ufixed16x131<N = void> = N extends number ? number[] : number;
declare type ufixed16x132<N = void> = N extends number ? number[] : number;
declare type ufixed16x133<N = void> = N extends number ? number[] : number;
declare type ufixed16x134<N = void> = N extends number ? number[] : number;
declare type ufixed16x135<N = void> = N extends number ? number[] : number;
declare type ufixed16x136<N = void> = N extends number ? number[] : number;
declare type ufixed16x137<N = void> = N extends number ? number[] : number;
declare type ufixed16x138<N = void> = N extends number ? number[] : number;
declare type ufixed16x139<N = void> = N extends number ? number[] : number;
declare type ufixed16x140<N = void> = N extends number ? number[] : number;
declare type ufixed16x141<N = void> = N extends number ? number[] : number;
declare type ufixed16x142<N = void> = N extends number ? number[] : number;
declare type ufixed16x143<N = void> = N extends number ? number[] : number;
declare type ufixed16x144<N = void> = N extends number ? number[] : number;
declare type ufixed16x145<N = void> = N extends number ? number[] : number;
declare type ufixed16x146<N = void> = N extends number ? number[] : number;
declare type ufixed16x147<N = void> = N extends number ? number[] : number;
declare type ufixed16x148<N = void> = N extends number ? number[] : number;
declare type ufixed16x149<N = void> = N extends number ? number[] : number;
declare type ufixed16x150<N = void> = N extends number ? number[] : number;
declare type ufixed16x151<N = void> = N extends number ? number[] : number;
declare type ufixed16x152<N = void> = N extends number ? number[] : number;
declare type ufixed16x153<N = void> = N extends number ? number[] : number;
declare type ufixed16x154<N = void> = N extends number ? number[] : number;
declare type ufixed16x155<N = void> = N extends number ? number[] : number;
declare type ufixed16x156<N = void> = N extends number ? number[] : number;
declare type ufixed16x157<N = void> = N extends number ? number[] : number;
declare type ufixed16x158<N = void> = N extends number ? number[] : number;
declare type ufixed16x159<N = void> = N extends number ? number[] : number;
declare type ufixed16x160<N = void> = N extends number ? number[] : number;
declare type ufixed24x1<N = void> = N extends number ? number[] : number;
declare type ufixed24x2<N = void> = N extends number ? number[] : number;
declare type ufixed24x3<N = void> = N extends number ? number[] : number;
declare type ufixed24x4<N = void> = N extends number ? number[] : number;
declare type ufixed24x5<N = void> = N extends number ? number[] : number;
declare type ufixed24x6<N = void> = N extends number ? number[] : number;
declare type ufixed24x7<N = void> = N extends number ? number[] : number;
declare type ufixed24x8<N = void> = N extends number ? number[] : number;
declare type ufixed24x9<N = void> = N extends number ? number[] : number;
declare type ufixed24x10<N = void> = N extends number ? number[] : number;
declare type ufixed24x11<N = void> = N extends number ? number[] : number;
declare type ufixed24x12<N = void> = N extends number ? number[] : number;
declare type ufixed24x13<N = void> = N extends number ? number[] : number;
declare type ufixed24x14<N = void> = N extends number ? number[] : number;
declare type ufixed24x15<N = void> = N extends number ? number[] : number;
declare type ufixed24x16<N = void> = N extends number ? number[] : number;
declare type ufixed24x17<N = void> = N extends number ? number[] : number;
declare type ufixed24x18<N = void> = N extends number ? number[] : number;
declare type ufixed24x19<N = void> = N extends number ? number[] : number;
declare type ufixed24x20<N = void> = N extends number ? number[] : number;
declare type ufixed24x21<N = void> = N extends number ? number[] : number;
declare type ufixed24x22<N = void> = N extends number ? number[] : number;
declare type ufixed24x23<N = void> = N extends number ? number[] : number;
declare type ufixed24x24<N = void> = N extends number ? number[] : number;
declare type ufixed24x25<N = void> = N extends number ? number[] : number;
declare type ufixed24x26<N = void> = N extends number ? number[] : number;
declare type ufixed24x27<N = void> = N extends number ? number[] : number;
declare type ufixed24x28<N = void> = N extends number ? number[] : number;
declare type ufixed24x29<N = void> = N extends number ? number[] : number;
declare type ufixed24x30<N = void> = N extends number ? number[] : number;
declare type ufixed24x31<N = void> = N extends number ? number[] : number;
declare type ufixed24x32<N = void> = N extends number ? number[] : number;
declare type ufixed24x33<N = void> = N extends number ? number[] : number;
declare type ufixed24x34<N = void> = N extends number ? number[] : number;
declare type ufixed24x35<N = void> = N extends number ? number[] : number;
declare type ufixed24x36<N = void> = N extends number ? number[] : number;
declare type ufixed24x37<N = void> = N extends number ? number[] : number;
declare type ufixed24x38<N = void> = N extends number ? number[] : number;
declare type ufixed24x39<N = void> = N extends number ? number[] : number;
declare type ufixed24x40<N = void> = N extends number ? number[] : number;
declare type ufixed24x41<N = void> = N extends number ? number[] : number;
declare type ufixed24x42<N = void> = N extends number ? number[] : number;
declare type ufixed24x43<N = void> = N extends number ? number[] : number;
declare type ufixed24x44<N = void> = N extends number ? number[] : number;
declare type ufixed24x45<N = void> = N extends number ? number[] : number;
declare type ufixed24x46<N = void> = N extends number ? number[] : number;
declare type ufixed24x47<N = void> = N extends number ? number[] : number;
declare type ufixed24x48<N = void> = N extends number ? number[] : number;
declare type ufixed24x49<N = void> = N extends number ? number[] : number;
declare type ufixed24x50<N = void> = N extends number ? number[] : number;
declare type ufixed24x51<N = void> = N extends number ? number[] : number;
declare type ufixed24x52<N = void> = N extends number ? number[] : number;
declare type ufixed24x53<N = void> = N extends number ? number[] : number;
declare type ufixed24x54<N = void> = N extends number ? number[] : number;
declare type ufixed24x55<N = void> = N extends number ? number[] : number;
declare type ufixed24x56<N = void> = N extends number ? number[] : number;
declare type ufixed24x57<N = void> = N extends number ? number[] : number;
declare type ufixed24x58<N = void> = N extends number ? number[] : number;
declare type ufixed24x59<N = void> = N extends number ? number[] : number;
declare type ufixed24x60<N = void> = N extends number ? number[] : number;
declare type ufixed24x61<N = void> = N extends number ? number[] : number;
declare type ufixed24x62<N = void> = N extends number ? number[] : number;
declare type ufixed24x63<N = void> = N extends number ? number[] : number;
declare type ufixed24x64<N = void> = N extends number ? number[] : number;
declare type ufixed24x65<N = void> = N extends number ? number[] : number;
declare type ufixed24x66<N = void> = N extends number ? number[] : number;
declare type ufixed24x67<N = void> = N extends number ? number[] : number;
declare type ufixed24x68<N = void> = N extends number ? number[] : number;
declare type ufixed24x69<N = void> = N extends number ? number[] : number;
declare type ufixed24x70<N = void> = N extends number ? number[] : number;
declare type ufixed24x71<N = void> = N extends number ? number[] : number;
declare type ufixed24x72<N = void> = N extends number ? number[] : number;
declare type ufixed24x73<N = void> = N extends number ? number[] : number;
declare type ufixed24x74<N = void> = N extends number ? number[] : number;
declare type ufixed24x75<N = void> = N extends number ? number[] : number;
declare type ufixed24x76<N = void> = N extends number ? number[] : number;
declare type ufixed24x77<N = void> = N extends number ? number[] : number;
declare type ufixed24x78<N = void> = N extends number ? number[] : number;
declare type ufixed24x79<N = void> = N extends number ? number[] : number;
declare type ufixed24x80<N = void> = N extends number ? number[] : number;
declare type ufixed24x81<N = void> = N extends number ? number[] : number;
declare type ufixed24x82<N = void> = N extends number ? number[] : number;
declare type ufixed24x83<N = void> = N extends number ? number[] : number;
declare type ufixed24x84<N = void> = N extends number ? number[] : number;
declare type ufixed24x85<N = void> = N extends number ? number[] : number;
declare type ufixed24x86<N = void> = N extends number ? number[] : number;
declare type ufixed24x87<N = void> = N extends number ? number[] : number;
declare type ufixed24x88<N = void> = N extends number ? number[] : number;
declare type ufixed24x89<N = void> = N extends number ? number[] : number;
declare type ufixed24x90<N = void> = N extends number ? number[] : number;
declare type ufixed24x91<N = void> = N extends number ? number[] : number;
declare type ufixed24x92<N = void> = N extends number ? number[] : number;
declare type ufixed24x93<N = void> = N extends number ? number[] : number;
declare type ufixed24x94<N = void> = N extends number ? number[] : number;
declare type ufixed24x95<N = void> = N extends number ? number[] : number;
declare type ufixed24x96<N = void> = N extends number ? number[] : number;
declare type ufixed24x97<N = void> = N extends number ? number[] : number;
declare type ufixed24x98<N = void> = N extends number ? number[] : number;
declare type ufixed24x99<N = void> = N extends number ? number[] : number;
declare type ufixed24x100<N = void> = N extends number ? number[] : number;
declare type ufixed24x101<N = void> = N extends number ? number[] : number;
declare type ufixed24x102<N = void> = N extends number ? number[] : number;
declare type ufixed24x103<N = void> = N extends number ? number[] : number;
declare type ufixed24x104<N = void> = N extends number ? number[] : number;
declare type ufixed24x105<N = void> = N extends number ? number[] : number;
declare type ufixed24x106<N = void> = N extends number ? number[] : number;
declare type ufixed24x107<N = void> = N extends number ? number[] : number;
declare type ufixed24x108<N = void> = N extends number ? number[] : number;
declare type ufixed24x109<N = void> = N extends number ? number[] : number;
declare type ufixed24x110<N = void> = N extends number ? number[] : number;
declare type ufixed24x111<N = void> = N extends number ? number[] : number;
declare type ufixed24x112<N = void> = N extends number ? number[] : number;
declare type ufixed24x113<N = void> = N extends number ? number[] : number;
declare type ufixed24x114<N = void> = N extends number ? number[] : number;
declare type ufixed24x115<N = void> = N extends number ? number[] : number;
declare type ufixed24x116<N = void> = N extends number ? number[] : number;
declare type ufixed24x117<N = void> = N extends number ? number[] : number;
declare type ufixed24x118<N = void> = N extends number ? number[] : number;
declare type ufixed24x119<N = void> = N extends number ? number[] : number;
declare type ufixed24x120<N = void> = N extends number ? number[] : number;
declare type ufixed24x121<N = void> = N extends number ? number[] : number;
declare type ufixed24x122<N = void> = N extends number ? number[] : number;
declare type ufixed24x123<N = void> = N extends number ? number[] : number;
declare type ufixed24x124<N = void> = N extends number ? number[] : number;
declare type ufixed24x125<N = void> = N extends number ? number[] : number;
declare type ufixed24x126<N = void> = N extends number ? number[] : number;
declare type ufixed24x127<N = void> = N extends number ? number[] : number;
declare type ufixed24x128<N = void> = N extends number ? number[] : number;
declare type ufixed24x129<N = void> = N extends number ? number[] : number;
declare type ufixed24x130<N = void> = N extends number ? number[] : number;
declare type ufixed24x131<N = void> = N extends number ? number[] : number;
declare type ufixed24x132<N = void> = N extends number ? number[] : number;
declare type ufixed24x133<N = void> = N extends number ? number[] : number;
declare type ufixed24x134<N = void> = N extends number ? number[] : number;
declare type ufixed24x135<N = void> = N extends number ? number[] : number;
declare type ufixed24x136<N = void> = N extends number ? number[] : number;
declare type ufixed24x137<N = void> = N extends number ? number[] : number;
declare type ufixed24x138<N = void> = N extends number ? number[] : number;
declare type ufixed24x139<N = void> = N extends number ? number[] : number;
declare type ufixed24x140<N = void> = N extends number ? number[] : number;
declare type ufixed24x141<N = void> = N extends number ? number[] : number;
declare type ufixed24x142<N = void> = N extends number ? number[] : number;
declare type ufixed24x143<N = void> = N extends number ? number[] : number;
declare type ufixed24x144<N = void> = N extends number ? number[] : number;
declare type ufixed24x145<N = void> = N extends number ? number[] : number;
declare type ufixed24x146<N = void> = N extends number ? number[] : number;
declare type ufixed24x147<N = void> = N extends number ? number[] : number;
declare type ufixed24x148<N = void> = N extends number ? number[] : number;
declare type ufixed24x149<N = void> = N extends number ? number[] : number;
declare type ufixed24x150<N = void> = N extends number ? number[] : number;
declare type ufixed24x151<N = void> = N extends number ? number[] : number;
declare type ufixed24x152<N = void> = N extends number ? number[] : number;
declare type ufixed24x153<N = void> = N extends number ? number[] : number;
declare type ufixed24x154<N = void> = N extends number ? number[] : number;
declare type ufixed24x155<N = void> = N extends number ? number[] : number;
declare type ufixed24x156<N = void> = N extends number ? number[] : number;
declare type ufixed24x157<N = void> = N extends number ? number[] : number;
declare type ufixed24x158<N = void> = N extends number ? number[] : number;
declare type ufixed24x159<N = void> = N extends number ? number[] : number;
declare type ufixed24x160<N = void> = N extends number ? number[] : number;
declare type ufixed32x1<N = void> = N extends number ? number[] : number;
declare type ufixed32x2<N = void> = N extends number ? number[] : number;
declare type ufixed32x3<N = void> = N extends number ? number[] : number;
declare type ufixed32x4<N = void> = N extends number ? number[] : number;
declare type ufixed32x5<N = void> = N extends number ? number[] : number;
declare type ufixed32x6<N = void> = N extends number ? number[] : number;
declare type ufixed32x7<N = void> = N extends number ? number[] : number;
declare type ufixed32x8<N = void> = N extends number ? number[] : number;
declare type ufixed32x9<N = void> = N extends number ? number[] : number;
declare type ufixed32x10<N = void> = N extends number ? number[] : number;
declare type ufixed32x11<N = void> = N extends number ? number[] : number;
declare type ufixed32x12<N = void> = N extends number ? number[] : number;
declare type ufixed32x13<N = void> = N extends number ? number[] : number;
declare type ufixed32x14<N = void> = N extends number ? number[] : number;
declare type ufixed32x15<N = void> = N extends number ? number[] : number;
declare type ufixed32x16<N = void> = N extends number ? number[] : number;
declare type ufixed32x17<N = void> = N extends number ? number[] : number;
declare type ufixed32x18<N = void> = N extends number ? number[] : number;
declare type ufixed32x19<N = void> = N extends number ? number[] : number;
declare type ufixed32x20<N = void> = N extends number ? number[] : number;
declare type ufixed32x21<N = void> = N extends number ? number[] : number;
declare type ufixed32x22<N = void> = N extends number ? number[] : number;
declare type ufixed32x23<N = void> = N extends number ? number[] : number;
declare type ufixed32x24<N = void> = N extends number ? number[] : number;
declare type ufixed32x25<N = void> = N extends number ? number[] : number;
declare type ufixed32x26<N = void> = N extends number ? number[] : number;
declare type ufixed32x27<N = void> = N extends number ? number[] : number;
declare type ufixed32x28<N = void> = N extends number ? number[] : number;
declare type ufixed32x29<N = void> = N extends number ? number[] : number;
declare type ufixed32x30<N = void> = N extends number ? number[] : number;
declare type ufixed32x31<N = void> = N extends number ? number[] : number;
declare type ufixed32x32<N = void> = N extends number ? number[] : number;
declare type ufixed32x33<N = void> = N extends number ? number[] : number;
declare type ufixed32x34<N = void> = N extends number ? number[] : number;
declare type ufixed32x35<N = void> = N extends number ? number[] : number;
declare type ufixed32x36<N = void> = N extends number ? number[] : number;
declare type ufixed32x37<N = void> = N extends number ? number[] : number;
declare type ufixed32x38<N = void> = N extends number ? number[] : number;
declare type ufixed32x39<N = void> = N extends number ? number[] : number;
declare type ufixed32x40<N = void> = N extends number ? number[] : number;
declare type ufixed32x41<N = void> = N extends number ? number[] : number;
declare type ufixed32x42<N = void> = N extends number ? number[] : number;
declare type ufixed32x43<N = void> = N extends number ? number[] : number;
declare type ufixed32x44<N = void> = N extends number ? number[] : number;
declare type ufixed32x45<N = void> = N extends number ? number[] : number;
declare type ufixed32x46<N = void> = N extends number ? number[] : number;
declare type ufixed32x47<N = void> = N extends number ? number[] : number;
declare type ufixed32x48<N = void> = N extends number ? number[] : number;
declare type ufixed32x49<N = void> = N extends number ? number[] : number;
declare type ufixed32x50<N = void> = N extends number ? number[] : number;
declare type ufixed32x51<N = void> = N extends number ? number[] : number;
declare type ufixed32x52<N = void> = N extends number ? number[] : number;
declare type ufixed32x53<N = void> = N extends number ? number[] : number;
declare type ufixed32x54<N = void> = N extends number ? number[] : number;
declare type ufixed32x55<N = void> = N extends number ? number[] : number;
declare type ufixed32x56<N = void> = N extends number ? number[] : number;
declare type ufixed32x57<N = void> = N extends number ? number[] : number;
declare type ufixed32x58<N = void> = N extends number ? number[] : number;
declare type ufixed32x59<N = void> = N extends number ? number[] : number;
declare type ufixed32x60<N = void> = N extends number ? number[] : number;
declare type ufixed32x61<N = void> = N extends number ? number[] : number;
declare type ufixed32x62<N = void> = N extends number ? number[] : number;
declare type ufixed32x63<N = void> = N extends number ? number[] : number;
declare type ufixed32x64<N = void> = N extends number ? number[] : number;
declare type ufixed32x65<N = void> = N extends number ? number[] : number;
declare type ufixed32x66<N = void> = N extends number ? number[] : number;
declare type ufixed32x67<N = void> = N extends number ? number[] : number;
declare type ufixed32x68<N = void> = N extends number ? number[] : number;
declare type ufixed32x69<N = void> = N extends number ? number[] : number;
declare type ufixed32x70<N = void> = N extends number ? number[] : number;
declare type ufixed32x71<N = void> = N extends number ? number[] : number;
declare type ufixed32x72<N = void> = N extends number ? number[] : number;
declare type ufixed32x73<N = void> = N extends number ? number[] : number;
declare type ufixed32x74<N = void> = N extends number ? number[] : number;
declare type ufixed32x75<N = void> = N extends number ? number[] : number;
declare type ufixed32x76<N = void> = N extends number ? number[] : number;
declare type ufixed32x77<N = void> = N extends number ? number[] : number;
declare type ufixed32x78<N = void> = N extends number ? number[] : number;
declare type ufixed32x79<N = void> = N extends number ? number[] : number;
declare type ufixed32x80<N = void> = N extends number ? number[] : number;
declare type ufixed32x81<N = void> = N extends number ? number[] : number;
declare type ufixed32x82<N = void> = N extends number ? number[] : number;
declare type ufixed32x83<N = void> = N extends number ? number[] : number;
declare type ufixed32x84<N = void> = N extends number ? number[] : number;
declare type ufixed32x85<N = void> = N extends number ? number[] : number;
declare type ufixed32x86<N = void> = N extends number ? number[] : number;
declare type ufixed32x87<N = void> = N extends number ? number[] : number;
declare type ufixed32x88<N = void> = N extends number ? number[] : number;
declare type ufixed32x89<N = void> = N extends number ? number[] : number;
declare type ufixed32x90<N = void> = N extends number ? number[] : number;
declare type ufixed32x91<N = void> = N extends number ? number[] : number;
declare type ufixed32x92<N = void> = N extends number ? number[] : number;
declare type ufixed32x93<N = void> = N extends number ? number[] : number;
declare type ufixed32x94<N = void> = N extends number ? number[] : number;
declare type ufixed32x95<N = void> = N extends number ? number[] : number;
declare type ufixed32x96<N = void> = N extends number ? number[] : number;
declare type ufixed32x97<N = void> = N extends number ? number[] : number;
declare type ufixed32x98<N = void> = N extends number ? number[] : number;
declare type ufixed32x99<N = void> = N extends number ? number[] : number;
declare type ufixed32x100<N = void> = N extends number ? number[] : number;
declare type ufixed32x101<N = void> = N extends number ? number[] : number;
declare type ufixed32x102<N = void> = N extends number ? number[] : number;
declare type ufixed32x103<N = void> = N extends number ? number[] : number;
declare type ufixed32x104<N = void> = N extends number ? number[] : number;
declare type ufixed32x105<N = void> = N extends number ? number[] : number;
declare type ufixed32x106<N = void> = N extends number ? number[] : number;
declare type ufixed32x107<N = void> = N extends number ? number[] : number;
declare type ufixed32x108<N = void> = N extends number ? number[] : number;
declare type ufixed32x109<N = void> = N extends number ? number[] : number;
declare type ufixed32x110<N = void> = N extends number ? number[] : number;
declare type ufixed32x111<N = void> = N extends number ? number[] : number;
declare type ufixed32x112<N = void> = N extends number ? number[] : number;
declare type ufixed32x113<N = void> = N extends number ? number[] : number;
declare type ufixed32x114<N = void> = N extends number ? number[] : number;
declare type ufixed32x115<N = void> = N extends number ? number[] : number;
declare type ufixed32x116<N = void> = N extends number ? number[] : number;
declare type ufixed32x117<N = void> = N extends number ? number[] : number;
declare type ufixed32x118<N = void> = N extends number ? number[] : number;
declare type ufixed32x119<N = void> = N extends number ? number[] : number;
declare type ufixed32x120<N = void> = N extends number ? number[] : number;
declare type ufixed32x121<N = void> = N extends number ? number[] : number;
declare type ufixed32x122<N = void> = N extends number ? number[] : number;
declare type ufixed32x123<N = void> = N extends number ? number[] : number;
declare type ufixed32x124<N = void> = N extends number ? number[] : number;
declare type ufixed32x125<N = void> = N extends number ? number[] : number;
declare type ufixed32x126<N = void> = N extends number ? number[] : number;
declare type ufixed32x127<N = void> = N extends number ? number[] : number;
declare type ufixed32x128<N = void> = N extends number ? number[] : number;
declare type ufixed32x129<N = void> = N extends number ? number[] : number;
declare type ufixed32x130<N = void> = N extends number ? number[] : number;
declare type ufixed32x131<N = void> = N extends number ? number[] : number;
declare type ufixed32x132<N = void> = N extends number ? number[] : number;
declare type ufixed32x133<N = void> = N extends number ? number[] : number;
declare type ufixed32x134<N = void> = N extends number ? number[] : number;
declare type ufixed32x135<N = void> = N extends number ? number[] : number;
declare type ufixed32x136<N = void> = N extends number ? number[] : number;
declare type ufixed32x137<N = void> = N extends number ? number[] : number;
declare type ufixed32x138<N = void> = N extends number ? number[] : number;
declare type ufixed32x139<N = void> = N extends number ? number[] : number;
declare type ufixed32x140<N = void> = N extends number ? number[] : number;
declare type ufixed32x141<N = void> = N extends number ? number[] : number;
declare type ufixed32x142<N = void> = N extends number ? number[] : number;
declare type ufixed32x143<N = void> = N extends number ? number[] : number;
declare type ufixed32x144<N = void> = N extends number ? number[] : number;
declare type ufixed32x145<N = void> = N extends number ? number[] : number;
declare type ufixed32x146<N = void> = N extends number ? number[] : number;
declare type ufixed32x147<N = void> = N extends number ? number[] : number;
declare type ufixed32x148<N = void> = N extends number ? number[] : number;
declare type ufixed32x149<N = void> = N extends number ? number[] : number;
declare type ufixed32x150<N = void> = N extends number ? number[] : number;
declare type ufixed32x151<N = void> = N extends number ? number[] : number;
declare type ufixed32x152<N = void> = N extends number ? number[] : number;
declare type ufixed32x153<N = void> = N extends number ? number[] : number;
declare type ufixed32x154<N = void> = N extends number ? number[] : number;
declare type ufixed32x155<N = void> = N extends number ? number[] : number;
declare type ufixed32x156<N = void> = N extends number ? number[] : number;
declare type ufixed32x157<N = void> = N extends number ? number[] : number;
declare type ufixed32x158<N = void> = N extends number ? number[] : number;
declare type ufixed32x159<N = void> = N extends number ? number[] : number;
declare type ufixed32x160<N = void> = N extends number ? number[] : number;
declare type ufixed40x1<N = void> = N extends number ? number[] : number;
declare type ufixed40x2<N = void> = N extends number ? number[] : number;
declare type ufixed40x3<N = void> = N extends number ? number[] : number;
declare type ufixed40x4<N = void> = N extends number ? number[] : number;
declare type ufixed40x5<N = void> = N extends number ? number[] : number;
declare type ufixed40x6<N = void> = N extends number ? number[] : number;
declare type ufixed40x7<N = void> = N extends number ? number[] : number;
declare type ufixed40x8<N = void> = N extends number ? number[] : number;
declare type ufixed40x9<N = void> = N extends number ? number[] : number;
declare type ufixed40x10<N = void> = N extends number ? number[] : number;
declare type ufixed40x11<N = void> = N extends number ? number[] : number;
declare type ufixed40x12<N = void> = N extends number ? number[] : number;
declare type ufixed40x13<N = void> = N extends number ? number[] : number;
declare type ufixed40x14<N = void> = N extends number ? number[] : number;
declare type ufixed40x15<N = void> = N extends number ? number[] : number;
declare type ufixed40x16<N = void> = N extends number ? number[] : number;
declare type ufixed40x17<N = void> = N extends number ? number[] : number;
declare type ufixed40x18<N = void> = N extends number ? number[] : number;
declare type ufixed40x19<N = void> = N extends number ? number[] : number;
declare type ufixed40x20<N = void> = N extends number ? number[] : number;
declare type ufixed40x21<N = void> = N extends number ? number[] : number;
declare type ufixed40x22<N = void> = N extends number ? number[] : number;
declare type ufixed40x23<N = void> = N extends number ? number[] : number;
declare type ufixed40x24<N = void> = N extends number ? number[] : number;
declare type ufixed40x25<N = void> = N extends number ? number[] : number;
declare type ufixed40x26<N = void> = N extends number ? number[] : number;
declare type ufixed40x27<N = void> = N extends number ? number[] : number;
declare type ufixed40x28<N = void> = N extends number ? number[] : number;
declare type ufixed40x29<N = void> = N extends number ? number[] : number;
declare type ufixed40x30<N = void> = N extends number ? number[] : number;
declare type ufixed40x31<N = void> = N extends number ? number[] : number;
declare type ufixed40x32<N = void> = N extends number ? number[] : number;
declare type ufixed40x33<N = void> = N extends number ? number[] : number;
declare type ufixed40x34<N = void> = N extends number ? number[] : number;
declare type ufixed40x35<N = void> = N extends number ? number[] : number;
declare type ufixed40x36<N = void> = N extends number ? number[] : number;
declare type ufixed40x37<N = void> = N extends number ? number[] : number;
declare type ufixed40x38<N = void> = N extends number ? number[] : number;
declare type ufixed40x39<N = void> = N extends number ? number[] : number;
declare type ufixed40x40<N = void> = N extends number ? number[] : number;
declare type ufixed40x41<N = void> = N extends number ? number[] : number;
declare type ufixed40x42<N = void> = N extends number ? number[] : number;
declare type ufixed40x43<N = void> = N extends number ? number[] : number;
declare type ufixed40x44<N = void> = N extends number ? number[] : number;
declare type ufixed40x45<N = void> = N extends number ? number[] : number;
declare type ufixed40x46<N = void> = N extends number ? number[] : number;
declare type ufixed40x47<N = void> = N extends number ? number[] : number;
declare type ufixed40x48<N = void> = N extends number ? number[] : number;
declare type ufixed40x49<N = void> = N extends number ? number[] : number;
declare type ufixed40x50<N = void> = N extends number ? number[] : number;
declare type ufixed40x51<N = void> = N extends number ? number[] : number;
declare type ufixed40x52<N = void> = N extends number ? number[] : number;
declare type ufixed40x53<N = void> = N extends number ? number[] : number;
declare type ufixed40x54<N = void> = N extends number ? number[] : number;
declare type ufixed40x55<N = void> = N extends number ? number[] : number;
declare type ufixed40x56<N = void> = N extends number ? number[] : number;
declare type ufixed40x57<N = void> = N extends number ? number[] : number;
declare type ufixed40x58<N = void> = N extends number ? number[] : number;
declare type ufixed40x59<N = void> = N extends number ? number[] : number;
declare type ufixed40x60<N = void> = N extends number ? number[] : number;
declare type ufixed40x61<N = void> = N extends number ? number[] : number;
declare type ufixed40x62<N = void> = N extends number ? number[] : number;
declare type ufixed40x63<N = void> = N extends number ? number[] : number;
declare type ufixed40x64<N = void> = N extends number ? number[] : number;
declare type ufixed40x65<N = void> = N extends number ? number[] : number;
declare type ufixed40x66<N = void> = N extends number ? number[] : number;
declare type ufixed40x67<N = void> = N extends number ? number[] : number;
declare type ufixed40x68<N = void> = N extends number ? number[] : number;
declare type ufixed40x69<N = void> = N extends number ? number[] : number;
declare type ufixed40x70<N = void> = N extends number ? number[] : number;
declare type ufixed40x71<N = void> = N extends number ? number[] : number;
declare type ufixed40x72<N = void> = N extends number ? number[] : number;
declare type ufixed40x73<N = void> = N extends number ? number[] : number;
declare type ufixed40x74<N = void> = N extends number ? number[] : number;
declare type ufixed40x75<N = void> = N extends number ? number[] : number;
declare type ufixed40x76<N = void> = N extends number ? number[] : number;
declare type ufixed40x77<N = void> = N extends number ? number[] : number;
declare type ufixed40x78<N = void> = N extends number ? number[] : number;
declare type ufixed40x79<N = void> = N extends number ? number[] : number;
declare type ufixed40x80<N = void> = N extends number ? number[] : number;
declare type ufixed40x81<N = void> = N extends number ? number[] : number;
declare type ufixed40x82<N = void> = N extends number ? number[] : number;
declare type ufixed40x83<N = void> = N extends number ? number[] : number;
declare type ufixed40x84<N = void> = N extends number ? number[] : number;
declare type ufixed40x85<N = void> = N extends number ? number[] : number;
declare type ufixed40x86<N = void> = N extends number ? number[] : number;
declare type ufixed40x87<N = void> = N extends number ? number[] : number;
declare type ufixed40x88<N = void> = N extends number ? number[] : number;
declare type ufixed40x89<N = void> = N extends number ? number[] : number;
declare type ufixed40x90<N = void> = N extends number ? number[] : number;
declare type ufixed40x91<N = void> = N extends number ? number[] : number;
declare type ufixed40x92<N = void> = N extends number ? number[] : number;
declare type ufixed40x93<N = void> = N extends number ? number[] : number;
declare type ufixed40x94<N = void> = N extends number ? number[] : number;
declare type ufixed40x95<N = void> = N extends number ? number[] : number;
declare type ufixed40x96<N = void> = N extends number ? number[] : number;
declare type ufixed40x97<N = void> = N extends number ? number[] : number;
declare type ufixed40x98<N = void> = N extends number ? number[] : number;
declare type ufixed40x99<N = void> = N extends number ? number[] : number;
declare type ufixed40x100<N = void> = N extends number ? number[] : number;
declare type ufixed40x101<N = void> = N extends number ? number[] : number;
declare type ufixed40x102<N = void> = N extends number ? number[] : number;
declare type ufixed40x103<N = void> = N extends number ? number[] : number;
declare type ufixed40x104<N = void> = N extends number ? number[] : number;
declare type ufixed40x105<N = void> = N extends number ? number[] : number;
declare type ufixed40x106<N = void> = N extends number ? number[] : number;
declare type ufixed40x107<N = void> = N extends number ? number[] : number;
declare type ufixed40x108<N = void> = N extends number ? number[] : number;
declare type ufixed40x109<N = void> = N extends number ? number[] : number;
declare type ufixed40x110<N = void> = N extends number ? number[] : number;
declare type ufixed40x111<N = void> = N extends number ? number[] : number;
declare type ufixed40x112<N = void> = N extends number ? number[] : number;
declare type ufixed40x113<N = void> = N extends number ? number[] : number;
declare type ufixed40x114<N = void> = N extends number ? number[] : number;
declare type ufixed40x115<N = void> = N extends number ? number[] : number;
declare type ufixed40x116<N = void> = N extends number ? number[] : number;
declare type ufixed40x117<N = void> = N extends number ? number[] : number;
declare type ufixed40x118<N = void> = N extends number ? number[] : number;
declare type ufixed40x119<N = void> = N extends number ? number[] : number;
declare type ufixed40x120<N = void> = N extends number ? number[] : number;
declare type ufixed40x121<N = void> = N extends number ? number[] : number;
declare type ufixed40x122<N = void> = N extends number ? number[] : number;
declare type ufixed40x123<N = void> = N extends number ? number[] : number;
declare type ufixed40x124<N = void> = N extends number ? number[] : number;
declare type ufixed40x125<N = void> = N extends number ? number[] : number;
declare type ufixed40x126<N = void> = N extends number ? number[] : number;
declare type ufixed40x127<N = void> = N extends number ? number[] : number;
declare type ufixed40x128<N = void> = N extends number ? number[] : number;
declare type ufixed40x129<N = void> = N extends number ? number[] : number;
declare type ufixed40x130<N = void> = N extends number ? number[] : number;
declare type ufixed40x131<N = void> = N extends number ? number[] : number;
declare type ufixed40x132<N = void> = N extends number ? number[] : number;
declare type ufixed40x133<N = void> = N extends number ? number[] : number;
declare type ufixed40x134<N = void> = N extends number ? number[] : number;
declare type ufixed40x135<N = void> = N extends number ? number[] : number;
declare type ufixed40x136<N = void> = N extends number ? number[] : number;
declare type ufixed40x137<N = void> = N extends number ? number[] : number;
declare type ufixed40x138<N = void> = N extends number ? number[] : number;
declare type ufixed40x139<N = void> = N extends number ? number[] : number;
declare type ufixed40x140<N = void> = N extends number ? number[] : number;
declare type ufixed40x141<N = void> = N extends number ? number[] : number;
declare type ufixed40x142<N = void> = N extends number ? number[] : number;
declare type ufixed40x143<N = void> = N extends number ? number[] : number;
declare type ufixed40x144<N = void> = N extends number ? number[] : number;
declare type ufixed40x145<N = void> = N extends number ? number[] : number;
declare type ufixed40x146<N = void> = N extends number ? number[] : number;
declare type ufixed40x147<N = void> = N extends number ? number[] : number;
declare type ufixed40x148<N = void> = N extends number ? number[] : number;
declare type ufixed40x149<N = void> = N extends number ? number[] : number;
declare type ufixed40x150<N = void> = N extends number ? number[] : number;
declare type ufixed40x151<N = void> = N extends number ? number[] : number;
declare type ufixed40x152<N = void> = N extends number ? number[] : number;
declare type ufixed40x153<N = void> = N extends number ? number[] : number;
declare type ufixed40x154<N = void> = N extends number ? number[] : number;
declare type ufixed40x155<N = void> = N extends number ? number[] : number;
declare type ufixed40x156<N = void> = N extends number ? number[] : number;
declare type ufixed40x157<N = void> = N extends number ? number[] : number;
declare type ufixed40x158<N = void> = N extends number ? number[] : number;
declare type ufixed40x159<N = void> = N extends number ? number[] : number;
declare type ufixed40x160<N = void> = N extends number ? number[] : number;
declare type ufixed48x1<N = void> = N extends number ? number[] : number;
declare type ufixed48x2<N = void> = N extends number ? number[] : number;
declare type ufixed48x3<N = void> = N extends number ? number[] : number;
declare type ufixed48x4<N = void> = N extends number ? number[] : number;
declare type ufixed48x5<N = void> = N extends number ? number[] : number;
declare type ufixed48x6<N = void> = N extends number ? number[] : number;
declare type ufixed48x7<N = void> = N extends number ? number[] : number;
declare type ufixed48x8<N = void> = N extends number ? number[] : number;
declare type ufixed48x9<N = void> = N extends number ? number[] : number;
declare type ufixed48x10<N = void> = N extends number ? number[] : number;
declare type ufixed48x11<N = void> = N extends number ? number[] : number;
declare type ufixed48x12<N = void> = N extends number ? number[] : number;
declare type ufixed48x13<N = void> = N extends number ? number[] : number;
declare type ufixed48x14<N = void> = N extends number ? number[] : number;
declare type ufixed48x15<N = void> = N extends number ? number[] : number;
declare type ufixed48x16<N = void> = N extends number ? number[] : number;
declare type ufixed48x17<N = void> = N extends number ? number[] : number;
declare type ufixed48x18<N = void> = N extends number ? number[] : number;
declare type ufixed48x19<N = void> = N extends number ? number[] : number;
declare type ufixed48x20<N = void> = N extends number ? number[] : number;
declare type ufixed48x21<N = void> = N extends number ? number[] : number;
declare type ufixed48x22<N = void> = N extends number ? number[] : number;
declare type ufixed48x23<N = void> = N extends number ? number[] : number;
declare type ufixed48x24<N = void> = N extends number ? number[] : number;
declare type ufixed48x25<N = void> = N extends number ? number[] : number;
declare type ufixed48x26<N = void> = N extends number ? number[] : number;
declare type ufixed48x27<N = void> = N extends number ? number[] : number;
declare type ufixed48x28<N = void> = N extends number ? number[] : number;
declare type ufixed48x29<N = void> = N extends number ? number[] : number;
declare type ufixed48x30<N = void> = N extends number ? number[] : number;
declare type ufixed48x31<N = void> = N extends number ? number[] : number;
declare type ufixed48x32<N = void> = N extends number ? number[] : number;
declare type ufixed48x33<N = void> = N extends number ? number[] : number;
declare type ufixed48x34<N = void> = N extends number ? number[] : number;
declare type ufixed48x35<N = void> = N extends number ? number[] : number;
declare type ufixed48x36<N = void> = N extends number ? number[] : number;
declare type ufixed48x37<N = void> = N extends number ? number[] : number;
declare type ufixed48x38<N = void> = N extends number ? number[] : number;
declare type ufixed48x39<N = void> = N extends number ? number[] : number;
declare type ufixed48x40<N = void> = N extends number ? number[] : number;
declare type ufixed48x41<N = void> = N extends number ? number[] : number;
declare type ufixed48x42<N = void> = N extends number ? number[] : number;
declare type ufixed48x43<N = void> = N extends number ? number[] : number;
declare type ufixed48x44<N = void> = N extends number ? number[] : number;
declare type ufixed48x45<N = void> = N extends number ? number[] : number;
declare type ufixed48x46<N = void> = N extends number ? number[] : number;
declare type ufixed48x47<N = void> = N extends number ? number[] : number;
declare type ufixed48x48<N = void> = N extends number ? number[] : number;
declare type ufixed48x49<N = void> = N extends number ? number[] : number;
declare type ufixed48x50<N = void> = N extends number ? number[] : number;
declare type ufixed48x51<N = void> = N extends number ? number[] : number;
declare type ufixed48x52<N = void> = N extends number ? number[] : number;
declare type ufixed48x53<N = void> = N extends number ? number[] : number;
declare type ufixed48x54<N = void> = N extends number ? number[] : number;
declare type ufixed48x55<N = void> = N extends number ? number[] : number;
declare type ufixed48x56<N = void> = N extends number ? number[] : number;
declare type ufixed48x57<N = void> = N extends number ? number[] : number;
declare type ufixed48x58<N = void> = N extends number ? number[] : number;
declare type ufixed48x59<N = void> = N extends number ? number[] : number;
declare type ufixed48x60<N = void> = N extends number ? number[] : number;
declare type ufixed48x61<N = void> = N extends number ? number[] : number;
declare type ufixed48x62<N = void> = N extends number ? number[] : number;
declare type ufixed48x63<N = void> = N extends number ? number[] : number;
declare type ufixed48x64<N = void> = N extends number ? number[] : number;
declare type ufixed48x65<N = void> = N extends number ? number[] : number;
declare type ufixed48x66<N = void> = N extends number ? number[] : number;
declare type ufixed48x67<N = void> = N extends number ? number[] : number;
declare type ufixed48x68<N = void> = N extends number ? number[] : number;
declare type ufixed48x69<N = void> = N extends number ? number[] : number;
declare type ufixed48x70<N = void> = N extends number ? number[] : number;
declare type ufixed48x71<N = void> = N extends number ? number[] : number;
declare type ufixed48x72<N = void> = N extends number ? number[] : number;
declare type ufixed48x73<N = void> = N extends number ? number[] : number;
declare type ufixed48x74<N = void> = N extends number ? number[] : number;
declare type ufixed48x75<N = void> = N extends number ? number[] : number;
declare type ufixed48x76<N = void> = N extends number ? number[] : number;
declare type ufixed48x77<N = void> = N extends number ? number[] : number;
declare type ufixed48x78<N = void> = N extends number ? number[] : number;
declare type ufixed48x79<N = void> = N extends number ? number[] : number;
declare type ufixed48x80<N = void> = N extends number ? number[] : number;
declare type ufixed48x81<N = void> = N extends number ? number[] : number;
declare type ufixed48x82<N = void> = N extends number ? number[] : number;
declare type ufixed48x83<N = void> = N extends number ? number[] : number;
declare type ufixed48x84<N = void> = N extends number ? number[] : number;
declare type ufixed48x85<N = void> = N extends number ? number[] : number;
declare type ufixed48x86<N = void> = N extends number ? number[] : number;
declare type ufixed48x87<N = void> = N extends number ? number[] : number;
declare type ufixed48x88<N = void> = N extends number ? number[] : number;
declare type ufixed48x89<N = void> = N extends number ? number[] : number;
declare type ufixed48x90<N = void> = N extends number ? number[] : number;
declare type ufixed48x91<N = void> = N extends number ? number[] : number;
declare type ufixed48x92<N = void> = N extends number ? number[] : number;
declare type ufixed48x93<N = void> = N extends number ? number[] : number;
declare type ufixed48x94<N = void> = N extends number ? number[] : number;
declare type ufixed48x95<N = void> = N extends number ? number[] : number;
declare type ufixed48x96<N = void> = N extends number ? number[] : number;
declare type ufixed48x97<N = void> = N extends number ? number[] : number;
declare type ufixed48x98<N = void> = N extends number ? number[] : number;
declare type ufixed48x99<N = void> = N extends number ? number[] : number;
declare type ufixed48x100<N = void> = N extends number ? number[] : number;
declare type ufixed48x101<N = void> = N extends number ? number[] : number;
declare type ufixed48x102<N = void> = N extends number ? number[] : number;
declare type ufixed48x103<N = void> = N extends number ? number[] : number;
declare type ufixed48x104<N = void> = N extends number ? number[] : number;
declare type ufixed48x105<N = void> = N extends number ? number[] : number;
declare type ufixed48x106<N = void> = N extends number ? number[] : number;
declare type ufixed48x107<N = void> = N extends number ? number[] : number;
declare type ufixed48x108<N = void> = N extends number ? number[] : number;
declare type ufixed48x109<N = void> = N extends number ? number[] : number;
declare type ufixed48x110<N = void> = N extends number ? number[] : number;
declare type ufixed48x111<N = void> = N extends number ? number[] : number;
declare type ufixed48x112<N = void> = N extends number ? number[] : number;
declare type ufixed48x113<N = void> = N extends number ? number[] : number;
declare type ufixed48x114<N = void> = N extends number ? number[] : number;
declare type ufixed48x115<N = void> = N extends number ? number[] : number;
declare type ufixed48x116<N = void> = N extends number ? number[] : number;
declare type ufixed48x117<N = void> = N extends number ? number[] : number;
declare type ufixed48x118<N = void> = N extends number ? number[] : number;
declare type ufixed48x119<N = void> = N extends number ? number[] : number;
declare type ufixed48x120<N = void> = N extends number ? number[] : number;
declare type ufixed48x121<N = void> = N extends number ? number[] : number;
declare type ufixed48x122<N = void> = N extends number ? number[] : number;
declare type ufixed48x123<N = void> = N extends number ? number[] : number;
declare type ufixed48x124<N = void> = N extends number ? number[] : number;
declare type ufixed48x125<N = void> = N extends number ? number[] : number;
declare type ufixed48x126<N = void> = N extends number ? number[] : number;
declare type ufixed48x127<N = void> = N extends number ? number[] : number;
declare type ufixed48x128<N = void> = N extends number ? number[] : number;
declare type ufixed48x129<N = void> = N extends number ? number[] : number;
declare type ufixed48x130<N = void> = N extends number ? number[] : number;
declare type ufixed48x131<N = void> = N extends number ? number[] : number;
declare type ufixed48x132<N = void> = N extends number ? number[] : number;
declare type ufixed48x133<N = void> = N extends number ? number[] : number;
declare type ufixed48x134<N = void> = N extends number ? number[] : number;
declare type ufixed48x135<N = void> = N extends number ? number[] : number;
declare type ufixed48x136<N = void> = N extends number ? number[] : number;
declare type ufixed48x137<N = void> = N extends number ? number[] : number;
declare type ufixed48x138<N = void> = N extends number ? number[] : number;
declare type ufixed48x139<N = void> = N extends number ? number[] : number;
declare type ufixed48x140<N = void> = N extends number ? number[] : number;
declare type ufixed48x141<N = void> = N extends number ? number[] : number;
declare type ufixed48x142<N = void> = N extends number ? number[] : number;
declare type ufixed48x143<N = void> = N extends number ? number[] : number;
declare type ufixed48x144<N = void> = N extends number ? number[] : number;
declare type ufixed48x145<N = void> = N extends number ? number[] : number;
declare type ufixed48x146<N = void> = N extends number ? number[] : number;
declare type ufixed48x147<N = void> = N extends number ? number[] : number;
declare type ufixed48x148<N = void> = N extends number ? number[] : number;
declare type ufixed48x149<N = void> = N extends number ? number[] : number;
declare type ufixed48x150<N = void> = N extends number ? number[] : number;
declare type ufixed48x151<N = void> = N extends number ? number[] : number;
declare type ufixed48x152<N = void> = N extends number ? number[] : number;
declare type ufixed48x153<N = void> = N extends number ? number[] : number;
declare type ufixed48x154<N = void> = N extends number ? number[] : number;
declare type ufixed48x155<N = void> = N extends number ? number[] : number;
declare type ufixed48x156<N = void> = N extends number ? number[] : number;
declare type ufixed48x157<N = void> = N extends number ? number[] : number;
declare type ufixed48x158<N = void> = N extends number ? number[] : number;
declare type ufixed48x159<N = void> = N extends number ? number[] : number;
declare type ufixed48x160<N = void> = N extends number ? number[] : number;
declare type ufixed56x1<N = void> = N extends number ? number[] : number;
declare type ufixed56x2<N = void> = N extends number ? number[] : number;
declare type ufixed56x3<N = void> = N extends number ? number[] : number;
declare type ufixed56x4<N = void> = N extends number ? number[] : number;
declare type ufixed56x5<N = void> = N extends number ? number[] : number;
declare type ufixed56x6<N = void> = N extends number ? number[] : number;
declare type ufixed56x7<N = void> = N extends number ? number[] : number;
declare type ufixed56x8<N = void> = N extends number ? number[] : number;
declare type ufixed56x9<N = void> = N extends number ? number[] : number;
declare type ufixed56x10<N = void> = N extends number ? number[] : number;
declare type ufixed56x11<N = void> = N extends number ? number[] : number;
declare type ufixed56x12<N = void> = N extends number ? number[] : number;
declare type ufixed56x13<N = void> = N extends number ? number[] : number;
declare type ufixed56x14<N = void> = N extends number ? number[] : number;
declare type ufixed56x15<N = void> = N extends number ? number[] : number;
declare type ufixed56x16<N = void> = N extends number ? number[] : number;
declare type ufixed56x17<N = void> = N extends number ? number[] : number;
declare type ufixed56x18<N = void> = N extends number ? number[] : number;
declare type ufixed56x19<N = void> = N extends number ? number[] : number;
declare type ufixed56x20<N = void> = N extends number ? number[] : number;
declare type ufixed56x21<N = void> = N extends number ? number[] : number;
declare type ufixed56x22<N = void> = N extends number ? number[] : number;
declare type ufixed56x23<N = void> = N extends number ? number[] : number;
declare type ufixed56x24<N = void> = N extends number ? number[] : number;
declare type ufixed56x25<N = void> = N extends number ? number[] : number;
declare type ufixed56x26<N = void> = N extends number ? number[] : number;
declare type ufixed56x27<N = void> = N extends number ? number[] : number;
declare type ufixed56x28<N = void> = N extends number ? number[] : number;
declare type ufixed56x29<N = void> = N extends number ? number[] : number;
declare type ufixed56x30<N = void> = N extends number ? number[] : number;
declare type ufixed56x31<N = void> = N extends number ? number[] : number;
declare type ufixed56x32<N = void> = N extends number ? number[] : number;
declare type ufixed56x33<N = void> = N extends number ? number[] : number;
declare type ufixed56x34<N = void> = N extends number ? number[] : number;
declare type ufixed56x35<N = void> = N extends number ? number[] : number;
declare type ufixed56x36<N = void> = N extends number ? number[] : number;
declare type ufixed56x37<N = void> = N extends number ? number[] : number;
declare type ufixed56x38<N = void> = N extends number ? number[] : number;
declare type ufixed56x39<N = void> = N extends number ? number[] : number;
declare type ufixed56x40<N = void> = N extends number ? number[] : number;
declare type ufixed56x41<N = void> = N extends number ? number[] : number;
declare type ufixed56x42<N = void> = N extends number ? number[] : number;
declare type ufixed56x43<N = void> = N extends number ? number[] : number;
declare type ufixed56x44<N = void> = N extends number ? number[] : number;
declare type ufixed56x45<N = void> = N extends number ? number[] : number;
declare type ufixed56x46<N = void> = N extends number ? number[] : number;
declare type ufixed56x47<N = void> = N extends number ? number[] : number;
declare type ufixed56x48<N = void> = N extends number ? number[] : number;
declare type ufixed56x49<N = void> = N extends number ? number[] : number;
declare type ufixed56x50<N = void> = N extends number ? number[] : number;
declare type ufixed56x51<N = void> = N extends number ? number[] : number;
declare type ufixed56x52<N = void> = N extends number ? number[] : number;
declare type ufixed56x53<N = void> = N extends number ? number[] : number;
declare type ufixed56x54<N = void> = N extends number ? number[] : number;
declare type ufixed56x55<N = void> = N extends number ? number[] : number;
declare type ufixed56x56<N = void> = N extends number ? number[] : number;
declare type ufixed56x57<N = void> = N extends number ? number[] : number;
declare type ufixed56x58<N = void> = N extends number ? number[] : number;
declare type ufixed56x59<N = void> = N extends number ? number[] : number;
declare type ufixed56x60<N = void> = N extends number ? number[] : number;
declare type ufixed56x61<N = void> = N extends number ? number[] : number;
declare type ufixed56x62<N = void> = N extends number ? number[] : number;
declare type ufixed56x63<N = void> = N extends number ? number[] : number;
declare type ufixed56x64<N = void> = N extends number ? number[] : number;
declare type ufixed56x65<N = void> = N extends number ? number[] : number;
declare type ufixed56x66<N = void> = N extends number ? number[] : number;
declare type ufixed56x67<N = void> = N extends number ? number[] : number;
declare type ufixed56x68<N = void> = N extends number ? number[] : number;
declare type ufixed56x69<N = void> = N extends number ? number[] : number;
declare type ufixed56x70<N = void> = N extends number ? number[] : number;
declare type ufixed56x71<N = void> = N extends number ? number[] : number;
declare type ufixed56x72<N = void> = N extends number ? number[] : number;
declare type ufixed56x73<N = void> = N extends number ? number[] : number;
declare type ufixed56x74<N = void> = N extends number ? number[] : number;
declare type ufixed56x75<N = void> = N extends number ? number[] : number;
declare type ufixed56x76<N = void> = N extends number ? number[] : number;
declare type ufixed56x77<N = void> = N extends number ? number[] : number;
declare type ufixed56x78<N = void> = N extends number ? number[] : number;
declare type ufixed56x79<N = void> = N extends number ? number[] : number;
declare type ufixed56x80<N = void> = N extends number ? number[] : number;
declare type ufixed56x81<N = void> = N extends number ? number[] : number;
declare type ufixed56x82<N = void> = N extends number ? number[] : number;
declare type ufixed56x83<N = void> = N extends number ? number[] : number;
declare type ufixed56x84<N = void> = N extends number ? number[] : number;
declare type ufixed56x85<N = void> = N extends number ? number[] : number;
declare type ufixed56x86<N = void> = N extends number ? number[] : number;
declare type ufixed56x87<N = void> = N extends number ? number[] : number;
declare type ufixed56x88<N = void> = N extends number ? number[] : number;
declare type ufixed56x89<N = void> = N extends number ? number[] : number;
declare type ufixed56x90<N = void> = N extends number ? number[] : number;
declare type ufixed56x91<N = void> = N extends number ? number[] : number;
declare type ufixed56x92<N = void> = N extends number ? number[] : number;
declare type ufixed56x93<N = void> = N extends number ? number[] : number;
declare type ufixed56x94<N = void> = N extends number ? number[] : number;
declare type ufixed56x95<N = void> = N extends number ? number[] : number;
declare type ufixed56x96<N = void> = N extends number ? number[] : number;
declare type ufixed56x97<N = void> = N extends number ? number[] : number;
declare type ufixed56x98<N = void> = N extends number ? number[] : number;
declare type ufixed56x99<N = void> = N extends number ? number[] : number;
declare type ufixed56x100<N = void> = N extends number ? number[] : number;
declare type ufixed56x101<N = void> = N extends number ? number[] : number;
declare type ufixed56x102<N = void> = N extends number ? number[] : number;
declare type ufixed56x103<N = void> = N extends number ? number[] : number;
declare type ufixed56x104<N = void> = N extends number ? number[] : number;
declare type ufixed56x105<N = void> = N extends number ? number[] : number;
declare type ufixed56x106<N = void> = N extends number ? number[] : number;
declare type ufixed56x107<N = void> = N extends number ? number[] : number;
declare type ufixed56x108<N = void> = N extends number ? number[] : number;
declare type ufixed56x109<N = void> = N extends number ? number[] : number;
declare type ufixed56x110<N = void> = N extends number ? number[] : number;
declare type ufixed56x111<N = void> = N extends number ? number[] : number;
declare type ufixed56x112<N = void> = N extends number ? number[] : number;
declare type ufixed56x113<N = void> = N extends number ? number[] : number;
declare type ufixed56x114<N = void> = N extends number ? number[] : number;
declare type ufixed56x115<N = void> = N extends number ? number[] : number;
declare type ufixed56x116<N = void> = N extends number ? number[] : number;
declare type ufixed56x117<N = void> = N extends number ? number[] : number;
declare type ufixed56x118<N = void> = N extends number ? number[] : number;
declare type ufixed56x119<N = void> = N extends number ? number[] : number;
declare type ufixed56x120<N = void> = N extends number ? number[] : number;
declare type ufixed56x121<N = void> = N extends number ? number[] : number;
declare type ufixed56x122<N = void> = N extends number ? number[] : number;
declare type ufixed56x123<N = void> = N extends number ? number[] : number;
declare type ufixed56x124<N = void> = N extends number ? number[] : number;
declare type ufixed56x125<N = void> = N extends number ? number[] : number;
declare type ufixed56x126<N = void> = N extends number ? number[] : number;
declare type ufixed56x127<N = void> = N extends number ? number[] : number;
declare type ufixed56x128<N = void> = N extends number ? number[] : number;
declare type ufixed56x129<N = void> = N extends number ? number[] : number;
declare type ufixed56x130<N = void> = N extends number ? number[] : number;
declare type ufixed56x131<N = void> = N extends number ? number[] : number;
declare type ufixed56x132<N = void> = N extends number ? number[] : number;
declare type ufixed56x133<N = void> = N extends number ? number[] : number;
declare type ufixed56x134<N = void> = N extends number ? number[] : number;
declare type ufixed56x135<N = void> = N extends number ? number[] : number;
declare type ufixed56x136<N = void> = N extends number ? number[] : number;
declare type ufixed56x137<N = void> = N extends number ? number[] : number;
declare type ufixed56x138<N = void> = N extends number ? number[] : number;
declare type ufixed56x139<N = void> = N extends number ? number[] : number;
declare type ufixed56x140<N = void> = N extends number ? number[] : number;
declare type ufixed56x141<N = void> = N extends number ? number[] : number;
declare type ufixed56x142<N = void> = N extends number ? number[] : number;
declare type ufixed56x143<N = void> = N extends number ? number[] : number;
declare type ufixed56x144<N = void> = N extends number ? number[] : number;
declare type ufixed56x145<N = void> = N extends number ? number[] : number;
declare type ufixed56x146<N = void> = N extends number ? number[] : number;
declare type ufixed56x147<N = void> = N extends number ? number[] : number;
declare type ufixed56x148<N = void> = N extends number ? number[] : number;
declare type ufixed56x149<N = void> = N extends number ? number[] : number;
declare type ufixed56x150<N = void> = N extends number ? number[] : number;
declare type ufixed56x151<N = void> = N extends number ? number[] : number;
declare type ufixed56x152<N = void> = N extends number ? number[] : number;
declare type ufixed56x153<N = void> = N extends number ? number[] : number;
declare type ufixed56x154<N = void> = N extends number ? number[] : number;
declare type ufixed56x155<N = void> = N extends number ? number[] : number;
declare type ufixed56x156<N = void> = N extends number ? number[] : number;
declare type ufixed56x157<N = void> = N extends number ? number[] : number;
declare type ufixed56x158<N = void> = N extends number ? number[] : number;
declare type ufixed56x159<N = void> = N extends number ? number[] : number;
declare type ufixed56x160<N = void> = N extends number ? number[] : number;
declare type ufixed64x1<N = void> = N extends number ? number[] : number;
declare type ufixed64x2<N = void> = N extends number ? number[] : number;
declare type ufixed64x3<N = void> = N extends number ? number[] : number;
declare type ufixed64x4<N = void> = N extends number ? number[] : number;
declare type ufixed64x5<N = void> = N extends number ? number[] : number;
declare type ufixed64x6<N = void> = N extends number ? number[] : number;
declare type ufixed64x7<N = void> = N extends number ? number[] : number;
declare type ufixed64x8<N = void> = N extends number ? number[] : number;
declare type ufixed64x9<N = void> = N extends number ? number[] : number;
declare type ufixed64x10<N = void> = N extends number ? number[] : number;
declare type ufixed64x11<N = void> = N extends number ? number[] : number;
declare type ufixed64x12<N = void> = N extends number ? number[] : number;
declare type ufixed64x13<N = void> = N extends number ? number[] : number;
declare type ufixed64x14<N = void> = N extends number ? number[] : number;
declare type ufixed64x15<N = void> = N extends number ? number[] : number;
declare type ufixed64x16<N = void> = N extends number ? number[] : number;
declare type ufixed64x17<N = void> = N extends number ? number[] : number;
declare type ufixed64x18<N = void> = N extends number ? number[] : number;
declare type ufixed64x19<N = void> = N extends number ? number[] : number;
declare type ufixed64x20<N = void> = N extends number ? number[] : number;
declare type ufixed64x21<N = void> = N extends number ? number[] : number;
declare type ufixed64x22<N = void> = N extends number ? number[] : number;
declare type ufixed64x23<N = void> = N extends number ? number[] : number;
declare type ufixed64x24<N = void> = N extends number ? number[] : number;
declare type ufixed64x25<N = void> = N extends number ? number[] : number;
declare type ufixed64x26<N = void> = N extends number ? number[] : number;
declare type ufixed64x27<N = void> = N extends number ? number[] : number;
declare type ufixed64x28<N = void> = N extends number ? number[] : number;
declare type ufixed64x29<N = void> = N extends number ? number[] : number;
declare type ufixed64x30<N = void> = N extends number ? number[] : number;
declare type ufixed64x31<N = void> = N extends number ? number[] : number;
declare type ufixed64x32<N = void> = N extends number ? number[] : number;
declare type ufixed64x33<N = void> = N extends number ? number[] : number;
declare type ufixed64x34<N = void> = N extends number ? number[] : number;
declare type ufixed64x35<N = void> = N extends number ? number[] : number;
declare type ufixed64x36<N = void> = N extends number ? number[] : number;
declare type ufixed64x37<N = void> = N extends number ? number[] : number;
declare type ufixed64x38<N = void> = N extends number ? number[] : number;
declare type ufixed64x39<N = void> = N extends number ? number[] : number;
declare type ufixed64x40<N = void> = N extends number ? number[] : number;
declare type ufixed64x41<N = void> = N extends number ? number[] : number;
declare type ufixed64x42<N = void> = N extends number ? number[] : number;
declare type ufixed64x43<N = void> = N extends number ? number[] : number;
declare type ufixed64x44<N = void> = N extends number ? number[] : number;
declare type ufixed64x45<N = void> = N extends number ? number[] : number;
declare type ufixed64x46<N = void> = N extends number ? number[] : number;
declare type ufixed64x47<N = void> = N extends number ? number[] : number;
declare type ufixed64x48<N = void> = N extends number ? number[] : number;
declare type ufixed64x49<N = void> = N extends number ? number[] : number;
declare type ufixed64x50<N = void> = N extends number ? number[] : number;
declare type ufixed64x51<N = void> = N extends number ? number[] : number;
declare type ufixed64x52<N = void> = N extends number ? number[] : number;
declare type ufixed64x53<N = void> = N extends number ? number[] : number;
declare type ufixed64x54<N = void> = N extends number ? number[] : number;
declare type ufixed64x55<N = void> = N extends number ? number[] : number;
declare type ufixed64x56<N = void> = N extends number ? number[] : number;
declare type ufixed64x57<N = void> = N extends number ? number[] : number;
declare type ufixed64x58<N = void> = N extends number ? number[] : number;
declare type ufixed64x59<N = void> = N extends number ? number[] : number;
declare type ufixed64x60<N = void> = N extends number ? number[] : number;
declare type ufixed64x61<N = void> = N extends number ? number[] : number;
declare type ufixed64x62<N = void> = N extends number ? number[] : number;
declare type ufixed64x63<N = void> = N extends number ? number[] : number;
declare type ufixed64x64<N = void> = N extends number ? number[] : number;
declare type ufixed64x65<N = void> = N extends number ? number[] : number;
declare type ufixed64x66<N = void> = N extends number ? number[] : number;
declare type ufixed64x67<N = void> = N extends number ? number[] : number;
declare type ufixed64x68<N = void> = N extends number ? number[] : number;
declare type ufixed64x69<N = void> = N extends number ? number[] : number;
declare type ufixed64x70<N = void> = N extends number ? number[] : number;
declare type ufixed64x71<N = void> = N extends number ? number[] : number;
declare type ufixed64x72<N = void> = N extends number ? number[] : number;
declare type ufixed64x73<N = void> = N extends number ? number[] : number;
declare type ufixed64x74<N = void> = N extends number ? number[] : number;
declare type ufixed64x75<N = void> = N extends number ? number[] : number;
declare type ufixed64x76<N = void> = N extends number ? number[] : number;
declare type ufixed64x77<N = void> = N extends number ? number[] : number;
declare type ufixed64x78<N = void> = N extends number ? number[] : number;
declare type ufixed64x79<N = void> = N extends number ? number[] : number;
declare type ufixed64x80<N = void> = N extends number ? number[] : number;
declare type ufixed64x81<N = void> = N extends number ? number[] : number;
declare type ufixed64x82<N = void> = N extends number ? number[] : number;
declare type ufixed64x83<N = void> = N extends number ? number[] : number;
declare type ufixed64x84<N = void> = N extends number ? number[] : number;
declare type ufixed64x85<N = void> = N extends number ? number[] : number;
declare type ufixed64x86<N = void> = N extends number ? number[] : number;
declare type ufixed64x87<N = void> = N extends number ? number[] : number;
declare type ufixed64x88<N = void> = N extends number ? number[] : number;
declare type ufixed64x89<N = void> = N extends number ? number[] : number;
declare type ufixed64x90<N = void> = N extends number ? number[] : number;
declare type ufixed64x91<N = void> = N extends number ? number[] : number;
declare type ufixed64x92<N = void> = N extends number ? number[] : number;
declare type ufixed64x93<N = void> = N extends number ? number[] : number;
declare type ufixed64x94<N = void> = N extends number ? number[] : number;
declare type ufixed64x95<N = void> = N extends number ? number[] : number;
declare type ufixed64x96<N = void> = N extends number ? number[] : number;
declare type ufixed64x97<N = void> = N extends number ? number[] : number;
declare type ufixed64x98<N = void> = N extends number ? number[] : number;
declare type ufixed64x99<N = void> = N extends number ? number[] : number;
declare type ufixed64x100<N = void> = N extends number ? number[] : number;
declare type ufixed64x101<N = void> = N extends number ? number[] : number;
declare type ufixed64x102<N = void> = N extends number ? number[] : number;
declare type ufixed64x103<N = void> = N extends number ? number[] : number;
declare type ufixed64x104<N = void> = N extends number ? number[] : number;
declare type ufixed64x105<N = void> = N extends number ? number[] : number;
declare type ufixed64x106<N = void> = N extends number ? number[] : number;
declare type ufixed64x107<N = void> = N extends number ? number[] : number;
declare type ufixed64x108<N = void> = N extends number ? number[] : number;
declare type ufixed64x109<N = void> = N extends number ? number[] : number;
declare type ufixed64x110<N = void> = N extends number ? number[] : number;
declare type ufixed64x111<N = void> = N extends number ? number[] : number;
declare type ufixed64x112<N = void> = N extends number ? number[] : number;
declare type ufixed64x113<N = void> = N extends number ? number[] : number;
declare type ufixed64x114<N = void> = N extends number ? number[] : number;
declare type ufixed64x115<N = void> = N extends number ? number[] : number;
declare type ufixed64x116<N = void> = N extends number ? number[] : number;
declare type ufixed64x117<N = void> = N extends number ? number[] : number;
declare type ufixed64x118<N = void> = N extends number ? number[] : number;
declare type ufixed64x119<N = void> = N extends number ? number[] : number;
declare type ufixed64x120<N = void> = N extends number ? number[] : number;
declare type ufixed64x121<N = void> = N extends number ? number[] : number;
declare type ufixed64x122<N = void> = N extends number ? number[] : number;
declare type ufixed64x123<N = void> = N extends number ? number[] : number;
declare type ufixed64x124<N = void> = N extends number ? number[] : number;
declare type ufixed64x125<N = void> = N extends number ? number[] : number;
declare type ufixed64x126<N = void> = N extends number ? number[] : number;
declare type ufixed64x127<N = void> = N extends number ? number[] : number;
declare type ufixed64x128<N = void> = N extends number ? number[] : number;
declare type ufixed64x129<N = void> = N extends number ? number[] : number;
declare type ufixed64x130<N = void> = N extends number ? number[] : number;
declare type ufixed64x131<N = void> = N extends number ? number[] : number;
declare type ufixed64x132<N = void> = N extends number ? number[] : number;
declare type ufixed64x133<N = void> = N extends number ? number[] : number;
declare type ufixed64x134<N = void> = N extends number ? number[] : number;
declare type ufixed64x135<N = void> = N extends number ? number[] : number;
declare type ufixed64x136<N = void> = N extends number ? number[] : number;
declare type ufixed64x137<N = void> = N extends number ? number[] : number;
declare type ufixed64x138<N = void> = N extends number ? number[] : number;
declare type ufixed64x139<N = void> = N extends number ? number[] : number;
declare type ufixed64x140<N = void> = N extends number ? number[] : number;
declare type ufixed64x141<N = void> = N extends number ? number[] : number;
declare type ufixed64x142<N = void> = N extends number ? number[] : number;
declare type ufixed64x143<N = void> = N extends number ? number[] : number;
declare type ufixed64x144<N = void> = N extends number ? number[] : number;
declare type ufixed64x145<N = void> = N extends number ? number[] : number;
declare type ufixed64x146<N = void> = N extends number ? number[] : number;
declare type ufixed64x147<N = void> = N extends number ? number[] : number;
declare type ufixed64x148<N = void> = N extends number ? number[] : number;
declare type ufixed64x149<N = void> = N extends number ? number[] : number;
declare type ufixed64x150<N = void> = N extends number ? number[] : number;
declare type ufixed64x151<N = void> = N extends number ? number[] : number;
declare type ufixed64x152<N = void> = N extends number ? number[] : number;
declare type ufixed64x153<N = void> = N extends number ? number[] : number;
declare type ufixed64x154<N = void> = N extends number ? number[] : number;
declare type ufixed64x155<N = void> = N extends number ? number[] : number;
declare type ufixed64x156<N = void> = N extends number ? number[] : number;
declare type ufixed64x157<N = void> = N extends number ? number[] : number;
declare type ufixed64x158<N = void> = N extends number ? number[] : number;
declare type ufixed64x159<N = void> = N extends number ? number[] : number;
declare type ufixed64x160<N = void> = N extends number ? number[] : number;
declare type ufixed72x1<N = void> = N extends number ? number[] : number;
declare type ufixed72x2<N = void> = N extends number ? number[] : number;
declare type ufixed72x3<N = void> = N extends number ? number[] : number;
declare type ufixed72x4<N = void> = N extends number ? number[] : number;
declare type ufixed72x5<N = void> = N extends number ? number[] : number;
declare type ufixed72x6<N = void> = N extends number ? number[] : number;
declare type ufixed72x7<N = void> = N extends number ? number[] : number;
declare type ufixed72x8<N = void> = N extends number ? number[] : number;
declare type ufixed72x9<N = void> = N extends number ? number[] : number;
declare type ufixed72x10<N = void> = N extends number ? number[] : number;
declare type ufixed72x11<N = void> = N extends number ? number[] : number;
declare type ufixed72x12<N = void> = N extends number ? number[] : number;
declare type ufixed72x13<N = void> = N extends number ? number[] : number;
declare type ufixed72x14<N = void> = N extends number ? number[] : number;
declare type ufixed72x15<N = void> = N extends number ? number[] : number;
declare type ufixed72x16<N = void> = N extends number ? number[] : number;
declare type ufixed72x17<N = void> = N extends number ? number[] : number;
declare type ufixed72x18<N = void> = N extends number ? number[] : number;
declare type ufixed72x19<N = void> = N extends number ? number[] : number;
declare type ufixed72x20<N = void> = N extends number ? number[] : number;
declare type ufixed72x21<N = void> = N extends number ? number[] : number;
declare type ufixed72x22<N = void> = N extends number ? number[] : number;
declare type ufixed72x23<N = void> = N extends number ? number[] : number;
declare type ufixed72x24<N = void> = N extends number ? number[] : number;
declare type ufixed72x25<N = void> = N extends number ? number[] : number;
declare type ufixed72x26<N = void> = N extends number ? number[] : number;
declare type ufixed72x27<N = void> = N extends number ? number[] : number;
declare type ufixed72x28<N = void> = N extends number ? number[] : number;
declare type ufixed72x29<N = void> = N extends number ? number[] : number;
declare type ufixed72x30<N = void> = N extends number ? number[] : number;
declare type ufixed72x31<N = void> = N extends number ? number[] : number;
declare type ufixed72x32<N = void> = N extends number ? number[] : number;
declare type ufixed72x33<N = void> = N extends number ? number[] : number;
declare type ufixed72x34<N = void> = N extends number ? number[] : number;
declare type ufixed72x35<N = void> = N extends number ? number[] : number;
declare type ufixed72x36<N = void> = N extends number ? number[] : number;
declare type ufixed72x37<N = void> = N extends number ? number[] : number;
declare type ufixed72x38<N = void> = N extends number ? number[] : number;
declare type ufixed72x39<N = void> = N extends number ? number[] : number;
declare type ufixed72x40<N = void> = N extends number ? number[] : number;
declare type ufixed72x41<N = void> = N extends number ? number[] : number;
declare type ufixed72x42<N = void> = N extends number ? number[] : number;
declare type ufixed72x43<N = void> = N extends number ? number[] : number;
declare type ufixed72x44<N = void> = N extends number ? number[] : number;
declare type ufixed72x45<N = void> = N extends number ? number[] : number;
declare type ufixed72x46<N = void> = N extends number ? number[] : number;
declare type ufixed72x47<N = void> = N extends number ? number[] : number;
declare type ufixed72x48<N = void> = N extends number ? number[] : number;
declare type ufixed72x49<N = void> = N extends number ? number[] : number;
declare type ufixed72x50<N = void> = N extends number ? number[] : number;
declare type ufixed72x51<N = void> = N extends number ? number[] : number;
declare type ufixed72x52<N = void> = N extends number ? number[] : number;
declare type ufixed72x53<N = void> = N extends number ? number[] : number;
declare type ufixed72x54<N = void> = N extends number ? number[] : number;
declare type ufixed72x55<N = void> = N extends number ? number[] : number;
declare type ufixed72x56<N = void> = N extends number ? number[] : number;
declare type ufixed72x57<N = void> = N extends number ? number[] : number;
declare type ufixed72x58<N = void> = N extends number ? number[] : number;
declare type ufixed72x59<N = void> = N extends number ? number[] : number;
declare type ufixed72x60<N = void> = N extends number ? number[] : number;
declare type ufixed72x61<N = void> = N extends number ? number[] : number;
declare type ufixed72x62<N = void> = N extends number ? number[] : number;
declare type ufixed72x63<N = void> = N extends number ? number[] : number;
declare type ufixed72x64<N = void> = N extends number ? number[] : number;
declare type ufixed72x65<N = void> = N extends number ? number[] : number;
declare type ufixed72x66<N = void> = N extends number ? number[] : number;
declare type ufixed72x67<N = void> = N extends number ? number[] : number;
declare type ufixed72x68<N = void> = N extends number ? number[] : number;
declare type ufixed72x69<N = void> = N extends number ? number[] : number;
declare type ufixed72x70<N = void> = N extends number ? number[] : number;
declare type ufixed72x71<N = void> = N extends number ? number[] : number;
declare type ufixed72x72<N = void> = N extends number ? number[] : number;
declare type ufixed72x73<N = void> = N extends number ? number[] : number;
declare type ufixed72x74<N = void> = N extends number ? number[] : number;
declare type ufixed72x75<N = void> = N extends number ? number[] : number;
declare type ufixed72x76<N = void> = N extends number ? number[] : number;
declare type ufixed72x77<N = void> = N extends number ? number[] : number;
declare type ufixed72x78<N = void> = N extends number ? number[] : number;
declare type ufixed72x79<N = void> = N extends number ? number[] : number;
declare type ufixed72x80<N = void> = N extends number ? number[] : number;
declare type ufixed72x81<N = void> = N extends number ? number[] : number;
declare type ufixed72x82<N = void> = N extends number ? number[] : number;
declare type ufixed72x83<N = void> = N extends number ? number[] : number;
declare type ufixed72x84<N = void> = N extends number ? number[] : number;
declare type ufixed72x85<N = void> = N extends number ? number[] : number;
declare type ufixed72x86<N = void> = N extends number ? number[] : number;
declare type ufixed72x87<N = void> = N extends number ? number[] : number;
declare type ufixed72x88<N = void> = N extends number ? number[] : number;
declare type ufixed72x89<N = void> = N extends number ? number[] : number;
declare type ufixed72x90<N = void> = N extends number ? number[] : number;
declare type ufixed72x91<N = void> = N extends number ? number[] : number;
declare type ufixed72x92<N = void> = N extends number ? number[] : number;
declare type ufixed72x93<N = void> = N extends number ? number[] : number;
declare type ufixed72x94<N = void> = N extends number ? number[] : number;
declare type ufixed72x95<N = void> = N extends number ? number[] : number;
declare type ufixed72x96<N = void> = N extends number ? number[] : number;
declare type ufixed72x97<N = void> = N extends number ? number[] : number;
declare type ufixed72x98<N = void> = N extends number ? number[] : number;
declare type ufixed72x99<N = void> = N extends number ? number[] : number;
declare type ufixed72x100<N = void> = N extends number ? number[] : number;
declare type ufixed72x101<N = void> = N extends number ? number[] : number;
declare type ufixed72x102<N = void> = N extends number ? number[] : number;
declare type ufixed72x103<N = void> = N extends number ? number[] : number;
declare type ufixed72x104<N = void> = N extends number ? number[] : number;
declare type ufixed72x105<N = void> = N extends number ? number[] : number;
declare type ufixed72x106<N = void> = N extends number ? number[] : number;
declare type ufixed72x107<N = void> = N extends number ? number[] : number;
declare type ufixed72x108<N = void> = N extends number ? number[] : number;
declare type ufixed72x109<N = void> = N extends number ? number[] : number;
declare type ufixed72x110<N = void> = N extends number ? number[] : number;
declare type ufixed72x111<N = void> = N extends number ? number[] : number;
declare type ufixed72x112<N = void> = N extends number ? number[] : number;
declare type ufixed72x113<N = void> = N extends number ? number[] : number;
declare type ufixed72x114<N = void> = N extends number ? number[] : number;
declare type ufixed72x115<N = void> = N extends number ? number[] : number;
declare type ufixed72x116<N = void> = N extends number ? number[] : number;
declare type ufixed72x117<N = void> = N extends number ? number[] : number;
declare type ufixed72x118<N = void> = N extends number ? number[] : number;
declare type ufixed72x119<N = void> = N extends number ? number[] : number;
declare type ufixed72x120<N = void> = N extends number ? number[] : number;
declare type ufixed72x121<N = void> = N extends number ? number[] : number;
declare type ufixed72x122<N = void> = N extends number ? number[] : number;
declare type ufixed72x123<N = void> = N extends number ? number[] : number;
declare type ufixed72x124<N = void> = N extends number ? number[] : number;
declare type ufixed72x125<N = void> = N extends number ? number[] : number;
declare type ufixed72x126<N = void> = N extends number ? number[] : number;
declare type ufixed72x127<N = void> = N extends number ? number[] : number;
declare type ufixed72x128<N = void> = N extends number ? number[] : number;
declare type ufixed72x129<N = void> = N extends number ? number[] : number;
declare type ufixed72x130<N = void> = N extends number ? number[] : number;
declare type ufixed72x131<N = void> = N extends number ? number[] : number;
declare type ufixed72x132<N = void> = N extends number ? number[] : number;
declare type ufixed72x133<N = void> = N extends number ? number[] : number;
declare type ufixed72x134<N = void> = N extends number ? number[] : number;
declare type ufixed72x135<N = void> = N extends number ? number[] : number;
declare type ufixed72x136<N = void> = N extends number ? number[] : number;
declare type ufixed72x137<N = void> = N extends number ? number[] : number;
declare type ufixed72x138<N = void> = N extends number ? number[] : number;
declare type ufixed72x139<N = void> = N extends number ? number[] : number;
declare type ufixed72x140<N = void> = N extends number ? number[] : number;
declare type ufixed72x141<N = void> = N extends number ? number[] : number;
declare type ufixed72x142<N = void> = N extends number ? number[] : number;
declare type ufixed72x143<N = void> = N extends number ? number[] : number;
declare type ufixed72x144<N = void> = N extends number ? number[] : number;
declare type ufixed72x145<N = void> = N extends number ? number[] : number;
declare type ufixed72x146<N = void> = N extends number ? number[] : number;
declare type ufixed72x147<N = void> = N extends number ? number[] : number;
declare type ufixed72x148<N = void> = N extends number ? number[] : number;
declare type ufixed72x149<N = void> = N extends number ? number[] : number;
declare type ufixed72x150<N = void> = N extends number ? number[] : number;
declare type ufixed72x151<N = void> = N extends number ? number[] : number;
declare type ufixed72x152<N = void> = N extends number ? number[] : number;
declare type ufixed72x153<N = void> = N extends number ? number[] : number;
declare type ufixed72x154<N = void> = N extends number ? number[] : number;
declare type ufixed72x155<N = void> = N extends number ? number[] : number;
declare type ufixed72x156<N = void> = N extends number ? number[] : number;
declare type ufixed72x157<N = void> = N extends number ? number[] : number;
declare type ufixed72x158<N = void> = N extends number ? number[] : number;
declare type ufixed72x159<N = void> = N extends number ? number[] : number;
declare type ufixed72x160<N = void> = N extends number ? number[] : number;
declare type ufixed80x1<N = void> = N extends number ? number[] : number;
declare type ufixed80x2<N = void> = N extends number ? number[] : number;
declare type ufixed80x3<N = void> = N extends number ? number[] : number;
declare type ufixed80x4<N = void> = N extends number ? number[] : number;
declare type ufixed80x5<N = void> = N extends number ? number[] : number;
declare type ufixed80x6<N = void> = N extends number ? number[] : number;
declare type ufixed80x7<N = void> = N extends number ? number[] : number;
declare type ufixed80x8<N = void> = N extends number ? number[] : number;
declare type ufixed80x9<N = void> = N extends number ? number[] : number;
declare type ufixed80x10<N = void> = N extends number ? number[] : number;
declare type ufixed80x11<N = void> = N extends number ? number[] : number;
declare type ufixed80x12<N = void> = N extends number ? number[] : number;
declare type ufixed80x13<N = void> = N extends number ? number[] : number;
declare type ufixed80x14<N = void> = N extends number ? number[] : number;
declare type ufixed80x15<N = void> = N extends number ? number[] : number;
declare type ufixed80x16<N = void> = N extends number ? number[] : number;
declare type ufixed80x17<N = void> = N extends number ? number[] : number;
declare type ufixed80x18<N = void> = N extends number ? number[] : number;
declare type ufixed80x19<N = void> = N extends number ? number[] : number;
declare type ufixed80x20<N = void> = N extends number ? number[] : number;
declare type ufixed80x21<N = void> = N extends number ? number[] : number;
declare type ufixed80x22<N = void> = N extends number ? number[] : number;
declare type ufixed80x23<N = void> = N extends number ? number[] : number;
declare type ufixed80x24<N = void> = N extends number ? number[] : number;
declare type ufixed80x25<N = void> = N extends number ? number[] : number;
declare type ufixed80x26<N = void> = N extends number ? number[] : number;
declare type ufixed80x27<N = void> = N extends number ? number[] : number;
declare type ufixed80x28<N = void> = N extends number ? number[] : number;
declare type ufixed80x29<N = void> = N extends number ? number[] : number;
declare type ufixed80x30<N = void> = N extends number ? number[] : number;
declare type ufixed80x31<N = void> = N extends number ? number[] : number;
declare type ufixed80x32<N = void> = N extends number ? number[] : number;
declare type ufixed80x33<N = void> = N extends number ? number[] : number;
declare type ufixed80x34<N = void> = N extends number ? number[] : number;
declare type ufixed80x35<N = void> = N extends number ? number[] : number;
declare type ufixed80x36<N = void> = N extends number ? number[] : number;
declare type ufixed80x37<N = void> = N extends number ? number[] : number;
declare type ufixed80x38<N = void> = N extends number ? number[] : number;
declare type ufixed80x39<N = void> = N extends number ? number[] : number;
declare type ufixed80x40<N = void> = N extends number ? number[] : number;
declare type ufixed80x41<N = void> = N extends number ? number[] : number;
declare type ufixed80x42<N = void> = N extends number ? number[] : number;
declare type ufixed80x43<N = void> = N extends number ? number[] : number;
declare type ufixed80x44<N = void> = N extends number ? number[] : number;
declare type ufixed80x45<N = void> = N extends number ? number[] : number;
declare type ufixed80x46<N = void> = N extends number ? number[] : number;
declare type ufixed80x47<N = void> = N extends number ? number[] : number;
declare type ufixed80x48<N = void> = N extends number ? number[] : number;
declare type ufixed80x49<N = void> = N extends number ? number[] : number;
declare type ufixed80x50<N = void> = N extends number ? number[] : number;
declare type ufixed80x51<N = void> = N extends number ? number[] : number;
declare type ufixed80x52<N = void> = N extends number ? number[] : number;
declare type ufixed80x53<N = void> = N extends number ? number[] : number;
declare type ufixed80x54<N = void> = N extends number ? number[] : number;
declare type ufixed80x55<N = void> = N extends number ? number[] : number;
declare type ufixed80x56<N = void> = N extends number ? number[] : number;
declare type ufixed80x57<N = void> = N extends number ? number[] : number;
declare type ufixed80x58<N = void> = N extends number ? number[] : number;
declare type ufixed80x59<N = void> = N extends number ? number[] : number;
declare type ufixed80x60<N = void> = N extends number ? number[] : number;
declare type ufixed80x61<N = void> = N extends number ? number[] : number;
declare type ufixed80x62<N = void> = N extends number ? number[] : number;
declare type ufixed80x63<N = void> = N extends number ? number[] : number;
declare type ufixed80x64<N = void> = N extends number ? number[] : number;
declare type ufixed80x65<N = void> = N extends number ? number[] : number;
declare type ufixed80x66<N = void> = N extends number ? number[] : number;
declare type ufixed80x67<N = void> = N extends number ? number[] : number;
declare type ufixed80x68<N = void> = N extends number ? number[] : number;
declare type ufixed80x69<N = void> = N extends number ? number[] : number;
declare type ufixed80x70<N = void> = N extends number ? number[] : number;
declare type ufixed80x71<N = void> = N extends number ? number[] : number;
declare type ufixed80x72<N = void> = N extends number ? number[] : number;
declare type ufixed80x73<N = void> = N extends number ? number[] : number;
declare type ufixed80x74<N = void> = N extends number ? number[] : number;
declare type ufixed80x75<N = void> = N extends number ? number[] : number;
declare type ufixed80x76<N = void> = N extends number ? number[] : number;
declare type ufixed80x77<N = void> = N extends number ? number[] : number;
declare type ufixed80x78<N = void> = N extends number ? number[] : number;
declare type ufixed80x79<N = void> = N extends number ? number[] : number;
declare type ufixed80x80<N = void> = N extends number ? number[] : number;
declare type ufixed80x81<N = void> = N extends number ? number[] : number;
declare type ufixed80x82<N = void> = N extends number ? number[] : number;
declare type ufixed80x83<N = void> = N extends number ? number[] : number;
declare type ufixed80x84<N = void> = N extends number ? number[] : number;
declare type ufixed80x85<N = void> = N extends number ? number[] : number;
declare type ufixed80x86<N = void> = N extends number ? number[] : number;
declare type ufixed80x87<N = void> = N extends number ? number[] : number;
declare type ufixed80x88<N = void> = N extends number ? number[] : number;
declare type ufixed80x89<N = void> = N extends number ? number[] : number;
declare type ufixed80x90<N = void> = N extends number ? number[] : number;
declare type ufixed80x91<N = void> = N extends number ? number[] : number;
declare type ufixed80x92<N = void> = N extends number ? number[] : number;
declare type ufixed80x93<N = void> = N extends number ? number[] : number;
declare type ufixed80x94<N = void> = N extends number ? number[] : number;
declare type ufixed80x95<N = void> = N extends number ? number[] : number;
declare type ufixed80x96<N = void> = N extends number ? number[] : number;
declare type ufixed80x97<N = void> = N extends number ? number[] : number;
declare type ufixed80x98<N = void> = N extends number ? number[] : number;
declare type ufixed80x99<N = void> = N extends number ? number[] : number;
declare type ufixed80x100<N = void> = N extends number ? number[] : number;
declare type ufixed80x101<N = void> = N extends number ? number[] : number;
declare type ufixed80x102<N = void> = N extends number ? number[] : number;
declare type ufixed80x103<N = void> = N extends number ? number[] : number;
declare type ufixed80x104<N = void> = N extends number ? number[] : number;
declare type ufixed80x105<N = void> = N extends number ? number[] : number;
declare type ufixed80x106<N = void> = N extends number ? number[] : number;
declare type ufixed80x107<N = void> = N extends number ? number[] : number;
declare type ufixed80x108<N = void> = N extends number ? number[] : number;
declare type ufixed80x109<N = void> = N extends number ? number[] : number;
declare type ufixed80x110<N = void> = N extends number ? number[] : number;
declare type ufixed80x111<N = void> = N extends number ? number[] : number;
declare type ufixed80x112<N = void> = N extends number ? number[] : number;
declare type ufixed80x113<N = void> = N extends number ? number[] : number;
declare type ufixed80x114<N = void> = N extends number ? number[] : number;
declare type ufixed80x115<N = void> = N extends number ? number[] : number;
declare type ufixed80x116<N = void> = N extends number ? number[] : number;
declare type ufixed80x117<N = void> = N extends number ? number[] : number;
declare type ufixed80x118<N = void> = N extends number ? number[] : number;
declare type ufixed80x119<N = void> = N extends number ? number[] : number;
declare type ufixed80x120<N = void> = N extends number ? number[] : number;
declare type ufixed80x121<N = void> = N extends number ? number[] : number;
declare type ufixed80x122<N = void> = N extends number ? number[] : number;
declare type ufixed80x123<N = void> = N extends number ? number[] : number;
declare type ufixed80x124<N = void> = N extends number ? number[] : number;
declare type ufixed80x125<N = void> = N extends number ? number[] : number;
declare type ufixed80x126<N = void> = N extends number ? number[] : number;
declare type ufixed80x127<N = void> = N extends number ? number[] : number;
declare type ufixed80x128<N = void> = N extends number ? number[] : number;
declare type ufixed80x129<N = void> = N extends number ? number[] : number;
declare type ufixed80x130<N = void> = N extends number ? number[] : number;
declare type ufixed80x131<N = void> = N extends number ? number[] : number;
declare type ufixed80x132<N = void> = N extends number ? number[] : number;
declare type ufixed80x133<N = void> = N extends number ? number[] : number;
declare type ufixed80x134<N = void> = N extends number ? number[] : number;
declare type ufixed80x135<N = void> = N extends number ? number[] : number;
declare type ufixed80x136<N = void> = N extends number ? number[] : number;
declare type ufixed80x137<N = void> = N extends number ? number[] : number;
declare type ufixed80x138<N = void> = N extends number ? number[] : number;
declare type ufixed80x139<N = void> = N extends number ? number[] : number;
declare type ufixed80x140<N = void> = N extends number ? number[] : number;
declare type ufixed80x141<N = void> = N extends number ? number[] : number;
declare type ufixed80x142<N = void> = N extends number ? number[] : number;
declare type ufixed80x143<N = void> = N extends number ? number[] : number;
declare type ufixed80x144<N = void> = N extends number ? number[] : number;
declare type ufixed80x145<N = void> = N extends number ? number[] : number;
declare type ufixed80x146<N = void> = N extends number ? number[] : number;
declare type ufixed80x147<N = void> = N extends number ? number[] : number;
declare type ufixed80x148<N = void> = N extends number ? number[] : number;
declare type ufixed80x149<N = void> = N extends number ? number[] : number;
declare type ufixed80x150<N = void> = N extends number ? number[] : number;
declare type ufixed80x151<N = void> = N extends number ? number[] : number;
declare type ufixed80x152<N = void> = N extends number ? number[] : number;
declare type ufixed80x153<N = void> = N extends number ? number[] : number;
declare type ufixed80x154<N = void> = N extends number ? number[] : number;
declare type ufixed80x155<N = void> = N extends number ? number[] : number;
declare type ufixed80x156<N = void> = N extends number ? number[] : number;
declare type ufixed80x157<N = void> = N extends number ? number[] : number;
declare type ufixed80x158<N = void> = N extends number ? number[] : number;
declare type ufixed80x159<N = void> = N extends number ? number[] : number;
declare type ufixed80x160<N = void> = N extends number ? number[] : number;
declare type ufixed88x1<N = void> = N extends number ? number[] : number;
declare type ufixed88x2<N = void> = N extends number ? number[] : number;
declare type ufixed88x3<N = void> = N extends number ? number[] : number;
declare type ufixed88x4<N = void> = N extends number ? number[] : number;
declare type ufixed88x5<N = void> = N extends number ? number[] : number;
declare type ufixed88x6<N = void> = N extends number ? number[] : number;
declare type ufixed88x7<N = void> = N extends number ? number[] : number;
declare type ufixed88x8<N = void> = N extends number ? number[] : number;
declare type ufixed88x9<N = void> = N extends number ? number[] : number;
declare type ufixed88x10<N = void> = N extends number ? number[] : number;
declare type ufixed88x11<N = void> = N extends number ? number[] : number;
declare type ufixed88x12<N = void> = N extends number ? number[] : number;
declare type ufixed88x13<N = void> = N extends number ? number[] : number;
declare type ufixed88x14<N = void> = N extends number ? number[] : number;
declare type ufixed88x15<N = void> = N extends number ? number[] : number;
declare type ufixed88x16<N = void> = N extends number ? number[] : number;
declare type ufixed88x17<N = void> = N extends number ? number[] : number;
declare type ufixed88x18<N = void> = N extends number ? number[] : number;
declare type ufixed88x19<N = void> = N extends number ? number[] : number;
declare type ufixed88x20<N = void> = N extends number ? number[] : number;
declare type ufixed88x21<N = void> = N extends number ? number[] : number;
declare type ufixed88x22<N = void> = N extends number ? number[] : number;
declare type ufixed88x23<N = void> = N extends number ? number[] : number;
declare type ufixed88x24<N = void> = N extends number ? number[] : number;
declare type ufixed88x25<N = void> = N extends number ? number[] : number;
declare type ufixed88x26<N = void> = N extends number ? number[] : number;
declare type ufixed88x27<N = void> = N extends number ? number[] : number;
declare type ufixed88x28<N = void> = N extends number ? number[] : number;
declare type ufixed88x29<N = void> = N extends number ? number[] : number;
declare type ufixed88x30<N = void> = N extends number ? number[] : number;
declare type ufixed88x31<N = void> = N extends number ? number[] : number;
declare type ufixed88x32<N = void> = N extends number ? number[] : number;
declare type ufixed88x33<N = void> = N extends number ? number[] : number;
declare type ufixed88x34<N = void> = N extends number ? number[] : number;
declare type ufixed88x35<N = void> = N extends number ? number[] : number;
declare type ufixed88x36<N = void> = N extends number ? number[] : number;
declare type ufixed88x37<N = void> = N extends number ? number[] : number;
declare type ufixed88x38<N = void> = N extends number ? number[] : number;
declare type ufixed88x39<N = void> = N extends number ? number[] : number;
declare type ufixed88x40<N = void> = N extends number ? number[] : number;
declare type ufixed88x41<N = void> = N extends number ? number[] : number;
declare type ufixed88x42<N = void> = N extends number ? number[] : number;
declare type ufixed88x43<N = void> = N extends number ? number[] : number;
declare type ufixed88x44<N = void> = N extends number ? number[] : number;
declare type ufixed88x45<N = void> = N extends number ? number[] : number;
declare type ufixed88x46<N = void> = N extends number ? number[] : number;
declare type ufixed88x47<N = void> = N extends number ? number[] : number;
declare type ufixed88x48<N = void> = N extends number ? number[] : number;
declare type ufixed88x49<N = void> = N extends number ? number[] : number;
declare type ufixed88x50<N = void> = N extends number ? number[] : number;
declare type ufixed88x51<N = void> = N extends number ? number[] : number;
declare type ufixed88x52<N = void> = N extends number ? number[] : number;
declare type ufixed88x53<N = void> = N extends number ? number[] : number;
declare type ufixed88x54<N = void> = N extends number ? number[] : number;
declare type ufixed88x55<N = void> = N extends number ? number[] : number;
declare type ufixed88x56<N = void> = N extends number ? number[] : number;
declare type ufixed88x57<N = void> = N extends number ? number[] : number;
declare type ufixed88x58<N = void> = N extends number ? number[] : number;
declare type ufixed88x59<N = void> = N extends number ? number[] : number;
declare type ufixed88x60<N = void> = N extends number ? number[] : number;
declare type ufixed88x61<N = void> = N extends number ? number[] : number;
declare type ufixed88x62<N = void> = N extends number ? number[] : number;
declare type ufixed88x63<N = void> = N extends number ? number[] : number;
declare type ufixed88x64<N = void> = N extends number ? number[] : number;
declare type ufixed88x65<N = void> = N extends number ? number[] : number;
declare type ufixed88x66<N = void> = N extends number ? number[] : number;
declare type ufixed88x67<N = void> = N extends number ? number[] : number;
declare type ufixed88x68<N = void> = N extends number ? number[] : number;
declare type ufixed88x69<N = void> = N extends number ? number[] : number;
declare type ufixed88x70<N = void> = N extends number ? number[] : number;
declare type ufixed88x71<N = void> = N extends number ? number[] : number;
declare type ufixed88x72<N = void> = N extends number ? number[] : number;
declare type ufixed88x73<N = void> = N extends number ? number[] : number;
declare type ufixed88x74<N = void> = N extends number ? number[] : number;
declare type ufixed88x75<N = void> = N extends number ? number[] : number;
declare type ufixed88x76<N = void> = N extends number ? number[] : number;
declare type ufixed88x77<N = void> = N extends number ? number[] : number;
declare type ufixed88x78<N = void> = N extends number ? number[] : number;
declare type ufixed88x79<N = void> = N extends number ? number[] : number;
declare type ufixed88x80<N = void> = N extends number ? number[] : number;
declare type ufixed88x81<N = void> = N extends number ? number[] : number;
declare type ufixed88x82<N = void> = N extends number ? number[] : number;
declare type ufixed88x83<N = void> = N extends number ? number[] : number;
declare type ufixed88x84<N = void> = N extends number ? number[] : number;
declare type ufixed88x85<N = void> = N extends number ? number[] : number;
declare type ufixed88x86<N = void> = N extends number ? number[] : number;
declare type ufixed88x87<N = void> = N extends number ? number[] : number;
declare type ufixed88x88<N = void> = N extends number ? number[] : number;
declare type ufixed88x89<N = void> = N extends number ? number[] : number;
declare type ufixed88x90<N = void> = N extends number ? number[] : number;
declare type ufixed88x91<N = void> = N extends number ? number[] : number;
declare type ufixed88x92<N = void> = N extends number ? number[] : number;
declare type ufixed88x93<N = void> = N extends number ? number[] : number;
declare type ufixed88x94<N = void> = N extends number ? number[] : number;
declare type ufixed88x95<N = void> = N extends number ? number[] : number;
declare type ufixed88x96<N = void> = N extends number ? number[] : number;
declare type ufixed88x97<N = void> = N extends number ? number[] : number;
declare type ufixed88x98<N = void> = N extends number ? number[] : number;
declare type ufixed88x99<N = void> = N extends number ? number[] : number;
declare type ufixed88x100<N = void> = N extends number ? number[] : number;
declare type ufixed88x101<N = void> = N extends number ? number[] : number;
declare type ufixed88x102<N = void> = N extends number ? number[] : number;
declare type ufixed88x103<N = void> = N extends number ? number[] : number;
declare type ufixed88x104<N = void> = N extends number ? number[] : number;
declare type ufixed88x105<N = void> = N extends number ? number[] : number;
declare type ufixed88x106<N = void> = N extends number ? number[] : number;
declare type ufixed88x107<N = void> = N extends number ? number[] : number;
declare type ufixed88x108<N = void> = N extends number ? number[] : number;
declare type ufixed88x109<N = void> = N extends number ? number[] : number;
declare type ufixed88x110<N = void> = N extends number ? number[] : number;
declare type ufixed88x111<N = void> = N extends number ? number[] : number;
declare type ufixed88x112<N = void> = N extends number ? number[] : number;
declare type ufixed88x113<N = void> = N extends number ? number[] : number;
declare type ufixed88x114<N = void> = N extends number ? number[] : number;
declare type ufixed88x115<N = void> = N extends number ? number[] : number;
declare type ufixed88x116<N = void> = N extends number ? number[] : number;
declare type ufixed88x117<N = void> = N extends number ? number[] : number;
declare type ufixed88x118<N = void> = N extends number ? number[] : number;
declare type ufixed88x119<N = void> = N extends number ? number[] : number;
declare type ufixed88x120<N = void> = N extends number ? number[] : number;
declare type ufixed88x121<N = void> = N extends number ? number[] : number;
declare type ufixed88x122<N = void> = N extends number ? number[] : number;
declare type ufixed88x123<N = void> = N extends number ? number[] : number;
declare type ufixed88x124<N = void> = N extends number ? number[] : number;
declare type ufixed88x125<N = void> = N extends number ? number[] : number;
declare type ufixed88x126<N = void> = N extends number ? number[] : number;
declare type ufixed88x127<N = void> = N extends number ? number[] : number;
declare type ufixed88x128<N = void> = N extends number ? number[] : number;
declare type ufixed88x129<N = void> = N extends number ? number[] : number;
declare type ufixed88x130<N = void> = N extends number ? number[] : number;
declare type ufixed88x131<N = void> = N extends number ? number[] : number;
declare type ufixed88x132<N = void> = N extends number ? number[] : number;
declare type ufixed88x133<N = void> = N extends number ? number[] : number;
declare type ufixed88x134<N = void> = N extends number ? number[] : number;
declare type ufixed88x135<N = void> = N extends number ? number[] : number;
declare type ufixed88x136<N = void> = N extends number ? number[] : number;
declare type ufixed88x137<N = void> = N extends number ? number[] : number;
declare type ufixed88x138<N = void> = N extends number ? number[] : number;
declare type ufixed88x139<N = void> = N extends number ? number[] : number;
declare type ufixed88x140<N = void> = N extends number ? number[] : number;
declare type ufixed88x141<N = void> = N extends number ? number[] : number;
declare type ufixed88x142<N = void> = N extends number ? number[] : number;
declare type ufixed88x143<N = void> = N extends number ? number[] : number;
declare type ufixed88x144<N = void> = N extends number ? number[] : number;
declare type ufixed88x145<N = void> = N extends number ? number[] : number;
declare type ufixed88x146<N = void> = N extends number ? number[] : number;
declare type ufixed88x147<N = void> = N extends number ? number[] : number;
declare type ufixed88x148<N = void> = N extends number ? number[] : number;
declare type ufixed88x149<N = void> = N extends number ? number[] : number;
declare type ufixed88x150<N = void> = N extends number ? number[] : number;
declare type ufixed88x151<N = void> = N extends number ? number[] : number;
declare type ufixed88x152<N = void> = N extends number ? number[] : number;
declare type ufixed88x153<N = void> = N extends number ? number[] : number;
declare type ufixed88x154<N = void> = N extends number ? number[] : number;
declare type ufixed88x155<N = void> = N extends number ? number[] : number;
declare type ufixed88x156<N = void> = N extends number ? number[] : number;
declare type ufixed88x157<N = void> = N extends number ? number[] : number;
declare type ufixed88x158<N = void> = N extends number ? number[] : number;
declare type ufixed88x159<N = void> = N extends number ? number[] : number;
declare type ufixed88x160<N = void> = N extends number ? number[] : number;
declare type ufixed96x1<N = void> = N extends number ? number[] : number;
declare type ufixed96x2<N = void> = N extends number ? number[] : number;
declare type ufixed96x3<N = void> = N extends number ? number[] : number;
declare type ufixed96x4<N = void> = N extends number ? number[] : number;
declare type ufixed96x5<N = void> = N extends number ? number[] : number;
declare type ufixed96x6<N = void> = N extends number ? number[] : number;
declare type ufixed96x7<N = void> = N extends number ? number[] : number;
declare type ufixed96x8<N = void> = N extends number ? number[] : number;
declare type ufixed96x9<N = void> = N extends number ? number[] : number;
declare type ufixed96x10<N = void> = N extends number ? number[] : number;
declare type ufixed96x11<N = void> = N extends number ? number[] : number;
declare type ufixed96x12<N = void> = N extends number ? number[] : number;
declare type ufixed96x13<N = void> = N extends number ? number[] : number;
declare type ufixed96x14<N = void> = N extends number ? number[] : number;
declare type ufixed96x15<N = void> = N extends number ? number[] : number;
declare type ufixed96x16<N = void> = N extends number ? number[] : number;
declare type ufixed96x17<N = void> = N extends number ? number[] : number;
declare type ufixed96x18<N = void> = N extends number ? number[] : number;
declare type ufixed96x19<N = void> = N extends number ? number[] : number;
declare type ufixed96x20<N = void> = N extends number ? number[] : number;
declare type ufixed96x21<N = void> = N extends number ? number[] : number;
declare type ufixed96x22<N = void> = N extends number ? number[] : number;
declare type ufixed96x23<N = void> = N extends number ? number[] : number;
declare type ufixed96x24<N = void> = N extends number ? number[] : number;
declare type ufixed96x25<N = void> = N extends number ? number[] : number;
declare type ufixed96x26<N = void> = N extends number ? number[] : number;
declare type ufixed96x27<N = void> = N extends number ? number[] : number;
declare type ufixed96x28<N = void> = N extends number ? number[] : number;
declare type ufixed96x29<N = void> = N extends number ? number[] : number;
declare type ufixed96x30<N = void> = N extends number ? number[] : number;
declare type ufixed96x31<N = void> = N extends number ? number[] : number;
declare type ufixed96x32<N = void> = N extends number ? number[] : number;
declare type ufixed96x33<N = void> = N extends number ? number[] : number;
declare type ufixed96x34<N = void> = N extends number ? number[] : number;
declare type ufixed96x35<N = void> = N extends number ? number[] : number;
declare type ufixed96x36<N = void> = N extends number ? number[] : number;
declare type ufixed96x37<N = void> = N extends number ? number[] : number;
declare type ufixed96x38<N = void> = N extends number ? number[] : number;
declare type ufixed96x39<N = void> = N extends number ? number[] : number;
declare type ufixed96x40<N = void> = N extends number ? number[] : number;
declare type ufixed96x41<N = void> = N extends number ? number[] : number;
declare type ufixed96x42<N = void> = N extends number ? number[] : number;
declare type ufixed96x43<N = void> = N extends number ? number[] : number;
declare type ufixed96x44<N = void> = N extends number ? number[] : number;
declare type ufixed96x45<N = void> = N extends number ? number[] : number;
declare type ufixed96x46<N = void> = N extends number ? number[] : number;
declare type ufixed96x47<N = void> = N extends number ? number[] : number;
declare type ufixed96x48<N = void> = N extends number ? number[] : number;
declare type ufixed96x49<N = void> = N extends number ? number[] : number;
declare type ufixed96x50<N = void> = N extends number ? number[] : number;
declare type ufixed96x51<N = void> = N extends number ? number[] : number;
declare type ufixed96x52<N = void> = N extends number ? number[] : number;
declare type ufixed96x53<N = void> = N extends number ? number[] : number;
declare type ufixed96x54<N = void> = N extends number ? number[] : number;
declare type ufixed96x55<N = void> = N extends number ? number[] : number;
declare type ufixed96x56<N = void> = N extends number ? number[] : number;
declare type ufixed96x57<N = void> = N extends number ? number[] : number;
declare type ufixed96x58<N = void> = N extends number ? number[] : number;
declare type ufixed96x59<N = void> = N extends number ? number[] : number;
declare type ufixed96x60<N = void> = N extends number ? number[] : number;
declare type ufixed96x61<N = void> = N extends number ? number[] : number;
declare type ufixed96x62<N = void> = N extends number ? number[] : number;
declare type ufixed96x63<N = void> = N extends number ? number[] : number;
declare type ufixed96x64<N = void> = N extends number ? number[] : number;
declare type ufixed96x65<N = void> = N extends number ? number[] : number;
declare type ufixed96x66<N = void> = N extends number ? number[] : number;
declare type ufixed96x67<N = void> = N extends number ? number[] : number;
declare type ufixed96x68<N = void> = N extends number ? number[] : number;
declare type ufixed96x69<N = void> = N extends number ? number[] : number;
declare type ufixed96x70<N = void> = N extends number ? number[] : number;
declare type ufixed96x71<N = void> = N extends number ? number[] : number;
declare type ufixed96x72<N = void> = N extends number ? number[] : number;
declare type ufixed96x73<N = void> = N extends number ? number[] : number;
declare type ufixed96x74<N = void> = N extends number ? number[] : number;
declare type ufixed96x75<N = void> = N extends number ? number[] : number;
declare type ufixed96x76<N = void> = N extends number ? number[] : number;
declare type ufixed96x77<N = void> = N extends number ? number[] : number;
declare type ufixed96x78<N = void> = N extends number ? number[] : number;
declare type ufixed96x79<N = void> = N extends number ? number[] : number;
declare type ufixed96x80<N = void> = N extends number ? number[] : number;
declare type ufixed96x81<N = void> = N extends number ? number[] : number;
declare type ufixed96x82<N = void> = N extends number ? number[] : number;
declare type ufixed96x83<N = void> = N extends number ? number[] : number;
declare type ufixed96x84<N = void> = N extends number ? number[] : number;
declare type ufixed96x85<N = void> = N extends number ? number[] : number;
declare type ufixed96x86<N = void> = N extends number ? number[] : number;
declare type ufixed96x87<N = void> = N extends number ? number[] : number;
declare type ufixed96x88<N = void> = N extends number ? number[] : number;
declare type ufixed96x89<N = void> = N extends number ? number[] : number;
declare type ufixed96x90<N = void> = N extends number ? number[] : number;
declare type ufixed96x91<N = void> = N extends number ? number[] : number;
declare type ufixed96x92<N = void> = N extends number ? number[] : number;
declare type ufixed96x93<N = void> = N extends number ? number[] : number;
declare type ufixed96x94<N = void> = N extends number ? number[] : number;
declare type ufixed96x95<N = void> = N extends number ? number[] : number;
declare type ufixed96x96<N = void> = N extends number ? number[] : number;
declare type ufixed96x97<N = void> = N extends number ? number[] : number;
declare type ufixed96x98<N = void> = N extends number ? number[] : number;
declare type ufixed96x99<N = void> = N extends number ? number[] : number;
declare type ufixed96x100<N = void> = N extends number ? number[] : number;
declare type ufixed96x101<N = void> = N extends number ? number[] : number;
declare type ufixed96x102<N = void> = N extends number ? number[] : number;
declare type ufixed96x103<N = void> = N extends number ? number[] : number;
declare type ufixed96x104<N = void> = N extends number ? number[] : number;
declare type ufixed96x105<N = void> = N extends number ? number[] : number;
declare type ufixed96x106<N = void> = N extends number ? number[] : number;
declare type ufixed96x107<N = void> = N extends number ? number[] : number;
declare type ufixed96x108<N = void> = N extends number ? number[] : number;
declare type ufixed96x109<N = void> = N extends number ? number[] : number;
declare type ufixed96x110<N = void> = N extends number ? number[] : number;
declare type ufixed96x111<N = void> = N extends number ? number[] : number;
declare type ufixed96x112<N = void> = N extends number ? number[] : number;
declare type ufixed96x113<N = void> = N extends number ? number[] : number;
declare type ufixed96x114<N = void> = N extends number ? number[] : number;
declare type ufixed96x115<N = void> = N extends number ? number[] : number;
declare type ufixed96x116<N = void> = N extends number ? number[] : number;
declare type ufixed96x117<N = void> = N extends number ? number[] : number;
declare type ufixed96x118<N = void> = N extends number ? number[] : number;
declare type ufixed96x119<N = void> = N extends number ? number[] : number;
declare type ufixed96x120<N = void> = N extends number ? number[] : number;
declare type ufixed96x121<N = void> = N extends number ? number[] : number;
declare type ufixed96x122<N = void> = N extends number ? number[] : number;
declare type ufixed96x123<N = void> = N extends number ? number[] : number;
declare type ufixed96x124<N = void> = N extends number ? number[] : number;
declare type ufixed96x125<N = void> = N extends number ? number[] : number;
declare type ufixed96x126<N = void> = N extends number ? number[] : number;
declare type ufixed96x127<N = void> = N extends number ? number[] : number;
declare type ufixed96x128<N = void> = N extends number ? number[] : number;
declare type ufixed96x129<N = void> = N extends number ? number[] : number;
declare type ufixed96x130<N = void> = N extends number ? number[] : number;
declare type ufixed96x131<N = void> = N extends number ? number[] : number;
declare type ufixed96x132<N = void> = N extends number ? number[] : number;
declare type ufixed96x133<N = void> = N extends number ? number[] : number;
declare type ufixed96x134<N = void> = N extends number ? number[] : number;
declare type ufixed96x135<N = void> = N extends number ? number[] : number;
declare type ufixed96x136<N = void> = N extends number ? number[] : number;
declare type ufixed96x137<N = void> = N extends number ? number[] : number;
declare type ufixed96x138<N = void> = N extends number ? number[] : number;
declare type ufixed96x139<N = void> = N extends number ? number[] : number;
declare type ufixed96x140<N = void> = N extends number ? number[] : number;
declare type ufixed96x141<N = void> = N extends number ? number[] : number;
declare type ufixed96x142<N = void> = N extends number ? number[] : number;
declare type ufixed96x143<N = void> = N extends number ? number[] : number;
declare type ufixed96x144<N = void> = N extends number ? number[] : number;
declare type ufixed96x145<N = void> = N extends number ? number[] : number;
declare type ufixed96x146<N = void> = N extends number ? number[] : number;
declare type ufixed96x147<N = void> = N extends number ? number[] : number;
declare type ufixed96x148<N = void> = N extends number ? number[] : number;
declare type ufixed96x149<N = void> = N extends number ? number[] : number;
declare type ufixed96x150<N = void> = N extends number ? number[] : number;
declare type ufixed96x151<N = void> = N extends number ? number[] : number;
declare type ufixed96x152<N = void> = N extends number ? number[] : number;
declare type ufixed96x153<N = void> = N extends number ? number[] : number;
declare type ufixed96x154<N = void> = N extends number ? number[] : number;
declare type ufixed96x155<N = void> = N extends number ? number[] : number;
declare type ufixed96x156<N = void> = N extends number ? number[] : number;
declare type ufixed96x157<N = void> = N extends number ? number[] : number;
declare type ufixed96x158<N = void> = N extends number ? number[] : number;
declare type ufixed96x159<N = void> = N extends number ? number[] : number;
declare type ufixed96x160<N = void> = N extends number ? number[] : number;
declare type ufixed104x1<N = void> = N extends number ? number[] : number;
declare type ufixed104x2<N = void> = N extends number ? number[] : number;
declare type ufixed104x3<N = void> = N extends number ? number[] : number;
declare type ufixed104x4<N = void> = N extends number ? number[] : number;
declare type ufixed104x5<N = void> = N extends number ? number[] : number;
declare type ufixed104x6<N = void> = N extends number ? number[] : number;
declare type ufixed104x7<N = void> = N extends number ? number[] : number;
declare type ufixed104x8<N = void> = N extends number ? number[] : number;
declare type ufixed104x9<N = void> = N extends number ? number[] : number;
declare type ufixed104x10<N = void> = N extends number ? number[] : number;
declare type ufixed104x11<N = void> = N extends number ? number[] : number;
declare type ufixed104x12<N = void> = N extends number ? number[] : number;
declare type ufixed104x13<N = void> = N extends number ? number[] : number;
declare type ufixed104x14<N = void> = N extends number ? number[] : number;
declare type ufixed104x15<N = void> = N extends number ? number[] : number;
declare type ufixed104x16<N = void> = N extends number ? number[] : number;
declare type ufixed104x17<N = void> = N extends number ? number[] : number;
declare type ufixed104x18<N = void> = N extends number ? number[] : number;
declare type ufixed104x19<N = void> = N extends number ? number[] : number;
declare type ufixed104x20<N = void> = N extends number ? number[] : number;
declare type ufixed104x21<N = void> = N extends number ? number[] : number;
declare type ufixed104x22<N = void> = N extends number ? number[] : number;
declare type ufixed104x23<N = void> = N extends number ? number[] : number;
declare type ufixed104x24<N = void> = N extends number ? number[] : number;
declare type ufixed104x25<N = void> = N extends number ? number[] : number;
declare type ufixed104x26<N = void> = N extends number ? number[] : number;
declare type ufixed104x27<N = void> = N extends number ? number[] : number;
declare type ufixed104x28<N = void> = N extends number ? number[] : number;
declare type ufixed104x29<N = void> = N extends number ? number[] : number;
declare type ufixed104x30<N = void> = N extends number ? number[] : number;
declare type ufixed104x31<N = void> = N extends number ? number[] : number;
declare type ufixed104x32<N = void> = N extends number ? number[] : number;
declare type ufixed104x33<N = void> = N extends number ? number[] : number;
declare type ufixed104x34<N = void> = N extends number ? number[] : number;
declare type ufixed104x35<N = void> = N extends number ? number[] : number;
declare type ufixed104x36<N = void> = N extends number ? number[] : number;
declare type ufixed104x37<N = void> = N extends number ? number[] : number;
declare type ufixed104x38<N = void> = N extends number ? number[] : number;
declare type ufixed104x39<N = void> = N extends number ? number[] : number;
declare type ufixed104x40<N = void> = N extends number ? number[] : number;
declare type ufixed104x41<N = void> = N extends number ? number[] : number;
declare type ufixed104x42<N = void> = N extends number ? number[] : number;
declare type ufixed104x43<N = void> = N extends number ? number[] : number;
declare type ufixed104x44<N = void> = N extends number ? number[] : number;
declare type ufixed104x45<N = void> = N extends number ? number[] : number;
declare type ufixed104x46<N = void> = N extends number ? number[] : number;
declare type ufixed104x47<N = void> = N extends number ? number[] : number;
declare type ufixed104x48<N = void> = N extends number ? number[] : number;
declare type ufixed104x49<N = void> = N extends number ? number[] : number;
declare type ufixed104x50<N = void> = N extends number ? number[] : number;
declare type ufixed104x51<N = void> = N extends number ? number[] : number;
declare type ufixed104x52<N = void> = N extends number ? number[] : number;
declare type ufixed104x53<N = void> = N extends number ? number[] : number;
declare type ufixed104x54<N = void> = N extends number ? number[] : number;
declare type ufixed104x55<N = void> = N extends number ? number[] : number;
declare type ufixed104x56<N = void> = N extends number ? number[] : number;
declare type ufixed104x57<N = void> = N extends number ? number[] : number;
declare type ufixed104x58<N = void> = N extends number ? number[] : number;
declare type ufixed104x59<N = void> = N extends number ? number[] : number;
declare type ufixed104x60<N = void> = N extends number ? number[] : number;
declare type ufixed104x61<N = void> = N extends number ? number[] : number;
declare type ufixed104x62<N = void> = N extends number ? number[] : number;
declare type ufixed104x63<N = void> = N extends number ? number[] : number;
declare type ufixed104x64<N = void> = N extends number ? number[] : number;
declare type ufixed104x65<N = void> = N extends number ? number[] : number;
declare type ufixed104x66<N = void> = N extends number ? number[] : number;
declare type ufixed104x67<N = void> = N extends number ? number[] : number;
declare type ufixed104x68<N = void> = N extends number ? number[] : number;
declare type ufixed104x69<N = void> = N extends number ? number[] : number;
declare type ufixed104x70<N = void> = N extends number ? number[] : number;
declare type ufixed104x71<N = void> = N extends number ? number[] : number;
declare type ufixed104x72<N = void> = N extends number ? number[] : number;
declare type ufixed104x73<N = void> = N extends number ? number[] : number;
declare type ufixed104x74<N = void> = N extends number ? number[] : number;
declare type ufixed104x75<N = void> = N extends number ? number[] : number;
declare type ufixed104x76<N = void> = N extends number ? number[] : number;
declare type ufixed104x77<N = void> = N extends number ? number[] : number;
declare type ufixed104x78<N = void> = N extends number ? number[] : number;
declare type ufixed104x79<N = void> = N extends number ? number[] : number;
declare type ufixed104x80<N = void> = N extends number ? number[] : number;
declare type ufixed104x81<N = void> = N extends number ? number[] : number;
declare type ufixed104x82<N = void> = N extends number ? number[] : number;
declare type ufixed104x83<N = void> = N extends number ? number[] : number;
declare type ufixed104x84<N = void> = N extends number ? number[] : number;
declare type ufixed104x85<N = void> = N extends number ? number[] : number;
declare type ufixed104x86<N = void> = N extends number ? number[] : number;
declare type ufixed104x87<N = void> = N extends number ? number[] : number;
declare type ufixed104x88<N = void> = N extends number ? number[] : number;
declare type ufixed104x89<N = void> = N extends number ? number[] : number;
declare type ufixed104x90<N = void> = N extends number ? number[] : number;
declare type ufixed104x91<N = void> = N extends number ? number[] : number;
declare type ufixed104x92<N = void> = N extends number ? number[] : number;
declare type ufixed104x93<N = void> = N extends number ? number[] : number;
declare type ufixed104x94<N = void> = N extends number ? number[] : number;
declare type ufixed104x95<N = void> = N extends number ? number[] : number;
declare type ufixed104x96<N = void> = N extends number ? number[] : number;
declare type ufixed104x97<N = void> = N extends number ? number[] : number;
declare type ufixed104x98<N = void> = N extends number ? number[] : number;
declare type ufixed104x99<N = void> = N extends number ? number[] : number;
declare type ufixed104x100<N = void> = N extends number ? number[] : number;
declare type ufixed104x101<N = void> = N extends number ? number[] : number;
declare type ufixed104x102<N = void> = N extends number ? number[] : number;
declare type ufixed104x103<N = void> = N extends number ? number[] : number;
declare type ufixed104x104<N = void> = N extends number ? number[] : number;
declare type ufixed104x105<N = void> = N extends number ? number[] : number;
declare type ufixed104x106<N = void> = N extends number ? number[] : number;
declare type ufixed104x107<N = void> = N extends number ? number[] : number;
declare type ufixed104x108<N = void> = N extends number ? number[] : number;
declare type ufixed104x109<N = void> = N extends number ? number[] : number;
declare type ufixed104x110<N = void> = N extends number ? number[] : number;
declare type ufixed104x111<N = void> = N extends number ? number[] : number;
declare type ufixed104x112<N = void> = N extends number ? number[] : number;
declare type ufixed104x113<N = void> = N extends number ? number[] : number;
declare type ufixed104x114<N = void> = N extends number ? number[] : number;
declare type ufixed104x115<N = void> = N extends number ? number[] : number;
declare type ufixed104x116<N = void> = N extends number ? number[] : number;
declare type ufixed104x117<N = void> = N extends number ? number[] : number;
declare type ufixed104x118<N = void> = N extends number ? number[] : number;
declare type ufixed104x119<N = void> = N extends number ? number[] : number;
declare type ufixed104x120<N = void> = N extends number ? number[] : number;
declare type ufixed104x121<N = void> = N extends number ? number[] : number;
declare type ufixed104x122<N = void> = N extends number ? number[] : number;
declare type ufixed104x123<N = void> = N extends number ? number[] : number;
declare type ufixed104x124<N = void> = N extends number ? number[] : number;
declare type ufixed104x125<N = void> = N extends number ? number[] : number;
declare type ufixed104x126<N = void> = N extends number ? number[] : number;
declare type ufixed104x127<N = void> = N extends number ? number[] : number;
declare type ufixed104x128<N = void> = N extends number ? number[] : number;
declare type ufixed104x129<N = void> = N extends number ? number[] : number;
declare type ufixed104x130<N = void> = N extends number ? number[] : number;
declare type ufixed104x131<N = void> = N extends number ? number[] : number;
declare type ufixed104x132<N = void> = N extends number ? number[] : number;
declare type ufixed104x133<N = void> = N extends number ? number[] : number;
declare type ufixed104x134<N = void> = N extends number ? number[] : number;
declare type ufixed104x135<N = void> = N extends number ? number[] : number;
declare type ufixed104x136<N = void> = N extends number ? number[] : number;
declare type ufixed104x137<N = void> = N extends number ? number[] : number;
declare type ufixed104x138<N = void> = N extends number ? number[] : number;
declare type ufixed104x139<N = void> = N extends number ? number[] : number;
declare type ufixed104x140<N = void> = N extends number ? number[] : number;
declare type ufixed104x141<N = void> = N extends number ? number[] : number;
declare type ufixed104x142<N = void> = N extends number ? number[] : number;
declare type ufixed104x143<N = void> = N extends number ? number[] : number;
declare type ufixed104x144<N = void> = N extends number ? number[] : number;
declare type ufixed104x145<N = void> = N extends number ? number[] : number;
declare type ufixed104x146<N = void> = N extends number ? number[] : number;
declare type ufixed104x147<N = void> = N extends number ? number[] : number;
declare type ufixed104x148<N = void> = N extends number ? number[] : number;
declare type ufixed104x149<N = void> = N extends number ? number[] : number;
declare type ufixed104x150<N = void> = N extends number ? number[] : number;
declare type ufixed104x151<N = void> = N extends number ? number[] : number;
declare type ufixed104x152<N = void> = N extends number ? number[] : number;
declare type ufixed104x153<N = void> = N extends number ? number[] : number;
declare type ufixed104x154<N = void> = N extends number ? number[] : number;
declare type ufixed104x155<N = void> = N extends number ? number[] : number;
declare type ufixed104x156<N = void> = N extends number ? number[] : number;
declare type ufixed104x157<N = void> = N extends number ? number[] : number;
declare type ufixed104x158<N = void> = N extends number ? number[] : number;
declare type ufixed104x159<N = void> = N extends number ? number[] : number;
declare type ufixed104x160<N = void> = N extends number ? number[] : number;
declare type ufixed112x1<N = void> = N extends number ? number[] : number;
declare type ufixed112x2<N = void> = N extends number ? number[] : number;
declare type ufixed112x3<N = void> = N extends number ? number[] : number;
declare type ufixed112x4<N = void> = N extends number ? number[] : number;
declare type ufixed112x5<N = void> = N extends number ? number[] : number;
declare type ufixed112x6<N = void> = N extends number ? number[] : number;
declare type ufixed112x7<N = void> = N extends number ? number[] : number;
declare type ufixed112x8<N = void> = N extends number ? number[] : number;
declare type ufixed112x9<N = void> = N extends number ? number[] : number;
declare type ufixed112x10<N = void> = N extends number ? number[] : number;
declare type ufixed112x11<N = void> = N extends number ? number[] : number;
declare type ufixed112x12<N = void> = N extends number ? number[] : number;
declare type ufixed112x13<N = void> = N extends number ? number[] : number;
declare type ufixed112x14<N = void> = N extends number ? number[] : number;
declare type ufixed112x15<N = void> = N extends number ? number[] : number;
declare type ufixed112x16<N = void> = N extends number ? number[] : number;
declare type ufixed112x17<N = void> = N extends number ? number[] : number;
declare type ufixed112x18<N = void> = N extends number ? number[] : number;
declare type ufixed112x19<N = void> = N extends number ? number[] : number;
declare type ufixed112x20<N = void> = N extends number ? number[] : number;
declare type ufixed112x21<N = void> = N extends number ? number[] : number;
declare type ufixed112x22<N = void> = N extends number ? number[] : number;
declare type ufixed112x23<N = void> = N extends number ? number[] : number;
declare type ufixed112x24<N = void> = N extends number ? number[] : number;
declare type ufixed112x25<N = void> = N extends number ? number[] : number;
declare type ufixed112x26<N = void> = N extends number ? number[] : number;
declare type ufixed112x27<N = void> = N extends number ? number[] : number;
declare type ufixed112x28<N = void> = N extends number ? number[] : number;
declare type ufixed112x29<N = void> = N extends number ? number[] : number;
declare type ufixed112x30<N = void> = N extends number ? number[] : number;
declare type ufixed112x31<N = void> = N extends number ? number[] : number;
declare type ufixed112x32<N = void> = N extends number ? number[] : number;
declare type ufixed112x33<N = void> = N extends number ? number[] : number;
declare type ufixed112x34<N = void> = N extends number ? number[] : number;
declare type ufixed112x35<N = void> = N extends number ? number[] : number;
declare type ufixed112x36<N = void> = N extends number ? number[] : number;
declare type ufixed112x37<N = void> = N extends number ? number[] : number;
declare type ufixed112x38<N = void> = N extends number ? number[] : number;
declare type ufixed112x39<N = void> = N extends number ? number[] : number;
declare type ufixed112x40<N = void> = N extends number ? number[] : number;
declare type ufixed112x41<N = void> = N extends number ? number[] : number;
declare type ufixed112x42<N = void> = N extends number ? number[] : number;
declare type ufixed112x43<N = void> = N extends number ? number[] : number;
declare type ufixed112x44<N = void> = N extends number ? number[] : number;
declare type ufixed112x45<N = void> = N extends number ? number[] : number;
declare type ufixed112x46<N = void> = N extends number ? number[] : number;
declare type ufixed112x47<N = void> = N extends number ? number[] : number;
declare type ufixed112x48<N = void> = N extends number ? number[] : number;
declare type ufixed112x49<N = void> = N extends number ? number[] : number;
declare type ufixed112x50<N = void> = N extends number ? number[] : number;
declare type ufixed112x51<N = void> = N extends number ? number[] : number;
declare type ufixed112x52<N = void> = N extends number ? number[] : number;
declare type ufixed112x53<N = void> = N extends number ? number[] : number;
declare type ufixed112x54<N = void> = N extends number ? number[] : number;
declare type ufixed112x55<N = void> = N extends number ? number[] : number;
declare type ufixed112x56<N = void> = N extends number ? number[] : number;
declare type ufixed112x57<N = void> = N extends number ? number[] : number;
declare type ufixed112x58<N = void> = N extends number ? number[] : number;
declare type ufixed112x59<N = void> = N extends number ? number[] : number;
declare type ufixed112x60<N = void> = N extends number ? number[] : number;
declare type ufixed112x61<N = void> = N extends number ? number[] : number;
declare type ufixed112x62<N = void> = N extends number ? number[] : number;
declare type ufixed112x63<N = void> = N extends number ? number[] : number;
declare type ufixed112x64<N = void> = N extends number ? number[] : number;
declare type ufixed112x65<N = void> = N extends number ? number[] : number;
declare type ufixed112x66<N = void> = N extends number ? number[] : number;
declare type ufixed112x67<N = void> = N extends number ? number[] : number;
declare type ufixed112x68<N = void> = N extends number ? number[] : number;
declare type ufixed112x69<N = void> = N extends number ? number[] : number;
declare type ufixed112x70<N = void> = N extends number ? number[] : number;
declare type ufixed112x71<N = void> = N extends number ? number[] : number;
declare type ufixed112x72<N = void> = N extends number ? number[] : number;
declare type ufixed112x73<N = void> = N extends number ? number[] : number;
declare type ufixed112x74<N = void> = N extends number ? number[] : number;
declare type ufixed112x75<N = void> = N extends number ? number[] : number;
declare type ufixed112x76<N = void> = N extends number ? number[] : number;
declare type ufixed112x77<N = void> = N extends number ? number[] : number;
declare type ufixed112x78<N = void> = N extends number ? number[] : number;
declare type ufixed112x79<N = void> = N extends number ? number[] : number;
declare type ufixed112x80<N = void> = N extends number ? number[] : number;
declare type ufixed112x81<N = void> = N extends number ? number[] : number;
declare type ufixed112x82<N = void> = N extends number ? number[] : number;
declare type ufixed112x83<N = void> = N extends number ? number[] : number;
declare type ufixed112x84<N = void> = N extends number ? number[] : number;
declare type ufixed112x85<N = void> = N extends number ? number[] : number;
declare type ufixed112x86<N = void> = N extends number ? number[] : number;
declare type ufixed112x87<N = void> = N extends number ? number[] : number;
declare type ufixed112x88<N = void> = N extends number ? number[] : number;
declare type ufixed112x89<N = void> = N extends number ? number[] : number;
declare type ufixed112x90<N = void> = N extends number ? number[] : number;
declare type ufixed112x91<N = void> = N extends number ? number[] : number;
declare type ufixed112x92<N = void> = N extends number ? number[] : number;
declare type ufixed112x93<N = void> = N extends number ? number[] : number;
declare type ufixed112x94<N = void> = N extends number ? number[] : number;
declare type ufixed112x95<N = void> = N extends number ? number[] : number;
declare type ufixed112x96<N = void> = N extends number ? number[] : number;
declare type ufixed112x97<N = void> = N extends number ? number[] : number;
declare type ufixed112x98<N = void> = N extends number ? number[] : number;
declare type ufixed112x99<N = void> = N extends number ? number[] : number;
declare type ufixed112x100<N = void> = N extends number ? number[] : number;
declare type ufixed112x101<N = void> = N extends number ? number[] : number;
declare type ufixed112x102<N = void> = N extends number ? number[] : number;
declare type ufixed112x103<N = void> = N extends number ? number[] : number;
declare type ufixed112x104<N = void> = N extends number ? number[] : number;
declare type ufixed112x105<N = void> = N extends number ? number[] : number;
declare type ufixed112x106<N = void> = N extends number ? number[] : number;
declare type ufixed112x107<N = void> = N extends number ? number[] : number;
declare type ufixed112x108<N = void> = N extends number ? number[] : number;
declare type ufixed112x109<N = void> = N extends number ? number[] : number;
declare type ufixed112x110<N = void> = N extends number ? number[] : number;
declare type ufixed112x111<N = void> = N extends number ? number[] : number;
declare type ufixed112x112<N = void> = N extends number ? number[] : number;
declare type ufixed112x113<N = void> = N extends number ? number[] : number;
declare type ufixed112x114<N = void> = N extends number ? number[] : number;
declare type ufixed112x115<N = void> = N extends number ? number[] : number;
declare type ufixed112x116<N = void> = N extends number ? number[] : number;
declare type ufixed112x117<N = void> = N extends number ? number[] : number;
declare type ufixed112x118<N = void> = N extends number ? number[] : number;
declare type ufixed112x119<N = void> = N extends number ? number[] : number;
declare type ufixed112x120<N = void> = N extends number ? number[] : number;
declare type ufixed112x121<N = void> = N extends number ? number[] : number;
declare type ufixed112x122<N = void> = N extends number ? number[] : number;
declare type ufixed112x123<N = void> = N extends number ? number[] : number;
declare type ufixed112x124<N = void> = N extends number ? number[] : number;
declare type ufixed112x125<N = void> = N extends number ? number[] : number;
declare type ufixed112x126<N = void> = N extends number ? number[] : number;
declare type ufixed112x127<N = void> = N extends number ? number[] : number;
declare type ufixed112x128<N = void> = N extends number ? number[] : number;
declare type ufixed112x129<N = void> = N extends number ? number[] : number;
declare type ufixed112x130<N = void> = N extends number ? number[] : number;
declare type ufixed112x131<N = void> = N extends number ? number[] : number;
declare type ufixed112x132<N = void> = N extends number ? number[] : number;
declare type ufixed112x133<N = void> = N extends number ? number[] : number;
declare type ufixed112x134<N = void> = N extends number ? number[] : number;
declare type ufixed112x135<N = void> = N extends number ? number[] : number;
declare type ufixed112x136<N = void> = N extends number ? number[] : number;
declare type ufixed112x137<N = void> = N extends number ? number[] : number;
declare type ufixed112x138<N = void> = N extends number ? number[] : number;
declare type ufixed112x139<N = void> = N extends number ? number[] : number;
declare type ufixed112x140<N = void> = N extends number ? number[] : number;
declare type ufixed112x141<N = void> = N extends number ? number[] : number;
declare type ufixed112x142<N = void> = N extends number ? number[] : number;
declare type ufixed112x143<N = void> = N extends number ? number[] : number;
declare type ufixed112x144<N = void> = N extends number ? number[] : number;
declare type ufixed112x145<N = void> = N extends number ? number[] : number;
declare type ufixed112x146<N = void> = N extends number ? number[] : number;
declare type ufixed112x147<N = void> = N extends number ? number[] : number;
declare type ufixed112x148<N = void> = N extends number ? number[] : number;
declare type ufixed112x149<N = void> = N extends number ? number[] : number;
declare type ufixed112x150<N = void> = N extends number ? number[] : number;
declare type ufixed112x151<N = void> = N extends number ? number[] : number;
declare type ufixed112x152<N = void> = N extends number ? number[] : number;
declare type ufixed112x153<N = void> = N extends number ? number[] : number;
declare type ufixed112x154<N = void> = N extends number ? number[] : number;
declare type ufixed112x155<N = void> = N extends number ? number[] : number;
declare type ufixed112x156<N = void> = N extends number ? number[] : number;
declare type ufixed112x157<N = void> = N extends number ? number[] : number;
declare type ufixed112x158<N = void> = N extends number ? number[] : number;
declare type ufixed112x159<N = void> = N extends number ? number[] : number;
declare type ufixed112x160<N = void> = N extends number ? number[] : number;
declare type ufixed120x1<N = void> = N extends number ? number[] : number;
declare type ufixed120x2<N = void> = N extends number ? number[] : number;
declare type ufixed120x3<N = void> = N extends number ? number[] : number;
declare type ufixed120x4<N = void> = N extends number ? number[] : number;
declare type ufixed120x5<N = void> = N extends number ? number[] : number;
declare type ufixed120x6<N = void> = N extends number ? number[] : number;
declare type ufixed120x7<N = void> = N extends number ? number[] : number;
declare type ufixed120x8<N = void> = N extends number ? number[] : number;
declare type ufixed120x9<N = void> = N extends number ? number[] : number;
declare type ufixed120x10<N = void> = N extends number ? number[] : number;
declare type ufixed120x11<N = void> = N extends number ? number[] : number;
declare type ufixed120x12<N = void> = N extends number ? number[] : number;
declare type ufixed120x13<N = void> = N extends number ? number[] : number;
declare type ufixed120x14<N = void> = N extends number ? number[] : number;
declare type ufixed120x15<N = void> = N extends number ? number[] : number;
declare type ufixed120x16<N = void> = N extends number ? number[] : number;
declare type ufixed120x17<N = void> = N extends number ? number[] : number;
declare type ufixed120x18<N = void> = N extends number ? number[] : number;
declare type ufixed120x19<N = void> = N extends number ? number[] : number;
declare type ufixed120x20<N = void> = N extends number ? number[] : number;
declare type ufixed120x21<N = void> = N extends number ? number[] : number;
declare type ufixed120x22<N = void> = N extends number ? number[] : number;
declare type ufixed120x23<N = void> = N extends number ? number[] : number;
declare type ufixed120x24<N = void> = N extends number ? number[] : number;
declare type ufixed120x25<N = void> = N extends number ? number[] : number;
declare type ufixed120x26<N = void> = N extends number ? number[] : number;
declare type ufixed120x27<N = void> = N extends number ? number[] : number;
declare type ufixed120x28<N = void> = N extends number ? number[] : number;
declare type ufixed120x29<N = void> = N extends number ? number[] : number;
declare type ufixed120x30<N = void> = N extends number ? number[] : number;
declare type ufixed120x31<N = void> = N extends number ? number[] : number;
declare type ufixed120x32<N = void> = N extends number ? number[] : number;
declare type ufixed120x33<N = void> = N extends number ? number[] : number;
declare type ufixed120x34<N = void> = N extends number ? number[] : number;
declare type ufixed120x35<N = void> = N extends number ? number[] : number;
declare type ufixed120x36<N = void> = N extends number ? number[] : number;
declare type ufixed120x37<N = void> = N extends number ? number[] : number;
declare type ufixed120x38<N = void> = N extends number ? number[] : number;
declare type ufixed120x39<N = void> = N extends number ? number[] : number;
declare type ufixed120x40<N = void> = N extends number ? number[] : number;
declare type ufixed120x41<N = void> = N extends number ? number[] : number;
declare type ufixed120x42<N = void> = N extends number ? number[] : number;
declare type ufixed120x43<N = void> = N extends number ? number[] : number;
declare type ufixed120x44<N = void> = N extends number ? number[] : number;
declare type ufixed120x45<N = void> = N extends number ? number[] : number;
declare type ufixed120x46<N = void> = N extends number ? number[] : number;
declare type ufixed120x47<N = void> = N extends number ? number[] : number;
declare type ufixed120x48<N = void> = N extends number ? number[] : number;
declare type ufixed120x49<N = void> = N extends number ? number[] : number;
declare type ufixed120x50<N = void> = N extends number ? number[] : number;
declare type ufixed120x51<N = void> = N extends number ? number[] : number;
declare type ufixed120x52<N = void> = N extends number ? number[] : number;
declare type ufixed120x53<N = void> = N extends number ? number[] : number;
declare type ufixed120x54<N = void> = N extends number ? number[] : number;
declare type ufixed120x55<N = void> = N extends number ? number[] : number;
declare type ufixed120x56<N = void> = N extends number ? number[] : number;
declare type ufixed120x57<N = void> = N extends number ? number[] : number;
declare type ufixed120x58<N = void> = N extends number ? number[] : number;
declare type ufixed120x59<N = void> = N extends number ? number[] : number;
declare type ufixed120x60<N = void> = N extends number ? number[] : number;
declare type ufixed120x61<N = void> = N extends number ? number[] : number;
declare type ufixed120x62<N = void> = N extends number ? number[] : number;
declare type ufixed120x63<N = void> = N extends number ? number[] : number;
declare type ufixed120x64<N = void> = N extends number ? number[] : number;
declare type ufixed120x65<N = void> = N extends number ? number[] : number;
declare type ufixed120x66<N = void> = N extends number ? number[] : number;
declare type ufixed120x67<N = void> = N extends number ? number[] : number;
declare type ufixed120x68<N = void> = N extends number ? number[] : number;
declare type ufixed120x69<N = void> = N extends number ? number[] : number;
declare type ufixed120x70<N = void> = N extends number ? number[] : number;
declare type ufixed120x71<N = void> = N extends number ? number[] : number;
declare type ufixed120x72<N = void> = N extends number ? number[] : number;
declare type ufixed120x73<N = void> = N extends number ? number[] : number;
declare type ufixed120x74<N = void> = N extends number ? number[] : number;
declare type ufixed120x75<N = void> = N extends number ? number[] : number;
declare type ufixed120x76<N = void> = N extends number ? number[] : number;
declare type ufixed120x77<N = void> = N extends number ? number[] : number;
declare type ufixed120x78<N = void> = N extends number ? number[] : number;
declare type ufixed120x79<N = void> = N extends number ? number[] : number;
declare type ufixed120x80<N = void> = N extends number ? number[] : number;
declare type ufixed120x81<N = void> = N extends number ? number[] : number;
declare type ufixed120x82<N = void> = N extends number ? number[] : number;
declare type ufixed120x83<N = void> = N extends number ? number[] : number;
declare type ufixed120x84<N = void> = N extends number ? number[] : number;
declare type ufixed120x85<N = void> = N extends number ? number[] : number;
declare type ufixed120x86<N = void> = N extends number ? number[] : number;
declare type ufixed120x87<N = void> = N extends number ? number[] : number;
declare type ufixed120x88<N = void> = N extends number ? number[] : number;
declare type ufixed120x89<N = void> = N extends number ? number[] : number;
declare type ufixed120x90<N = void> = N extends number ? number[] : number;
declare type ufixed120x91<N = void> = N extends number ? number[] : number;
declare type ufixed120x92<N = void> = N extends number ? number[] : number;
declare type ufixed120x93<N = void> = N extends number ? number[] : number;
declare type ufixed120x94<N = void> = N extends number ? number[] : number;
declare type ufixed120x95<N = void> = N extends number ? number[] : number;
declare type ufixed120x96<N = void> = N extends number ? number[] : number;
declare type ufixed120x97<N = void> = N extends number ? number[] : number;
declare type ufixed120x98<N = void> = N extends number ? number[] : number;
declare type ufixed120x99<N = void> = N extends number ? number[] : number;
declare type ufixed120x100<N = void> = N extends number ? number[] : number;
declare type ufixed120x101<N = void> = N extends number ? number[] : number;
declare type ufixed120x102<N = void> = N extends number ? number[] : number;
declare type ufixed120x103<N = void> = N extends number ? number[] : number;
declare type ufixed120x104<N = void> = N extends number ? number[] : number;
declare type ufixed120x105<N = void> = N extends number ? number[] : number;
declare type ufixed120x106<N = void> = N extends number ? number[] : number;
declare type ufixed120x107<N = void> = N extends number ? number[] : number;
declare type ufixed120x108<N = void> = N extends number ? number[] : number;
declare type ufixed120x109<N = void> = N extends number ? number[] : number;
declare type ufixed120x110<N = void> = N extends number ? number[] : number;
declare type ufixed120x111<N = void> = N extends number ? number[] : number;
declare type ufixed120x112<N = void> = N extends number ? number[] : number;
declare type ufixed120x113<N = void> = N extends number ? number[] : number;
declare type ufixed120x114<N = void> = N extends number ? number[] : number;
declare type ufixed120x115<N = void> = N extends number ? number[] : number;
declare type ufixed120x116<N = void> = N extends number ? number[] : number;
declare type ufixed120x117<N = void> = N extends number ? number[] : number;
declare type ufixed120x118<N = void> = N extends number ? number[] : number;
declare type ufixed120x119<N = void> = N extends number ? number[] : number;
declare type ufixed120x120<N = void> = N extends number ? number[] : number;
declare type ufixed120x121<N = void> = N extends number ? number[] : number;
declare type ufixed120x122<N = void> = N extends number ? number[] : number;
declare type ufixed120x123<N = void> = N extends number ? number[] : number;
declare type ufixed120x124<N = void> = N extends number ? number[] : number;
declare type ufixed120x125<N = void> = N extends number ? number[] : number;
declare type ufixed120x126<N = void> = N extends number ? number[] : number;
declare type ufixed120x127<N = void> = N extends number ? number[] : number;
declare type ufixed120x128<N = void> = N extends number ? number[] : number;
declare type ufixed120x129<N = void> = N extends number ? number[] : number;
declare type ufixed120x130<N = void> = N extends number ? number[] : number;
declare type ufixed120x131<N = void> = N extends number ? number[] : number;
declare type ufixed120x132<N = void> = N extends number ? number[] : number;
declare type ufixed120x133<N = void> = N extends number ? number[] : number;
declare type ufixed120x134<N = void> = N extends number ? number[] : number;
declare type ufixed120x135<N = void> = N extends number ? number[] : number;
declare type ufixed120x136<N = void> = N extends number ? number[] : number;
declare type ufixed120x137<N = void> = N extends number ? number[] : number;
declare type ufixed120x138<N = void> = N extends number ? number[] : number;
declare type ufixed120x139<N = void> = N extends number ? number[] : number;
declare type ufixed120x140<N = void> = N extends number ? number[] : number;
declare type ufixed120x141<N = void> = N extends number ? number[] : number;
declare type ufixed120x142<N = void> = N extends number ? number[] : number;
declare type ufixed120x143<N = void> = N extends number ? number[] : number;
declare type ufixed120x144<N = void> = N extends number ? number[] : number;
declare type ufixed120x145<N = void> = N extends number ? number[] : number;
declare type ufixed120x146<N = void> = N extends number ? number[] : number;
declare type ufixed120x147<N = void> = N extends number ? number[] : number;
declare type ufixed120x148<N = void> = N extends number ? number[] : number;
declare type ufixed120x149<N = void> = N extends number ? number[] : number;
declare type ufixed120x150<N = void> = N extends number ? number[] : number;
declare type ufixed120x151<N = void> = N extends number ? number[] : number;
declare type ufixed120x152<N = void> = N extends number ? number[] : number;
declare type ufixed120x153<N = void> = N extends number ? number[] : number;
declare type ufixed120x154<N = void> = N extends number ? number[] : number;
declare type ufixed120x155<N = void> = N extends number ? number[] : number;
declare type ufixed120x156<N = void> = N extends number ? number[] : number;
declare type ufixed120x157<N = void> = N extends number ? number[] : number;
declare type ufixed120x158<N = void> = N extends number ? number[] : number;
declare type ufixed120x159<N = void> = N extends number ? number[] : number;
declare type ufixed120x160<N = void> = N extends number ? number[] : number;
declare type ufixed128x1<N = void> = N extends number ? number[] : number;
declare type ufixed128x2<N = void> = N extends number ? number[] : number;
declare type ufixed128x3<N = void> = N extends number ? number[] : number;
declare type ufixed128x4<N = void> = N extends number ? number[] : number;
declare type ufixed128x5<N = void> = N extends number ? number[] : number;
declare type ufixed128x6<N = void> = N extends number ? number[] : number;
declare type ufixed128x7<N = void> = N extends number ? number[] : number;
declare type ufixed128x8<N = void> = N extends number ? number[] : number;
declare type ufixed128x9<N = void> = N extends number ? number[] : number;
declare type ufixed128x10<N = void> = N extends number ? number[] : number;
declare type ufixed128x11<N = void> = N extends number ? number[] : number;
declare type ufixed128x12<N = void> = N extends number ? number[] : number;
declare type ufixed128x13<N = void> = N extends number ? number[] : number;
declare type ufixed128x14<N = void> = N extends number ? number[] : number;
declare type ufixed128x15<N = void> = N extends number ? number[] : number;
declare type ufixed128x16<N = void> = N extends number ? number[] : number;
declare type ufixed128x17<N = void> = N extends number ? number[] : number;
declare type ufixed128x18<N = void> = N extends number ? number[] : number;
declare type ufixed128x19<N = void> = N extends number ? number[] : number;
declare type ufixed128x20<N = void> = N extends number ? number[] : number;
declare type ufixed128x21<N = void> = N extends number ? number[] : number;
declare type ufixed128x22<N = void> = N extends number ? number[] : number;
declare type ufixed128x23<N = void> = N extends number ? number[] : number;
declare type ufixed128x24<N = void> = N extends number ? number[] : number;
declare type ufixed128x25<N = void> = N extends number ? number[] : number;
declare type ufixed128x26<N = void> = N extends number ? number[] : number;
declare type ufixed128x27<N = void> = N extends number ? number[] : number;
declare type ufixed128x28<N = void> = N extends number ? number[] : number;
declare type ufixed128x29<N = void> = N extends number ? number[] : number;
declare type ufixed128x30<N = void> = N extends number ? number[] : number;
declare type ufixed128x31<N = void> = N extends number ? number[] : number;
declare type ufixed128x32<N = void> = N extends number ? number[] : number;
declare type ufixed128x33<N = void> = N extends number ? number[] : number;
declare type ufixed128x34<N = void> = N extends number ? number[] : number;
declare type ufixed128x35<N = void> = N extends number ? number[] : number;
declare type ufixed128x36<N = void> = N extends number ? number[] : number;
declare type ufixed128x37<N = void> = N extends number ? number[] : number;
declare type ufixed128x38<N = void> = N extends number ? number[] : number;
declare type ufixed128x39<N = void> = N extends number ? number[] : number;
declare type ufixed128x40<N = void> = N extends number ? number[] : number;
declare type ufixed128x41<N = void> = N extends number ? number[] : number;
declare type ufixed128x42<N = void> = N extends number ? number[] : number;
declare type ufixed128x43<N = void> = N extends number ? number[] : number;
declare type ufixed128x44<N = void> = N extends number ? number[] : number;
declare type ufixed128x45<N = void> = N extends number ? number[] : number;
declare type ufixed128x46<N = void> = N extends number ? number[] : number;
declare type ufixed128x47<N = void> = N extends number ? number[] : number;
declare type ufixed128x48<N = void> = N extends number ? number[] : number;
declare type ufixed128x49<N = void> = N extends number ? number[] : number;
declare type ufixed128x50<N = void> = N extends number ? number[] : number;
declare type ufixed128x51<N = void> = N extends number ? number[] : number;
declare type ufixed128x52<N = void> = N extends number ? number[] : number;
declare type ufixed128x53<N = void> = N extends number ? number[] : number;
declare type ufixed128x54<N = void> = N extends number ? number[] : number;
declare type ufixed128x55<N = void> = N extends number ? number[] : number;
declare type ufixed128x56<N = void> = N extends number ? number[] : number;
declare type ufixed128x57<N = void> = N extends number ? number[] : number;
declare type ufixed128x58<N = void> = N extends number ? number[] : number;
declare type ufixed128x59<N = void> = N extends number ? number[] : number;
declare type ufixed128x60<N = void> = N extends number ? number[] : number;
declare type ufixed128x61<N = void> = N extends number ? number[] : number;
declare type ufixed128x62<N = void> = N extends number ? number[] : number;
declare type ufixed128x63<N = void> = N extends number ? number[] : number;
declare type ufixed128x64<N = void> = N extends number ? number[] : number;
declare type ufixed128x65<N = void> = N extends number ? number[] : number;
declare type ufixed128x66<N = void> = N extends number ? number[] : number;
declare type ufixed128x67<N = void> = N extends number ? number[] : number;
declare type ufixed128x68<N = void> = N extends number ? number[] : number;
declare type ufixed128x69<N = void> = N extends number ? number[] : number;
declare type ufixed128x70<N = void> = N extends number ? number[] : number;
declare type ufixed128x71<N = void> = N extends number ? number[] : number;
declare type ufixed128x72<N = void> = N extends number ? number[] : number;
declare type ufixed128x73<N = void> = N extends number ? number[] : number;
declare type ufixed128x74<N = void> = N extends number ? number[] : number;
declare type ufixed128x75<N = void> = N extends number ? number[] : number;
declare type ufixed128x76<N = void> = N extends number ? number[] : number;
declare type ufixed128x77<N = void> = N extends number ? number[] : number;
declare type ufixed128x78<N = void> = N extends number ? number[] : number;
declare type ufixed128x79<N = void> = N extends number ? number[] : number;
declare type ufixed128x80<N = void> = N extends number ? number[] : number;
declare type ufixed128x81<N = void> = N extends number ? number[] : number;
declare type ufixed128x82<N = void> = N extends number ? number[] : number;
declare type ufixed128x83<N = void> = N extends number ? number[] : number;
declare type ufixed128x84<N = void> = N extends number ? number[] : number;
declare type ufixed128x85<N = void> = N extends number ? number[] : number;
declare type ufixed128x86<N = void> = N extends number ? number[] : number;
declare type ufixed128x87<N = void> = N extends number ? number[] : number;
declare type ufixed128x88<N = void> = N extends number ? number[] : number;
declare type ufixed128x89<N = void> = N extends number ? number[] : number;
declare type ufixed128x90<N = void> = N extends number ? number[] : number;
declare type ufixed128x91<N = void> = N extends number ? number[] : number;
declare type ufixed128x92<N = void> = N extends number ? number[] : number;
declare type ufixed128x93<N = void> = N extends number ? number[] : number;
declare type ufixed128x94<N = void> = N extends number ? number[] : number;
declare type ufixed128x95<N = void> = N extends number ? number[] : number;
declare type ufixed128x96<N = void> = N extends number ? number[] : number;
declare type ufixed128x97<N = void> = N extends number ? number[] : number;
declare type ufixed128x98<N = void> = N extends number ? number[] : number;
declare type ufixed128x99<N = void> = N extends number ? number[] : number;
declare type ufixed128x100<N = void> = N extends number ? number[] : number;
declare type ufixed128x101<N = void> = N extends number ? number[] : number;
declare type ufixed128x102<N = void> = N extends number ? number[] : number;
declare type ufixed128x103<N = void> = N extends number ? number[] : number;
declare type ufixed128x104<N = void> = N extends number ? number[] : number;
declare type ufixed128x105<N = void> = N extends number ? number[] : number;
declare type ufixed128x106<N = void> = N extends number ? number[] : number;
declare type ufixed128x107<N = void> = N extends number ? number[] : number;
declare type ufixed128x108<N = void> = N extends number ? number[] : number;
declare type ufixed128x109<N = void> = N extends number ? number[] : number;
declare type ufixed128x110<N = void> = N extends number ? number[] : number;
declare type ufixed128x111<N = void> = N extends number ? number[] : number;
declare type ufixed128x112<N = void> = N extends number ? number[] : number;
declare type ufixed128x113<N = void> = N extends number ? number[] : number;
declare type ufixed128x114<N = void> = N extends number ? number[] : number;
declare type ufixed128x115<N = void> = N extends number ? number[] : number;
declare type ufixed128x116<N = void> = N extends number ? number[] : number;
declare type ufixed128x117<N = void> = N extends number ? number[] : number;
declare type ufixed128x118<N = void> = N extends number ? number[] : number;
declare type ufixed128x119<N = void> = N extends number ? number[] : number;
declare type ufixed128x120<N = void> = N extends number ? number[] : number;
declare type ufixed128x121<N = void> = N extends number ? number[] : number;
declare type ufixed128x122<N = void> = N extends number ? number[] : number;
declare type ufixed128x123<N = void> = N extends number ? number[] : number;
declare type ufixed128x124<N = void> = N extends number ? number[] : number;
declare type ufixed128x125<N = void> = N extends number ? number[] : number;
declare type ufixed128x126<N = void> = N extends number ? number[] : number;
declare type ufixed128x127<N = void> = N extends number ? number[] : number;
declare type ufixed128x128<N = void> = N extends number ? number[] : number;
declare type ufixed128x129<N = void> = N extends number ? number[] : number;
declare type ufixed128x130<N = void> = N extends number ? number[] : number;
declare type ufixed128x131<N = void> = N extends number ? number[] : number;
declare type ufixed128x132<N = void> = N extends number ? number[] : number;
declare type ufixed128x133<N = void> = N extends number ? number[] : number;
declare type ufixed128x134<N = void> = N extends number ? number[] : number;
declare type ufixed128x135<N = void> = N extends number ? number[] : number;
declare type ufixed128x136<N = void> = N extends number ? number[] : number;
declare type ufixed128x137<N = void> = N extends number ? number[] : number;
declare type ufixed128x138<N = void> = N extends number ? number[] : number;
declare type ufixed128x139<N = void> = N extends number ? number[] : number;
declare type ufixed128x140<N = void> = N extends number ? number[] : number;
declare type ufixed128x141<N = void> = N extends number ? number[] : number;
declare type ufixed128x142<N = void> = N extends number ? number[] : number;
declare type ufixed128x143<N = void> = N extends number ? number[] : number;
declare type ufixed128x144<N = void> = N extends number ? number[] : number;
declare type ufixed128x145<N = void> = N extends number ? number[] : number;
declare type ufixed128x146<N = void> = N extends number ? number[] : number;
declare type ufixed128x147<N = void> = N extends number ? number[] : number;
declare type ufixed128x148<N = void> = N extends number ? number[] : number;
declare type ufixed128x149<N = void> = N extends number ? number[] : number;
declare type ufixed128x150<N = void> = N extends number ? number[] : number;
declare type ufixed128x151<N = void> = N extends number ? number[] : number;
declare type ufixed128x152<N = void> = N extends number ? number[] : number;
declare type ufixed128x153<N = void> = N extends number ? number[] : number;
declare type ufixed128x154<N = void> = N extends number ? number[] : number;
declare type ufixed128x155<N = void> = N extends number ? number[] : number;
declare type ufixed128x156<N = void> = N extends number ? number[] : number;
declare type ufixed128x157<N = void> = N extends number ? number[] : number;
declare type ufixed128x158<N = void> = N extends number ? number[] : number;
declare type ufixed128x159<N = void> = N extends number ? number[] : number;
declare type ufixed128x160<N = void> = N extends number ? number[] : number;
declare type ufixed136x1<N = void> = N extends number ? number[] : number;
declare type ufixed136x2<N = void> = N extends number ? number[] : number;
declare type ufixed136x3<N = void> = N extends number ? number[] : number;
declare type ufixed136x4<N = void> = N extends number ? number[] : number;
declare type ufixed136x5<N = void> = N extends number ? number[] : number;
declare type ufixed136x6<N = void> = N extends number ? number[] : number;
declare type ufixed136x7<N = void> = N extends number ? number[] : number;
declare type ufixed136x8<N = void> = N extends number ? number[] : number;
declare type ufixed136x9<N = void> = N extends number ? number[] : number;
declare type ufixed136x10<N = void> = N extends number ? number[] : number;
declare type ufixed136x11<N = void> = N extends number ? number[] : number;
declare type ufixed136x12<N = void> = N extends number ? number[] : number;
declare type ufixed136x13<N = void> = N extends number ? number[] : number;
declare type ufixed136x14<N = void> = N extends number ? number[] : number;
declare type ufixed136x15<N = void> = N extends number ? number[] : number;
declare type ufixed136x16<N = void> = N extends number ? number[] : number;
declare type ufixed136x17<N = void> = N extends number ? number[] : number;
declare type ufixed136x18<N = void> = N extends number ? number[] : number;
declare type ufixed136x19<N = void> = N extends number ? number[] : number;
declare type ufixed136x20<N = void> = N extends number ? number[] : number;
declare type ufixed136x21<N = void> = N extends number ? number[] : number;
declare type ufixed136x22<N = void> = N extends number ? number[] : number;
declare type ufixed136x23<N = void> = N extends number ? number[] : number;
declare type ufixed136x24<N = void> = N extends number ? number[] : number;
declare type ufixed136x25<N = void> = N extends number ? number[] : number;
declare type ufixed136x26<N = void> = N extends number ? number[] : number;
declare type ufixed136x27<N = void> = N extends number ? number[] : number;
declare type ufixed136x28<N = void> = N extends number ? number[] : number;
declare type ufixed136x29<N = void> = N extends number ? number[] : number;
declare type ufixed136x30<N = void> = N extends number ? number[] : number;
declare type ufixed136x31<N = void> = N extends number ? number[] : number;
declare type ufixed136x32<N = void> = N extends number ? number[] : number;
declare type ufixed136x33<N = void> = N extends number ? number[] : number;
declare type ufixed136x34<N = void> = N extends number ? number[] : number;
declare type ufixed136x35<N = void> = N extends number ? number[] : number;
declare type ufixed136x36<N = void> = N extends number ? number[] : number;
declare type ufixed136x37<N = void> = N extends number ? number[] : number;
declare type ufixed136x38<N = void> = N extends number ? number[] : number;
declare type ufixed136x39<N = void> = N extends number ? number[] : number;
declare type ufixed136x40<N = void> = N extends number ? number[] : number;
declare type ufixed136x41<N = void> = N extends number ? number[] : number;
declare type ufixed136x42<N = void> = N extends number ? number[] : number;
declare type ufixed136x43<N = void> = N extends number ? number[] : number;
declare type ufixed136x44<N = void> = N extends number ? number[] : number;
declare type ufixed136x45<N = void> = N extends number ? number[] : number;
declare type ufixed136x46<N = void> = N extends number ? number[] : number;
declare type ufixed136x47<N = void> = N extends number ? number[] : number;
declare type ufixed136x48<N = void> = N extends number ? number[] : number;
declare type ufixed136x49<N = void> = N extends number ? number[] : number;
declare type ufixed136x50<N = void> = N extends number ? number[] : number;
declare type ufixed136x51<N = void> = N extends number ? number[] : number;
declare type ufixed136x52<N = void> = N extends number ? number[] : number;
declare type ufixed136x53<N = void> = N extends number ? number[] : number;
declare type ufixed136x54<N = void> = N extends number ? number[] : number;
declare type ufixed136x55<N = void> = N extends number ? number[] : number;
declare type ufixed136x56<N = void> = N extends number ? number[] : number;
declare type ufixed136x57<N = void> = N extends number ? number[] : number;
declare type ufixed136x58<N = void> = N extends number ? number[] : number;
declare type ufixed136x59<N = void> = N extends number ? number[] : number;
declare type ufixed136x60<N = void> = N extends number ? number[] : number;
declare type ufixed136x61<N = void> = N extends number ? number[] : number;
declare type ufixed136x62<N = void> = N extends number ? number[] : number;
declare type ufixed136x63<N = void> = N extends number ? number[] : number;
declare type ufixed136x64<N = void> = N extends number ? number[] : number;
declare type ufixed136x65<N = void> = N extends number ? number[] : number;
declare type ufixed136x66<N = void> = N extends number ? number[] : number;
declare type ufixed136x67<N = void> = N extends number ? number[] : number;
declare type ufixed136x68<N = void> = N extends number ? number[] : number;
declare type ufixed136x69<N = void> = N extends number ? number[] : number;
declare type ufixed136x70<N = void> = N extends number ? number[] : number;
declare type ufixed136x71<N = void> = N extends number ? number[] : number;
declare type ufixed136x72<N = void> = N extends number ? number[] : number;
declare type ufixed136x73<N = void> = N extends number ? number[] : number;
declare type ufixed136x74<N = void> = N extends number ? number[] : number;
declare type ufixed136x75<N = void> = N extends number ? number[] : number;
declare type ufixed136x76<N = void> = N extends number ? number[] : number;
declare type ufixed136x77<N = void> = N extends number ? number[] : number;
declare type ufixed136x78<N = void> = N extends number ? number[] : number;
declare type ufixed136x79<N = void> = N extends number ? number[] : number;
declare type ufixed136x80<N = void> = N extends number ? number[] : number;
declare type ufixed136x81<N = void> = N extends number ? number[] : number;
declare type ufixed136x82<N = void> = N extends number ? number[] : number;
declare type ufixed136x83<N = void> = N extends number ? number[] : number;
declare type ufixed136x84<N = void> = N extends number ? number[] : number;
declare type ufixed136x85<N = void> = N extends number ? number[] : number;
declare type ufixed136x86<N = void> = N extends number ? number[] : number;
declare type ufixed136x87<N = void> = N extends number ? number[] : number;
declare type ufixed136x88<N = void> = N extends number ? number[] : number;
declare type ufixed136x89<N = void> = N extends number ? number[] : number;
declare type ufixed136x90<N = void> = N extends number ? number[] : number;
declare type ufixed136x91<N = void> = N extends number ? number[] : number;
declare type ufixed136x92<N = void> = N extends number ? number[] : number;
declare type ufixed136x93<N = void> = N extends number ? number[] : number;
declare type ufixed136x94<N = void> = N extends number ? number[] : number;
declare type ufixed136x95<N = void> = N extends number ? number[] : number;
declare type ufixed136x96<N = void> = N extends number ? number[] : number;
declare type ufixed136x97<N = void> = N extends number ? number[] : number;
declare type ufixed136x98<N = void> = N extends number ? number[] : number;
declare type ufixed136x99<N = void> = N extends number ? number[] : number;
declare type ufixed136x100<N = void> = N extends number ? number[] : number;
declare type ufixed136x101<N = void> = N extends number ? number[] : number;
declare type ufixed136x102<N = void> = N extends number ? number[] : number;
declare type ufixed136x103<N = void> = N extends number ? number[] : number;
declare type ufixed136x104<N = void> = N extends number ? number[] : number;
declare type ufixed136x105<N = void> = N extends number ? number[] : number;
declare type ufixed136x106<N = void> = N extends number ? number[] : number;
declare type ufixed136x107<N = void> = N extends number ? number[] : number;
declare type ufixed136x108<N = void> = N extends number ? number[] : number;
declare type ufixed136x109<N = void> = N extends number ? number[] : number;
declare type ufixed136x110<N = void> = N extends number ? number[] : number;
declare type ufixed136x111<N = void> = N extends number ? number[] : number;
declare type ufixed136x112<N = void> = N extends number ? number[] : number;
declare type ufixed136x113<N = void> = N extends number ? number[] : number;
declare type ufixed136x114<N = void> = N extends number ? number[] : number;
declare type ufixed136x115<N = void> = N extends number ? number[] : number;
declare type ufixed136x116<N = void> = N extends number ? number[] : number;
declare type ufixed136x117<N = void> = N extends number ? number[] : number;
declare type ufixed136x118<N = void> = N extends number ? number[] : number;
declare type ufixed136x119<N = void> = N extends number ? number[] : number;
declare type ufixed136x120<N = void> = N extends number ? number[] : number;
declare type ufixed136x121<N = void> = N extends number ? number[] : number;
declare type ufixed136x122<N = void> = N extends number ? number[] : number;
declare type ufixed136x123<N = void> = N extends number ? number[] : number;
declare type ufixed136x124<N = void> = N extends number ? number[] : number;
declare type ufixed136x125<N = void> = N extends number ? number[] : number;
declare type ufixed136x126<N = void> = N extends number ? number[] : number;
declare type ufixed136x127<N = void> = N extends number ? number[] : number;
declare type ufixed136x128<N = void> = N extends number ? number[] : number;
declare type ufixed136x129<N = void> = N extends number ? number[] : number;
declare type ufixed136x130<N = void> = N extends number ? number[] : number;
declare type ufixed136x131<N = void> = N extends number ? number[] : number;
declare type ufixed136x132<N = void> = N extends number ? number[] : number;
declare type ufixed136x133<N = void> = N extends number ? number[] : number;
declare type ufixed136x134<N = void> = N extends number ? number[] : number;
declare type ufixed136x135<N = void> = N extends number ? number[] : number;
declare type ufixed136x136<N = void> = N extends number ? number[] : number;
declare type ufixed136x137<N = void> = N extends number ? number[] : number;
declare type ufixed136x138<N = void> = N extends number ? number[] : number;
declare type ufixed136x139<N = void> = N extends number ? number[] : number;
declare type ufixed136x140<N = void> = N extends number ? number[] : number;
declare type ufixed136x141<N = void> = N extends number ? number[] : number;
declare type ufixed136x142<N = void> = N extends number ? number[] : number;
declare type ufixed136x143<N = void> = N extends number ? number[] : number;
declare type ufixed136x144<N = void> = N extends number ? number[] : number;
declare type ufixed136x145<N = void> = N extends number ? number[] : number;
declare type ufixed136x146<N = void> = N extends number ? number[] : number;
declare type ufixed136x147<N = void> = N extends number ? number[] : number;
declare type ufixed136x148<N = void> = N extends number ? number[] : number;
declare type ufixed136x149<N = void> = N extends number ? number[] : number;
declare type ufixed136x150<N = void> = N extends number ? number[] : number;
declare type ufixed136x151<N = void> = N extends number ? number[] : number;
declare type ufixed136x152<N = void> = N extends number ? number[] : number;
declare type ufixed136x153<N = void> = N extends number ? number[] : number;
declare type ufixed136x154<N = void> = N extends number ? number[] : number;
declare type ufixed136x155<N = void> = N extends number ? number[] : number;
declare type ufixed136x156<N = void> = N extends number ? number[] : number;
declare type ufixed136x157<N = void> = N extends number ? number[] : number;
declare type ufixed136x158<N = void> = N extends number ? number[] : number;
declare type ufixed136x159<N = void> = N extends number ? number[] : number;
declare type ufixed136x160<N = void> = N extends number ? number[] : number;
declare type ufixed144x1<N = void> = N extends number ? number[] : number;
declare type ufixed144x2<N = void> = N extends number ? number[] : number;
declare type ufixed144x3<N = void> = N extends number ? number[] : number;
declare type ufixed144x4<N = void> = N extends number ? number[] : number;
declare type ufixed144x5<N = void> = N extends number ? number[] : number;
declare type ufixed144x6<N = void> = N extends number ? number[] : number;
declare type ufixed144x7<N = void> = N extends number ? number[] : number;
declare type ufixed144x8<N = void> = N extends number ? number[] : number;
declare type ufixed144x9<N = void> = N extends number ? number[] : number;
declare type ufixed144x10<N = void> = N extends number ? number[] : number;
declare type ufixed144x11<N = void> = N extends number ? number[] : number;
declare type ufixed144x12<N = void> = N extends number ? number[] : number;
declare type ufixed144x13<N = void> = N extends number ? number[] : number;
declare type ufixed144x14<N = void> = N extends number ? number[] : number;
declare type ufixed144x15<N = void> = N extends number ? number[] : number;
declare type ufixed144x16<N = void> = N extends number ? number[] : number;
declare type ufixed144x17<N = void> = N extends number ? number[] : number;
declare type ufixed144x18<N = void> = N extends number ? number[] : number;
declare type ufixed144x19<N = void> = N extends number ? number[] : number;
declare type ufixed144x20<N = void> = N extends number ? number[] : number;
declare type ufixed144x21<N = void> = N extends number ? number[] : number;
declare type ufixed144x22<N = void> = N extends number ? number[] : number;
declare type ufixed144x23<N = void> = N extends number ? number[] : number;
declare type ufixed144x24<N = void> = N extends number ? number[] : number;
declare type ufixed144x25<N = void> = N extends number ? number[] : number;
declare type ufixed144x26<N = void> = N extends number ? number[] : number;
declare type ufixed144x27<N = void> = N extends number ? number[] : number;
declare type ufixed144x28<N = void> = N extends number ? number[] : number;
declare type ufixed144x29<N = void> = N extends number ? number[] : number;
declare type ufixed144x30<N = void> = N extends number ? number[] : number;
declare type ufixed144x31<N = void> = N extends number ? number[] : number;
declare type ufixed144x32<N = void> = N extends number ? number[] : number;
declare type ufixed144x33<N = void> = N extends number ? number[] : number;
declare type ufixed144x34<N = void> = N extends number ? number[] : number;
declare type ufixed144x35<N = void> = N extends number ? number[] : number;
declare type ufixed144x36<N = void> = N extends number ? number[] : number;
declare type ufixed144x37<N = void> = N extends number ? number[] : number;
declare type ufixed144x38<N = void> = N extends number ? number[] : number;
declare type ufixed144x39<N = void> = N extends number ? number[] : number;
declare type ufixed144x40<N = void> = N extends number ? number[] : number;
declare type ufixed144x41<N = void> = N extends number ? number[] : number;
declare type ufixed144x42<N = void> = N extends number ? number[] : number;
declare type ufixed144x43<N = void> = N extends number ? number[] : number;
declare type ufixed144x44<N = void> = N extends number ? number[] : number;
declare type ufixed144x45<N = void> = N extends number ? number[] : number;
declare type ufixed144x46<N = void> = N extends number ? number[] : number;
declare type ufixed144x47<N = void> = N extends number ? number[] : number;
declare type ufixed144x48<N = void> = N extends number ? number[] : number;
declare type ufixed144x49<N = void> = N extends number ? number[] : number;
declare type ufixed144x50<N = void> = N extends number ? number[] : number;
declare type ufixed144x51<N = void> = N extends number ? number[] : number;
declare type ufixed144x52<N = void> = N extends number ? number[] : number;
declare type ufixed144x53<N = void> = N extends number ? number[] : number;
declare type ufixed144x54<N = void> = N extends number ? number[] : number;
declare type ufixed144x55<N = void> = N extends number ? number[] : number;
declare type ufixed144x56<N = void> = N extends number ? number[] : number;
declare type ufixed144x57<N = void> = N extends number ? number[] : number;
declare type ufixed144x58<N = void> = N extends number ? number[] : number;
declare type ufixed144x59<N = void> = N extends number ? number[] : number;
declare type ufixed144x60<N = void> = N extends number ? number[] : number;
declare type ufixed144x61<N = void> = N extends number ? number[] : number;
declare type ufixed144x62<N = void> = N extends number ? number[] : number;
declare type ufixed144x63<N = void> = N extends number ? number[] : number;
declare type ufixed144x64<N = void> = N extends number ? number[] : number;
declare type ufixed144x65<N = void> = N extends number ? number[] : number;
declare type ufixed144x66<N = void> = N extends number ? number[] : number;
declare type ufixed144x67<N = void> = N extends number ? number[] : number;
declare type ufixed144x68<N = void> = N extends number ? number[] : number;
declare type ufixed144x69<N = void> = N extends number ? number[] : number;
declare type ufixed144x70<N = void> = N extends number ? number[] : number;
declare type ufixed144x71<N = void> = N extends number ? number[] : number;
declare type ufixed144x72<N = void> = N extends number ? number[] : number;
declare type ufixed144x73<N = void> = N extends number ? number[] : number;
declare type ufixed144x74<N = void> = N extends number ? number[] : number;
declare type ufixed144x75<N = void> = N extends number ? number[] : number;
declare type ufixed144x76<N = void> = N extends number ? number[] : number;
declare type ufixed144x77<N = void> = N extends number ? number[] : number;
declare type ufixed144x78<N = void> = N extends number ? number[] : number;
declare type ufixed144x79<N = void> = N extends number ? number[] : number;
declare type ufixed144x80<N = void> = N extends number ? number[] : number;
declare type ufixed144x81<N = void> = N extends number ? number[] : number;
declare type ufixed144x82<N = void> = N extends number ? number[] : number;
declare type ufixed144x83<N = void> = N extends number ? number[] : number;
declare type ufixed144x84<N = void> = N extends number ? number[] : number;
declare type ufixed144x85<N = void> = N extends number ? number[] : number;
declare type ufixed144x86<N = void> = N extends number ? number[] : number;
declare type ufixed144x87<N = void> = N extends number ? number[] : number;
declare type ufixed144x88<N = void> = N extends number ? number[] : number;
declare type ufixed144x89<N = void> = N extends number ? number[] : number;
declare type ufixed144x90<N = void> = N extends number ? number[] : number;
declare type ufixed144x91<N = void> = N extends number ? number[] : number;
declare type ufixed144x92<N = void> = N extends number ? number[] : number;
declare type ufixed144x93<N = void> = N extends number ? number[] : number;
declare type ufixed144x94<N = void> = N extends number ? number[] : number;
declare type ufixed144x95<N = void> = N extends number ? number[] : number;
declare type ufixed144x96<N = void> = N extends number ? number[] : number;
declare type ufixed144x97<N = void> = N extends number ? number[] : number;
declare type ufixed144x98<N = void> = N extends number ? number[] : number;
declare type ufixed144x99<N = void> = N extends number ? number[] : number;
declare type ufixed144x100<N = void> = N extends number ? number[] : number;
declare type ufixed144x101<N = void> = N extends number ? number[] : number;
declare type ufixed144x102<N = void> = N extends number ? number[] : number;
declare type ufixed144x103<N = void> = N extends number ? number[] : number;
declare type ufixed144x104<N = void> = N extends number ? number[] : number;
declare type ufixed144x105<N = void> = N extends number ? number[] : number;
declare type ufixed144x106<N = void> = N extends number ? number[] : number;
declare type ufixed144x107<N = void> = N extends number ? number[] : number;
declare type ufixed144x108<N = void> = N extends number ? number[] : number;
declare type ufixed144x109<N = void> = N extends number ? number[] : number;
declare type ufixed144x110<N = void> = N extends number ? number[] : number;
declare type ufixed144x111<N = void> = N extends number ? number[] : number;
declare type ufixed144x112<N = void> = N extends number ? number[] : number;
declare type ufixed144x113<N = void> = N extends number ? number[] : number;
declare type ufixed144x114<N = void> = N extends number ? number[] : number;
declare type ufixed144x115<N = void> = N extends number ? number[] : number;
declare type ufixed144x116<N = void> = N extends number ? number[] : number;
declare type ufixed144x117<N = void> = N extends number ? number[] : number;
declare type ufixed144x118<N = void> = N extends number ? number[] : number;
declare type ufixed144x119<N = void> = N extends number ? number[] : number;
declare type ufixed144x120<N = void> = N extends number ? number[] : number;
declare type ufixed144x121<N = void> = N extends number ? number[] : number;
declare type ufixed144x122<N = void> = N extends number ? number[] : number;
declare type ufixed144x123<N = void> = N extends number ? number[] : number;
declare type ufixed144x124<N = void> = N extends number ? number[] : number;
declare type ufixed144x125<N = void> = N extends number ? number[] : number;
declare type ufixed144x126<N = void> = N extends number ? number[] : number;
declare type ufixed144x127<N = void> = N extends number ? number[] : number;
declare type ufixed144x128<N = void> = N extends number ? number[] : number;
declare type ufixed144x129<N = void> = N extends number ? number[] : number;
declare type ufixed144x130<N = void> = N extends number ? number[] : number;
declare type ufixed144x131<N = void> = N extends number ? number[] : number;
declare type ufixed144x132<N = void> = N extends number ? number[] : number;
declare type ufixed144x133<N = void> = N extends number ? number[] : number;
declare type ufixed144x134<N = void> = N extends number ? number[] : number;
declare type ufixed144x135<N = void> = N extends number ? number[] : number;
declare type ufixed144x136<N = void> = N extends number ? number[] : number;
declare type ufixed144x137<N = void> = N extends number ? number[] : number;
declare type ufixed144x138<N = void> = N extends number ? number[] : number;
declare type ufixed144x139<N = void> = N extends number ? number[] : number;
declare type ufixed144x140<N = void> = N extends number ? number[] : number;
declare type ufixed144x141<N = void> = N extends number ? number[] : number;
declare type ufixed144x142<N = void> = N extends number ? number[] : number;
declare type ufixed144x143<N = void> = N extends number ? number[] : number;
declare type ufixed144x144<N = void> = N extends number ? number[] : number;
declare type ufixed144x145<N = void> = N extends number ? number[] : number;
declare type ufixed144x146<N = void> = N extends number ? number[] : number;
declare type ufixed144x147<N = void> = N extends number ? number[] : number;
declare type ufixed144x148<N = void> = N extends number ? number[] : number;
declare type ufixed144x149<N = void> = N extends number ? number[] : number;
declare type ufixed144x150<N = void> = N extends number ? number[] : number;
declare type ufixed144x151<N = void> = N extends number ? number[] : number;
declare type ufixed144x152<N = void> = N extends number ? number[] : number;
declare type ufixed144x153<N = void> = N extends number ? number[] : number;
declare type ufixed144x154<N = void> = N extends number ? number[] : number;
declare type ufixed144x155<N = void> = N extends number ? number[] : number;
declare type ufixed144x156<N = void> = N extends number ? number[] : number;
declare type ufixed144x157<N = void> = N extends number ? number[] : number;
declare type ufixed144x158<N = void> = N extends number ? number[] : number;
declare type ufixed144x159<N = void> = N extends number ? number[] : number;
declare type ufixed144x160<N = void> = N extends number ? number[] : number;
declare type ufixed152x1<N = void> = N extends number ? number[] : number;
declare type ufixed152x2<N = void> = N extends number ? number[] : number;
declare type ufixed152x3<N = void> = N extends number ? number[] : number;
declare type ufixed152x4<N = void> = N extends number ? number[] : number;
declare type ufixed152x5<N = void> = N extends number ? number[] : number;
declare type ufixed152x6<N = void> = N extends number ? number[] : number;
declare type ufixed152x7<N = void> = N extends number ? number[] : number;
declare type ufixed152x8<N = void> = N extends number ? number[] : number;
declare type ufixed152x9<N = void> = N extends number ? number[] : number;
declare type ufixed152x10<N = void> = N extends number ? number[] : number;
declare type ufixed152x11<N = void> = N extends number ? number[] : number;
declare type ufixed152x12<N = void> = N extends number ? number[] : number;
declare type ufixed152x13<N = void> = N extends number ? number[] : number;
declare type ufixed152x14<N = void> = N extends number ? number[] : number;
declare type ufixed152x15<N = void> = N extends number ? number[] : number;
declare type ufixed152x16<N = void> = N extends number ? number[] : number;
declare type ufixed152x17<N = void> = N extends number ? number[] : number;
declare type ufixed152x18<N = void> = N extends number ? number[] : number;
declare type ufixed152x19<N = void> = N extends number ? number[] : number;
declare type ufixed152x20<N = void> = N extends number ? number[] : number;
declare type ufixed152x21<N = void> = N extends number ? number[] : number;
declare type ufixed152x22<N = void> = N extends number ? number[] : number;
declare type ufixed152x23<N = void> = N extends number ? number[] : number;
declare type ufixed152x24<N = void> = N extends number ? number[] : number;
declare type ufixed152x25<N = void> = N extends number ? number[] : number;
declare type ufixed152x26<N = void> = N extends number ? number[] : number;
declare type ufixed152x27<N = void> = N extends number ? number[] : number;
declare type ufixed152x28<N = void> = N extends number ? number[] : number;
declare type ufixed152x29<N = void> = N extends number ? number[] : number;
declare type ufixed152x30<N = void> = N extends number ? number[] : number;
declare type ufixed152x31<N = void> = N extends number ? number[] : number;
declare type ufixed152x32<N = void> = N extends number ? number[] : number;
declare type ufixed152x33<N = void> = N extends number ? number[] : number;
declare type ufixed152x34<N = void> = N extends number ? number[] : number;
declare type ufixed152x35<N = void> = N extends number ? number[] : number;
declare type ufixed152x36<N = void> = N extends number ? number[] : number;
declare type ufixed152x37<N = void> = N extends number ? number[] : number;
declare type ufixed152x38<N = void> = N extends number ? number[] : number;
declare type ufixed152x39<N = void> = N extends number ? number[] : number;
declare type ufixed152x40<N = void> = N extends number ? number[] : number;
declare type ufixed152x41<N = void> = N extends number ? number[] : number;
declare type ufixed152x42<N = void> = N extends number ? number[] : number;
declare type ufixed152x43<N = void> = N extends number ? number[] : number;
declare type ufixed152x44<N = void> = N extends number ? number[] : number;
declare type ufixed152x45<N = void> = N extends number ? number[] : number;
declare type ufixed152x46<N = void> = N extends number ? number[] : number;
declare type ufixed152x47<N = void> = N extends number ? number[] : number;
declare type ufixed152x48<N = void> = N extends number ? number[] : number;
declare type ufixed152x49<N = void> = N extends number ? number[] : number;
declare type ufixed152x50<N = void> = N extends number ? number[] : number;
declare type ufixed152x51<N = void> = N extends number ? number[] : number;
declare type ufixed152x52<N = void> = N extends number ? number[] : number;
declare type ufixed152x53<N = void> = N extends number ? number[] : number;
declare type ufixed152x54<N = void> = N extends number ? number[] : number;
declare type ufixed152x55<N = void> = N extends number ? number[] : number;
declare type ufixed152x56<N = void> = N extends number ? number[] : number;
declare type ufixed152x57<N = void> = N extends number ? number[] : number;
declare type ufixed152x58<N = void> = N extends number ? number[] : number;
declare type ufixed152x59<N = void> = N extends number ? number[] : number;
declare type ufixed152x60<N = void> = N extends number ? number[] : number;
declare type ufixed152x61<N = void> = N extends number ? number[] : number;
declare type ufixed152x62<N = void> = N extends number ? number[] : number;
declare type ufixed152x63<N = void> = N extends number ? number[] : number;
declare type ufixed152x64<N = void> = N extends number ? number[] : number;
declare type ufixed152x65<N = void> = N extends number ? number[] : number;
declare type ufixed152x66<N = void> = N extends number ? number[] : number;
declare type ufixed152x67<N = void> = N extends number ? number[] : number;
declare type ufixed152x68<N = void> = N extends number ? number[] : number;
declare type ufixed152x69<N = void> = N extends number ? number[] : number;
declare type ufixed152x70<N = void> = N extends number ? number[] : number;
declare type ufixed152x71<N = void> = N extends number ? number[] : number;
declare type ufixed152x72<N = void> = N extends number ? number[] : number;
declare type ufixed152x73<N = void> = N extends number ? number[] : number;
declare type ufixed152x74<N = void> = N extends number ? number[] : number;
declare type ufixed152x75<N = void> = N extends number ? number[] : number;
declare type ufixed152x76<N = void> = N extends number ? number[] : number;
declare type ufixed152x77<N = void> = N extends number ? number[] : number;
declare type ufixed152x78<N = void> = N extends number ? number[] : number;
declare type ufixed152x79<N = void> = N extends number ? number[] : number;
declare type ufixed152x80<N = void> = N extends number ? number[] : number;
declare type ufixed152x81<N = void> = N extends number ? number[] : number;
declare type ufixed152x82<N = void> = N extends number ? number[] : number;
declare type ufixed152x83<N = void> = N extends number ? number[] : number;
declare type ufixed152x84<N = void> = N extends number ? number[] : number;
declare type ufixed152x85<N = void> = N extends number ? number[] : number;
declare type ufixed152x86<N = void> = N extends number ? number[] : number;
declare type ufixed152x87<N = void> = N extends number ? number[] : number;
declare type ufixed152x88<N = void> = N extends number ? number[] : number;
declare type ufixed152x89<N = void> = N extends number ? number[] : number;
declare type ufixed152x90<N = void> = N extends number ? number[] : number;
declare type ufixed152x91<N = void> = N extends number ? number[] : number;
declare type ufixed152x92<N = void> = N extends number ? number[] : number;
declare type ufixed152x93<N = void> = N extends number ? number[] : number;
declare type ufixed152x94<N = void> = N extends number ? number[] : number;
declare type ufixed152x95<N = void> = N extends number ? number[] : number;
declare type ufixed152x96<N = void> = N extends number ? number[] : number;
declare type ufixed152x97<N = void> = N extends number ? number[] : number;
declare type ufixed152x98<N = void> = N extends number ? number[] : number;
declare type ufixed152x99<N = void> = N extends number ? number[] : number;
declare type ufixed152x100<N = void> = N extends number ? number[] : number;
declare type ufixed152x101<N = void> = N extends number ? number[] : number;
declare type ufixed152x102<N = void> = N extends number ? number[] : number;
declare type ufixed152x103<N = void> = N extends number ? number[] : number;
declare type ufixed152x104<N = void> = N extends number ? number[] : number;
declare type ufixed152x105<N = void> = N extends number ? number[] : number;
declare type ufixed152x106<N = void> = N extends number ? number[] : number;
declare type ufixed152x107<N = void> = N extends number ? number[] : number;
declare type ufixed152x108<N = void> = N extends number ? number[] : number;
declare type ufixed152x109<N = void> = N extends number ? number[] : number;
declare type ufixed152x110<N = void> = N extends number ? number[] : number;
declare type ufixed152x111<N = void> = N extends number ? number[] : number;
declare type ufixed152x112<N = void> = N extends number ? number[] : number;
declare type ufixed152x113<N = void> = N extends number ? number[] : number;
declare type ufixed152x114<N = void> = N extends number ? number[] : number;
declare type ufixed152x115<N = void> = N extends number ? number[] : number;
declare type ufixed152x116<N = void> = N extends number ? number[] : number;
declare type ufixed152x117<N = void> = N extends number ? number[] : number;
declare type ufixed152x118<N = void> = N extends number ? number[] : number;
declare type ufixed152x119<N = void> = N extends number ? number[] : number;
declare type ufixed152x120<N = void> = N extends number ? number[] : number;
declare type ufixed152x121<N = void> = N extends number ? number[] : number;
declare type ufixed152x122<N = void> = N extends number ? number[] : number;
declare type ufixed152x123<N = void> = N extends number ? number[] : number;
declare type ufixed152x124<N = void> = N extends number ? number[] : number;
declare type ufixed152x125<N = void> = N extends number ? number[] : number;
declare type ufixed152x126<N = void> = N extends number ? number[] : number;
declare type ufixed152x127<N = void> = N extends number ? number[] : number;
declare type ufixed152x128<N = void> = N extends number ? number[] : number;
declare type ufixed152x129<N = void> = N extends number ? number[] : number;
declare type ufixed152x130<N = void> = N extends number ? number[] : number;
declare type ufixed152x131<N = void> = N extends number ? number[] : number;
declare type ufixed152x132<N = void> = N extends number ? number[] : number;
declare type ufixed152x133<N = void> = N extends number ? number[] : number;
declare type ufixed152x134<N = void> = N extends number ? number[] : number;
declare type ufixed152x135<N = void> = N extends number ? number[] : number;
declare type ufixed152x136<N = void> = N extends number ? number[] : number;
declare type ufixed152x137<N = void> = N extends number ? number[] : number;
declare type ufixed152x138<N = void> = N extends number ? number[] : number;
declare type ufixed152x139<N = void> = N extends number ? number[] : number;
declare type ufixed152x140<N = void> = N extends number ? number[] : number;
declare type ufixed152x141<N = void> = N extends number ? number[] : number;
declare type ufixed152x142<N = void> = N extends number ? number[] : number;
declare type ufixed152x143<N = void> = N extends number ? number[] : number;
declare type ufixed152x144<N = void> = N extends number ? number[] : number;
declare type ufixed152x145<N = void> = N extends number ? number[] : number;
declare type ufixed152x146<N = void> = N extends number ? number[] : number;
declare type ufixed152x147<N = void> = N extends number ? number[] : number;
declare type ufixed152x148<N = void> = N extends number ? number[] : number;
declare type ufixed152x149<N = void> = N extends number ? number[] : number;
declare type ufixed152x150<N = void> = N extends number ? number[] : number;
declare type ufixed152x151<N = void> = N extends number ? number[] : number;
declare type ufixed152x152<N = void> = N extends number ? number[] : number;
declare type ufixed152x153<N = void> = N extends number ? number[] : number;
declare type ufixed152x154<N = void> = N extends number ? number[] : number;
declare type ufixed152x155<N = void> = N extends number ? number[] : number;
declare type ufixed152x156<N = void> = N extends number ? number[] : number;
declare type ufixed152x157<N = void> = N extends number ? number[] : number;
declare type ufixed152x158<N = void> = N extends number ? number[] : number;
declare type ufixed152x159<N = void> = N extends number ? number[] : number;
declare type ufixed152x160<N = void> = N extends number ? number[] : number;
declare type ufixed160x1<N = void> = N extends number ? number[] : number;
declare type ufixed160x2<N = void> = N extends number ? number[] : number;
declare type ufixed160x3<N = void> = N extends number ? number[] : number;
declare type ufixed160x4<N = void> = N extends number ? number[] : number;
declare type ufixed160x5<N = void> = N extends number ? number[] : number;
declare type ufixed160x6<N = void> = N extends number ? number[] : number;
declare type ufixed160x7<N = void> = N extends number ? number[] : number;
declare type ufixed160x8<N = void> = N extends number ? number[] : number;
declare type ufixed160x9<N = void> = N extends number ? number[] : number;
declare type ufixed160x10<N = void> = N extends number ? number[] : number;
declare type ufixed160x11<N = void> = N extends number ? number[] : number;
declare type ufixed160x12<N = void> = N extends number ? number[] : number;
declare type ufixed160x13<N = void> = N extends number ? number[] : number;
declare type ufixed160x14<N = void> = N extends number ? number[] : number;
declare type ufixed160x15<N = void> = N extends number ? number[] : number;
declare type ufixed160x16<N = void> = N extends number ? number[] : number;
declare type ufixed160x17<N = void> = N extends number ? number[] : number;
declare type ufixed160x18<N = void> = N extends number ? number[] : number;
declare type ufixed160x19<N = void> = N extends number ? number[] : number;
declare type ufixed160x20<N = void> = N extends number ? number[] : number;
declare type ufixed160x21<N = void> = N extends number ? number[] : number;
declare type ufixed160x22<N = void> = N extends number ? number[] : number;
declare type ufixed160x23<N = void> = N extends number ? number[] : number;
declare type ufixed160x24<N = void> = N extends number ? number[] : number;
declare type ufixed160x25<N = void> = N extends number ? number[] : number;
declare type ufixed160x26<N = void> = N extends number ? number[] : number;
declare type ufixed160x27<N = void> = N extends number ? number[] : number;
declare type ufixed160x28<N = void> = N extends number ? number[] : number;
declare type ufixed160x29<N = void> = N extends number ? number[] : number;
declare type ufixed160x30<N = void> = N extends number ? number[] : number;
declare type ufixed160x31<N = void> = N extends number ? number[] : number;
declare type ufixed160x32<N = void> = N extends number ? number[] : number;
declare type ufixed160x33<N = void> = N extends number ? number[] : number;
declare type ufixed160x34<N = void> = N extends number ? number[] : number;
declare type ufixed160x35<N = void> = N extends number ? number[] : number;
declare type ufixed160x36<N = void> = N extends number ? number[] : number;
declare type ufixed160x37<N = void> = N extends number ? number[] : number;
declare type ufixed160x38<N = void> = N extends number ? number[] : number;
declare type ufixed160x39<N = void> = N extends number ? number[] : number;
declare type ufixed160x40<N = void> = N extends number ? number[] : number;
declare type ufixed160x41<N = void> = N extends number ? number[] : number;
declare type ufixed160x42<N = void> = N extends number ? number[] : number;
declare type ufixed160x43<N = void> = N extends number ? number[] : number;
declare type ufixed160x44<N = void> = N extends number ? number[] : number;
declare type ufixed160x45<N = void> = N extends number ? number[] : number;
declare type ufixed160x46<N = void> = N extends number ? number[] : number;
declare type ufixed160x47<N = void> = N extends number ? number[] : number;
declare type ufixed160x48<N = void> = N extends number ? number[] : number;
declare type ufixed160x49<N = void> = N extends number ? number[] : number;
declare type ufixed160x50<N = void> = N extends number ? number[] : number;
declare type ufixed160x51<N = void> = N extends number ? number[] : number;
declare type ufixed160x52<N = void> = N extends number ? number[] : number;
declare type ufixed160x53<N = void> = N extends number ? number[] : number;
declare type ufixed160x54<N = void> = N extends number ? number[] : number;
declare type ufixed160x55<N = void> = N extends number ? number[] : number;
declare type ufixed160x56<N = void> = N extends number ? number[] : number;
declare type ufixed160x57<N = void> = N extends number ? number[] : number;
declare type ufixed160x58<N = void> = N extends number ? number[] : number;
declare type ufixed160x59<N = void> = N extends number ? number[] : number;
declare type ufixed160x60<N = void> = N extends number ? number[] : number;
declare type ufixed160x61<N = void> = N extends number ? number[] : number;
declare type ufixed160x62<N = void> = N extends number ? number[] : number;
declare type ufixed160x63<N = void> = N extends number ? number[] : number;
declare type ufixed160x64<N = void> = N extends number ? number[] : number;
declare type ufixed160x65<N = void> = N extends number ? number[] : number;
declare type ufixed160x66<N = void> = N extends number ? number[] : number;
declare type ufixed160x67<N = void> = N extends number ? number[] : number;
declare type ufixed160x68<N = void> = N extends number ? number[] : number;
declare type ufixed160x69<N = void> = N extends number ? number[] : number;
declare type ufixed160x70<N = void> = N extends number ? number[] : number;
declare type ufixed160x71<N = void> = N extends number ? number[] : number;
declare type ufixed160x72<N = void> = N extends number ? number[] : number;
declare type ufixed160x73<N = void> = N extends number ? number[] : number;
declare type ufixed160x74<N = void> = N extends number ? number[] : number;
declare type ufixed160x75<N = void> = N extends number ? number[] : number;
declare type ufixed160x76<N = void> = N extends number ? number[] : number;
declare type ufixed160x77<N = void> = N extends number ? number[] : number;
declare type ufixed160x78<N = void> = N extends number ? number[] : number;
declare type ufixed160x79<N = void> = N extends number ? number[] : number;
declare type ufixed160x80<N = void> = N extends number ? number[] : number;
declare type ufixed160x81<N = void> = N extends number ? number[] : number;
declare type ufixed160x82<N = void> = N extends number ? number[] : number;
declare type ufixed160x83<N = void> = N extends number ? number[] : number;
declare type ufixed160x84<N = void> = N extends number ? number[] : number;
declare type ufixed160x85<N = void> = N extends number ? number[] : number;
declare type ufixed160x86<N = void> = N extends number ? number[] : number;
declare type ufixed160x87<N = void> = N extends number ? number[] : number;
declare type ufixed160x88<N = void> = N extends number ? number[] : number;
declare type ufixed160x89<N = void> = N extends number ? number[] : number;
declare type ufixed160x90<N = void> = N extends number ? number[] : number;
declare type ufixed160x91<N = void> = N extends number ? number[] : number;
declare type ufixed160x92<N = void> = N extends number ? number[] : number;
declare type ufixed160x93<N = void> = N extends number ? number[] : number;
declare type ufixed160x94<N = void> = N extends number ? number[] : number;
declare type ufixed160x95<N = void> = N extends number ? number[] : number;
declare type ufixed160x96<N = void> = N extends number ? number[] : number;
declare type ufixed160x97<N = void> = N extends number ? number[] : number;
declare type ufixed160x98<N = void> = N extends number ? number[] : number;
declare type ufixed160x99<N = void> = N extends number ? number[] : number;
declare type ufixed160x100<N = void> = N extends number ? number[] : number;
declare type ufixed160x101<N = void> = N extends number ? number[] : number;
declare type ufixed160x102<N = void> = N extends number ? number[] : number;
declare type ufixed160x103<N = void> = N extends number ? number[] : number;
declare type ufixed160x104<N = void> = N extends number ? number[] : number;
declare type ufixed160x105<N = void> = N extends number ? number[] : number;
declare type ufixed160x106<N = void> = N extends number ? number[] : number;
declare type ufixed160x107<N = void> = N extends number ? number[] : number;
declare type ufixed160x108<N = void> = N extends number ? number[] : number;
declare type ufixed160x109<N = void> = N extends number ? number[] : number;
declare type ufixed160x110<N = void> = N extends number ? number[] : number;
declare type ufixed160x111<N = void> = N extends number ? number[] : number;
declare type ufixed160x112<N = void> = N extends number ? number[] : number;
declare type ufixed160x113<N = void> = N extends number ? number[] : number;
declare type ufixed160x114<N = void> = N extends number ? number[] : number;
declare type ufixed160x115<N = void> = N extends number ? number[] : number;
declare type ufixed160x116<N = void> = N extends number ? number[] : number;
declare type ufixed160x117<N = void> = N extends number ? number[] : number;
declare type ufixed160x118<N = void> = N extends number ? number[] : number;
declare type ufixed160x119<N = void> = N extends number ? number[] : number;
declare type ufixed160x120<N = void> = N extends number ? number[] : number;
declare type ufixed160x121<N = void> = N extends number ? number[] : number;
declare type ufixed160x122<N = void> = N extends number ? number[] : number;
declare type ufixed160x123<N = void> = N extends number ? number[] : number;
declare type ufixed160x124<N = void> = N extends number ? number[] : number;
declare type ufixed160x125<N = void> = N extends number ? number[] : number;
declare type ufixed160x126<N = void> = N extends number ? number[] : number;
declare type ufixed160x127<N = void> = N extends number ? number[] : number;
declare type ufixed160x128<N = void> = N extends number ? number[] : number;
declare type ufixed160x129<N = void> = N extends number ? number[] : number;
declare type ufixed160x130<N = void> = N extends number ? number[] : number;
declare type ufixed160x131<N = void> = N extends number ? number[] : number;
declare type ufixed160x132<N = void> = N extends number ? number[] : number;
declare type ufixed160x133<N = void> = N extends number ? number[] : number;
declare type ufixed160x134<N = void> = N extends number ? number[] : number;
declare type ufixed160x135<N = void> = N extends number ? number[] : number;
declare type ufixed160x136<N = void> = N extends number ? number[] : number;
declare type ufixed160x137<N = void> = N extends number ? number[] : number;
declare type ufixed160x138<N = void> = N extends number ? number[] : number;
declare type ufixed160x139<N = void> = N extends number ? number[] : number;
declare type ufixed160x140<N = void> = N extends number ? number[] : number;
declare type ufixed160x141<N = void> = N extends number ? number[] : number;
declare type ufixed160x142<N = void> = N extends number ? number[] : number;
declare type ufixed160x143<N = void> = N extends number ? number[] : number;
declare type ufixed160x144<N = void> = N extends number ? number[] : number;
declare type ufixed160x145<N = void> = N extends number ? number[] : number;
declare type ufixed160x146<N = void> = N extends number ? number[] : number;
declare type ufixed160x147<N = void> = N extends number ? number[] : number;
declare type ufixed160x148<N = void> = N extends number ? number[] : number;
declare type ufixed160x149<N = void> = N extends number ? number[] : number;
declare type ufixed160x150<N = void> = N extends number ? number[] : number;
declare type ufixed160x151<N = void> = N extends number ? number[] : number;
declare type ufixed160x152<N = void> = N extends number ? number[] : number;
declare type ufixed160x153<N = void> = N extends number ? number[] : number;
declare type ufixed160x154<N = void> = N extends number ? number[] : number;
declare type ufixed160x155<N = void> = N extends number ? number[] : number;
declare type ufixed160x156<N = void> = N extends number ? number[] : number;
declare type ufixed160x157<N = void> = N extends number ? number[] : number;
declare type ufixed160x158<N = void> = N extends number ? number[] : number;
declare type ufixed160x159<N = void> = N extends number ? number[] : number;
declare type ufixed160x160<N = void> = N extends number ? number[] : number;
declare type ufixed168x1<N = void> = N extends number ? number[] : number;
declare type ufixed168x2<N = void> = N extends number ? number[] : number;
declare type ufixed168x3<N = void> = N extends number ? number[] : number;
declare type ufixed168x4<N = void> = N extends number ? number[] : number;
declare type ufixed168x5<N = void> = N extends number ? number[] : number;
declare type ufixed168x6<N = void> = N extends number ? number[] : number;
declare type ufixed168x7<N = void> = N extends number ? number[] : number;
declare type ufixed168x8<N = void> = N extends number ? number[] : number;
declare type ufixed168x9<N = void> = N extends number ? number[] : number;
declare type ufixed168x10<N = void> = N extends number ? number[] : number;
declare type ufixed168x11<N = void> = N extends number ? number[] : number;
declare type ufixed168x12<N = void> = N extends number ? number[] : number;
declare type ufixed168x13<N = void> = N extends number ? number[] : number;
declare type ufixed168x14<N = void> = N extends number ? number[] : number;
declare type ufixed168x15<N = void> = N extends number ? number[] : number;
declare type ufixed168x16<N = void> = N extends number ? number[] : number;
declare type ufixed168x17<N = void> = N extends number ? number[] : number;
declare type ufixed168x18<N = void> = N extends number ? number[] : number;
declare type ufixed168x19<N = void> = N extends number ? number[] : number;
declare type ufixed168x20<N = void> = N extends number ? number[] : number;
declare type ufixed168x21<N = void> = N extends number ? number[] : number;
declare type ufixed168x22<N = void> = N extends number ? number[] : number;
declare type ufixed168x23<N = void> = N extends number ? number[] : number;
declare type ufixed168x24<N = void> = N extends number ? number[] : number;
declare type ufixed168x25<N = void> = N extends number ? number[] : number;
declare type ufixed168x26<N = void> = N extends number ? number[] : number;
declare type ufixed168x27<N = void> = N extends number ? number[] : number;
declare type ufixed168x28<N = void> = N extends number ? number[] : number;
declare type ufixed168x29<N = void> = N extends number ? number[] : number;
declare type ufixed168x30<N = void> = N extends number ? number[] : number;
declare type ufixed168x31<N = void> = N extends number ? number[] : number;
declare type ufixed168x32<N = void> = N extends number ? number[] : number;
declare type ufixed168x33<N = void> = N extends number ? number[] : number;
declare type ufixed168x34<N = void> = N extends number ? number[] : number;
declare type ufixed168x35<N = void> = N extends number ? number[] : number;
declare type ufixed168x36<N = void> = N extends number ? number[] : number;
declare type ufixed168x37<N = void> = N extends number ? number[] : number;
declare type ufixed168x38<N = void> = N extends number ? number[] : number;
declare type ufixed168x39<N = void> = N extends number ? number[] : number;
declare type ufixed168x40<N = void> = N extends number ? number[] : number;
declare type ufixed168x41<N = void> = N extends number ? number[] : number;
declare type ufixed168x42<N = void> = N extends number ? number[] : number;
declare type ufixed168x43<N = void> = N extends number ? number[] : number;
declare type ufixed168x44<N = void> = N extends number ? number[] : number;
declare type ufixed168x45<N = void> = N extends number ? number[] : number;
declare type ufixed168x46<N = void> = N extends number ? number[] : number;
declare type ufixed168x47<N = void> = N extends number ? number[] : number;
declare type ufixed168x48<N = void> = N extends number ? number[] : number;
declare type ufixed168x49<N = void> = N extends number ? number[] : number;
declare type ufixed168x50<N = void> = N extends number ? number[] : number;
declare type ufixed168x51<N = void> = N extends number ? number[] : number;
declare type ufixed168x52<N = void> = N extends number ? number[] : number;
declare type ufixed168x53<N = void> = N extends number ? number[] : number;
declare type ufixed168x54<N = void> = N extends number ? number[] : number;
declare type ufixed168x55<N = void> = N extends number ? number[] : number;
declare type ufixed168x56<N = void> = N extends number ? number[] : number;
declare type ufixed168x57<N = void> = N extends number ? number[] : number;
declare type ufixed168x58<N = void> = N extends number ? number[] : number;
declare type ufixed168x59<N = void> = N extends number ? number[] : number;
declare type ufixed168x60<N = void> = N extends number ? number[] : number;
declare type ufixed168x61<N = void> = N extends number ? number[] : number;
declare type ufixed168x62<N = void> = N extends number ? number[] : number;
declare type ufixed168x63<N = void> = N extends number ? number[] : number;
declare type ufixed168x64<N = void> = N extends number ? number[] : number;
declare type ufixed168x65<N = void> = N extends number ? number[] : number;
declare type ufixed168x66<N = void> = N extends number ? number[] : number;
declare type ufixed168x67<N = void> = N extends number ? number[] : number;
declare type ufixed168x68<N = void> = N extends number ? number[] : number;
declare type ufixed168x69<N = void> = N extends number ? number[] : number;
declare type ufixed168x70<N = void> = N extends number ? number[] : number;
declare type ufixed168x71<N = void> = N extends number ? number[] : number;
declare type ufixed168x72<N = void> = N extends number ? number[] : number;
declare type ufixed168x73<N = void> = N extends number ? number[] : number;
declare type ufixed168x74<N = void> = N extends number ? number[] : number;
declare type ufixed168x75<N = void> = N extends number ? number[] : number;
declare type ufixed168x76<N = void> = N extends number ? number[] : number;
declare type ufixed168x77<N = void> = N extends number ? number[] : number;
declare type ufixed168x78<N = void> = N extends number ? number[] : number;
declare type ufixed168x79<N = void> = N extends number ? number[] : number;
declare type ufixed168x80<N = void> = N extends number ? number[] : number;
declare type ufixed168x81<N = void> = N extends number ? number[] : number;
declare type ufixed168x82<N = void> = N extends number ? number[] : number;
declare type ufixed168x83<N = void> = N extends number ? number[] : number;
declare type ufixed168x84<N = void> = N extends number ? number[] : number;
declare type ufixed168x85<N = void> = N extends number ? number[] : number;
declare type ufixed168x86<N = void> = N extends number ? number[] : number;
declare type ufixed168x87<N = void> = N extends number ? number[] : number;
declare type ufixed168x88<N = void> = N extends number ? number[] : number;
declare type ufixed168x89<N = void> = N extends number ? number[] : number;
declare type ufixed168x90<N = void> = N extends number ? number[] : number;
declare type ufixed168x91<N = void> = N extends number ? number[] : number;
declare type ufixed168x92<N = void> = N extends number ? number[] : number;
declare type ufixed168x93<N = void> = N extends number ? number[] : number;
declare type ufixed168x94<N = void> = N extends number ? number[] : number;
declare type ufixed168x95<N = void> = N extends number ? number[] : number;
declare type ufixed168x96<N = void> = N extends number ? number[] : number;
declare type ufixed168x97<N = void> = N extends number ? number[] : number;
declare type ufixed168x98<N = void> = N extends number ? number[] : number;
declare type ufixed168x99<N = void> = N extends number ? number[] : number;
declare type ufixed168x100<N = void> = N extends number ? number[] : number;
declare type ufixed168x101<N = void> = N extends number ? number[] : number;
declare type ufixed168x102<N = void> = N extends number ? number[] : number;
declare type ufixed168x103<N = void> = N extends number ? number[] : number;
declare type ufixed168x104<N = void> = N extends number ? number[] : number;
declare type ufixed168x105<N = void> = N extends number ? number[] : number;
declare type ufixed168x106<N = void> = N extends number ? number[] : number;
declare type ufixed168x107<N = void> = N extends number ? number[] : number;
declare type ufixed168x108<N = void> = N extends number ? number[] : number;
declare type ufixed168x109<N = void> = N extends number ? number[] : number;
declare type ufixed168x110<N = void> = N extends number ? number[] : number;
declare type ufixed168x111<N = void> = N extends number ? number[] : number;
declare type ufixed168x112<N = void> = N extends number ? number[] : number;
declare type ufixed168x113<N = void> = N extends number ? number[] : number;
declare type ufixed168x114<N = void> = N extends number ? number[] : number;
declare type ufixed168x115<N = void> = N extends number ? number[] : number;
declare type ufixed168x116<N = void> = N extends number ? number[] : number;
declare type ufixed168x117<N = void> = N extends number ? number[] : number;
declare type ufixed168x118<N = void> = N extends number ? number[] : number;
declare type ufixed168x119<N = void> = N extends number ? number[] : number;
declare type ufixed168x120<N = void> = N extends number ? number[] : number;
declare type ufixed168x121<N = void> = N extends number ? number[] : number;
declare type ufixed168x122<N = void> = N extends number ? number[] : number;
declare type ufixed168x123<N = void> = N extends number ? number[] : number;
declare type ufixed168x124<N = void> = N extends number ? number[] : number;
declare type ufixed168x125<N = void> = N extends number ? number[] : number;
declare type ufixed168x126<N = void> = N extends number ? number[] : number;
declare type ufixed168x127<N = void> = N extends number ? number[] : number;
declare type ufixed168x128<N = void> = N extends number ? number[] : number;
declare type ufixed168x129<N = void> = N extends number ? number[] : number;
declare type ufixed168x130<N = void> = N extends number ? number[] : number;
declare type ufixed168x131<N = void> = N extends number ? number[] : number;
declare type ufixed168x132<N = void> = N extends number ? number[] : number;
declare type ufixed168x133<N = void> = N extends number ? number[] : number;
declare type ufixed168x134<N = void> = N extends number ? number[] : number;
declare type ufixed168x135<N = void> = N extends number ? number[] : number;
declare type ufixed168x136<N = void> = N extends number ? number[] : number;
declare type ufixed168x137<N = void> = N extends number ? number[] : number;
declare type ufixed168x138<N = void> = N extends number ? number[] : number;
declare type ufixed168x139<N = void> = N extends number ? number[] : number;
declare type ufixed168x140<N = void> = N extends number ? number[] : number;
declare type ufixed168x141<N = void> = N extends number ? number[] : number;
declare type ufixed168x142<N = void> = N extends number ? number[] : number;
declare type ufixed168x143<N = void> = N extends number ? number[] : number;
declare type ufixed168x144<N = void> = N extends number ? number[] : number;
declare type ufixed168x145<N = void> = N extends number ? number[] : number;
declare type ufixed168x146<N = void> = N extends number ? number[] : number;
declare type ufixed168x147<N = void> = N extends number ? number[] : number;
declare type ufixed168x148<N = void> = N extends number ? number[] : number;
declare type ufixed168x149<N = void> = N extends number ? number[] : number;
declare type ufixed168x150<N = void> = N extends number ? number[] : number;
declare type ufixed168x151<N = void> = N extends number ? number[] : number;
declare type ufixed168x152<N = void> = N extends number ? number[] : number;
declare type ufixed168x153<N = void> = N extends number ? number[] : number;
declare type ufixed168x154<N = void> = N extends number ? number[] : number;
declare type ufixed168x155<N = void> = N extends number ? number[] : number;
declare type ufixed168x156<N = void> = N extends number ? number[] : number;
declare type ufixed168x157<N = void> = N extends number ? number[] : number;
declare type ufixed168x158<N = void> = N extends number ? number[] : number;
declare type ufixed168x159<N = void> = N extends number ? number[] : number;
declare type ufixed168x160<N = void> = N extends number ? number[] : number;
declare type ufixed176x1<N = void> = N extends number ? number[] : number;
declare type ufixed176x2<N = void> = N extends number ? number[] : number;
declare type ufixed176x3<N = void> = N extends number ? number[] : number;
declare type ufixed176x4<N = void> = N extends number ? number[] : number;
declare type ufixed176x5<N = void> = N extends number ? number[] : number;
declare type ufixed176x6<N = void> = N extends number ? number[] : number;
declare type ufixed176x7<N = void> = N extends number ? number[] : number;
declare type ufixed176x8<N = void> = N extends number ? number[] : number;
declare type ufixed176x9<N = void> = N extends number ? number[] : number;
declare type ufixed176x10<N = void> = N extends number ? number[] : number;
declare type ufixed176x11<N = void> = N extends number ? number[] : number;
declare type ufixed176x12<N = void> = N extends number ? number[] : number;
declare type ufixed176x13<N = void> = N extends number ? number[] : number;
declare type ufixed176x14<N = void> = N extends number ? number[] : number;
declare type ufixed176x15<N = void> = N extends number ? number[] : number;
declare type ufixed176x16<N = void> = N extends number ? number[] : number;
declare type ufixed176x17<N = void> = N extends number ? number[] : number;
declare type ufixed176x18<N = void> = N extends number ? number[] : number;
declare type ufixed176x19<N = void> = N extends number ? number[] : number;
declare type ufixed176x20<N = void> = N extends number ? number[] : number;
declare type ufixed176x21<N = void> = N extends number ? number[] : number;
declare type ufixed176x22<N = void> = N extends number ? number[] : number;
declare type ufixed176x23<N = void> = N extends number ? number[] : number;
declare type ufixed176x24<N = void> = N extends number ? number[] : number;
declare type ufixed176x25<N = void> = N extends number ? number[] : number;
declare type ufixed176x26<N = void> = N extends number ? number[] : number;
declare type ufixed176x27<N = void> = N extends number ? number[] : number;
declare type ufixed176x28<N = void> = N extends number ? number[] : number;
declare type ufixed176x29<N = void> = N extends number ? number[] : number;
declare type ufixed176x30<N = void> = N extends number ? number[] : number;
declare type ufixed176x31<N = void> = N extends number ? number[] : number;
declare type ufixed176x32<N = void> = N extends number ? number[] : number;
declare type ufixed176x33<N = void> = N extends number ? number[] : number;
declare type ufixed176x34<N = void> = N extends number ? number[] : number;
declare type ufixed176x35<N = void> = N extends number ? number[] : number;
declare type ufixed176x36<N = void> = N extends number ? number[] : number;
declare type ufixed176x37<N = void> = N extends number ? number[] : number;
declare type ufixed176x38<N = void> = N extends number ? number[] : number;
declare type ufixed176x39<N = void> = N extends number ? number[] : number;
declare type ufixed176x40<N = void> = N extends number ? number[] : number;
declare type ufixed176x41<N = void> = N extends number ? number[] : number;
declare type ufixed176x42<N = void> = N extends number ? number[] : number;
declare type ufixed176x43<N = void> = N extends number ? number[] : number;
declare type ufixed176x44<N = void> = N extends number ? number[] : number;
declare type ufixed176x45<N = void> = N extends number ? number[] : number;
declare type ufixed176x46<N = void> = N extends number ? number[] : number;
declare type ufixed176x47<N = void> = N extends number ? number[] : number;
declare type ufixed176x48<N = void> = N extends number ? number[] : number;
declare type ufixed176x49<N = void> = N extends number ? number[] : number;
declare type ufixed176x50<N = void> = N extends number ? number[] : number;
declare type ufixed176x51<N = void> = N extends number ? number[] : number;
declare type ufixed176x52<N = void> = N extends number ? number[] : number;
declare type ufixed176x53<N = void> = N extends number ? number[] : number;
declare type ufixed176x54<N = void> = N extends number ? number[] : number;
declare type ufixed176x55<N = void> = N extends number ? number[] : number;
declare type ufixed176x56<N = void> = N extends number ? number[] : number;
declare type ufixed176x57<N = void> = N extends number ? number[] : number;
declare type ufixed176x58<N = void> = N extends number ? number[] : number;
declare type ufixed176x59<N = void> = N extends number ? number[] : number;
declare type ufixed176x60<N = void> = N extends number ? number[] : number;
declare type ufixed176x61<N = void> = N extends number ? number[] : number;
declare type ufixed176x62<N = void> = N extends number ? number[] : number;
declare type ufixed176x63<N = void> = N extends number ? number[] : number;
declare type ufixed176x64<N = void> = N extends number ? number[] : number;
declare type ufixed176x65<N = void> = N extends number ? number[] : number;
declare type ufixed176x66<N = void> = N extends number ? number[] : number;
declare type ufixed176x67<N = void> = N extends number ? number[] : number;
declare type ufixed176x68<N = void> = N extends number ? number[] : number;
declare type ufixed176x69<N = void> = N extends number ? number[] : number;
declare type ufixed176x70<N = void> = N extends number ? number[] : number;
declare type ufixed176x71<N = void> = N extends number ? number[] : number;
declare type ufixed176x72<N = void> = N extends number ? number[] : number;
declare type ufixed176x73<N = void> = N extends number ? number[] : number;
declare type ufixed176x74<N = void> = N extends number ? number[] : number;
declare type ufixed176x75<N = void> = N extends number ? number[] : number;
declare type ufixed176x76<N = void> = N extends number ? number[] : number;
declare type ufixed176x77<N = void> = N extends number ? number[] : number;
declare type ufixed176x78<N = void> = N extends number ? number[] : number;
declare type ufixed176x79<N = void> = N extends number ? number[] : number;
declare type ufixed176x80<N = void> = N extends number ? number[] : number;
declare type ufixed176x81<N = void> = N extends number ? number[] : number;
declare type ufixed176x82<N = void> = N extends number ? number[] : number;
declare type ufixed176x83<N = void> = N extends number ? number[] : number;
declare type ufixed176x84<N = void> = N extends number ? number[] : number;
declare type ufixed176x85<N = void> = N extends number ? number[] : number;
declare type ufixed176x86<N = void> = N extends number ? number[] : number;
declare type ufixed176x87<N = void> = N extends number ? number[] : number;
declare type ufixed176x88<N = void> = N extends number ? number[] : number;
declare type ufixed176x89<N = void> = N extends number ? number[] : number;
declare type ufixed176x90<N = void> = N extends number ? number[] : number;
declare type ufixed176x91<N = void> = N extends number ? number[] : number;
declare type ufixed176x92<N = void> = N extends number ? number[] : number;
declare type ufixed176x93<N = void> = N extends number ? number[] : number;
declare type ufixed176x94<N = void> = N extends number ? number[] : number;
declare type ufixed176x95<N = void> = N extends number ? number[] : number;
declare type ufixed176x96<N = void> = N extends number ? number[] : number;
declare type ufixed176x97<N = void> = N extends number ? number[] : number;
declare type ufixed176x98<N = void> = N extends number ? number[] : number;
declare type ufixed176x99<N = void> = N extends number ? number[] : number;
declare type ufixed176x100<N = void> = N extends number ? number[] : number;
declare type ufixed176x101<N = void> = N extends number ? number[] : number;
declare type ufixed176x102<N = void> = N extends number ? number[] : number;
declare type ufixed176x103<N = void> = N extends number ? number[] : number;
declare type ufixed176x104<N = void> = N extends number ? number[] : number;
declare type ufixed176x105<N = void> = N extends number ? number[] : number;
declare type ufixed176x106<N = void> = N extends number ? number[] : number;
declare type ufixed176x107<N = void> = N extends number ? number[] : number;
declare type ufixed176x108<N = void> = N extends number ? number[] : number;
declare type ufixed176x109<N = void> = N extends number ? number[] : number;
declare type ufixed176x110<N = void> = N extends number ? number[] : number;
declare type ufixed176x111<N = void> = N extends number ? number[] : number;
declare type ufixed176x112<N = void> = N extends number ? number[] : number;
declare type ufixed176x113<N = void> = N extends number ? number[] : number;
declare type ufixed176x114<N = void> = N extends number ? number[] : number;
declare type ufixed176x115<N = void> = N extends number ? number[] : number;
declare type ufixed176x116<N = void> = N extends number ? number[] : number;
declare type ufixed176x117<N = void> = N extends number ? number[] : number;
declare type ufixed176x118<N = void> = N extends number ? number[] : number;
declare type ufixed176x119<N = void> = N extends number ? number[] : number;
declare type ufixed176x120<N = void> = N extends number ? number[] : number;
declare type ufixed176x121<N = void> = N extends number ? number[] : number;
declare type ufixed176x122<N = void> = N extends number ? number[] : number;
declare type ufixed176x123<N = void> = N extends number ? number[] : number;
declare type ufixed176x124<N = void> = N extends number ? number[] : number;
declare type ufixed176x125<N = void> = N extends number ? number[] : number;
declare type ufixed176x126<N = void> = N extends number ? number[] : number;
declare type ufixed176x127<N = void> = N extends number ? number[] : number;
declare type ufixed176x128<N = void> = N extends number ? number[] : number;
declare type ufixed176x129<N = void> = N extends number ? number[] : number;
declare type ufixed176x130<N = void> = N extends number ? number[] : number;
declare type ufixed176x131<N = void> = N extends number ? number[] : number;
declare type ufixed176x132<N = void> = N extends number ? number[] : number;
declare type ufixed176x133<N = void> = N extends number ? number[] : number;
declare type ufixed176x134<N = void> = N extends number ? number[] : number;
declare type ufixed176x135<N = void> = N extends number ? number[] : number;
declare type ufixed176x136<N = void> = N extends number ? number[] : number;
declare type ufixed176x137<N = void> = N extends number ? number[] : number;
declare type ufixed176x138<N = void> = N extends number ? number[] : number;
declare type ufixed176x139<N = void> = N extends number ? number[] : number;
declare type ufixed176x140<N = void> = N extends number ? number[] : number;
declare type ufixed176x141<N = void> = N extends number ? number[] : number;
declare type ufixed176x142<N = void> = N extends number ? number[] : number;
declare type ufixed176x143<N = void> = N extends number ? number[] : number;
declare type ufixed176x144<N = void> = N extends number ? number[] : number;
declare type ufixed176x145<N = void> = N extends number ? number[] : number;
declare type ufixed176x146<N = void> = N extends number ? number[] : number;
declare type ufixed176x147<N = void> = N extends number ? number[] : number;
declare type ufixed176x148<N = void> = N extends number ? number[] : number;
declare type ufixed176x149<N = void> = N extends number ? number[] : number;
declare type ufixed176x150<N = void> = N extends number ? number[] : number;
declare type ufixed176x151<N = void> = N extends number ? number[] : number;
declare type ufixed176x152<N = void> = N extends number ? number[] : number;
declare type ufixed176x153<N = void> = N extends number ? number[] : number;
declare type ufixed176x154<N = void> = N extends number ? number[] : number;
declare type ufixed176x155<N = void> = N extends number ? number[] : number;
declare type ufixed176x156<N = void> = N extends number ? number[] : number;
declare type ufixed176x157<N = void> = N extends number ? number[] : number;
declare type ufixed176x158<N = void> = N extends number ? number[] : number;
declare type ufixed176x159<N = void> = N extends number ? number[] : number;
declare type ufixed176x160<N = void> = N extends number ? number[] : number;
declare type ufixed184x1<N = void> = N extends number ? number[] : number;
declare type ufixed184x2<N = void> = N extends number ? number[] : number;
declare type ufixed184x3<N = void> = N extends number ? number[] : number;
declare type ufixed184x4<N = void> = N extends number ? number[] : number;
declare type ufixed184x5<N = void> = N extends number ? number[] : number;
declare type ufixed184x6<N = void> = N extends number ? number[] : number;
declare type ufixed184x7<N = void> = N extends number ? number[] : number;
declare type ufixed184x8<N = void> = N extends number ? number[] : number;
declare type ufixed184x9<N = void> = N extends number ? number[] : number;
declare type ufixed184x10<N = void> = N extends number ? number[] : number;
declare type ufixed184x11<N = void> = N extends number ? number[] : number;
declare type ufixed184x12<N = void> = N extends number ? number[] : number;
declare type ufixed184x13<N = void> = N extends number ? number[] : number;
declare type ufixed184x14<N = void> = N extends number ? number[] : number;
declare type ufixed184x15<N = void> = N extends number ? number[] : number;
declare type ufixed184x16<N = void> = N extends number ? number[] : number;
declare type ufixed184x17<N = void> = N extends number ? number[] : number;
declare type ufixed184x18<N = void> = N extends number ? number[] : number;
declare type ufixed184x19<N = void> = N extends number ? number[] : number;
declare type ufixed184x20<N = void> = N extends number ? number[] : number;
declare type ufixed184x21<N = void> = N extends number ? number[] : number;
declare type ufixed184x22<N = void> = N extends number ? number[] : number;
declare type ufixed184x23<N = void> = N extends number ? number[] : number;
declare type ufixed184x24<N = void> = N extends number ? number[] : number;
declare type ufixed184x25<N = void> = N extends number ? number[] : number;
declare type ufixed184x26<N = void> = N extends number ? number[] : number;
declare type ufixed184x27<N = void> = N extends number ? number[] : number;
declare type ufixed184x28<N = void> = N extends number ? number[] : number;
declare type ufixed184x29<N = void> = N extends number ? number[] : number;
declare type ufixed184x30<N = void> = N extends number ? number[] : number;
declare type ufixed184x31<N = void> = N extends number ? number[] : number;
declare type ufixed184x32<N = void> = N extends number ? number[] : number;
declare type ufixed184x33<N = void> = N extends number ? number[] : number;
declare type ufixed184x34<N = void> = N extends number ? number[] : number;
declare type ufixed184x35<N = void> = N extends number ? number[] : number;
declare type ufixed184x36<N = void> = N extends number ? number[] : number;
declare type ufixed184x37<N = void> = N extends number ? number[] : number;
declare type ufixed184x38<N = void> = N extends number ? number[] : number;
declare type ufixed184x39<N = void> = N extends number ? number[] : number;
declare type ufixed184x40<N = void> = N extends number ? number[] : number;
declare type ufixed184x41<N = void> = N extends number ? number[] : number;
declare type ufixed184x42<N = void> = N extends number ? number[] : number;
declare type ufixed184x43<N = void> = N extends number ? number[] : number;
declare type ufixed184x44<N = void> = N extends number ? number[] : number;
declare type ufixed184x45<N = void> = N extends number ? number[] : number;
declare type ufixed184x46<N = void> = N extends number ? number[] : number;
declare type ufixed184x47<N = void> = N extends number ? number[] : number;
declare type ufixed184x48<N = void> = N extends number ? number[] : number;
declare type ufixed184x49<N = void> = N extends number ? number[] : number;
declare type ufixed184x50<N = void> = N extends number ? number[] : number;
declare type ufixed184x51<N = void> = N extends number ? number[] : number;
declare type ufixed184x52<N = void> = N extends number ? number[] : number;
declare type ufixed184x53<N = void> = N extends number ? number[] : number;
declare type ufixed184x54<N = void> = N extends number ? number[] : number;
declare type ufixed184x55<N = void> = N extends number ? number[] : number;
declare type ufixed184x56<N = void> = N extends number ? number[] : number;
declare type ufixed184x57<N = void> = N extends number ? number[] : number;
declare type ufixed184x58<N = void> = N extends number ? number[] : number;
declare type ufixed184x59<N = void> = N extends number ? number[] : number;
declare type ufixed184x60<N = void> = N extends number ? number[] : number;
declare type ufixed184x61<N = void> = N extends number ? number[] : number;
declare type ufixed184x62<N = void> = N extends number ? number[] : number;
declare type ufixed184x63<N = void> = N extends number ? number[] : number;
declare type ufixed184x64<N = void> = N extends number ? number[] : number;
declare type ufixed184x65<N = void> = N extends number ? number[] : number;
declare type ufixed184x66<N = void> = N extends number ? number[] : number;
declare type ufixed184x67<N = void> = N extends number ? number[] : number;
declare type ufixed184x68<N = void> = N extends number ? number[] : number;
declare type ufixed184x69<N = void> = N extends number ? number[] : number;
declare type ufixed184x70<N = void> = N extends number ? number[] : number;
declare type ufixed184x71<N = void> = N extends number ? number[] : number;
declare type ufixed184x72<N = void> = N extends number ? number[] : number;
declare type ufixed184x73<N = void> = N extends number ? number[] : number;
declare type ufixed184x74<N = void> = N extends number ? number[] : number;
declare type ufixed184x75<N = void> = N extends number ? number[] : number;
declare type ufixed184x76<N = void> = N extends number ? number[] : number;
declare type ufixed184x77<N = void> = N extends number ? number[] : number;
declare type ufixed184x78<N = void> = N extends number ? number[] : number;
declare type ufixed184x79<N = void> = N extends number ? number[] : number;
declare type ufixed184x80<N = void> = N extends number ? number[] : number;
declare type ufixed184x81<N = void> = N extends number ? number[] : number;
declare type ufixed184x82<N = void> = N extends number ? number[] : number;
declare type ufixed184x83<N = void> = N extends number ? number[] : number;
declare type ufixed184x84<N = void> = N extends number ? number[] : number;
declare type ufixed184x85<N = void> = N extends number ? number[] : number;
declare type ufixed184x86<N = void> = N extends number ? number[] : number;
declare type ufixed184x87<N = void> = N extends number ? number[] : number;
declare type ufixed184x88<N = void> = N extends number ? number[] : number;
declare type ufixed184x89<N = void> = N extends number ? number[] : number;
declare type ufixed184x90<N = void> = N extends number ? number[] : number;
declare type ufixed184x91<N = void> = N extends number ? number[] : number;
declare type ufixed184x92<N = void> = N extends number ? number[] : number;
declare type ufixed184x93<N = void> = N extends number ? number[] : number;
declare type ufixed184x94<N = void> = N extends number ? number[] : number;
declare type ufixed184x95<N = void> = N extends number ? number[] : number;
declare type ufixed184x96<N = void> = N extends number ? number[] : number;
declare type ufixed184x97<N = void> = N extends number ? number[] : number;
declare type ufixed184x98<N = void> = N extends number ? number[] : number;
declare type ufixed184x99<N = void> = N extends number ? number[] : number;
declare type ufixed184x100<N = void> = N extends number ? number[] : number;
declare type ufixed184x101<N = void> = N extends number ? number[] : number;
declare type ufixed184x102<N = void> = N extends number ? number[] : number;
declare type ufixed184x103<N = void> = N extends number ? number[] : number;
declare type ufixed184x104<N = void> = N extends number ? number[] : number;
declare type ufixed184x105<N = void> = N extends number ? number[] : number;
declare type ufixed184x106<N = void> = N extends number ? number[] : number;
declare type ufixed184x107<N = void> = N extends number ? number[] : number;
declare type ufixed184x108<N = void> = N extends number ? number[] : number;
declare type ufixed184x109<N = void> = N extends number ? number[] : number;
declare type ufixed184x110<N = void> = N extends number ? number[] : number;
declare type ufixed184x111<N = void> = N extends number ? number[] : number;
declare type ufixed184x112<N = void> = N extends number ? number[] : number;
declare type ufixed184x113<N = void> = N extends number ? number[] : number;
declare type ufixed184x114<N = void> = N extends number ? number[] : number;
declare type ufixed184x115<N = void> = N extends number ? number[] : number;
declare type ufixed184x116<N = void> = N extends number ? number[] : number;
declare type ufixed184x117<N = void> = N extends number ? number[] : number;
declare type ufixed184x118<N = void> = N extends number ? number[] : number;
declare type ufixed184x119<N = void> = N extends number ? number[] : number;
declare type ufixed184x120<N = void> = N extends number ? number[] : number;
declare type ufixed184x121<N = void> = N extends number ? number[] : number;
declare type ufixed184x122<N = void> = N extends number ? number[] : number;
declare type ufixed184x123<N = void> = N extends number ? number[] : number;
declare type ufixed184x124<N = void> = N extends number ? number[] : number;
declare type ufixed184x125<N = void> = N extends number ? number[] : number;
declare type ufixed184x126<N = void> = N extends number ? number[] : number;
declare type ufixed184x127<N = void> = N extends number ? number[] : number;
declare type ufixed184x128<N = void> = N extends number ? number[] : number;
declare type ufixed184x129<N = void> = N extends number ? number[] : number;
declare type ufixed184x130<N = void> = N extends number ? number[] : number;
declare type ufixed184x131<N = void> = N extends number ? number[] : number;
declare type ufixed184x132<N = void> = N extends number ? number[] : number;
declare type ufixed184x133<N = void> = N extends number ? number[] : number;
declare type ufixed184x134<N = void> = N extends number ? number[] : number;
declare type ufixed184x135<N = void> = N extends number ? number[] : number;
declare type ufixed184x136<N = void> = N extends number ? number[] : number;
declare type ufixed184x137<N = void> = N extends number ? number[] : number;
declare type ufixed184x138<N = void> = N extends number ? number[] : number;
declare type ufixed184x139<N = void> = N extends number ? number[] : number;
declare type ufixed184x140<N = void> = N extends number ? number[] : number;
declare type ufixed184x141<N = void> = N extends number ? number[] : number;
declare type ufixed184x142<N = void> = N extends number ? number[] : number;
declare type ufixed184x143<N = void> = N extends number ? number[] : number;
declare type ufixed184x144<N = void> = N extends number ? number[] : number;
declare type ufixed184x145<N = void> = N extends number ? number[] : number;
declare type ufixed184x146<N = void> = N extends number ? number[] : number;
declare type ufixed184x147<N = void> = N extends number ? number[] : number;
declare type ufixed184x148<N = void> = N extends number ? number[] : number;
declare type ufixed184x149<N = void> = N extends number ? number[] : number;
declare type ufixed184x150<N = void> = N extends number ? number[] : number;
declare type ufixed184x151<N = void> = N extends number ? number[] : number;
declare type ufixed184x152<N = void> = N extends number ? number[] : number;
declare type ufixed184x153<N = void> = N extends number ? number[] : number;
declare type ufixed184x154<N = void> = N extends number ? number[] : number;
declare type ufixed184x155<N = void> = N extends number ? number[] : number;
declare type ufixed184x156<N = void> = N extends number ? number[] : number;
declare type ufixed184x157<N = void> = N extends number ? number[] : number;
declare type ufixed184x158<N = void> = N extends number ? number[] : number;
declare type ufixed184x159<N = void> = N extends number ? number[] : number;
declare type ufixed184x160<N = void> = N extends number ? number[] : number;
declare type ufixed192x1<N = void> = N extends number ? number[] : number;
declare type ufixed192x2<N = void> = N extends number ? number[] : number;
declare type ufixed192x3<N = void> = N extends number ? number[] : number;
declare type ufixed192x4<N = void> = N extends number ? number[] : number;
declare type ufixed192x5<N = void> = N extends number ? number[] : number;
declare type ufixed192x6<N = void> = N extends number ? number[] : number;
declare type ufixed192x7<N = void> = N extends number ? number[] : number;
declare type ufixed192x8<N = void> = N extends number ? number[] : number;
declare type ufixed192x9<N = void> = N extends number ? number[] : number;
declare type ufixed192x10<N = void> = N extends number ? number[] : number;
declare type ufixed192x11<N = void> = N extends number ? number[] : number;
declare type ufixed192x12<N = void> = N extends number ? number[] : number;
declare type ufixed192x13<N = void> = N extends number ? number[] : number;
declare type ufixed192x14<N = void> = N extends number ? number[] : number;
declare type ufixed192x15<N = void> = N extends number ? number[] : number;
declare type ufixed192x16<N = void> = N extends number ? number[] : number;
declare type ufixed192x17<N = void> = N extends number ? number[] : number;
declare type ufixed192x18<N = void> = N extends number ? number[] : number;
declare type ufixed192x19<N = void> = N extends number ? number[] : number;
declare type ufixed192x20<N = void> = N extends number ? number[] : number;
declare type ufixed192x21<N = void> = N extends number ? number[] : number;
declare type ufixed192x22<N = void> = N extends number ? number[] : number;
declare type ufixed192x23<N = void> = N extends number ? number[] : number;
declare type ufixed192x24<N = void> = N extends number ? number[] : number;
declare type ufixed192x25<N = void> = N extends number ? number[] : number;
declare type ufixed192x26<N = void> = N extends number ? number[] : number;
declare type ufixed192x27<N = void> = N extends number ? number[] : number;
declare type ufixed192x28<N = void> = N extends number ? number[] : number;
declare type ufixed192x29<N = void> = N extends number ? number[] : number;
declare type ufixed192x30<N = void> = N extends number ? number[] : number;
declare type ufixed192x31<N = void> = N extends number ? number[] : number;
declare type ufixed192x32<N = void> = N extends number ? number[] : number;
declare type ufixed192x33<N = void> = N extends number ? number[] : number;
declare type ufixed192x34<N = void> = N extends number ? number[] : number;
declare type ufixed192x35<N = void> = N extends number ? number[] : number;
declare type ufixed192x36<N = void> = N extends number ? number[] : number;
declare type ufixed192x37<N = void> = N extends number ? number[] : number;
declare type ufixed192x38<N = void> = N extends number ? number[] : number;
declare type ufixed192x39<N = void> = N extends number ? number[] : number;
declare type ufixed192x40<N = void> = N extends number ? number[] : number;
declare type ufixed192x41<N = void> = N extends number ? number[] : number;
declare type ufixed192x42<N = void> = N extends number ? number[] : number;
declare type ufixed192x43<N = void> = N extends number ? number[] : number;
declare type ufixed192x44<N = void> = N extends number ? number[] : number;
declare type ufixed192x45<N = void> = N extends number ? number[] : number;
declare type ufixed192x46<N = void> = N extends number ? number[] : number;
declare type ufixed192x47<N = void> = N extends number ? number[] : number;
declare type ufixed192x48<N = void> = N extends number ? number[] : number;
declare type ufixed192x49<N = void> = N extends number ? number[] : number;
declare type ufixed192x50<N = void> = N extends number ? number[] : number;
declare type ufixed192x51<N = void> = N extends number ? number[] : number;
declare type ufixed192x52<N = void> = N extends number ? number[] : number;
declare type ufixed192x53<N = void> = N extends number ? number[] : number;
declare type ufixed192x54<N = void> = N extends number ? number[] : number;
declare type ufixed192x55<N = void> = N extends number ? number[] : number;
declare type ufixed192x56<N = void> = N extends number ? number[] : number;
declare type ufixed192x57<N = void> = N extends number ? number[] : number;
declare type ufixed192x58<N = void> = N extends number ? number[] : number;
declare type ufixed192x59<N = void> = N extends number ? number[] : number;
declare type ufixed192x60<N = void> = N extends number ? number[] : number;
declare type ufixed192x61<N = void> = N extends number ? number[] : number;
declare type ufixed192x62<N = void> = N extends number ? number[] : number;
declare type ufixed192x63<N = void> = N extends number ? number[] : number;
declare type ufixed192x64<N = void> = N extends number ? number[] : number;
declare type ufixed192x65<N = void> = N extends number ? number[] : number;
declare type ufixed192x66<N = void> = N extends number ? number[] : number;
declare type ufixed192x67<N = void> = N extends number ? number[] : number;
declare type ufixed192x68<N = void> = N extends number ? number[] : number;
declare type ufixed192x69<N = void> = N extends number ? number[] : number;
declare type ufixed192x70<N = void> = N extends number ? number[] : number;
declare type ufixed192x71<N = void> = N extends number ? number[] : number;
declare type ufixed192x72<N = void> = N extends number ? number[] : number;
declare type ufixed192x73<N = void> = N extends number ? number[] : number;
declare type ufixed192x74<N = void> = N extends number ? number[] : number;
declare type ufixed192x75<N = void> = N extends number ? number[] : number;
declare type ufixed192x76<N = void> = N extends number ? number[] : number;
declare type ufixed192x77<N = void> = N extends number ? number[] : number;
declare type ufixed192x78<N = void> = N extends number ? number[] : number;
declare type ufixed192x79<N = void> = N extends number ? number[] : number;
declare type ufixed192x80<N = void> = N extends number ? number[] : number;
declare type ufixed192x81<N = void> = N extends number ? number[] : number;
declare type ufixed192x82<N = void> = N extends number ? number[] : number;
declare type ufixed192x83<N = void> = N extends number ? number[] : number;
declare type ufixed192x84<N = void> = N extends number ? number[] : number;
declare type ufixed192x85<N = void> = N extends number ? number[] : number;
declare type ufixed192x86<N = void> = N extends number ? number[] : number;
declare type ufixed192x87<N = void> = N extends number ? number[] : number;
declare type ufixed192x88<N = void> = N extends number ? number[] : number;
declare type ufixed192x89<N = void> = N extends number ? number[] : number;
declare type ufixed192x90<N = void> = N extends number ? number[] : number;
declare type ufixed192x91<N = void> = N extends number ? number[] : number;
declare type ufixed192x92<N = void> = N extends number ? number[] : number;
declare type ufixed192x93<N = void> = N extends number ? number[] : number;
declare type ufixed192x94<N = void> = N extends number ? number[] : number;
declare type ufixed192x95<N = void> = N extends number ? number[] : number;
declare type ufixed192x96<N = void> = N extends number ? number[] : number;
declare type ufixed192x97<N = void> = N extends number ? number[] : number;
declare type ufixed192x98<N = void> = N extends number ? number[] : number;
declare type ufixed192x99<N = void> = N extends number ? number[] : number;
declare type ufixed192x100<N = void> = N extends number ? number[] : number;
declare type ufixed192x101<N = void> = N extends number ? number[] : number;
declare type ufixed192x102<N = void> = N extends number ? number[] : number;
declare type ufixed192x103<N = void> = N extends number ? number[] : number;
declare type ufixed192x104<N = void> = N extends number ? number[] : number;
declare type ufixed192x105<N = void> = N extends number ? number[] : number;
declare type ufixed192x106<N = void> = N extends number ? number[] : number;
declare type ufixed192x107<N = void> = N extends number ? number[] : number;
declare type ufixed192x108<N = void> = N extends number ? number[] : number;
declare type ufixed192x109<N = void> = N extends number ? number[] : number;
declare type ufixed192x110<N = void> = N extends number ? number[] : number;
declare type ufixed192x111<N = void> = N extends number ? number[] : number;
declare type ufixed192x112<N = void> = N extends number ? number[] : number;
declare type ufixed192x113<N = void> = N extends number ? number[] : number;
declare type ufixed192x114<N = void> = N extends number ? number[] : number;
declare type ufixed192x115<N = void> = N extends number ? number[] : number;
declare type ufixed192x116<N = void> = N extends number ? number[] : number;
declare type ufixed192x117<N = void> = N extends number ? number[] : number;
declare type ufixed192x118<N = void> = N extends number ? number[] : number;
declare type ufixed192x119<N = void> = N extends number ? number[] : number;
declare type ufixed192x120<N = void> = N extends number ? number[] : number;
declare type ufixed192x121<N = void> = N extends number ? number[] : number;
declare type ufixed192x122<N = void> = N extends number ? number[] : number;
declare type ufixed192x123<N = void> = N extends number ? number[] : number;
declare type ufixed192x124<N = void> = N extends number ? number[] : number;
declare type ufixed192x125<N = void> = N extends number ? number[] : number;
declare type ufixed192x126<N = void> = N extends number ? number[] : number;
declare type ufixed192x127<N = void> = N extends number ? number[] : number;
declare type ufixed192x128<N = void> = N extends number ? number[] : number;
declare type ufixed192x129<N = void> = N extends number ? number[] : number;
declare type ufixed192x130<N = void> = N extends number ? number[] : number;
declare type ufixed192x131<N = void> = N extends number ? number[] : number;
declare type ufixed192x132<N = void> = N extends number ? number[] : number;
declare type ufixed192x133<N = void> = N extends number ? number[] : number;
declare type ufixed192x134<N = void> = N extends number ? number[] : number;
declare type ufixed192x135<N = void> = N extends number ? number[] : number;
declare type ufixed192x136<N = void> = N extends number ? number[] : number;
declare type ufixed192x137<N = void> = N extends number ? number[] : number;
declare type ufixed192x138<N = void> = N extends number ? number[] : number;
declare type ufixed192x139<N = void> = N extends number ? number[] : number;
declare type ufixed192x140<N = void> = N extends number ? number[] : number;
declare type ufixed192x141<N = void> = N extends number ? number[] : number;
declare type ufixed192x142<N = void> = N extends number ? number[] : number;
declare type ufixed192x143<N = void> = N extends number ? number[] : number;
declare type ufixed192x144<N = void> = N extends number ? number[] : number;
declare type ufixed192x145<N = void> = N extends number ? number[] : number;
declare type ufixed192x146<N = void> = N extends number ? number[] : number;
declare type ufixed192x147<N = void> = N extends number ? number[] : number;
declare type ufixed192x148<N = void> = N extends number ? number[] : number;
declare type ufixed192x149<N = void> = N extends number ? number[] : number;
declare type ufixed192x150<N = void> = N extends number ? number[] : number;
declare type ufixed192x151<N = void> = N extends number ? number[] : number;
declare type ufixed192x152<N = void> = N extends number ? number[] : number;
declare type ufixed192x153<N = void> = N extends number ? number[] : number;
declare type ufixed192x154<N = void> = N extends number ? number[] : number;
declare type ufixed192x155<N = void> = N extends number ? number[] : number;
declare type ufixed192x156<N = void> = N extends number ? number[] : number;
declare type ufixed192x157<N = void> = N extends number ? number[] : number;
declare type ufixed192x158<N = void> = N extends number ? number[] : number;
declare type ufixed192x159<N = void> = N extends number ? number[] : number;
declare type ufixed192x160<N = void> = N extends number ? number[] : number;
declare type ufixed200x1<N = void> = N extends number ? number[] : number;
declare type ufixed200x2<N = void> = N extends number ? number[] : number;
declare type ufixed200x3<N = void> = N extends number ? number[] : number;
declare type ufixed200x4<N = void> = N extends number ? number[] : number;
declare type ufixed200x5<N = void> = N extends number ? number[] : number;
declare type ufixed200x6<N = void> = N extends number ? number[] : number;
declare type ufixed200x7<N = void> = N extends number ? number[] : number;
declare type ufixed200x8<N = void> = N extends number ? number[] : number;
declare type ufixed200x9<N = void> = N extends number ? number[] : number;
declare type ufixed200x10<N = void> = N extends number ? number[] : number;
declare type ufixed200x11<N = void> = N extends number ? number[] : number;
declare type ufixed200x12<N = void> = N extends number ? number[] : number;
declare type ufixed200x13<N = void> = N extends number ? number[] : number;
declare type ufixed200x14<N = void> = N extends number ? number[] : number;
declare type ufixed200x15<N = void> = N extends number ? number[] : number;
declare type ufixed200x16<N = void> = N extends number ? number[] : number;
declare type ufixed200x17<N = void> = N extends number ? number[] : number;
declare type ufixed200x18<N = void> = N extends number ? number[] : number;
declare type ufixed200x19<N = void> = N extends number ? number[] : number;
declare type ufixed200x20<N = void> = N extends number ? number[] : number;
declare type ufixed200x21<N = void> = N extends number ? number[] : number;
declare type ufixed200x22<N = void> = N extends number ? number[] : number;
declare type ufixed200x23<N = void> = N extends number ? number[] : number;
declare type ufixed200x24<N = void> = N extends number ? number[] : number;
declare type ufixed200x25<N = void> = N extends number ? number[] : number;
declare type ufixed200x26<N = void> = N extends number ? number[] : number;
declare type ufixed200x27<N = void> = N extends number ? number[] : number;
declare type ufixed200x28<N = void> = N extends number ? number[] : number;
declare type ufixed200x29<N = void> = N extends number ? number[] : number;
declare type ufixed200x30<N = void> = N extends number ? number[] : number;
declare type ufixed200x31<N = void> = N extends number ? number[] : number;
declare type ufixed200x32<N = void> = N extends number ? number[] : number;
declare type ufixed200x33<N = void> = N extends number ? number[] : number;
declare type ufixed200x34<N = void> = N extends number ? number[] : number;
declare type ufixed200x35<N = void> = N extends number ? number[] : number;
declare type ufixed200x36<N = void> = N extends number ? number[] : number;
declare type ufixed200x37<N = void> = N extends number ? number[] : number;
declare type ufixed200x38<N = void> = N extends number ? number[] : number;
declare type ufixed200x39<N = void> = N extends number ? number[] : number;
declare type ufixed200x40<N = void> = N extends number ? number[] : number;
declare type ufixed200x41<N = void> = N extends number ? number[] : number;
declare type ufixed200x42<N = void> = N extends number ? number[] : number;
declare type ufixed200x43<N = void> = N extends number ? number[] : number;
declare type ufixed200x44<N = void> = N extends number ? number[] : number;
declare type ufixed200x45<N = void> = N extends number ? number[] : number;
declare type ufixed200x46<N = void> = N extends number ? number[] : number;
declare type ufixed200x47<N = void> = N extends number ? number[] : number;
declare type ufixed200x48<N = void> = N extends number ? number[] : number;
declare type ufixed200x49<N = void> = N extends number ? number[] : number;
declare type ufixed200x50<N = void> = N extends number ? number[] : number;
declare type ufixed200x51<N = void> = N extends number ? number[] : number;
declare type ufixed200x52<N = void> = N extends number ? number[] : number;
declare type ufixed200x53<N = void> = N extends number ? number[] : number;
declare type ufixed200x54<N = void> = N extends number ? number[] : number;
declare type ufixed200x55<N = void> = N extends number ? number[] : number;
declare type ufixed200x56<N = void> = N extends number ? number[] : number;
declare type ufixed200x57<N = void> = N extends number ? number[] : number;
declare type ufixed200x58<N = void> = N extends number ? number[] : number;
declare type ufixed200x59<N = void> = N extends number ? number[] : number;
declare type ufixed200x60<N = void> = N extends number ? number[] : number;
declare type ufixed200x61<N = void> = N extends number ? number[] : number;
declare type ufixed200x62<N = void> = N extends number ? number[] : number;
declare type ufixed200x63<N = void> = N extends number ? number[] : number;
declare type ufixed200x64<N = void> = N extends number ? number[] : number;
declare type ufixed200x65<N = void> = N extends number ? number[] : number;
declare type ufixed200x66<N = void> = N extends number ? number[] : number;
declare type ufixed200x67<N = void> = N extends number ? number[] : number;
declare type ufixed200x68<N = void> = N extends number ? number[] : number;
declare type ufixed200x69<N = void> = N extends number ? number[] : number;
declare type ufixed200x70<N = void> = N extends number ? number[] : number;
declare type ufixed200x71<N = void> = N extends number ? number[] : number;
declare type ufixed200x72<N = void> = N extends number ? number[] : number;
declare type ufixed200x73<N = void> = N extends number ? number[] : number;
declare type ufixed200x74<N = void> = N extends number ? number[] : number;
declare type ufixed200x75<N = void> = N extends number ? number[] : number;
declare type ufixed200x76<N = void> = N extends number ? number[] : number;
declare type ufixed200x77<N = void> = N extends number ? number[] : number;
declare type ufixed200x78<N = void> = N extends number ? number[] : number;
declare type ufixed200x79<N = void> = N extends number ? number[] : number;
declare type ufixed200x80<N = void> = N extends number ? number[] : number;
declare type ufixed200x81<N = void> = N extends number ? number[] : number;
declare type ufixed200x82<N = void> = N extends number ? number[] : number;
declare type ufixed200x83<N = void> = N extends number ? number[] : number;
declare type ufixed200x84<N = void> = N extends number ? number[] : number;
declare type ufixed200x85<N = void> = N extends number ? number[] : number;
declare type ufixed200x86<N = void> = N extends number ? number[] : number;
declare type ufixed200x87<N = void> = N extends number ? number[] : number;
declare type ufixed200x88<N = void> = N extends number ? number[] : number;
declare type ufixed200x89<N = void> = N extends number ? number[] : number;
declare type ufixed200x90<N = void> = N extends number ? number[] : number;
declare type ufixed200x91<N = void> = N extends number ? number[] : number;
declare type ufixed200x92<N = void> = N extends number ? number[] : number;
declare type ufixed200x93<N = void> = N extends number ? number[] : number;
declare type ufixed200x94<N = void> = N extends number ? number[] : number;
declare type ufixed200x95<N = void> = N extends number ? number[] : number;
declare type ufixed200x96<N = void> = N extends number ? number[] : number;
declare type ufixed200x97<N = void> = N extends number ? number[] : number;
declare type ufixed200x98<N = void> = N extends number ? number[] : number;
declare type ufixed200x99<N = void> = N extends number ? number[] : number;
declare type ufixed200x100<N = void> = N extends number ? number[] : number;
declare type ufixed200x101<N = void> = N extends number ? number[] : number;
declare type ufixed200x102<N = void> = N extends number ? number[] : number;
declare type ufixed200x103<N = void> = N extends number ? number[] : number;
declare type ufixed200x104<N = void> = N extends number ? number[] : number;
declare type ufixed200x105<N = void> = N extends number ? number[] : number;
declare type ufixed200x106<N = void> = N extends number ? number[] : number;
declare type ufixed200x107<N = void> = N extends number ? number[] : number;
declare type ufixed200x108<N = void> = N extends number ? number[] : number;
declare type ufixed200x109<N = void> = N extends number ? number[] : number;
declare type ufixed200x110<N = void> = N extends number ? number[] : number;
declare type ufixed200x111<N = void> = N extends number ? number[] : number;
declare type ufixed200x112<N = void> = N extends number ? number[] : number;
declare type ufixed200x113<N = void> = N extends number ? number[] : number;
declare type ufixed200x114<N = void> = N extends number ? number[] : number;
declare type ufixed200x115<N = void> = N extends number ? number[] : number;
declare type ufixed200x116<N = void> = N extends number ? number[] : number;
declare type ufixed200x117<N = void> = N extends number ? number[] : number;
declare type ufixed200x118<N = void> = N extends number ? number[] : number;
declare type ufixed200x119<N = void> = N extends number ? number[] : number;
declare type ufixed200x120<N = void> = N extends number ? number[] : number;
declare type ufixed200x121<N = void> = N extends number ? number[] : number;
declare type ufixed200x122<N = void> = N extends number ? number[] : number;
declare type ufixed200x123<N = void> = N extends number ? number[] : number;
declare type ufixed200x124<N = void> = N extends number ? number[] : number;
declare type ufixed200x125<N = void> = N extends number ? number[] : number;
declare type ufixed200x126<N = void> = N extends number ? number[] : number;
declare type ufixed200x127<N = void> = N extends number ? number[] : number;
declare type ufixed200x128<N = void> = N extends number ? number[] : number;
declare type ufixed200x129<N = void> = N extends number ? number[] : number;
declare type ufixed200x130<N = void> = N extends number ? number[] : number;
declare type ufixed200x131<N = void> = N extends number ? number[] : number;
declare type ufixed200x132<N = void> = N extends number ? number[] : number;
declare type ufixed200x133<N = void> = N extends number ? number[] : number;
declare type ufixed200x134<N = void> = N extends number ? number[] : number;
declare type ufixed200x135<N = void> = N extends number ? number[] : number;
declare type ufixed200x136<N = void> = N extends number ? number[] : number;
declare type ufixed200x137<N = void> = N extends number ? number[] : number;
declare type ufixed200x138<N = void> = N extends number ? number[] : number;
declare type ufixed200x139<N = void> = N extends number ? number[] : number;
declare type ufixed200x140<N = void> = N extends number ? number[] : number;
declare type ufixed200x141<N = void> = N extends number ? number[] : number;
declare type ufixed200x142<N = void> = N extends number ? number[] : number;
declare type ufixed200x143<N = void> = N extends number ? number[] : number;
declare type ufixed200x144<N = void> = N extends number ? number[] : number;
declare type ufixed200x145<N = void> = N extends number ? number[] : number;
declare type ufixed200x146<N = void> = N extends number ? number[] : number;
declare type ufixed200x147<N = void> = N extends number ? number[] : number;
declare type ufixed200x148<N = void> = N extends number ? number[] : number;
declare type ufixed200x149<N = void> = N extends number ? number[] : number;
declare type ufixed200x150<N = void> = N extends number ? number[] : number;
declare type ufixed200x151<N = void> = N extends number ? number[] : number;
declare type ufixed200x152<N = void> = N extends number ? number[] : number;
declare type ufixed200x153<N = void> = N extends number ? number[] : number;
declare type ufixed200x154<N = void> = N extends number ? number[] : number;
declare type ufixed200x155<N = void> = N extends number ? number[] : number;
declare type ufixed200x156<N = void> = N extends number ? number[] : number;
declare type ufixed200x157<N = void> = N extends number ? number[] : number;
declare type ufixed200x158<N = void> = N extends number ? number[] : number;
declare type ufixed200x159<N = void> = N extends number ? number[] : number;
declare type ufixed200x160<N = void> = N extends number ? number[] : number;
declare type ufixed208x1<N = void> = N extends number ? number[] : number;
declare type ufixed208x2<N = void> = N extends number ? number[] : number;
declare type ufixed208x3<N = void> = N extends number ? number[] : number;
declare type ufixed208x4<N = void> = N extends number ? number[] : number;
declare type ufixed208x5<N = void> = N extends number ? number[] : number;
declare type ufixed208x6<N = void> = N extends number ? number[] : number;
declare type ufixed208x7<N = void> = N extends number ? number[] : number;
declare type ufixed208x8<N = void> = N extends number ? number[] : number;
declare type ufixed208x9<N = void> = N extends number ? number[] : number;
declare type ufixed208x10<N = void> = N extends number ? number[] : number;
declare type ufixed208x11<N = void> = N extends number ? number[] : number;
declare type ufixed208x12<N = void> = N extends number ? number[] : number;
declare type ufixed208x13<N = void> = N extends number ? number[] : number;
declare type ufixed208x14<N = void> = N extends number ? number[] : number;
declare type ufixed208x15<N = void> = N extends number ? number[] : number;
declare type ufixed208x16<N = void> = N extends number ? number[] : number;
declare type ufixed208x17<N = void> = N extends number ? number[] : number;
declare type ufixed208x18<N = void> = N extends number ? number[] : number;
declare type ufixed208x19<N = void> = N extends number ? number[] : number;
declare type ufixed208x20<N = void> = N extends number ? number[] : number;
declare type ufixed208x21<N = void> = N extends number ? number[] : number;
declare type ufixed208x22<N = void> = N extends number ? number[] : number;
declare type ufixed208x23<N = void> = N extends number ? number[] : number;
declare type ufixed208x24<N = void> = N extends number ? number[] : number;
declare type ufixed208x25<N = void> = N extends number ? number[] : number;
declare type ufixed208x26<N = void> = N extends number ? number[] : number;
declare type ufixed208x27<N = void> = N extends number ? number[] : number;
declare type ufixed208x28<N = void> = N extends number ? number[] : number;
declare type ufixed208x29<N = void> = N extends number ? number[] : number;
declare type ufixed208x30<N = void> = N extends number ? number[] : number;
declare type ufixed208x31<N = void> = N extends number ? number[] : number;
declare type ufixed208x32<N = void> = N extends number ? number[] : number;
declare type ufixed208x33<N = void> = N extends number ? number[] : number;
declare type ufixed208x34<N = void> = N extends number ? number[] : number;
declare type ufixed208x35<N = void> = N extends number ? number[] : number;
declare type ufixed208x36<N = void> = N extends number ? number[] : number;
declare type ufixed208x37<N = void> = N extends number ? number[] : number;
declare type ufixed208x38<N = void> = N extends number ? number[] : number;
declare type ufixed208x39<N = void> = N extends number ? number[] : number;
declare type ufixed208x40<N = void> = N extends number ? number[] : number;
declare type ufixed208x41<N = void> = N extends number ? number[] : number;
declare type ufixed208x42<N = void> = N extends number ? number[] : number;
declare type ufixed208x43<N = void> = N extends number ? number[] : number;
declare type ufixed208x44<N = void> = N extends number ? number[] : number;
declare type ufixed208x45<N = void> = N extends number ? number[] : number;
declare type ufixed208x46<N = void> = N extends number ? number[] : number;
declare type ufixed208x47<N = void> = N extends number ? number[] : number;
declare type ufixed208x48<N = void> = N extends number ? number[] : number;
declare type ufixed208x49<N = void> = N extends number ? number[] : number;
declare type ufixed208x50<N = void> = N extends number ? number[] : number;
declare type ufixed208x51<N = void> = N extends number ? number[] : number;
declare type ufixed208x52<N = void> = N extends number ? number[] : number;
declare type ufixed208x53<N = void> = N extends number ? number[] : number;
declare type ufixed208x54<N = void> = N extends number ? number[] : number;
declare type ufixed208x55<N = void> = N extends number ? number[] : number;
declare type ufixed208x56<N = void> = N extends number ? number[] : number;
declare type ufixed208x57<N = void> = N extends number ? number[] : number;
declare type ufixed208x58<N = void> = N extends number ? number[] : number;
declare type ufixed208x59<N = void> = N extends number ? number[] : number;
declare type ufixed208x60<N = void> = N extends number ? number[] : number;
declare type ufixed208x61<N = void> = N extends number ? number[] : number;
declare type ufixed208x62<N = void> = N extends number ? number[] : number;
declare type ufixed208x63<N = void> = N extends number ? number[] : number;
declare type ufixed208x64<N = void> = N extends number ? number[] : number;
declare type ufixed208x65<N = void> = N extends number ? number[] : number;
declare type ufixed208x66<N = void> = N extends number ? number[] : number;
declare type ufixed208x67<N = void> = N extends number ? number[] : number;
declare type ufixed208x68<N = void> = N extends number ? number[] : number;
declare type ufixed208x69<N = void> = N extends number ? number[] : number;
declare type ufixed208x70<N = void> = N extends number ? number[] : number;
declare type ufixed208x71<N = void> = N extends number ? number[] : number;
declare type ufixed208x72<N = void> = N extends number ? number[] : number;
declare type ufixed208x73<N = void> = N extends number ? number[] : number;
declare type ufixed208x74<N = void> = N extends number ? number[] : number;
declare type ufixed208x75<N = void> = N extends number ? number[] : number;
declare type ufixed208x76<N = void> = N extends number ? number[] : number;
declare type ufixed208x77<N = void> = N extends number ? number[] : number;
declare type ufixed208x78<N = void> = N extends number ? number[] : number;
declare type ufixed208x79<N = void> = N extends number ? number[] : number;
declare type ufixed208x80<N = void> = N extends number ? number[] : number;
declare type ufixed208x81<N = void> = N extends number ? number[] : number;
declare type ufixed208x82<N = void> = N extends number ? number[] : number;
declare type ufixed208x83<N = void> = N extends number ? number[] : number;
declare type ufixed208x84<N = void> = N extends number ? number[] : number;
declare type ufixed208x85<N = void> = N extends number ? number[] : number;
declare type ufixed208x86<N = void> = N extends number ? number[] : number;
declare type ufixed208x87<N = void> = N extends number ? number[] : number;
declare type ufixed208x88<N = void> = N extends number ? number[] : number;
declare type ufixed208x89<N = void> = N extends number ? number[] : number;
declare type ufixed208x90<N = void> = N extends number ? number[] : number;
declare type ufixed208x91<N = void> = N extends number ? number[] : number;
declare type ufixed208x92<N = void> = N extends number ? number[] : number;
declare type ufixed208x93<N = void> = N extends number ? number[] : number;
declare type ufixed208x94<N = void> = N extends number ? number[] : number;
declare type ufixed208x95<N = void> = N extends number ? number[] : number;
declare type ufixed208x96<N = void> = N extends number ? number[] : number;
declare type ufixed208x97<N = void> = N extends number ? number[] : number;
declare type ufixed208x98<N = void> = N extends number ? number[] : number;
declare type ufixed208x99<N = void> = N extends number ? number[] : number;
declare type ufixed208x100<N = void> = N extends number ? number[] : number;
declare type ufixed208x101<N = void> = N extends number ? number[] : number;
declare type ufixed208x102<N = void> = N extends number ? number[] : number;
declare type ufixed208x103<N = void> = N extends number ? number[] : number;
declare type ufixed208x104<N = void> = N extends number ? number[] : number;
declare type ufixed208x105<N = void> = N extends number ? number[] : number;
declare type ufixed208x106<N = void> = N extends number ? number[] : number;
declare type ufixed208x107<N = void> = N extends number ? number[] : number;
declare type ufixed208x108<N = void> = N extends number ? number[] : number;
declare type ufixed208x109<N = void> = N extends number ? number[] : number;
declare type ufixed208x110<N = void> = N extends number ? number[] : number;
declare type ufixed208x111<N = void> = N extends number ? number[] : number;
declare type ufixed208x112<N = void> = N extends number ? number[] : number;
declare type ufixed208x113<N = void> = N extends number ? number[] : number;
declare type ufixed208x114<N = void> = N extends number ? number[] : number;
declare type ufixed208x115<N = void> = N extends number ? number[] : number;
declare type ufixed208x116<N = void> = N extends number ? number[] : number;
declare type ufixed208x117<N = void> = N extends number ? number[] : number;
declare type ufixed208x118<N = void> = N extends number ? number[] : number;
declare type ufixed208x119<N = void> = N extends number ? number[] : number;
declare type ufixed208x120<N = void> = N extends number ? number[] : number;
declare type ufixed208x121<N = void> = N extends number ? number[] : number;
declare type ufixed208x122<N = void> = N extends number ? number[] : number;
declare type ufixed208x123<N = void> = N extends number ? number[] : number;
declare type ufixed208x124<N = void> = N extends number ? number[] : number;
declare type ufixed208x125<N = void> = N extends number ? number[] : number;
declare type ufixed208x126<N = void> = N extends number ? number[] : number;
declare type ufixed208x127<N = void> = N extends number ? number[] : number;
declare type ufixed208x128<N = void> = N extends number ? number[] : number;
declare type ufixed208x129<N = void> = N extends number ? number[] : number;
declare type ufixed208x130<N = void> = N extends number ? number[] : number;
declare type ufixed208x131<N = void> = N extends number ? number[] : number;
declare type ufixed208x132<N = void> = N extends number ? number[] : number;
declare type ufixed208x133<N = void> = N extends number ? number[] : number;
declare type ufixed208x134<N = void> = N extends number ? number[] : number;
declare type ufixed208x135<N = void> = N extends number ? number[] : number;
declare type ufixed208x136<N = void> = N extends number ? number[] : number;
declare type ufixed208x137<N = void> = N extends number ? number[] : number;
declare type ufixed208x138<N = void> = N extends number ? number[] : number;
declare type ufixed208x139<N = void> = N extends number ? number[] : number;
declare type ufixed208x140<N = void> = N extends number ? number[] : number;
declare type ufixed208x141<N = void> = N extends number ? number[] : number;
declare type ufixed208x142<N = void> = N extends number ? number[] : number;
declare type ufixed208x143<N = void> = N extends number ? number[] : number;
declare type ufixed208x144<N = void> = N extends number ? number[] : number;
declare type ufixed208x145<N = void> = N extends number ? number[] : number;
declare type ufixed208x146<N = void> = N extends number ? number[] : number;
declare type ufixed208x147<N = void> = N extends number ? number[] : number;
declare type ufixed208x148<N = void> = N extends number ? number[] : number;
declare type ufixed208x149<N = void> = N extends number ? number[] : number;
declare type ufixed208x150<N = void> = N extends number ? number[] : number;
declare type ufixed208x151<N = void> = N extends number ? number[] : number;
declare type ufixed208x152<N = void> = N extends number ? number[] : number;
declare type ufixed208x153<N = void> = N extends number ? number[] : number;
declare type ufixed208x154<N = void> = N extends number ? number[] : number;
declare type ufixed208x155<N = void> = N extends number ? number[] : number;
declare type ufixed208x156<N = void> = N extends number ? number[] : number;
declare type ufixed208x157<N = void> = N extends number ? number[] : number;
declare type ufixed208x158<N = void> = N extends number ? number[] : number;
declare type ufixed208x159<N = void> = N extends number ? number[] : number;
declare type ufixed208x160<N = void> = N extends number ? number[] : number;
declare type ufixed216x1<N = void> = N extends number ? number[] : number;
declare type ufixed216x2<N = void> = N extends number ? number[] : number;
declare type ufixed216x3<N = void> = N extends number ? number[] : number;
declare type ufixed216x4<N = void> = N extends number ? number[] : number;
declare type ufixed216x5<N = void> = N extends number ? number[] : number;
declare type ufixed216x6<N = void> = N extends number ? number[] : number;
declare type ufixed216x7<N = void> = N extends number ? number[] : number;
declare type ufixed216x8<N = void> = N extends number ? number[] : number;
declare type ufixed216x9<N = void> = N extends number ? number[] : number;
declare type ufixed216x10<N = void> = N extends number ? number[] : number;
declare type ufixed216x11<N = void> = N extends number ? number[] : number;
declare type ufixed216x12<N = void> = N extends number ? number[] : number;
declare type ufixed216x13<N = void> = N extends number ? number[] : number;
declare type ufixed216x14<N = void> = N extends number ? number[] : number;
declare type ufixed216x15<N = void> = N extends number ? number[] : number;
declare type ufixed216x16<N = void> = N extends number ? number[] : number;
declare type ufixed216x17<N = void> = N extends number ? number[] : number;
declare type ufixed216x18<N = void> = N extends number ? number[] : number;
declare type ufixed216x19<N = void> = N extends number ? number[] : number;
declare type ufixed216x20<N = void> = N extends number ? number[] : number;
declare type ufixed216x21<N = void> = N extends number ? number[] : number;
declare type ufixed216x22<N = void> = N extends number ? number[] : number;
declare type ufixed216x23<N = void> = N extends number ? number[] : number;
declare type ufixed216x24<N = void> = N extends number ? number[] : number;
declare type ufixed216x25<N = void> = N extends number ? number[] : number;
declare type ufixed216x26<N = void> = N extends number ? number[] : number;
declare type ufixed216x27<N = void> = N extends number ? number[] : number;
declare type ufixed216x28<N = void> = N extends number ? number[] : number;
declare type ufixed216x29<N = void> = N extends number ? number[] : number;
declare type ufixed216x30<N = void> = N extends number ? number[] : number;
declare type ufixed216x31<N = void> = N extends number ? number[] : number;
declare type ufixed216x32<N = void> = N extends number ? number[] : number;
declare type ufixed216x33<N = void> = N extends number ? number[] : number;
declare type ufixed216x34<N = void> = N extends number ? number[] : number;
declare type ufixed216x35<N = void> = N extends number ? number[] : number;
declare type ufixed216x36<N = void> = N extends number ? number[] : number;
declare type ufixed216x37<N = void> = N extends number ? number[] : number;
declare type ufixed216x38<N = void> = N extends number ? number[] : number;
declare type ufixed216x39<N = void> = N extends number ? number[] : number;
declare type ufixed216x40<N = void> = N extends number ? number[] : number;
declare type ufixed216x41<N = void> = N extends number ? number[] : number;
declare type ufixed216x42<N = void> = N extends number ? number[] : number;
declare type ufixed216x43<N = void> = N extends number ? number[] : number;
declare type ufixed216x44<N = void> = N extends number ? number[] : number;
declare type ufixed216x45<N = void> = N extends number ? number[] : number;
declare type ufixed216x46<N = void> = N extends number ? number[] : number;
declare type ufixed216x47<N = void> = N extends number ? number[] : number;
declare type ufixed216x48<N = void> = N extends number ? number[] : number;
declare type ufixed216x49<N = void> = N extends number ? number[] : number;
declare type ufixed216x50<N = void> = N extends number ? number[] : number;
declare type ufixed216x51<N = void> = N extends number ? number[] : number;
declare type ufixed216x52<N = void> = N extends number ? number[] : number;
declare type ufixed216x53<N = void> = N extends number ? number[] : number;
declare type ufixed216x54<N = void> = N extends number ? number[] : number;
declare type ufixed216x55<N = void> = N extends number ? number[] : number;
declare type ufixed216x56<N = void> = N extends number ? number[] : number;
declare type ufixed216x57<N = void> = N extends number ? number[] : number;
declare type ufixed216x58<N = void> = N extends number ? number[] : number;
declare type ufixed216x59<N = void> = N extends number ? number[] : number;
declare type ufixed216x60<N = void> = N extends number ? number[] : number;
declare type ufixed216x61<N = void> = N extends number ? number[] : number;
declare type ufixed216x62<N = void> = N extends number ? number[] : number;
declare type ufixed216x63<N = void> = N extends number ? number[] : number;
declare type ufixed216x64<N = void> = N extends number ? number[] : number;
declare type ufixed216x65<N = void> = N extends number ? number[] : number;
declare type ufixed216x66<N = void> = N extends number ? number[] : number;
declare type ufixed216x67<N = void> = N extends number ? number[] : number;
declare type ufixed216x68<N = void> = N extends number ? number[] : number;
declare type ufixed216x69<N = void> = N extends number ? number[] : number;
declare type ufixed216x70<N = void> = N extends number ? number[] : number;
declare type ufixed216x71<N = void> = N extends number ? number[] : number;
declare type ufixed216x72<N = void> = N extends number ? number[] : number;
declare type ufixed216x73<N = void> = N extends number ? number[] : number;
declare type ufixed216x74<N = void> = N extends number ? number[] : number;
declare type ufixed216x75<N = void> = N extends number ? number[] : number;
declare type ufixed216x76<N = void> = N extends number ? number[] : number;
declare type ufixed216x77<N = void> = N extends number ? number[] : number;
declare type ufixed216x78<N = void> = N extends number ? number[] : number;
declare type ufixed216x79<N = void> = N extends number ? number[] : number;
declare type ufixed216x80<N = void> = N extends number ? number[] : number;
declare type ufixed216x81<N = void> = N extends number ? number[] : number;
declare type ufixed216x82<N = void> = N extends number ? number[] : number;
declare type ufixed216x83<N = void> = N extends number ? number[] : number;
declare type ufixed216x84<N = void> = N extends number ? number[] : number;
declare type ufixed216x85<N = void> = N extends number ? number[] : number;
declare type ufixed216x86<N = void> = N extends number ? number[] : number;
declare type ufixed216x87<N = void> = N extends number ? number[] : number;
declare type ufixed216x88<N = void> = N extends number ? number[] : number;
declare type ufixed216x89<N = void> = N extends number ? number[] : number;
declare type ufixed216x90<N = void> = N extends number ? number[] : number;
declare type ufixed216x91<N = void> = N extends number ? number[] : number;
declare type ufixed216x92<N = void> = N extends number ? number[] : number;
declare type ufixed216x93<N = void> = N extends number ? number[] : number;
declare type ufixed216x94<N = void> = N extends number ? number[] : number;
declare type ufixed216x95<N = void> = N extends number ? number[] : number;
declare type ufixed216x96<N = void> = N extends number ? number[] : number;
declare type ufixed216x97<N = void> = N extends number ? number[] : number;
declare type ufixed216x98<N = void> = N extends number ? number[] : number;
declare type ufixed216x99<N = void> = N extends number ? number[] : number;
declare type ufixed216x100<N = void> = N extends number ? number[] : number;
declare type ufixed216x101<N = void> = N extends number ? number[] : number;
declare type ufixed216x102<N = void> = N extends number ? number[] : number;
declare type ufixed216x103<N = void> = N extends number ? number[] : number;
declare type ufixed216x104<N = void> = N extends number ? number[] : number;
declare type ufixed216x105<N = void> = N extends number ? number[] : number;
declare type ufixed216x106<N = void> = N extends number ? number[] : number;
declare type ufixed216x107<N = void> = N extends number ? number[] : number;
declare type ufixed216x108<N = void> = N extends number ? number[] : number;
declare type ufixed216x109<N = void> = N extends number ? number[] : number;
declare type ufixed216x110<N = void> = N extends number ? number[] : number;
declare type ufixed216x111<N = void> = N extends number ? number[] : number;
declare type ufixed216x112<N = void> = N extends number ? number[] : number;
declare type ufixed216x113<N = void> = N extends number ? number[] : number;
declare type ufixed216x114<N = void> = N extends number ? number[] : number;
declare type ufixed216x115<N = void> = N extends number ? number[] : number;
declare type ufixed216x116<N = void> = N extends number ? number[] : number;
declare type ufixed216x117<N = void> = N extends number ? number[] : number;
declare type ufixed216x118<N = void> = N extends number ? number[] : number;
declare type ufixed216x119<N = void> = N extends number ? number[] : number;
declare type ufixed216x120<N = void> = N extends number ? number[] : number;
declare type ufixed216x121<N = void> = N extends number ? number[] : number;
declare type ufixed216x122<N = void> = N extends number ? number[] : number;
declare type ufixed216x123<N = void> = N extends number ? number[] : number;
declare type ufixed216x124<N = void> = N extends number ? number[] : number;
declare type ufixed216x125<N = void> = N extends number ? number[] : number;
declare type ufixed216x126<N = void> = N extends number ? number[] : number;
declare type ufixed216x127<N = void> = N extends number ? number[] : number;
declare type ufixed216x128<N = void> = N extends number ? number[] : number;
declare type ufixed216x129<N = void> = N extends number ? number[] : number;
declare type ufixed216x130<N = void> = N extends number ? number[] : number;
declare type ufixed216x131<N = void> = N extends number ? number[] : number;
declare type ufixed216x132<N = void> = N extends number ? number[] : number;
declare type ufixed216x133<N = void> = N extends number ? number[] : number;
declare type ufixed216x134<N = void> = N extends number ? number[] : number;
declare type ufixed216x135<N = void> = N extends number ? number[] : number;
declare type ufixed216x136<N = void> = N extends number ? number[] : number;
declare type ufixed216x137<N = void> = N extends number ? number[] : number;
declare type ufixed216x138<N = void> = N extends number ? number[] : number;
declare type ufixed216x139<N = void> = N extends number ? number[] : number;
declare type ufixed216x140<N = void> = N extends number ? number[] : number;
declare type ufixed216x141<N = void> = N extends number ? number[] : number;
declare type ufixed216x142<N = void> = N extends number ? number[] : number;
declare type ufixed216x143<N = void> = N extends number ? number[] : number;
declare type ufixed216x144<N = void> = N extends number ? number[] : number;
declare type ufixed216x145<N = void> = N extends number ? number[] : number;
declare type ufixed216x146<N = void> = N extends number ? number[] : number;
declare type ufixed216x147<N = void> = N extends number ? number[] : number;
declare type ufixed216x148<N = void> = N extends number ? number[] : number;
declare type ufixed216x149<N = void> = N extends number ? number[] : number;
declare type ufixed216x150<N = void> = N extends number ? number[] : number;
declare type ufixed216x151<N = void> = N extends number ? number[] : number;
declare type ufixed216x152<N = void> = N extends number ? number[] : number;
declare type ufixed216x153<N = void> = N extends number ? number[] : number;
declare type ufixed216x154<N = void> = N extends number ? number[] : number;
declare type ufixed216x155<N = void> = N extends number ? number[] : number;
declare type ufixed216x156<N = void> = N extends number ? number[] : number;
declare type ufixed216x157<N = void> = N extends number ? number[] : number;
declare type ufixed216x158<N = void> = N extends number ? number[] : number;
declare type ufixed216x159<N = void> = N extends number ? number[] : number;
declare type ufixed216x160<N = void> = N extends number ? number[] : number;
declare type ufixed224x1<N = void> = N extends number ? number[] : number;
declare type ufixed224x2<N = void> = N extends number ? number[] : number;
declare type ufixed224x3<N = void> = N extends number ? number[] : number;
declare type ufixed224x4<N = void> = N extends number ? number[] : number;
declare type ufixed224x5<N = void> = N extends number ? number[] : number;
declare type ufixed224x6<N = void> = N extends number ? number[] : number;
declare type ufixed224x7<N = void> = N extends number ? number[] : number;
declare type ufixed224x8<N = void> = N extends number ? number[] : number;
declare type ufixed224x9<N = void> = N extends number ? number[] : number;
declare type ufixed224x10<N = void> = N extends number ? number[] : number;
declare type ufixed224x11<N = void> = N extends number ? number[] : number;
declare type ufixed224x12<N = void> = N extends number ? number[] : number;
declare type ufixed224x13<N = void> = N extends number ? number[] : number;
declare type ufixed224x14<N = void> = N extends number ? number[] : number;
declare type ufixed224x15<N = void> = N extends number ? number[] : number;
declare type ufixed224x16<N = void> = N extends number ? number[] : number;
declare type ufixed224x17<N = void> = N extends number ? number[] : number;
declare type ufixed224x18<N = void> = N extends number ? number[] : number;
declare type ufixed224x19<N = void> = N extends number ? number[] : number;
declare type ufixed224x20<N = void> = N extends number ? number[] : number;
declare type ufixed224x21<N = void> = N extends number ? number[] : number;
declare type ufixed224x22<N = void> = N extends number ? number[] : number;
declare type ufixed224x23<N = void> = N extends number ? number[] : number;
declare type ufixed224x24<N = void> = N extends number ? number[] : number;
declare type ufixed224x25<N = void> = N extends number ? number[] : number;
declare type ufixed224x26<N = void> = N extends number ? number[] : number;
declare type ufixed224x27<N = void> = N extends number ? number[] : number;
declare type ufixed224x28<N = void> = N extends number ? number[] : number;
declare type ufixed224x29<N = void> = N extends number ? number[] : number;
declare type ufixed224x30<N = void> = N extends number ? number[] : number;
declare type ufixed224x31<N = void> = N extends number ? number[] : number;
declare type ufixed224x32<N = void> = N extends number ? number[] : number;
declare type ufixed224x33<N = void> = N extends number ? number[] : number;
declare type ufixed224x34<N = void> = N extends number ? number[] : number;
declare type ufixed224x35<N = void> = N extends number ? number[] : number;
declare type ufixed224x36<N = void> = N extends number ? number[] : number;
declare type ufixed224x37<N = void> = N extends number ? number[] : number;
declare type ufixed224x38<N = void> = N extends number ? number[] : number;
declare type ufixed224x39<N = void> = N extends number ? number[] : number;
declare type ufixed224x40<N = void> = N extends number ? number[] : number;
declare type ufixed224x41<N = void> = N extends number ? number[] : number;
declare type ufixed224x42<N = void> = N extends number ? number[] : number;
declare type ufixed224x43<N = void> = N extends number ? number[] : number;
declare type ufixed224x44<N = void> = N extends number ? number[] : number;
declare type ufixed224x45<N = void> = N extends number ? number[] : number;
declare type ufixed224x46<N = void> = N extends number ? number[] : number;
declare type ufixed224x47<N = void> = N extends number ? number[] : number;
declare type ufixed224x48<N = void> = N extends number ? number[] : number;
declare type ufixed224x49<N = void> = N extends number ? number[] : number;
declare type ufixed224x50<N = void> = N extends number ? number[] : number;
declare type ufixed224x51<N = void> = N extends number ? number[] : number;
declare type ufixed224x52<N = void> = N extends number ? number[] : number;
declare type ufixed224x53<N = void> = N extends number ? number[] : number;
declare type ufixed224x54<N = void> = N extends number ? number[] : number;
declare type ufixed224x55<N = void> = N extends number ? number[] : number;
declare type ufixed224x56<N = void> = N extends number ? number[] : number;
declare type ufixed224x57<N = void> = N extends number ? number[] : number;
declare type ufixed224x58<N = void> = N extends number ? number[] : number;
declare type ufixed224x59<N = void> = N extends number ? number[] : number;
declare type ufixed224x60<N = void> = N extends number ? number[] : number;
declare type ufixed224x61<N = void> = N extends number ? number[] : number;
declare type ufixed224x62<N = void> = N extends number ? number[] : number;
declare type ufixed224x63<N = void> = N extends number ? number[] : number;
declare type ufixed224x64<N = void> = N extends number ? number[] : number;
declare type ufixed224x65<N = void> = N extends number ? number[] : number;
declare type ufixed224x66<N = void> = N extends number ? number[] : number;
declare type ufixed224x67<N = void> = N extends number ? number[] : number;
declare type ufixed224x68<N = void> = N extends number ? number[] : number;
declare type ufixed224x69<N = void> = N extends number ? number[] : number;
declare type ufixed224x70<N = void> = N extends number ? number[] : number;
declare type ufixed224x71<N = void> = N extends number ? number[] : number;
declare type ufixed224x72<N = void> = N extends number ? number[] : number;
declare type ufixed224x73<N = void> = N extends number ? number[] : number;
declare type ufixed224x74<N = void> = N extends number ? number[] : number;
declare type ufixed224x75<N = void> = N extends number ? number[] : number;
declare type ufixed224x76<N = void> = N extends number ? number[] : number;
declare type ufixed224x77<N = void> = N extends number ? number[] : number;
declare type ufixed224x78<N = void> = N extends number ? number[] : number;
declare type ufixed224x79<N = void> = N extends number ? number[] : number;
declare type ufixed224x80<N = void> = N extends number ? number[] : number;
declare type ufixed224x81<N = void> = N extends number ? number[] : number;
declare type ufixed224x82<N = void> = N extends number ? number[] : number;
declare type ufixed224x83<N = void> = N extends number ? number[] : number;
declare type ufixed224x84<N = void> = N extends number ? number[] : number;
declare type ufixed224x85<N = void> = N extends number ? number[] : number;
declare type ufixed224x86<N = void> = N extends number ? number[] : number;
declare type ufixed224x87<N = void> = N extends number ? number[] : number;
declare type ufixed224x88<N = void> = N extends number ? number[] : number;
declare type ufixed224x89<N = void> = N extends number ? number[] : number;
declare type ufixed224x90<N = void> = N extends number ? number[] : number;
declare type ufixed224x91<N = void> = N extends number ? number[] : number;
declare type ufixed224x92<N = void> = N extends number ? number[] : number;
declare type ufixed224x93<N = void> = N extends number ? number[] : number;
declare type ufixed224x94<N = void> = N extends number ? number[] : number;
declare type ufixed224x95<N = void> = N extends number ? number[] : number;
declare type ufixed224x96<N = void> = N extends number ? number[] : number;
declare type ufixed224x97<N = void> = N extends number ? number[] : number;
declare type ufixed224x98<N = void> = N extends number ? number[] : number;
declare type ufixed224x99<N = void> = N extends number ? number[] : number;
declare type ufixed224x100<N = void> = N extends number ? number[] : number;
declare type ufixed224x101<N = void> = N extends number ? number[] : number;
declare type ufixed224x102<N = void> = N extends number ? number[] : number;
declare type ufixed224x103<N = void> = N extends number ? number[] : number;
declare type ufixed224x104<N = void> = N extends number ? number[] : number;
declare type ufixed224x105<N = void> = N extends number ? number[] : number;
declare type ufixed224x106<N = void> = N extends number ? number[] : number;
declare type ufixed224x107<N = void> = N extends number ? number[] : number;
declare type ufixed224x108<N = void> = N extends number ? number[] : number;
declare type ufixed224x109<N = void> = N extends number ? number[] : number;
declare type ufixed224x110<N = void> = N extends number ? number[] : number;
declare type ufixed224x111<N = void> = N extends number ? number[] : number;
declare type ufixed224x112<N = void> = N extends number ? number[] : number;
declare type ufixed224x113<N = void> = N extends number ? number[] : number;
declare type ufixed224x114<N = void> = N extends number ? number[] : number;
declare type ufixed224x115<N = void> = N extends number ? number[] : number;
declare type ufixed224x116<N = void> = N extends number ? number[] : number;
declare type ufixed224x117<N = void> = N extends number ? number[] : number;
declare type ufixed224x118<N = void> = N extends number ? number[] : number;
declare type ufixed224x119<N = void> = N extends number ? number[] : number;
declare type ufixed224x120<N = void> = N extends number ? number[] : number;
declare type ufixed224x121<N = void> = N extends number ? number[] : number;
declare type ufixed224x122<N = void> = N extends number ? number[] : number;
declare type ufixed224x123<N = void> = N extends number ? number[] : number;
declare type ufixed224x124<N = void> = N extends number ? number[] : number;
declare type ufixed224x125<N = void> = N extends number ? number[] : number;
declare type ufixed224x126<N = void> = N extends number ? number[] : number;
declare type ufixed224x127<N = void> = N extends number ? number[] : number;
declare type ufixed224x128<N = void> = N extends number ? number[] : number;
declare type ufixed224x129<N = void> = N extends number ? number[] : number;
declare type ufixed224x130<N = void> = N extends number ? number[] : number;
declare type ufixed224x131<N = void> = N extends number ? number[] : number;
declare type ufixed224x132<N = void> = N extends number ? number[] : number;
declare type ufixed224x133<N = void> = N extends number ? number[] : number;
declare type ufixed224x134<N = void> = N extends number ? number[] : number;
declare type ufixed224x135<N = void> = N extends number ? number[] : number;
declare type ufixed224x136<N = void> = N extends number ? number[] : number;
declare type ufixed224x137<N = void> = N extends number ? number[] : number;
declare type ufixed224x138<N = void> = N extends number ? number[] : number;
declare type ufixed224x139<N = void> = N extends number ? number[] : number;
declare type ufixed224x140<N = void> = N extends number ? number[] : number;
declare type ufixed224x141<N = void> = N extends number ? number[] : number;
declare type ufixed224x142<N = void> = N extends number ? number[] : number;
declare type ufixed224x143<N = void> = N extends number ? number[] : number;
declare type ufixed224x144<N = void> = N extends number ? number[] : number;
declare type ufixed224x145<N = void> = N extends number ? number[] : number;
declare type ufixed224x146<N = void> = N extends number ? number[] : number;
declare type ufixed224x147<N = void> = N extends number ? number[] : number;
declare type ufixed224x148<N = void> = N extends number ? number[] : number;
declare type ufixed224x149<N = void> = N extends number ? number[] : number;
declare type ufixed224x150<N = void> = N extends number ? number[] : number;
declare type ufixed224x151<N = void> = N extends number ? number[] : number;
declare type ufixed224x152<N = void> = N extends number ? number[] : number;
declare type ufixed224x153<N = void> = N extends number ? number[] : number;
declare type ufixed224x154<N = void> = N extends number ? number[] : number;
declare type ufixed224x155<N = void> = N extends number ? number[] : number;
declare type ufixed224x156<N = void> = N extends number ? number[] : number;
declare type ufixed224x157<N = void> = N extends number ? number[] : number;
declare type ufixed224x158<N = void> = N extends number ? number[] : number;
declare type ufixed224x159<N = void> = N extends number ? number[] : number;
declare type ufixed224x160<N = void> = N extends number ? number[] : number;
declare type ufixed232x1<N = void> = N extends number ? number[] : number;
declare type ufixed232x2<N = void> = N extends number ? number[] : number;
declare type ufixed232x3<N = void> = N extends number ? number[] : number;
declare type ufixed232x4<N = void> = N extends number ? number[] : number;
declare type ufixed232x5<N = void> = N extends number ? number[] : number;
declare type ufixed232x6<N = void> = N extends number ? number[] : number;
declare type ufixed232x7<N = void> = N extends number ? number[] : number;
declare type ufixed232x8<N = void> = N extends number ? number[] : number;
declare type ufixed232x9<N = void> = N extends number ? number[] : number;
declare type ufixed232x10<N = void> = N extends number ? number[] : number;
declare type ufixed232x11<N = void> = N extends number ? number[] : number;
declare type ufixed232x12<N = void> = N extends number ? number[] : number;
declare type ufixed232x13<N = void> = N extends number ? number[] : number;
declare type ufixed232x14<N = void> = N extends number ? number[] : number;
declare type ufixed232x15<N = void> = N extends number ? number[] : number;
declare type ufixed232x16<N = void> = N extends number ? number[] : number;
declare type ufixed232x17<N = void> = N extends number ? number[] : number;
declare type ufixed232x18<N = void> = N extends number ? number[] : number;
declare type ufixed232x19<N = void> = N extends number ? number[] : number;
declare type ufixed232x20<N = void> = N extends number ? number[] : number;
declare type ufixed232x21<N = void> = N extends number ? number[] : number;
declare type ufixed232x22<N = void> = N extends number ? number[] : number;
declare type ufixed232x23<N = void> = N extends number ? number[] : number;
declare type ufixed232x24<N = void> = N extends number ? number[] : number;
declare type ufixed232x25<N = void> = N extends number ? number[] : number;
declare type ufixed232x26<N = void> = N extends number ? number[] : number;
declare type ufixed232x27<N = void> = N extends number ? number[] : number;
declare type ufixed232x28<N = void> = N extends number ? number[] : number;
declare type ufixed232x29<N = void> = N extends number ? number[] : number;
declare type ufixed232x30<N = void> = N extends number ? number[] : number;
declare type ufixed232x31<N = void> = N extends number ? number[] : number;
declare type ufixed232x32<N = void> = N extends number ? number[] : number;
declare type ufixed232x33<N = void> = N extends number ? number[] : number;
declare type ufixed232x34<N = void> = N extends number ? number[] : number;
declare type ufixed232x35<N = void> = N extends number ? number[] : number;
declare type ufixed232x36<N = void> = N extends number ? number[] : number;
declare type ufixed232x37<N = void> = N extends number ? number[] : number;
declare type ufixed232x38<N = void> = N extends number ? number[] : number;
declare type ufixed232x39<N = void> = N extends number ? number[] : number;
declare type ufixed232x40<N = void> = N extends number ? number[] : number;
declare type ufixed232x41<N = void> = N extends number ? number[] : number;
declare type ufixed232x42<N = void> = N extends number ? number[] : number;
declare type ufixed232x43<N = void> = N extends number ? number[] : number;
declare type ufixed232x44<N = void> = N extends number ? number[] : number;
declare type ufixed232x45<N = void> = N extends number ? number[] : number;
declare type ufixed232x46<N = void> = N extends number ? number[] : number;
declare type ufixed232x47<N = void> = N extends number ? number[] : number;
declare type ufixed232x48<N = void> = N extends number ? number[] : number;
declare type ufixed232x49<N = void> = N extends number ? number[] : number;
declare type ufixed232x50<N = void> = N extends number ? number[] : number;
declare type ufixed232x51<N = void> = N extends number ? number[] : number;
declare type ufixed232x52<N = void> = N extends number ? number[] : number;
declare type ufixed232x53<N = void> = N extends number ? number[] : number;
declare type ufixed232x54<N = void> = N extends number ? number[] : number;
declare type ufixed232x55<N = void> = N extends number ? number[] : number;
declare type ufixed232x56<N = void> = N extends number ? number[] : number;
declare type ufixed232x57<N = void> = N extends number ? number[] : number;
declare type ufixed232x58<N = void> = N extends number ? number[] : number;
declare type ufixed232x59<N = void> = N extends number ? number[] : number;
declare type ufixed232x60<N = void> = N extends number ? number[] : number;
declare type ufixed232x61<N = void> = N extends number ? number[] : number;
declare type ufixed232x62<N = void> = N extends number ? number[] : number;
declare type ufixed232x63<N = void> = N extends number ? number[] : number;
declare type ufixed232x64<N = void> = N extends number ? number[] : number;
declare type ufixed232x65<N = void> = N extends number ? number[] : number;
declare type ufixed232x66<N = void> = N extends number ? number[] : number;
declare type ufixed232x67<N = void> = N extends number ? number[] : number;
declare type ufixed232x68<N = void> = N extends number ? number[] : number;
declare type ufixed232x69<N = void> = N extends number ? number[] : number;
declare type ufixed232x70<N = void> = N extends number ? number[] : number;
declare type ufixed232x71<N = void> = N extends number ? number[] : number;
declare type ufixed232x72<N = void> = N extends number ? number[] : number;
declare type ufixed232x73<N = void> = N extends number ? number[] : number;
declare type ufixed232x74<N = void> = N extends number ? number[] : number;
declare type ufixed232x75<N = void> = N extends number ? number[] : number;
declare type ufixed232x76<N = void> = N extends number ? number[] : number;
declare type ufixed232x77<N = void> = N extends number ? number[] : number;
declare type ufixed232x78<N = void> = N extends number ? number[] : number;
declare type ufixed232x79<N = void> = N extends number ? number[] : number;
declare type ufixed232x80<N = void> = N extends number ? number[] : number;
declare type ufixed232x81<N = void> = N extends number ? number[] : number;
declare type ufixed232x82<N = void> = N extends number ? number[] : number;
declare type ufixed232x83<N = void> = N extends number ? number[] : number;
declare type ufixed232x84<N = void> = N extends number ? number[] : number;
declare type ufixed232x85<N = void> = N extends number ? number[] : number;
declare type ufixed232x86<N = void> = N extends number ? number[] : number;
declare type ufixed232x87<N = void> = N extends number ? number[] : number;
declare type ufixed232x88<N = void> = N extends number ? number[] : number;
declare type ufixed232x89<N = void> = N extends number ? number[] : number;
declare type ufixed232x90<N = void> = N extends number ? number[] : number;
declare type ufixed232x91<N = void> = N extends number ? number[] : number;
declare type ufixed232x92<N = void> = N extends number ? number[] : number;
declare type ufixed232x93<N = void> = N extends number ? number[] : number;
declare type ufixed232x94<N = void> = N extends number ? number[] : number;
declare type ufixed232x95<N = void> = N extends number ? number[] : number;
declare type ufixed232x96<N = void> = N extends number ? number[] : number;
declare type ufixed232x97<N = void> = N extends number ? number[] : number;
declare type ufixed232x98<N = void> = N extends number ? number[] : number;
declare type ufixed232x99<N = void> = N extends number ? number[] : number;
declare type ufixed232x100<N = void> = N extends number ? number[] : number;
declare type ufixed232x101<N = void> = N extends number ? number[] : number;
declare type ufixed232x102<N = void> = N extends number ? number[] : number;
declare type ufixed232x103<N = void> = N extends number ? number[] : number;
declare type ufixed232x104<N = void> = N extends number ? number[] : number;
declare type ufixed232x105<N = void> = N extends number ? number[] : number;
declare type ufixed232x106<N = void> = N extends number ? number[] : number;
declare type ufixed232x107<N = void> = N extends number ? number[] : number;
declare type ufixed232x108<N = void> = N extends number ? number[] : number;
declare type ufixed232x109<N = void> = N extends number ? number[] : number;
declare type ufixed232x110<N = void> = N extends number ? number[] : number;
declare type ufixed232x111<N = void> = N extends number ? number[] : number;
declare type ufixed232x112<N = void> = N extends number ? number[] : number;
declare type ufixed232x113<N = void> = N extends number ? number[] : number;
declare type ufixed232x114<N = void> = N extends number ? number[] : number;
declare type ufixed232x115<N = void> = N extends number ? number[] : number;
declare type ufixed232x116<N = void> = N extends number ? number[] : number;
declare type ufixed232x117<N = void> = N extends number ? number[] : number;
declare type ufixed232x118<N = void> = N extends number ? number[] : number;
declare type ufixed232x119<N = void> = N extends number ? number[] : number;
declare type ufixed232x120<N = void> = N extends number ? number[] : number;
declare type ufixed232x121<N = void> = N extends number ? number[] : number;
declare type ufixed232x122<N = void> = N extends number ? number[] : number;
declare type ufixed232x123<N = void> = N extends number ? number[] : number;
declare type ufixed232x124<N = void> = N extends number ? number[] : number;
declare type ufixed232x125<N = void> = N extends number ? number[] : number;
declare type ufixed232x126<N = void> = N extends number ? number[] : number;
declare type ufixed232x127<N = void> = N extends number ? number[] : number;
declare type ufixed232x128<N = void> = N extends number ? number[] : number;
declare type ufixed232x129<N = void> = N extends number ? number[] : number;
declare type ufixed232x130<N = void> = N extends number ? number[] : number;
declare type ufixed232x131<N = void> = N extends number ? number[] : number;
declare type ufixed232x132<N = void> = N extends number ? number[] : number;
declare type ufixed232x133<N = void> = N extends number ? number[] : number;
declare type ufixed232x134<N = void> = N extends number ? number[] : number;
declare type ufixed232x135<N = void> = N extends number ? number[] : number;
declare type ufixed232x136<N = void> = N extends number ? number[] : number;
declare type ufixed232x137<N = void> = N extends number ? number[] : number;
declare type ufixed232x138<N = void> = N extends number ? number[] : number;
declare type ufixed232x139<N = void> = N extends number ? number[] : number;
declare type ufixed232x140<N = void> = N extends number ? number[] : number;
declare type ufixed232x141<N = void> = N extends number ? number[] : number;
declare type ufixed232x142<N = void> = N extends number ? number[] : number;
declare type ufixed232x143<N = void> = N extends number ? number[] : number;
declare type ufixed232x144<N = void> = N extends number ? number[] : number;
declare type ufixed232x145<N = void> = N extends number ? number[] : number;
declare type ufixed232x146<N = void> = N extends number ? number[] : number;
declare type ufixed232x147<N = void> = N extends number ? number[] : number;
declare type ufixed232x148<N = void> = N extends number ? number[] : number;
declare type ufixed232x149<N = void> = N extends number ? number[] : number;
declare type ufixed232x150<N = void> = N extends number ? number[] : number;
declare type ufixed232x151<N = void> = N extends number ? number[] : number;
declare type ufixed232x152<N = void> = N extends number ? number[] : number;
declare type ufixed232x153<N = void> = N extends number ? number[] : number;
declare type ufixed232x154<N = void> = N extends number ? number[] : number;
declare type ufixed232x155<N = void> = N extends number ? number[] : number;
declare type ufixed232x156<N = void> = N extends number ? number[] : number;
declare type ufixed232x157<N = void> = N extends number ? number[] : number;
declare type ufixed232x158<N = void> = N extends number ? number[] : number;
declare type ufixed232x159<N = void> = N extends number ? number[] : number;
declare type ufixed232x160<N = void> = N extends number ? number[] : number;
declare type ufixed240x1<N = void> = N extends number ? number[] : number;
declare type ufixed240x2<N = void> = N extends number ? number[] : number;
declare type ufixed240x3<N = void> = N extends number ? number[] : number;
declare type ufixed240x4<N = void> = N extends number ? number[] : number;
declare type ufixed240x5<N = void> = N extends number ? number[] : number;
declare type ufixed240x6<N = void> = N extends number ? number[] : number;
declare type ufixed240x7<N = void> = N extends number ? number[] : number;
declare type ufixed240x8<N = void> = N extends number ? number[] : number;
declare type ufixed240x9<N = void> = N extends number ? number[] : number;
declare type ufixed240x10<N = void> = N extends number ? number[] : number;
declare type ufixed240x11<N = void> = N extends number ? number[] : number;
declare type ufixed240x12<N = void> = N extends number ? number[] : number;
declare type ufixed240x13<N = void> = N extends number ? number[] : number;
declare type ufixed240x14<N = void> = N extends number ? number[] : number;
declare type ufixed240x15<N = void> = N extends number ? number[] : number;
declare type ufixed240x16<N = void> = N extends number ? number[] : number;
declare type ufixed240x17<N = void> = N extends number ? number[] : number;
declare type ufixed240x18<N = void> = N extends number ? number[] : number;
declare type ufixed240x19<N = void> = N extends number ? number[] : number;
declare type ufixed240x20<N = void> = N extends number ? number[] : number;
declare type ufixed240x21<N = void> = N extends number ? number[] : number;
declare type ufixed240x22<N = void> = N extends number ? number[] : number;
declare type ufixed240x23<N = void> = N extends number ? number[] : number;
declare type ufixed240x24<N = void> = N extends number ? number[] : number;
declare type ufixed240x25<N = void> = N extends number ? number[] : number;
declare type ufixed240x26<N = void> = N extends number ? number[] : number;
declare type ufixed240x27<N = void> = N extends number ? number[] : number;
declare type ufixed240x28<N = void> = N extends number ? number[] : number;
declare type ufixed240x29<N = void> = N extends number ? number[] : number;
declare type ufixed240x30<N = void> = N extends number ? number[] : number;
declare type ufixed240x31<N = void> = N extends number ? number[] : number;
declare type ufixed240x32<N = void> = N extends number ? number[] : number;
declare type ufixed240x33<N = void> = N extends number ? number[] : number;
declare type ufixed240x34<N = void> = N extends number ? number[] : number;
declare type ufixed240x35<N = void> = N extends number ? number[] : number;
declare type ufixed240x36<N = void> = N extends number ? number[] : number;
declare type ufixed240x37<N = void> = N extends number ? number[] : number;
declare type ufixed240x38<N = void> = N extends number ? number[] : number;
declare type ufixed240x39<N = void> = N extends number ? number[] : number;
declare type ufixed240x40<N = void> = N extends number ? number[] : number;
declare type ufixed240x41<N = void> = N extends number ? number[] : number;
declare type ufixed240x42<N = void> = N extends number ? number[] : number;
declare type ufixed240x43<N = void> = N extends number ? number[] : number;
declare type ufixed240x44<N = void> = N extends number ? number[] : number;
declare type ufixed240x45<N = void> = N extends number ? number[] : number;
declare type ufixed240x46<N = void> = N extends number ? number[] : number;
declare type ufixed240x47<N = void> = N extends number ? number[] : number;
declare type ufixed240x48<N = void> = N extends number ? number[] : number;
declare type ufixed240x49<N = void> = N extends number ? number[] : number;
declare type ufixed240x50<N = void> = N extends number ? number[] : number;
declare type ufixed240x51<N = void> = N extends number ? number[] : number;
declare type ufixed240x52<N = void> = N extends number ? number[] : number;
declare type ufixed240x53<N = void> = N extends number ? number[] : number;
declare type ufixed240x54<N = void> = N extends number ? number[] : number;
declare type ufixed240x55<N = void> = N extends number ? number[] : number;
declare type ufixed240x56<N = void> = N extends number ? number[] : number;
declare type ufixed240x57<N = void> = N extends number ? number[] : number;
declare type ufixed240x58<N = void> = N extends number ? number[] : number;
declare type ufixed240x59<N = void> = N extends number ? number[] : number;
declare type ufixed240x60<N = void> = N extends number ? number[] : number;
declare type ufixed240x61<N = void> = N extends number ? number[] : number;
declare type ufixed240x62<N = void> = N extends number ? number[] : number;
declare type ufixed240x63<N = void> = N extends number ? number[] : number;
declare type ufixed240x64<N = void> = N extends number ? number[] : number;
declare type ufixed240x65<N = void> = N extends number ? number[] : number;
declare type ufixed240x66<N = void> = N extends number ? number[] : number;
declare type ufixed240x67<N = void> = N extends number ? number[] : number;
declare type ufixed240x68<N = void> = N extends number ? number[] : number;
declare type ufixed240x69<N = void> = N extends number ? number[] : number;
declare type ufixed240x70<N = void> = N extends number ? number[] : number;
declare type ufixed240x71<N = void> = N extends number ? number[] : number;
declare type ufixed240x72<N = void> = N extends number ? number[] : number;
declare type ufixed240x73<N = void> = N extends number ? number[] : number;
declare type ufixed240x74<N = void> = N extends number ? number[] : number;
declare type ufixed240x75<N = void> = N extends number ? number[] : number;
declare type ufixed240x76<N = void> = N extends number ? number[] : number;
declare type ufixed240x77<N = void> = N extends number ? number[] : number;
declare type ufixed240x78<N = void> = N extends number ? number[] : number;
declare type ufixed240x79<N = void> = N extends number ? number[] : number;
declare type ufixed240x80<N = void> = N extends number ? number[] : number;
declare type ufixed240x81<N = void> = N extends number ? number[] : number;
declare type ufixed240x82<N = void> = N extends number ? number[] : number;
declare type ufixed240x83<N = void> = N extends number ? number[] : number;
declare type ufixed240x84<N = void> = N extends number ? number[] : number;
declare type ufixed240x85<N = void> = N extends number ? number[] : number;
declare type ufixed240x86<N = void> = N extends number ? number[] : number;
declare type ufixed240x87<N = void> = N extends number ? number[] : number;
declare type ufixed240x88<N = void> = N extends number ? number[] : number;
declare type ufixed240x89<N = void> = N extends number ? number[] : number;
declare type ufixed240x90<N = void> = N extends number ? number[] : number;
declare type ufixed240x91<N = void> = N extends number ? number[] : number;
declare type ufixed240x92<N = void> = N extends number ? number[] : number;
declare type ufixed240x93<N = void> = N extends number ? number[] : number;
declare type ufixed240x94<N = void> = N extends number ? number[] : number;
declare type ufixed240x95<N = void> = N extends number ? number[] : number;
declare type ufixed240x96<N = void> = N extends number ? number[] : number;
declare type ufixed240x97<N = void> = N extends number ? number[] : number;
declare type ufixed240x98<N = void> = N extends number ? number[] : number;
declare type ufixed240x99<N = void> = N extends number ? number[] : number;
declare type ufixed240x100<N = void> = N extends number ? number[] : number;
declare type ufixed240x101<N = void> = N extends number ? number[] : number;
declare type ufixed240x102<N = void> = N extends number ? number[] : number;
declare type ufixed240x103<N = void> = N extends number ? number[] : number;
declare type ufixed240x104<N = void> = N extends number ? number[] : number;
declare type ufixed240x105<N = void> = N extends number ? number[] : number;
declare type ufixed240x106<N = void> = N extends number ? number[] : number;
declare type ufixed240x107<N = void> = N extends number ? number[] : number;
declare type ufixed240x108<N = void> = N extends number ? number[] : number;
declare type ufixed240x109<N = void> = N extends number ? number[] : number;
declare type ufixed240x110<N = void> = N extends number ? number[] : number;
declare type ufixed240x111<N = void> = N extends number ? number[] : number;
declare type ufixed240x112<N = void> = N extends number ? number[] : number;
declare type ufixed240x113<N = void> = N extends number ? number[] : number;
declare type ufixed240x114<N = void> = N extends number ? number[] : number;
declare type ufixed240x115<N = void> = N extends number ? number[] : number;
declare type ufixed240x116<N = void> = N extends number ? number[] : number;
declare type ufixed240x117<N = void> = N extends number ? number[] : number;
declare type ufixed240x118<N = void> = N extends number ? number[] : number;
declare type ufixed240x119<N = void> = N extends number ? number[] : number;
declare type ufixed240x120<N = void> = N extends number ? number[] : number;
declare type ufixed240x121<N = void> = N extends number ? number[] : number;
declare type ufixed240x122<N = void> = N extends number ? number[] : number;
declare type ufixed240x123<N = void> = N extends number ? number[] : number;
declare type ufixed240x124<N = void> = N extends number ? number[] : number;
declare type ufixed240x125<N = void> = N extends number ? number[] : number;
declare type ufixed240x126<N = void> = N extends number ? number[] : number;
declare type ufixed240x127<N = void> = N extends number ? number[] : number;
declare type ufixed240x128<N = void> = N extends number ? number[] : number;
declare type ufixed240x129<N = void> = N extends number ? number[] : number;
declare type ufixed240x130<N = void> = N extends number ? number[] : number;
declare type ufixed240x131<N = void> = N extends number ? number[] : number;
declare type ufixed240x132<N = void> = N extends number ? number[] : number;
declare type ufixed240x133<N = void> = N extends number ? number[] : number;
declare type ufixed240x134<N = void> = N extends number ? number[] : number;
declare type ufixed240x135<N = void> = N extends number ? number[] : number;
declare type ufixed240x136<N = void> = N extends number ? number[] : number;
declare type ufixed240x137<N = void> = N extends number ? number[] : number;
declare type ufixed240x138<N = void> = N extends number ? number[] : number;
declare type ufixed240x139<N = void> = N extends number ? number[] : number;
declare type ufixed240x140<N = void> = N extends number ? number[] : number;
declare type ufixed240x141<N = void> = N extends number ? number[] : number;
declare type ufixed240x142<N = void> = N extends number ? number[] : number;
declare type ufixed240x143<N = void> = N extends number ? number[] : number;
declare type ufixed240x144<N = void> = N extends number ? number[] : number;
declare type ufixed240x145<N = void> = N extends number ? number[] : number;
declare type ufixed240x146<N = void> = N extends number ? number[] : number;
declare type ufixed240x147<N = void> = N extends number ? number[] : number;
declare type ufixed240x148<N = void> = N extends number ? number[] : number;
declare type ufixed240x149<N = void> = N extends number ? number[] : number;
declare type ufixed240x150<N = void> = N extends number ? number[] : number;
declare type ufixed240x151<N = void> = N extends number ? number[] : number;
declare type ufixed240x152<N = void> = N extends number ? number[] : number;
declare type ufixed240x153<N = void> = N extends number ? number[] : number;
declare type ufixed240x154<N = void> = N extends number ? number[] : number;
declare type ufixed240x155<N = void> = N extends number ? number[] : number;
declare type ufixed240x156<N = void> = N extends number ? number[] : number;
declare type ufixed240x157<N = void> = N extends number ? number[] : number;
declare type ufixed240x158<N = void> = N extends number ? number[] : number;
declare type ufixed240x159<N = void> = N extends number ? number[] : number;
declare type ufixed240x160<N = void> = N extends number ? number[] : number;
declare type ufixed248x1<N = void> = N extends number ? number[] : number;
declare type ufixed248x2<N = void> = N extends number ? number[] : number;
declare type ufixed248x3<N = void> = N extends number ? number[] : number;
declare type ufixed248x4<N = void> = N extends number ? number[] : number;
declare type ufixed248x5<N = void> = N extends number ? number[] : number;
declare type ufixed248x6<N = void> = N extends number ? number[] : number;
declare type ufixed248x7<N = void> = N extends number ? number[] : number;
declare type ufixed248x8<N = void> = N extends number ? number[] : number;
declare type ufixed248x9<N = void> = N extends number ? number[] : number;
declare type ufixed248x10<N = void> = N extends number ? number[] : number;
declare type ufixed248x11<N = void> = N extends number ? number[] : number;
declare type ufixed248x12<N = void> = N extends number ? number[] : number;
declare type ufixed248x13<N = void> = N extends number ? number[] : number;
declare type ufixed248x14<N = void> = N extends number ? number[] : number;
declare type ufixed248x15<N = void> = N extends number ? number[] : number;
declare type ufixed248x16<N = void> = N extends number ? number[] : number;
declare type ufixed248x17<N = void> = N extends number ? number[] : number;
declare type ufixed248x18<N = void> = N extends number ? number[] : number;
declare type ufixed248x19<N = void> = N extends number ? number[] : number;
declare type ufixed248x20<N = void> = N extends number ? number[] : number;
declare type ufixed248x21<N = void> = N extends number ? number[] : number;
declare type ufixed248x22<N = void> = N extends number ? number[] : number;
declare type ufixed248x23<N = void> = N extends number ? number[] : number;
declare type ufixed248x24<N = void> = N extends number ? number[] : number;
declare type ufixed248x25<N = void> = N extends number ? number[] : number;
declare type ufixed248x26<N = void> = N extends number ? number[] : number;
declare type ufixed248x27<N = void> = N extends number ? number[] : number;
declare type ufixed248x28<N = void> = N extends number ? number[] : number;
declare type ufixed248x29<N = void> = N extends number ? number[] : number;
declare type ufixed248x30<N = void> = N extends number ? number[] : number;
declare type ufixed248x31<N = void> = N extends number ? number[] : number;
declare type ufixed248x32<N = void> = N extends number ? number[] : number;
declare type ufixed248x33<N = void> = N extends number ? number[] : number;
declare type ufixed248x34<N = void> = N extends number ? number[] : number;
declare type ufixed248x35<N = void> = N extends number ? number[] : number;
declare type ufixed248x36<N = void> = N extends number ? number[] : number;
declare type ufixed248x37<N = void> = N extends number ? number[] : number;
declare type ufixed248x38<N = void> = N extends number ? number[] : number;
declare type ufixed248x39<N = void> = N extends number ? number[] : number;
declare type ufixed248x40<N = void> = N extends number ? number[] : number;
declare type ufixed248x41<N = void> = N extends number ? number[] : number;
declare type ufixed248x42<N = void> = N extends number ? number[] : number;
declare type ufixed248x43<N = void> = N extends number ? number[] : number;
declare type ufixed248x44<N = void> = N extends number ? number[] : number;
declare type ufixed248x45<N = void> = N extends number ? number[] : number;
declare type ufixed248x46<N = void> = N extends number ? number[] : number;
declare type ufixed248x47<N = void> = N extends number ? number[] : number;
declare type ufixed248x48<N = void> = N extends number ? number[] : number;
declare type ufixed248x49<N = void> = N extends number ? number[] : number;
declare type ufixed248x50<N = void> = N extends number ? number[] : number;
declare type ufixed248x51<N = void> = N extends number ? number[] : number;
declare type ufixed248x52<N = void> = N extends number ? number[] : number;
declare type ufixed248x53<N = void> = N extends number ? number[] : number;
declare type ufixed248x54<N = void> = N extends number ? number[] : number;
declare type ufixed248x55<N = void> = N extends number ? number[] : number;
declare type ufixed248x56<N = void> = N extends number ? number[] : number;
declare type ufixed248x57<N = void> = N extends number ? number[] : number;
declare type ufixed248x58<N = void> = N extends number ? number[] : number;
declare type ufixed248x59<N = void> = N extends number ? number[] : number;
declare type ufixed248x60<N = void> = N extends number ? number[] : number;
declare type ufixed248x61<N = void> = N extends number ? number[] : number;
declare type ufixed248x62<N = void> = N extends number ? number[] : number;
declare type ufixed248x63<N = void> = N extends number ? number[] : number;
declare type ufixed248x64<N = void> = N extends number ? number[] : number;
declare type ufixed248x65<N = void> = N extends number ? number[] : number;
declare type ufixed248x66<N = void> = N extends number ? number[] : number;
declare type ufixed248x67<N = void> = N extends number ? number[] : number;
declare type ufixed248x68<N = void> = N extends number ? number[] : number;
declare type ufixed248x69<N = void> = N extends number ? number[] : number;
declare type ufixed248x70<N = void> = N extends number ? number[] : number;
declare type ufixed248x71<N = void> = N extends number ? number[] : number;
declare type ufixed248x72<N = void> = N extends number ? number[] : number;
declare type ufixed248x73<N = void> = N extends number ? number[] : number;
declare type ufixed248x74<N = void> = N extends number ? number[] : number;
declare type ufixed248x75<N = void> = N extends number ? number[] : number;
declare type ufixed248x76<N = void> = N extends number ? number[] : number;
declare type ufixed248x77<N = void> = N extends number ? number[] : number;
declare type ufixed248x78<N = void> = N extends number ? number[] : number;
declare type ufixed248x79<N = void> = N extends number ? number[] : number;
declare type ufixed248x80<N = void> = N extends number ? number[] : number;
declare type ufixed248x81<N = void> = N extends number ? number[] : number;
declare type ufixed248x82<N = void> = N extends number ? number[] : number;
declare type ufixed248x83<N = void> = N extends number ? number[] : number;
declare type ufixed248x84<N = void> = N extends number ? number[] : number;
declare type ufixed248x85<N = void> = N extends number ? number[] : number;
declare type ufixed248x86<N = void> = N extends number ? number[] : number;
declare type ufixed248x87<N = void> = N extends number ? number[] : number;
declare type ufixed248x88<N = void> = N extends number ? number[] : number;
declare type ufixed248x89<N = void> = N extends number ? number[] : number;
declare type ufixed248x90<N = void> = N extends number ? number[] : number;
declare type ufixed248x91<N = void> = N extends number ? number[] : number;
declare type ufixed248x92<N = void> = N extends number ? number[] : number;
declare type ufixed248x93<N = void> = N extends number ? number[] : number;
declare type ufixed248x94<N = void> = N extends number ? number[] : number;
declare type ufixed248x95<N = void> = N extends number ? number[] : number;
declare type ufixed248x96<N = void> = N extends number ? number[] : number;
declare type ufixed248x97<N = void> = N extends number ? number[] : number;
declare type ufixed248x98<N = void> = N extends number ? number[] : number;
declare type ufixed248x99<N = void> = N extends number ? number[] : number;
declare type ufixed248x100<N = void> = N extends number ? number[] : number;
declare type ufixed248x101<N = void> = N extends number ? number[] : number;
declare type ufixed248x102<N = void> = N extends number ? number[] : number;
declare type ufixed248x103<N = void> = N extends number ? number[] : number;
declare type ufixed248x104<N = void> = N extends number ? number[] : number;
declare type ufixed248x105<N = void> = N extends number ? number[] : number;
declare type ufixed248x106<N = void> = N extends number ? number[] : number;
declare type ufixed248x107<N = void> = N extends number ? number[] : number;
declare type ufixed248x108<N = void> = N extends number ? number[] : number;
declare type ufixed248x109<N = void> = N extends number ? number[] : number;
declare type ufixed248x110<N = void> = N extends number ? number[] : number;
declare type ufixed248x111<N = void> = N extends number ? number[] : number;
declare type ufixed248x112<N = void> = N extends number ? number[] : number;
declare type ufixed248x113<N = void> = N extends number ? number[] : number;
declare type ufixed248x114<N = void> = N extends number ? number[] : number;
declare type ufixed248x115<N = void> = N extends number ? number[] : number;
declare type ufixed248x116<N = void> = N extends number ? number[] : number;
declare type ufixed248x117<N = void> = N extends number ? number[] : number;
declare type ufixed248x118<N = void> = N extends number ? number[] : number;
declare type ufixed248x119<N = void> = N extends number ? number[] : number;
declare type ufixed248x120<N = void> = N extends number ? number[] : number;
declare type ufixed248x121<N = void> = N extends number ? number[] : number;
declare type ufixed248x122<N = void> = N extends number ? number[] : number;
declare type ufixed248x123<N = void> = N extends number ? number[] : number;
declare type ufixed248x124<N = void> = N extends number ? number[] : number;
declare type ufixed248x125<N = void> = N extends number ? number[] : number;
declare type ufixed248x126<N = void> = N extends number ? number[] : number;
declare type ufixed248x127<N = void> = N extends number ? number[] : number;
declare type ufixed248x128<N = void> = N extends number ? number[] : number;
declare type ufixed248x129<N = void> = N extends number ? number[] : number;
declare type ufixed248x130<N = void> = N extends number ? number[] : number;
declare type ufixed248x131<N = void> = N extends number ? number[] : number;
declare type ufixed248x132<N = void> = N extends number ? number[] : number;
declare type ufixed248x133<N = void> = N extends number ? number[] : number;
declare type ufixed248x134<N = void> = N extends number ? number[] : number;
declare type ufixed248x135<N = void> = N extends number ? number[] : number;
declare type ufixed248x136<N = void> = N extends number ? number[] : number;
declare type ufixed248x137<N = void> = N extends number ? number[] : number;
declare type ufixed248x138<N = void> = N extends number ? number[] : number;
declare type ufixed248x139<N = void> = N extends number ? number[] : number;
declare type ufixed248x140<N = void> = N extends number ? number[] : number;
declare type ufixed248x141<N = void> = N extends number ? number[] : number;
declare type ufixed248x142<N = void> = N extends number ? number[] : number;
declare type ufixed248x143<N = void> = N extends number ? number[] : number;
declare type ufixed248x144<N = void> = N extends number ? number[] : number;
declare type ufixed248x145<N = void> = N extends number ? number[] : number;
declare type ufixed248x146<N = void> = N extends number ? number[] : number;
declare type ufixed248x147<N = void> = N extends number ? number[] : number;
declare type ufixed248x148<N = void> = N extends number ? number[] : number;
declare type ufixed248x149<N = void> = N extends number ? number[] : number;
declare type ufixed248x150<N = void> = N extends number ? number[] : number;
declare type ufixed248x151<N = void> = N extends number ? number[] : number;
declare type ufixed248x152<N = void> = N extends number ? number[] : number;
declare type ufixed248x153<N = void> = N extends number ? number[] : number;
declare type ufixed248x154<N = void> = N extends number ? number[] : number;
declare type ufixed248x155<N = void> = N extends number ? number[] : number;
declare type ufixed248x156<N = void> = N extends number ? number[] : number;
declare type ufixed248x157<N = void> = N extends number ? number[] : number;
declare type ufixed248x158<N = void> = N extends number ? number[] : number;
declare type ufixed248x159<N = void> = N extends number ? number[] : number;
declare type ufixed248x160<N = void> = N extends number ? number[] : number;
declare type ufixed256x1<N = void> = N extends number ? number[] : number;
declare type ufixed256x2<N = void> = N extends number ? number[] : number;
declare type ufixed256x3<N = void> = N extends number ? number[] : number;
declare type ufixed256x4<N = void> = N extends number ? number[] : number;
declare type ufixed256x5<N = void> = N extends number ? number[] : number;
declare type ufixed256x6<N = void> = N extends number ? number[] : number;
declare type ufixed256x7<N = void> = N extends number ? number[] : number;
declare type ufixed256x8<N = void> = N extends number ? number[] : number;
declare type ufixed256x9<N = void> = N extends number ? number[] : number;
declare type ufixed256x10<N = void> = N extends number ? number[] : number;
declare type ufixed256x11<N = void> = N extends number ? number[] : number;
declare type ufixed256x12<N = void> = N extends number ? number[] : number;
declare type ufixed256x13<N = void> = N extends number ? number[] : number;
declare type ufixed256x14<N = void> = N extends number ? number[] : number;
declare type ufixed256x15<N = void> = N extends number ? number[] : number;
declare type ufixed256x16<N = void> = N extends number ? number[] : number;
declare type ufixed256x17<N = void> = N extends number ? number[] : number;
declare type ufixed256x18<N = void> = N extends number ? number[] : number;
declare type ufixed256x19<N = void> = N extends number ? number[] : number;
declare type ufixed256x20<N = void> = N extends number ? number[] : number;
declare type ufixed256x21<N = void> = N extends number ? number[] : number;
declare type ufixed256x22<N = void> = N extends number ? number[] : number;
declare type ufixed256x23<N = void> = N extends number ? number[] : number;
declare type ufixed256x24<N = void> = N extends number ? number[] : number;
declare type ufixed256x25<N = void> = N extends number ? number[] : number;
declare type ufixed256x26<N = void> = N extends number ? number[] : number;
declare type ufixed256x27<N = void> = N extends number ? number[] : number;
declare type ufixed256x28<N = void> = N extends number ? number[] : number;
declare type ufixed256x29<N = void> = N extends number ? number[] : number;
declare type ufixed256x30<N = void> = N extends number ? number[] : number;
declare type ufixed256x31<N = void> = N extends number ? number[] : number;
declare type ufixed256x32<N = void> = N extends number ? number[] : number;
declare type ufixed256x33<N = void> = N extends number ? number[] : number;
declare type ufixed256x34<N = void> = N extends number ? number[] : number;
declare type ufixed256x35<N = void> = N extends number ? number[] : number;
declare type ufixed256x36<N = void> = N extends number ? number[] : number;
declare type ufixed256x37<N = void> = N extends number ? number[] : number;
declare type ufixed256x38<N = void> = N extends number ? number[] : number;
declare type ufixed256x39<N = void> = N extends number ? number[] : number;
declare type ufixed256x40<N = void> = N extends number ? number[] : number;
declare type ufixed256x41<N = void> = N extends number ? number[] : number;
declare type ufixed256x42<N = void> = N extends number ? number[] : number;
declare type ufixed256x43<N = void> = N extends number ? number[] : number;
declare type ufixed256x44<N = void> = N extends number ? number[] : number;
declare type ufixed256x45<N = void> = N extends number ? number[] : number;
declare type ufixed256x46<N = void> = N extends number ? number[] : number;
declare type ufixed256x47<N = void> = N extends number ? number[] : number;
declare type ufixed256x48<N = void> = N extends number ? number[] : number;
declare type ufixed256x49<N = void> = N extends number ? number[] : number;
declare type ufixed256x50<N = void> = N extends number ? number[] : number;
declare type ufixed256x51<N = void> = N extends number ? number[] : number;
declare type ufixed256x52<N = void> = N extends number ? number[] : number;
declare type ufixed256x53<N = void> = N extends number ? number[] : number;
declare type ufixed256x54<N = void> = N extends number ? number[] : number;
declare type ufixed256x55<N = void> = N extends number ? number[] : number;
declare type ufixed256x56<N = void> = N extends number ? number[] : number;
declare type ufixed256x57<N = void> = N extends number ? number[] : number;
declare type ufixed256x58<N = void> = N extends number ? number[] : number;
declare type ufixed256x59<N = void> = N extends number ? number[] : number;
declare type ufixed256x60<N = void> = N extends number ? number[] : number;
declare type ufixed256x61<N = void> = N extends number ? number[] : number;
declare type ufixed256x62<N = void> = N extends number ? number[] : number;
declare type ufixed256x63<N = void> = N extends number ? number[] : number;
declare type ufixed256x64<N = void> = N extends number ? number[] : number;
declare type ufixed256x65<N = void> = N extends number ? number[] : number;
declare type ufixed256x66<N = void> = N extends number ? number[] : number;
declare type ufixed256x67<N = void> = N extends number ? number[] : number;
declare type ufixed256x68<N = void> = N extends number ? number[] : number;
declare type ufixed256x69<N = void> = N extends number ? number[] : number;
declare type ufixed256x70<N = void> = N extends number ? number[] : number;
declare type ufixed256x71<N = void> = N extends number ? number[] : number;
declare type ufixed256x72<N = void> = N extends number ? number[] : number;
declare type ufixed256x73<N = void> = N extends number ? number[] : number;
declare type ufixed256x74<N = void> = N extends number ? number[] : number;
declare type ufixed256x75<N = void> = N extends number ? number[] : number;
declare type ufixed256x76<N = void> = N extends number ? number[] : number;
declare type ufixed256x77<N = void> = N extends number ? number[] : number;
declare type ufixed256x78<N = void> = N extends number ? number[] : number;
declare type ufixed256x79<N = void> = N extends number ? number[] : number;
declare type ufixed256x80<N = void> = N extends number ? number[] : number;
declare type ufixed256x81<N = void> = N extends number ? number[] : number;
declare type ufixed256x82<N = void> = N extends number ? number[] : number;
declare type ufixed256x83<N = void> = N extends number ? number[] : number;
declare type ufixed256x84<N = void> = N extends number ? number[] : number;
declare type ufixed256x85<N = void> = N extends number ? number[] : number;
declare type ufixed256x86<N = void> = N extends number ? number[] : number;
declare type ufixed256x87<N = void> = N extends number ? number[] : number;
declare type ufixed256x88<N = void> = N extends number ? number[] : number;
declare type ufixed256x89<N = void> = N extends number ? number[] : number;
declare type ufixed256x90<N = void> = N extends number ? number[] : number;
declare type ufixed256x91<N = void> = N extends number ? number[] : number;
declare type ufixed256x92<N = void> = N extends number ? number[] : number;
declare type ufixed256x93<N = void> = N extends number ? number[] : number;
declare type ufixed256x94<N = void> = N extends number ? number[] : number;
declare type ufixed256x95<N = void> = N extends number ? number[] : number;
declare type ufixed256x96<N = void> = N extends number ? number[] : number;
declare type ufixed256x97<N = void> = N extends number ? number[] : number;
declare type ufixed256x98<N = void> = N extends number ? number[] : number;
declare type ufixed256x99<N = void> = N extends number ? number[] : number;
declare type ufixed256x100<N = void> = N extends number ? number[] : number;
declare type ufixed256x101<N = void> = N extends number ? number[] : number;
declare type ufixed256x102<N = void> = N extends number ? number[] : number;
declare type ufixed256x103<N = void> = N extends number ? number[] : number;
declare type ufixed256x104<N = void> = N extends number ? number[] : number;
declare type ufixed256x105<N = void> = N extends number ? number[] : number;
declare type ufixed256x106<N = void> = N extends number ? number[] : number;
declare type ufixed256x107<N = void> = N extends number ? number[] : number;
declare type ufixed256x108<N = void> = N extends number ? number[] : number;
declare type ufixed256x109<N = void> = N extends number ? number[] : number;
declare type ufixed256x110<N = void> = N extends number ? number[] : number;
declare type ufixed256x111<N = void> = N extends number ? number[] : number;
declare type ufixed256x112<N = void> = N extends number ? number[] : number;
declare type ufixed256x113<N = void> = N extends number ? number[] : number;
declare type ufixed256x114<N = void> = N extends number ? number[] : number;
declare type ufixed256x115<N = void> = N extends number ? number[] : number;
declare type ufixed256x116<N = void> = N extends number ? number[] : number;
declare type ufixed256x117<N = void> = N extends number ? number[] : number;
declare type ufixed256x118<N = void> = N extends number ? number[] : number;
declare type ufixed256x119<N = void> = N extends number ? number[] : number;
declare type ufixed256x120<N = void> = N extends number ? number[] : number;
declare type ufixed256x121<N = void> = N extends number ? number[] : number;
declare type ufixed256x122<N = void> = N extends number ? number[] : number;
declare type ufixed256x123<N = void> = N extends number ? number[] : number;
declare type ufixed256x124<N = void> = N extends number ? number[] : number;
declare type ufixed256x125<N = void> = N extends number ? number[] : number;
declare type ufixed256x126<N = void> = N extends number ? number[] : number;
declare type ufixed256x127<N = void> = N extends number ? number[] : number;
declare type ufixed256x128<N = void> = N extends number ? number[] : number;
declare type ufixed256x129<N = void> = N extends number ? number[] : number;
declare type ufixed256x130<N = void> = N extends number ? number[] : number;
declare type ufixed256x131<N = void> = N extends number ? number[] : number;
declare type ufixed256x132<N = void> = N extends number ? number[] : number;
declare type ufixed256x133<N = void> = N extends number ? number[] : number;
declare type ufixed256x134<N = void> = N extends number ? number[] : number;
declare type ufixed256x135<N = void> = N extends number ? number[] : number;
declare type ufixed256x136<N = void> = N extends number ? number[] : number;
declare type ufixed256x137<N = void> = N extends number ? number[] : number;
declare type ufixed256x138<N = void> = N extends number ? number[] : number;
declare type ufixed256x139<N = void> = N extends number ? number[] : number;
declare type ufixed256x140<N = void> = N extends number ? number[] : number;
declare type ufixed256x141<N = void> = N extends number ? number[] : number;
declare type ufixed256x142<N = void> = N extends number ? number[] : number;
declare type ufixed256x143<N = void> = N extends number ? number[] : number;
declare type ufixed256x144<N = void> = N extends number ? number[] : number;
declare type ufixed256x145<N = void> = N extends number ? number[] : number;
declare type ufixed256x146<N = void> = N extends number ? number[] : number;
declare type ufixed256x147<N = void> = N extends number ? number[] : number;
declare type ufixed256x148<N = void> = N extends number ? number[] : number;
declare type ufixed256x149<N = void> = N extends number ? number[] : number;
declare type ufixed256x150<N = void> = N extends number ? number[] : number;
declare type ufixed256x151<N = void> = N extends number ? number[] : number;
declare type ufixed256x152<N = void> = N extends number ? number[] : number;
declare type ufixed256x153<N = void> = N extends number ? number[] : number;
declare type ufixed256x154<N = void> = N extends number ? number[] : number;
declare type ufixed256x155<N = void> = N extends number ? number[] : number;
declare type ufixed256x156<N = void> = N extends number ? number[] : number;
declare type ufixed256x157<N = void> = N extends number ? number[] : number;
declare type ufixed256x158<N = void> = N extends number ? number[] : number;
declare type ufixed256x159<N = void> = N extends number ? number[] : number;
declare type ufixed256x160<N = void> = N extends number ? number[] : number;
declare type ufixed264x1<N = void> = N extends number ? number[] : number;
declare type ufixed264x2<N = void> = N extends number ? number[] : number;
declare type ufixed264x3<N = void> = N extends number ? number[] : number;
declare type ufixed264x4<N = void> = N extends number ? number[] : number;
declare type ufixed264x5<N = void> = N extends number ? number[] : number;
declare type ufixed264x6<N = void> = N extends number ? number[] : number;
declare type ufixed264x7<N = void> = N extends number ? number[] : number;
declare type ufixed264x8<N = void> = N extends number ? number[] : number;
declare type ufixed264x9<N = void> = N extends number ? number[] : number;
declare type ufixed264x10<N = void> = N extends number ? number[] : number;
declare type ufixed264x11<N = void> = N extends number ? number[] : number;
declare type ufixed264x12<N = void> = N extends number ? number[] : number;
declare type ufixed264x13<N = void> = N extends number ? number[] : number;
declare type ufixed264x14<N = void> = N extends number ? number[] : number;
declare type ufixed264x15<N = void> = N extends number ? number[] : number;
declare type ufixed264x16<N = void> = N extends number ? number[] : number;
declare type ufixed264x17<N = void> = N extends number ? number[] : number;
declare type ufixed264x18<N = void> = N extends number ? number[] : number;
declare type ufixed264x19<N = void> = N extends number ? number[] : number;
declare type ufixed264x20<N = void> = N extends number ? number[] : number;
declare type ufixed264x21<N = void> = N extends number ? number[] : number;
declare type ufixed264x22<N = void> = N extends number ? number[] : number;
declare type ufixed264x23<N = void> = N extends number ? number[] : number;
declare type ufixed264x24<N = void> = N extends number ? number[] : number;
declare type ufixed264x25<N = void> = N extends number ? number[] : number;
declare type ufixed264x26<N = void> = N extends number ? number[] : number;
declare type ufixed264x27<N = void> = N extends number ? number[] : number;
declare type ufixed264x28<N = void> = N extends number ? number[] : number;
declare type ufixed264x29<N = void> = N extends number ? number[] : number;
declare type ufixed264x30<N = void> = N extends number ? number[] : number;
declare type ufixed264x31<N = void> = N extends number ? number[] : number;
declare type ufixed264x32<N = void> = N extends number ? number[] : number;
declare type ufixed264x33<N = void> = N extends number ? number[] : number;
declare type ufixed264x34<N = void> = N extends number ? number[] : number;
declare type ufixed264x35<N = void> = N extends number ? number[] : number;
declare type ufixed264x36<N = void> = N extends number ? number[] : number;
declare type ufixed264x37<N = void> = N extends number ? number[] : number;
declare type ufixed264x38<N = void> = N extends number ? number[] : number;
declare type ufixed264x39<N = void> = N extends number ? number[] : number;
declare type ufixed264x40<N = void> = N extends number ? number[] : number;
declare type ufixed264x41<N = void> = N extends number ? number[] : number;
declare type ufixed264x42<N = void> = N extends number ? number[] : number;
declare type ufixed264x43<N = void> = N extends number ? number[] : number;
declare type ufixed264x44<N = void> = N extends number ? number[] : number;
declare type ufixed264x45<N = void> = N extends number ? number[] : number;
declare type ufixed264x46<N = void> = N extends number ? number[] : number;
declare type ufixed264x47<N = void> = N extends number ? number[] : number;
declare type ufixed264x48<N = void> = N extends number ? number[] : number;
declare type ufixed264x49<N = void> = N extends number ? number[] : number;
declare type ufixed264x50<N = void> = N extends number ? number[] : number;
declare type ufixed264x51<N = void> = N extends number ? number[] : number;
declare type ufixed264x52<N = void> = N extends number ? number[] : number;
declare type ufixed264x53<N = void> = N extends number ? number[] : number;
declare type ufixed264x54<N = void> = N extends number ? number[] : number;
declare type ufixed264x55<N = void> = N extends number ? number[] : number;
declare type ufixed264x56<N = void> = N extends number ? number[] : number;
declare type ufixed264x57<N = void> = N extends number ? number[] : number;
declare type ufixed264x58<N = void> = N extends number ? number[] : number;
declare type ufixed264x59<N = void> = N extends number ? number[] : number;
declare type ufixed264x60<N = void> = N extends number ? number[] : number;
declare type ufixed264x61<N = void> = N extends number ? number[] : number;
declare type ufixed264x62<N = void> = N extends number ? number[] : number;
declare type ufixed264x63<N = void> = N extends number ? number[] : number;
declare type ufixed264x64<N = void> = N extends number ? number[] : number;
declare type ufixed264x65<N = void> = N extends number ? number[] : number;
declare type ufixed264x66<N = void> = N extends number ? number[] : number;
declare type ufixed264x67<N = void> = N extends number ? number[] : number;
declare type ufixed264x68<N = void> = N extends number ? number[] : number;
declare type ufixed264x69<N = void> = N extends number ? number[] : number;
declare type ufixed264x70<N = void> = N extends number ? number[] : number;
declare type ufixed264x71<N = void> = N extends number ? number[] : number;
declare type ufixed264x72<N = void> = N extends number ? number[] : number;
declare type ufixed264x73<N = void> = N extends number ? number[] : number;
declare type ufixed264x74<N = void> = N extends number ? number[] : number;
declare type ufixed264x75<N = void> = N extends number ? number[] : number;
declare type ufixed264x76<N = void> = N extends number ? number[] : number;
declare type ufixed264x77<N = void> = N extends number ? number[] : number;
declare type ufixed264x78<N = void> = N extends number ? number[] : number;
declare type ufixed264x79<N = void> = N extends number ? number[] : number;
declare type ufixed264x80<N = void> = N extends number ? number[] : number;
declare type ufixed264x81<N = void> = N extends number ? number[] : number;
declare type ufixed264x82<N = void> = N extends number ? number[] : number;
declare type ufixed264x83<N = void> = N extends number ? number[] : number;
declare type ufixed264x84<N = void> = N extends number ? number[] : number;
declare type ufixed264x85<N = void> = N extends number ? number[] : number;
declare type ufixed264x86<N = void> = N extends number ? number[] : number;
declare type ufixed264x87<N = void> = N extends number ? number[] : number;
declare type ufixed264x88<N = void> = N extends number ? number[] : number;
declare type ufixed264x89<N = void> = N extends number ? number[] : number;
declare type ufixed264x90<N = void> = N extends number ? number[] : number;
declare type ufixed264x91<N = void> = N extends number ? number[] : number;
declare type ufixed264x92<N = void> = N extends number ? number[] : number;
declare type ufixed264x93<N = void> = N extends number ? number[] : number;
declare type ufixed264x94<N = void> = N extends number ? number[] : number;
declare type ufixed264x95<N = void> = N extends number ? number[] : number;
declare type ufixed264x96<N = void> = N extends number ? number[] : number;
declare type ufixed264x97<N = void> = N extends number ? number[] : number;
declare type ufixed264x98<N = void> = N extends number ? number[] : number;
declare type ufixed264x99<N = void> = N extends number ? number[] : number;
declare type ufixed264x100<N = void> = N extends number ? number[] : number;
declare type ufixed264x101<N = void> = N extends number ? number[] : number;
declare type ufixed264x102<N = void> = N extends number ? number[] : number;
declare type ufixed264x103<N = void> = N extends number ? number[] : number;
declare type ufixed264x104<N = void> = N extends number ? number[] : number;
declare type ufixed264x105<N = void> = N extends number ? number[] : number;
declare type ufixed264x106<N = void> = N extends number ? number[] : number;
declare type ufixed264x107<N = void> = N extends number ? number[] : number;
declare type ufixed264x108<N = void> = N extends number ? number[] : number;
declare type ufixed264x109<N = void> = N extends number ? number[] : number;
declare type ufixed264x110<N = void> = N extends number ? number[] : number;
declare type ufixed264x111<N = void> = N extends number ? number[] : number;
declare type ufixed264x112<N = void> = N extends number ? number[] : number;
declare type ufixed264x113<N = void> = N extends number ? number[] : number;
declare type ufixed264x114<N = void> = N extends number ? number[] : number;
declare type ufixed264x115<N = void> = N extends number ? number[] : number;
declare type ufixed264x116<N = void> = N extends number ? number[] : number;
declare type ufixed264x117<N = void> = N extends number ? number[] : number;
declare type ufixed264x118<N = void> = N extends number ? number[] : number;
declare type ufixed264x119<N = void> = N extends number ? number[] : number;
declare type ufixed264x120<N = void> = N extends number ? number[] : number;
declare type ufixed264x121<N = void> = N extends number ? number[] : number;
declare type ufixed264x122<N = void> = N extends number ? number[] : number;
declare type ufixed264x123<N = void> = N extends number ? number[] : number;
declare type ufixed264x124<N = void> = N extends number ? number[] : number;
declare type ufixed264x125<N = void> = N extends number ? number[] : number;
declare type ufixed264x126<N = void> = N extends number ? number[] : number;
declare type ufixed264x127<N = void> = N extends number ? number[] : number;
declare type ufixed264x128<N = void> = N extends number ? number[] : number;
declare type ufixed264x129<N = void> = N extends number ? number[] : number;
declare type ufixed264x130<N = void> = N extends number ? number[] : number;
declare type ufixed264x131<N = void> = N extends number ? number[] : number;
declare type ufixed264x132<N = void> = N extends number ? number[] : number;
declare type ufixed264x133<N = void> = N extends number ? number[] : number;
declare type ufixed264x134<N = void> = N extends number ? number[] : number;
declare type ufixed264x135<N = void> = N extends number ? number[] : number;
declare type ufixed264x136<N = void> = N extends number ? number[] : number;
declare type ufixed264x137<N = void> = N extends number ? number[] : number;
declare type ufixed264x138<N = void> = N extends number ? number[] : number;
declare type ufixed264x139<N = void> = N extends number ? number[] : number;
declare type ufixed264x140<N = void> = N extends number ? number[] : number;
declare type ufixed264x141<N = void> = N extends number ? number[] : number;
declare type ufixed264x142<N = void> = N extends number ? number[] : number;
declare type ufixed264x143<N = void> = N extends number ? number[] : number;
declare type ufixed264x144<N = void> = N extends number ? number[] : number;
declare type ufixed264x145<N = void> = N extends number ? number[] : number;
declare type ufixed264x146<N = void> = N extends number ? number[] : number;
declare type ufixed264x147<N = void> = N extends number ? number[] : number;
declare type ufixed264x148<N = void> = N extends number ? number[] : number;
declare type ufixed264x149<N = void> = N extends number ? number[] : number;
declare type ufixed264x150<N = void> = N extends number ? number[] : number;
declare type ufixed264x151<N = void> = N extends number ? number[] : number;
declare type ufixed264x152<N = void> = N extends number ? number[] : number;
declare type ufixed264x153<N = void> = N extends number ? number[] : number;
declare type ufixed264x154<N = void> = N extends number ? number[] : number;
declare type ufixed264x155<N = void> = N extends number ? number[] : number;
declare type ufixed264x156<N = void> = N extends number ? number[] : number;
declare type ufixed264x157<N = void> = N extends number ? number[] : number;
declare type ufixed264x158<N = void> = N extends number ? number[] : number;
declare type ufixed264x159<N = void> = N extends number ? number[] : number;
declare type ufixed264x160<N = void> = N extends number ? number[] : number;
declare type ufixed272x1<N = void> = N extends number ? number[] : number;
declare type ufixed272x2<N = void> = N extends number ? number[] : number;
declare type ufixed272x3<N = void> = N extends number ? number[] : number;
declare type ufixed272x4<N = void> = N extends number ? number[] : number;
declare type ufixed272x5<N = void> = N extends number ? number[] : number;
declare type ufixed272x6<N = void> = N extends number ? number[] : number;
declare type ufixed272x7<N = void> = N extends number ? number[] : number;
declare type ufixed272x8<N = void> = N extends number ? number[] : number;
declare type ufixed272x9<N = void> = N extends number ? number[] : number;
declare type ufixed272x10<N = void> = N extends number ? number[] : number;
declare type ufixed272x11<N = void> = N extends number ? number[] : number;
declare type ufixed272x12<N = void> = N extends number ? number[] : number;
declare type ufixed272x13<N = void> = N extends number ? number[] : number;
declare type ufixed272x14<N = void> = N extends number ? number[] : number;
declare type ufixed272x15<N = void> = N extends number ? number[] : number;
declare type ufixed272x16<N = void> = N extends number ? number[] : number;
declare type ufixed272x17<N = void> = N extends number ? number[] : number;
declare type ufixed272x18<N = void> = N extends number ? number[] : number;
declare type ufixed272x19<N = void> = N extends number ? number[] : number;
declare type ufixed272x20<N = void> = N extends number ? number[] : number;
declare type ufixed272x21<N = void> = N extends number ? number[] : number;
declare type ufixed272x22<N = void> = N extends number ? number[] : number;
declare type ufixed272x23<N = void> = N extends number ? number[] : number;
declare type ufixed272x24<N = void> = N extends number ? number[] : number;
declare type ufixed272x25<N = void> = N extends number ? number[] : number;
declare type ufixed272x26<N = void> = N extends number ? number[] : number;
declare type ufixed272x27<N = void> = N extends number ? number[] : number;
declare type ufixed272x28<N = void> = N extends number ? number[] : number;
declare type ufixed272x29<N = void> = N extends number ? number[] : number;
declare type ufixed272x30<N = void> = N extends number ? number[] : number;
declare type ufixed272x31<N = void> = N extends number ? number[] : number;
declare type ufixed272x32<N = void> = N extends number ? number[] : number;
declare type ufixed272x33<N = void> = N extends number ? number[] : number;
declare type ufixed272x34<N = void> = N extends number ? number[] : number;
declare type ufixed272x35<N = void> = N extends number ? number[] : number;
declare type ufixed272x36<N = void> = N extends number ? number[] : number;
declare type ufixed272x37<N = void> = N extends number ? number[] : number;
declare type ufixed272x38<N = void> = N extends number ? number[] : number;
declare type ufixed272x39<N = void> = N extends number ? number[] : number;
declare type ufixed272x40<N = void> = N extends number ? number[] : number;
declare type ufixed272x41<N = void> = N extends number ? number[] : number;
declare type ufixed272x42<N = void> = N extends number ? number[] : number;
declare type ufixed272x43<N = void> = N extends number ? number[] : number;
declare type ufixed272x44<N = void> = N extends number ? number[] : number;
declare type ufixed272x45<N = void> = N extends number ? number[] : number;
declare type ufixed272x46<N = void> = N extends number ? number[] : number;
declare type ufixed272x47<N = void> = N extends number ? number[] : number;
declare type ufixed272x48<N = void> = N extends number ? number[] : number;
declare type ufixed272x49<N = void> = N extends number ? number[] : number;
declare type ufixed272x50<N = void> = N extends number ? number[] : number;
declare type ufixed272x51<N = void> = N extends number ? number[] : number;
declare type ufixed272x52<N = void> = N extends number ? number[] : number;
declare type ufixed272x53<N = void> = N extends number ? number[] : number;
declare type ufixed272x54<N = void> = N extends number ? number[] : number;
declare type ufixed272x55<N = void> = N extends number ? number[] : number;
declare type ufixed272x56<N = void> = N extends number ? number[] : number;
declare type ufixed272x57<N = void> = N extends number ? number[] : number;
declare type ufixed272x58<N = void> = N extends number ? number[] : number;
declare type ufixed272x59<N = void> = N extends number ? number[] : number;
declare type ufixed272x60<N = void> = N extends number ? number[] : number;
declare type ufixed272x61<N = void> = N extends number ? number[] : number;
declare type ufixed272x62<N = void> = N extends number ? number[] : number;
declare type ufixed272x63<N = void> = N extends number ? number[] : number;
declare type ufixed272x64<N = void> = N extends number ? number[] : number;
declare type ufixed272x65<N = void> = N extends number ? number[] : number;
declare type ufixed272x66<N = void> = N extends number ? number[] : number;
declare type ufixed272x67<N = void> = N extends number ? number[] : number;
declare type ufixed272x68<N = void> = N extends number ? number[] : number;
declare type ufixed272x69<N = void> = N extends number ? number[] : number;
declare type ufixed272x70<N = void> = N extends number ? number[] : number;
declare type ufixed272x71<N = void> = N extends number ? number[] : number;
declare type ufixed272x72<N = void> = N extends number ? number[] : number;
declare type ufixed272x73<N = void> = N extends number ? number[] : number;
declare type ufixed272x74<N = void> = N extends number ? number[] : number;
declare type ufixed272x75<N = void> = N extends number ? number[] : number;
declare type ufixed272x76<N = void> = N extends number ? number[] : number;
declare type ufixed272x77<N = void> = N extends number ? number[] : number;
declare type ufixed272x78<N = void> = N extends number ? number[] : number;
declare type ufixed272x79<N = void> = N extends number ? number[] : number;
declare type ufixed272x80<N = void> = N extends number ? number[] : number;
declare type ufixed272x81<N = void> = N extends number ? number[] : number;
declare type ufixed272x82<N = void> = N extends number ? number[] : number;
declare type ufixed272x83<N = void> = N extends number ? number[] : number;
declare type ufixed272x84<N = void> = N extends number ? number[] : number;
declare type ufixed272x85<N = void> = N extends number ? number[] : number;
declare type ufixed272x86<N = void> = N extends number ? number[] : number;
declare type ufixed272x87<N = void> = N extends number ? number[] : number;
declare type ufixed272x88<N = void> = N extends number ? number[] : number;
declare type ufixed272x89<N = void> = N extends number ? number[] : number;
declare type ufixed272x90<N = void> = N extends number ? number[] : number;
declare type ufixed272x91<N = void> = N extends number ? number[] : number;
declare type ufixed272x92<N = void> = N extends number ? number[] : number;
declare type ufixed272x93<N = void> = N extends number ? number[] : number;
declare type ufixed272x94<N = void> = N extends number ? number[] : number;
declare type ufixed272x95<N = void> = N extends number ? number[] : number;
declare type ufixed272x96<N = void> = N extends number ? number[] : number;
declare type ufixed272x97<N = void> = N extends number ? number[] : number;
declare type ufixed272x98<N = void> = N extends number ? number[] : number;
declare type ufixed272x99<N = void> = N extends number ? number[] : number;
declare type ufixed272x100<N = void> = N extends number ? number[] : number;
declare type ufixed272x101<N = void> = N extends number ? number[] : number;
declare type ufixed272x102<N = void> = N extends number ? number[] : number;
declare type ufixed272x103<N = void> = N extends number ? number[] : number;
declare type ufixed272x104<N = void> = N extends number ? number[] : number;
declare type ufixed272x105<N = void> = N extends number ? number[] : number;
declare type ufixed272x106<N = void> = N extends number ? number[] : number;
declare type ufixed272x107<N = void> = N extends number ? number[] : number;
declare type ufixed272x108<N = void> = N extends number ? number[] : number;
declare type ufixed272x109<N = void> = N extends number ? number[] : number;
declare type ufixed272x110<N = void> = N extends number ? number[] : number;
declare type ufixed272x111<N = void> = N extends number ? number[] : number;
declare type ufixed272x112<N = void> = N extends number ? number[] : number;
declare type ufixed272x113<N = void> = N extends number ? number[] : number;
declare type ufixed272x114<N = void> = N extends number ? number[] : number;
declare type ufixed272x115<N = void> = N extends number ? number[] : number;
declare type ufixed272x116<N = void> = N extends number ? number[] : number;
declare type ufixed272x117<N = void> = N extends number ? number[] : number;
declare type ufixed272x118<N = void> = N extends number ? number[] : number;
declare type ufixed272x119<N = void> = N extends number ? number[] : number;
declare type ufixed272x120<N = void> = N extends number ? number[] : number;
declare type ufixed272x121<N = void> = N extends number ? number[] : number;
declare type ufixed272x122<N = void> = N extends number ? number[] : number;
declare type ufixed272x123<N = void> = N extends number ? number[] : number;
declare type ufixed272x124<N = void> = N extends number ? number[] : number;
declare type ufixed272x125<N = void> = N extends number ? number[] : number;
declare type ufixed272x126<N = void> = N extends number ? number[] : number;
declare type ufixed272x127<N = void> = N extends number ? number[] : number;
declare type ufixed272x128<N = void> = N extends number ? number[] : number;
declare type ufixed272x129<N = void> = N extends number ? number[] : number;
declare type ufixed272x130<N = void> = N extends number ? number[] : number;
declare type ufixed272x131<N = void> = N extends number ? number[] : number;
declare type ufixed272x132<N = void> = N extends number ? number[] : number;
declare type ufixed272x133<N = void> = N extends number ? number[] : number;
declare type ufixed272x134<N = void> = N extends number ? number[] : number;
declare type ufixed272x135<N = void> = N extends number ? number[] : number;
declare type ufixed272x136<N = void> = N extends number ? number[] : number;
declare type ufixed272x137<N = void> = N extends number ? number[] : number;
declare type ufixed272x138<N = void> = N extends number ? number[] : number;
declare type ufixed272x139<N = void> = N extends number ? number[] : number;
declare type ufixed272x140<N = void> = N extends number ? number[] : number;
declare type ufixed272x141<N = void> = N extends number ? number[] : number;
declare type ufixed272x142<N = void> = N extends number ? number[] : number;
declare type ufixed272x143<N = void> = N extends number ? number[] : number;
declare type ufixed272x144<N = void> = N extends number ? number[] : number;
declare type ufixed272x145<N = void> = N extends number ? number[] : number;
declare type ufixed272x146<N = void> = N extends number ? number[] : number;
declare type ufixed272x147<N = void> = N extends number ? number[] : number;
declare type ufixed272x148<N = void> = N extends number ? number[] : number;
declare type ufixed272x149<N = void> = N extends number ? number[] : number;
declare type ufixed272x150<N = void> = N extends number ? number[] : number;
declare type ufixed272x151<N = void> = N extends number ? number[] : number;
declare type ufixed272x152<N = void> = N extends number ? number[] : number;
declare type ufixed272x153<N = void> = N extends number ? number[] : number;
declare type ufixed272x154<N = void> = N extends number ? number[] : number;
declare type ufixed272x155<N = void> = N extends number ? number[] : number;
declare type ufixed272x156<N = void> = N extends number ? number[] : number;
declare type ufixed272x157<N = void> = N extends number ? number[] : number;
declare type ufixed272x158<N = void> = N extends number ? number[] : number;
declare type ufixed272x159<N = void> = N extends number ? number[] : number;
declare type ufixed272x160<N = void> = N extends number ? number[] : number;
declare type ufixed280x1<N = void> = N extends number ? number[] : number;
declare type ufixed280x2<N = void> = N extends number ? number[] : number;
declare type ufixed280x3<N = void> = N extends number ? number[] : number;
declare type ufixed280x4<N = void> = N extends number ? number[] : number;
declare type ufixed280x5<N = void> = N extends number ? number[] : number;
declare type ufixed280x6<N = void> = N extends number ? number[] : number;
declare type ufixed280x7<N = void> = N extends number ? number[] : number;
declare type ufixed280x8<N = void> = N extends number ? number[] : number;
declare type ufixed280x9<N = void> = N extends number ? number[] : number;
declare type ufixed280x10<N = void> = N extends number ? number[] : number;
declare type ufixed280x11<N = void> = N extends number ? number[] : number;
declare type ufixed280x12<N = void> = N extends number ? number[] : number;
declare type ufixed280x13<N = void> = N extends number ? number[] : number;
declare type ufixed280x14<N = void> = N extends number ? number[] : number;
declare type ufixed280x15<N = void> = N extends number ? number[] : number;
declare type ufixed280x16<N = void> = N extends number ? number[] : number;
declare type ufixed280x17<N = void> = N extends number ? number[] : number;
declare type ufixed280x18<N = void> = N extends number ? number[] : number;
declare type ufixed280x19<N = void> = N extends number ? number[] : number;
declare type ufixed280x20<N = void> = N extends number ? number[] : number;
declare type ufixed280x21<N = void> = N extends number ? number[] : number;
declare type ufixed280x22<N = void> = N extends number ? number[] : number;
declare type ufixed280x23<N = void> = N extends number ? number[] : number;
declare type ufixed280x24<N = void> = N extends number ? number[] : number;
declare type ufixed280x25<N = void> = N extends number ? number[] : number;
declare type ufixed280x26<N = void> = N extends number ? number[] : number;
declare type ufixed280x27<N = void> = N extends number ? number[] : number;
declare type ufixed280x28<N = void> = N extends number ? number[] : number;
declare type ufixed280x29<N = void> = N extends number ? number[] : number;
declare type ufixed280x30<N = void> = N extends number ? number[] : number;
declare type ufixed280x31<N = void> = N extends number ? number[] : number;
declare type ufixed280x32<N = void> = N extends number ? number[] : number;
declare type ufixed280x33<N = void> = N extends number ? number[] : number;
declare type ufixed280x34<N = void> = N extends number ? number[] : number;
declare type ufixed280x35<N = void> = N extends number ? number[] : number;
declare type ufixed280x36<N = void> = N extends number ? number[] : number;
declare type ufixed280x37<N = void> = N extends number ? number[] : number;
declare type ufixed280x38<N = void> = N extends number ? number[] : number;
declare type ufixed280x39<N = void> = N extends number ? number[] : number;
declare type ufixed280x40<N = void> = N extends number ? number[] : number;
declare type ufixed280x41<N = void> = N extends number ? number[] : number;
declare type ufixed280x42<N = void> = N extends number ? number[] : number;
declare type ufixed280x43<N = void> = N extends number ? number[] : number;
declare type ufixed280x44<N = void> = N extends number ? number[] : number;
declare type ufixed280x45<N = void> = N extends number ? number[] : number;
declare type ufixed280x46<N = void> = N extends number ? number[] : number;
declare type ufixed280x47<N = void> = N extends number ? number[] : number;
declare type ufixed280x48<N = void> = N extends number ? number[] : number;
declare type ufixed280x49<N = void> = N extends number ? number[] : number;
declare type ufixed280x50<N = void> = N extends number ? number[] : number;
declare type ufixed280x51<N = void> = N extends number ? number[] : number;
declare type ufixed280x52<N = void> = N extends number ? number[] : number;
declare type ufixed280x53<N = void> = N extends number ? number[] : number;
declare type ufixed280x54<N = void> = N extends number ? number[] : number;
declare type ufixed280x55<N = void> = N extends number ? number[] : number;
declare type ufixed280x56<N = void> = N extends number ? number[] : number;
declare type ufixed280x57<N = void> = N extends number ? number[] : number;
declare type ufixed280x58<N = void> = N extends number ? number[] : number;
declare type ufixed280x59<N = void> = N extends number ? number[] : number;
declare type ufixed280x60<N = void> = N extends number ? number[] : number;
declare type ufixed280x61<N = void> = N extends number ? number[] : number;
declare type ufixed280x62<N = void> = N extends number ? number[] : number;
declare type ufixed280x63<N = void> = N extends number ? number[] : number;
declare type ufixed280x64<N = void> = N extends number ? number[] : number;
declare type ufixed280x65<N = void> = N extends number ? number[] : number;
declare type ufixed280x66<N = void> = N extends number ? number[] : number;
declare type ufixed280x67<N = void> = N extends number ? number[] : number;
declare type ufixed280x68<N = void> = N extends number ? number[] : number;
declare type ufixed280x69<N = void> = N extends number ? number[] : number;
declare type ufixed280x70<N = void> = N extends number ? number[] : number;
declare type ufixed280x71<N = void> = N extends number ? number[] : number;
declare type ufixed280x72<N = void> = N extends number ? number[] : number;
declare type ufixed280x73<N = void> = N extends number ? number[] : number;
declare type ufixed280x74<N = void> = N extends number ? number[] : number;
declare type ufixed280x75<N = void> = N extends number ? number[] : number;
declare type ufixed280x76<N = void> = N extends number ? number[] : number;
declare type ufixed280x77<N = void> = N extends number ? number[] : number;
declare type ufixed280x78<N = void> = N extends number ? number[] : number;
declare type ufixed280x79<N = void> = N extends number ? number[] : number;
declare type ufixed280x80<N = void> = N extends number ? number[] : number;
declare type ufixed280x81<N = void> = N extends number ? number[] : number;
declare type ufixed280x82<N = void> = N extends number ? number[] : number;
declare type ufixed280x83<N = void> = N extends number ? number[] : number;
declare type ufixed280x84<N = void> = N extends number ? number[] : number;
declare type ufixed280x85<N = void> = N extends number ? number[] : number;
declare type ufixed280x86<N = void> = N extends number ? number[] : number;
declare type ufixed280x87<N = void> = N extends number ? number[] : number;
declare type ufixed280x88<N = void> = N extends number ? number[] : number;
declare type ufixed280x89<N = void> = N extends number ? number[] : number;
declare type ufixed280x90<N = void> = N extends number ? number[] : number;
declare type ufixed280x91<N = void> = N extends number ? number[] : number;
declare type ufixed280x92<N = void> = N extends number ? number[] : number;
declare type ufixed280x93<N = void> = N extends number ? number[] : number;
declare type ufixed280x94<N = void> = N extends number ? number[] : number;
declare type ufixed280x95<N = void> = N extends number ? number[] : number;
declare type ufixed280x96<N = void> = N extends number ? number[] : number;
declare type ufixed280x97<N = void> = N extends number ? number[] : number;
declare type ufixed280x98<N = void> = N extends number ? number[] : number;
declare type ufixed280x99<N = void> = N extends number ? number[] : number;
declare type ufixed280x100<N = void> = N extends number ? number[] : number;
declare type ufixed280x101<N = void> = N extends number ? number[] : number;
declare type ufixed280x102<N = void> = N extends number ? number[] : number;
declare type ufixed280x103<N = void> = N extends number ? number[] : number;
declare type ufixed280x104<N = void> = N extends number ? number[] : number;
declare type ufixed280x105<N = void> = N extends number ? number[] : number;
declare type ufixed280x106<N = void> = N extends number ? number[] : number;
declare type ufixed280x107<N = void> = N extends number ? number[] : number;
declare type ufixed280x108<N = void> = N extends number ? number[] : number;
declare type ufixed280x109<N = void> = N extends number ? number[] : number;
declare type ufixed280x110<N = void> = N extends number ? number[] : number;
declare type ufixed280x111<N = void> = N extends number ? number[] : number;
declare type ufixed280x112<N = void> = N extends number ? number[] : number;
declare type ufixed280x113<N = void> = N extends number ? number[] : number;
declare type ufixed280x114<N = void> = N extends number ? number[] : number;
declare type ufixed280x115<N = void> = N extends number ? number[] : number;
declare type ufixed280x116<N = void> = N extends number ? number[] : number;
declare type ufixed280x117<N = void> = N extends number ? number[] : number;
declare type ufixed280x118<N = void> = N extends number ? number[] : number;
declare type ufixed280x119<N = void> = N extends number ? number[] : number;
declare type ufixed280x120<N = void> = N extends number ? number[] : number;
declare type ufixed280x121<N = void> = N extends number ? number[] : number;
declare type ufixed280x122<N = void> = N extends number ? number[] : number;
declare type ufixed280x123<N = void> = N extends number ? number[] : number;
declare type ufixed280x124<N = void> = N extends number ? number[] : number;
declare type ufixed280x125<N = void> = N extends number ? number[] : number;
declare type ufixed280x126<N = void> = N extends number ? number[] : number;
declare type ufixed280x127<N = void> = N extends number ? number[] : number;
declare type ufixed280x128<N = void> = N extends number ? number[] : number;
declare type ufixed280x129<N = void> = N extends number ? number[] : number;
declare type ufixed280x130<N = void> = N extends number ? number[] : number;
declare type ufixed280x131<N = void> = N extends number ? number[] : number;
declare type ufixed280x132<N = void> = N extends number ? number[] : number;
declare type ufixed280x133<N = void> = N extends number ? number[] : number;
declare type ufixed280x134<N = void> = N extends number ? number[] : number;
declare type ufixed280x135<N = void> = N extends number ? number[] : number;
declare type ufixed280x136<N = void> = N extends number ? number[] : number;
declare type ufixed280x137<N = void> = N extends number ? number[] : number;
declare type ufixed280x138<N = void> = N extends number ? number[] : number;
declare type ufixed280x139<N = void> = N extends number ? number[] : number;
declare type ufixed280x140<N = void> = N extends number ? number[] : number;
declare type ufixed280x141<N = void> = N extends number ? number[] : number;
declare type ufixed280x142<N = void> = N extends number ? number[] : number;
declare type ufixed280x143<N = void> = N extends number ? number[] : number;
declare type ufixed280x144<N = void> = N extends number ? number[] : number;
declare type ufixed280x145<N = void> = N extends number ? number[] : number;
declare type ufixed280x146<N = void> = N extends number ? number[] : number;
declare type ufixed280x147<N = void> = N extends number ? number[] : number;
declare type ufixed280x148<N = void> = N extends number ? number[] : number;
declare type ufixed280x149<N = void> = N extends number ? number[] : number;
declare type ufixed280x150<N = void> = N extends number ? number[] : number;
declare type ufixed280x151<N = void> = N extends number ? number[] : number;
declare type ufixed280x152<N = void> = N extends number ? number[] : number;
declare type ufixed280x153<N = void> = N extends number ? number[] : number;
declare type ufixed280x154<N = void> = N extends number ? number[] : number;
declare type ufixed280x155<N = void> = N extends number ? number[] : number;
declare type ufixed280x156<N = void> = N extends number ? number[] : number;
declare type ufixed280x157<N = void> = N extends number ? number[] : number;
declare type ufixed280x158<N = void> = N extends number ? number[] : number;
declare type ufixed280x159<N = void> = N extends number ? number[] : number;
declare type ufixed280x160<N = void> = N extends number ? number[] : number;
declare type ufixed288x1<N = void> = N extends number ? number[] : number;
declare type ufixed288x2<N = void> = N extends number ? number[] : number;
declare type ufixed288x3<N = void> = N extends number ? number[] : number;
declare type ufixed288x4<N = void> = N extends number ? number[] : number;
declare type ufixed288x5<N = void> = N extends number ? number[] : number;
declare type ufixed288x6<N = void> = N extends number ? number[] : number;
declare type ufixed288x7<N = void> = N extends number ? number[] : number;
declare type ufixed288x8<N = void> = N extends number ? number[] : number;
declare type ufixed288x9<N = void> = N extends number ? number[] : number;
declare type ufixed288x10<N = void> = N extends number ? number[] : number;
declare type ufixed288x11<N = void> = N extends number ? number[] : number;
declare type ufixed288x12<N = void> = N extends number ? number[] : number;
declare type ufixed288x13<N = void> = N extends number ? number[] : number;
declare type ufixed288x14<N = void> = N extends number ? number[] : number;
declare type ufixed288x15<N = void> = N extends number ? number[] : number;
declare type ufixed288x16<N = void> = N extends number ? number[] : number;
declare type ufixed288x17<N = void> = N extends number ? number[] : number;
declare type ufixed288x18<N = void> = N extends number ? number[] : number;
declare type ufixed288x19<N = void> = N extends number ? number[] : number;
declare type ufixed288x20<N = void> = N extends number ? number[] : number;
declare type ufixed288x21<N = void> = N extends number ? number[] : number;
declare type ufixed288x22<N = void> = N extends number ? number[] : number;
declare type ufixed288x23<N = void> = N extends number ? number[] : number;
declare type ufixed288x24<N = void> = N extends number ? number[] : number;
declare type ufixed288x25<N = void> = N extends number ? number[] : number;
declare type ufixed288x26<N = void> = N extends number ? number[] : number;
declare type ufixed288x27<N = void> = N extends number ? number[] : number;
declare type ufixed288x28<N = void> = N extends number ? number[] : number;
declare type ufixed288x29<N = void> = N extends number ? number[] : number;
declare type ufixed288x30<N = void> = N extends number ? number[] : number;
declare type ufixed288x31<N = void> = N extends number ? number[] : number;
declare type ufixed288x32<N = void> = N extends number ? number[] : number;
declare type ufixed288x33<N = void> = N extends number ? number[] : number;
declare type ufixed288x34<N = void> = N extends number ? number[] : number;
declare type ufixed288x35<N = void> = N extends number ? number[] : number;
declare type ufixed288x36<N = void> = N extends number ? number[] : number;
declare type ufixed288x37<N = void> = N extends number ? number[] : number;
declare type ufixed288x38<N = void> = N extends number ? number[] : number;
declare type ufixed288x39<N = void> = N extends number ? number[] : number;
declare type ufixed288x40<N = void> = N extends number ? number[] : number;
declare type ufixed288x41<N = void> = N extends number ? number[] : number;
declare type ufixed288x42<N = void> = N extends number ? number[] : number;
declare type ufixed288x43<N = void> = N extends number ? number[] : number;
declare type ufixed288x44<N = void> = N extends number ? number[] : number;
declare type ufixed288x45<N = void> = N extends number ? number[] : number;
declare type ufixed288x46<N = void> = N extends number ? number[] : number;
declare type ufixed288x47<N = void> = N extends number ? number[] : number;
declare type ufixed288x48<N = void> = N extends number ? number[] : number;
declare type ufixed288x49<N = void> = N extends number ? number[] : number;
declare type ufixed288x50<N = void> = N extends number ? number[] : number;
declare type ufixed288x51<N = void> = N extends number ? number[] : number;
declare type ufixed288x52<N = void> = N extends number ? number[] : number;
declare type ufixed288x53<N = void> = N extends number ? number[] : number;
declare type ufixed288x54<N = void> = N extends number ? number[] : number;
declare type ufixed288x55<N = void> = N extends number ? number[] : number;
declare type ufixed288x56<N = void> = N extends number ? number[] : number;
declare type ufixed288x57<N = void> = N extends number ? number[] : number;
declare type ufixed288x58<N = void> = N extends number ? number[] : number;
declare type ufixed288x59<N = void> = N extends number ? number[] : number;
declare type ufixed288x60<N = void> = N extends number ? number[] : number;
declare type ufixed288x61<N = void> = N extends number ? number[] : number;
declare type ufixed288x62<N = void> = N extends number ? number[] : number;
declare type ufixed288x63<N = void> = N extends number ? number[] : number;
declare type ufixed288x64<N = void> = N extends number ? number[] : number;
declare type ufixed288x65<N = void> = N extends number ? number[] : number;
declare type ufixed288x66<N = void> = N extends number ? number[] : number;
declare type ufixed288x67<N = void> = N extends number ? number[] : number;
declare type ufixed288x68<N = void> = N extends number ? number[] : number;
declare type ufixed288x69<N = void> = N extends number ? number[] : number;
declare type ufixed288x70<N = void> = N extends number ? number[] : number;
declare type ufixed288x71<N = void> = N extends number ? number[] : number;
declare type ufixed288x72<N = void> = N extends number ? number[] : number;
declare type ufixed288x73<N = void> = N extends number ? number[] : number;
declare type ufixed288x74<N = void> = N extends number ? number[] : number;
declare type ufixed288x75<N = void> = N extends number ? number[] : number;
declare type ufixed288x76<N = void> = N extends number ? number[] : number;
declare type ufixed288x77<N = void> = N extends number ? number[] : number;
declare type ufixed288x78<N = void> = N extends number ? number[] : number;
declare type ufixed288x79<N = void> = N extends number ? number[] : number;
declare type ufixed288x80<N = void> = N extends number ? number[] : number;
declare type ufixed288x81<N = void> = N extends number ? number[] : number;
declare type ufixed288x82<N = void> = N extends number ? number[] : number;
declare type ufixed288x83<N = void> = N extends number ? number[] : number;
declare type ufixed288x84<N = void> = N extends number ? number[] : number;
declare type ufixed288x85<N = void> = N extends number ? number[] : number;
declare type ufixed288x86<N = void> = N extends number ? number[] : number;
declare type ufixed288x87<N = void> = N extends number ? number[] : number;
declare type ufixed288x88<N = void> = N extends number ? number[] : number;
declare type ufixed288x89<N = void> = N extends number ? number[] : number;
declare type ufixed288x90<N = void> = N extends number ? number[] : number;
declare type ufixed288x91<N = void> = N extends number ? number[] : number;
declare type ufixed288x92<N = void> = N extends number ? number[] : number;
declare type ufixed288x93<N = void> = N extends number ? number[] : number;
declare type ufixed288x94<N = void> = N extends number ? number[] : number;
declare type ufixed288x95<N = void> = N extends number ? number[] : number;
declare type ufixed288x96<N = void> = N extends number ? number[] : number;
declare type ufixed288x97<N = void> = N extends number ? number[] : number;
declare type ufixed288x98<N = void> = N extends number ? number[] : number;
declare type ufixed288x99<N = void> = N extends number ? number[] : number;
declare type ufixed288x100<N = void> = N extends number ? number[] : number;
declare type ufixed288x101<N = void> = N extends number ? number[] : number;
declare type ufixed288x102<N = void> = N extends number ? number[] : number;
declare type ufixed288x103<N = void> = N extends number ? number[] : number;
declare type ufixed288x104<N = void> = N extends number ? number[] : number;
declare type ufixed288x105<N = void> = N extends number ? number[] : number;
declare type ufixed288x106<N = void> = N extends number ? number[] : number;
declare type ufixed288x107<N = void> = N extends number ? number[] : number;
declare type ufixed288x108<N = void> = N extends number ? number[] : number;
declare type ufixed288x109<N = void> = N extends number ? number[] : number;
declare type ufixed288x110<N = void> = N extends number ? number[] : number;
declare type ufixed288x111<N = void> = N extends number ? number[] : number;
declare type ufixed288x112<N = void> = N extends number ? number[] : number;
declare type ufixed288x113<N = void> = N extends number ? number[] : number;
declare type ufixed288x114<N = void> = N extends number ? number[] : number;
declare type ufixed288x115<N = void> = N extends number ? number[] : number;
declare type ufixed288x116<N = void> = N extends number ? number[] : number;
declare type ufixed288x117<N = void> = N extends number ? number[] : number;
declare type ufixed288x118<N = void> = N extends number ? number[] : number;
declare type ufixed288x119<N = void> = N extends number ? number[] : number;
declare type ufixed288x120<N = void> = N extends number ? number[] : number;
declare type ufixed288x121<N = void> = N extends number ? number[] : number;
declare type ufixed288x122<N = void> = N extends number ? number[] : number;
declare type ufixed288x123<N = void> = N extends number ? number[] : number;
declare type ufixed288x124<N = void> = N extends number ? number[] : number;
declare type ufixed288x125<N = void> = N extends number ? number[] : number;
declare type ufixed288x126<N = void> = N extends number ? number[] : number;
declare type ufixed288x127<N = void> = N extends number ? number[] : number;
declare type ufixed288x128<N = void> = N extends number ? number[] : number;
declare type ufixed288x129<N = void> = N extends number ? number[] : number;
declare type ufixed288x130<N = void> = N extends number ? number[] : number;
declare type ufixed288x131<N = void> = N extends number ? number[] : number;
declare type ufixed288x132<N = void> = N extends number ? number[] : number;
declare type ufixed288x133<N = void> = N extends number ? number[] : number;
declare type ufixed288x134<N = void> = N extends number ? number[] : number;
declare type ufixed288x135<N = void> = N extends number ? number[] : number;
declare type ufixed288x136<N = void> = N extends number ? number[] : number;
declare type ufixed288x137<N = void> = N extends number ? number[] : number;
declare type ufixed288x138<N = void> = N extends number ? number[] : number;
declare type ufixed288x139<N = void> = N extends number ? number[] : number;
declare type ufixed288x140<N = void> = N extends number ? number[] : number;
declare type ufixed288x141<N = void> = N extends number ? number[] : number;
declare type ufixed288x142<N = void> = N extends number ? number[] : number;
declare type ufixed288x143<N = void> = N extends number ? number[] : number;
declare type ufixed288x144<N = void> = N extends number ? number[] : number;
declare type ufixed288x145<N = void> = N extends number ? number[] : number;
declare type ufixed288x146<N = void> = N extends number ? number[] : number;
declare type ufixed288x147<N = void> = N extends number ? number[] : number;
declare type ufixed288x148<N = void> = N extends number ? number[] : number;
declare type ufixed288x149<N = void> = N extends number ? number[] : number;
declare type ufixed288x150<N = void> = N extends number ? number[] : number;
declare type ufixed288x151<N = void> = N extends number ? number[] : number;
declare type ufixed288x152<N = void> = N extends number ? number[] : number;
declare type ufixed288x153<N = void> = N extends number ? number[] : number;
declare type ufixed288x154<N = void> = N extends number ? number[] : number;
declare type ufixed288x155<N = void> = N extends number ? number[] : number;
declare type ufixed288x156<N = void> = N extends number ? number[] : number;
declare type ufixed288x157<N = void> = N extends number ? number[] : number;
declare type ufixed288x158<N = void> = N extends number ? number[] : number;
declare type ufixed288x159<N = void> = N extends number ? number[] : number;
declare type ufixed288x160<N = void> = N extends number ? number[] : number;
declare type ufixed296x1<N = void> = N extends number ? number[] : number;
declare type ufixed296x2<N = void> = N extends number ? number[] : number;
declare type ufixed296x3<N = void> = N extends number ? number[] : number;
declare type ufixed296x4<N = void> = N extends number ? number[] : number;
declare type ufixed296x5<N = void> = N extends number ? number[] : number;
declare type ufixed296x6<N = void> = N extends number ? number[] : number;
declare type ufixed296x7<N = void> = N extends number ? number[] : number;
declare type ufixed296x8<N = void> = N extends number ? number[] : number;
declare type ufixed296x9<N = void> = N extends number ? number[] : number;
declare type ufixed296x10<N = void> = N extends number ? number[] : number;
declare type ufixed296x11<N = void> = N extends number ? number[] : number;
declare type ufixed296x12<N = void> = N extends number ? number[] : number;
declare type ufixed296x13<N = void> = N extends number ? number[] : number;
declare type ufixed296x14<N = void> = N extends number ? number[] : number;
declare type ufixed296x15<N = void> = N extends number ? number[] : number;
declare type ufixed296x16<N = void> = N extends number ? number[] : number;
declare type ufixed296x17<N = void> = N extends number ? number[] : number;
declare type ufixed296x18<N = void> = N extends number ? number[] : number;
declare type ufixed296x19<N = void> = N extends number ? number[] : number;
declare type ufixed296x20<N = void> = N extends number ? number[] : number;
declare type ufixed296x21<N = void> = N extends number ? number[] : number;
declare type ufixed296x22<N = void> = N extends number ? number[] : number;
declare type ufixed296x23<N = void> = N extends number ? number[] : number;
declare type ufixed296x24<N = void> = N extends number ? number[] : number;
declare type ufixed296x25<N = void> = N extends number ? number[] : number;
declare type ufixed296x26<N = void> = N extends number ? number[] : number;
declare type ufixed296x27<N = void> = N extends number ? number[] : number;
declare type ufixed296x28<N = void> = N extends number ? number[] : number;
declare type ufixed296x29<N = void> = N extends number ? number[] : number;
declare type ufixed296x30<N = void> = N extends number ? number[] : number;
declare type ufixed296x31<N = void> = N extends number ? number[] : number;
declare type ufixed296x32<N = void> = N extends number ? number[] : number;
declare type ufixed296x33<N = void> = N extends number ? number[] : number;
declare type ufixed296x34<N = void> = N extends number ? number[] : number;
declare type ufixed296x35<N = void> = N extends number ? number[] : number;
declare type ufixed296x36<N = void> = N extends number ? number[] : number;
declare type ufixed296x37<N = void> = N extends number ? number[] : number;
declare type ufixed296x38<N = void> = N extends number ? number[] : number;
declare type ufixed296x39<N = void> = N extends number ? number[] : number;
declare type ufixed296x40<N = void> = N extends number ? number[] : number;
declare type ufixed296x41<N = void> = N extends number ? number[] : number;
declare type ufixed296x42<N = void> = N extends number ? number[] : number;
declare type ufixed296x43<N = void> = N extends number ? number[] : number;
declare type ufixed296x44<N = void> = N extends number ? number[] : number;
declare type ufixed296x45<N = void> = N extends number ? number[] : number;
declare type ufixed296x46<N = void> = N extends number ? number[] : number;
declare type ufixed296x47<N = void> = N extends number ? number[] : number;
declare type ufixed296x48<N = void> = N extends number ? number[] : number;
declare type ufixed296x49<N = void> = N extends number ? number[] : number;
declare type ufixed296x50<N = void> = N extends number ? number[] : number;
declare type ufixed296x51<N = void> = N extends number ? number[] : number;
declare type ufixed296x52<N = void> = N extends number ? number[] : number;
declare type ufixed296x53<N = void> = N extends number ? number[] : number;
declare type ufixed296x54<N = void> = N extends number ? number[] : number;
declare type ufixed296x55<N = void> = N extends number ? number[] : number;
declare type ufixed296x56<N = void> = N extends number ? number[] : number;
declare type ufixed296x57<N = void> = N extends number ? number[] : number;
declare type ufixed296x58<N = void> = N extends number ? number[] : number;
declare type ufixed296x59<N = void> = N extends number ? number[] : number;
declare type ufixed296x60<N = void> = N extends number ? number[] : number;
declare type ufixed296x61<N = void> = N extends number ? number[] : number;
declare type ufixed296x62<N = void> = N extends number ? number[] : number;
declare type ufixed296x63<N = void> = N extends number ? number[] : number;
declare type ufixed296x64<N = void> = N extends number ? number[] : number;
declare type ufixed296x65<N = void> = N extends number ? number[] : number;
declare type ufixed296x66<N = void> = N extends number ? number[] : number;
declare type ufixed296x67<N = void> = N extends number ? number[] : number;
declare type ufixed296x68<N = void> = N extends number ? number[] : number;
declare type ufixed296x69<N = void> = N extends number ? number[] : number;
declare type ufixed296x70<N = void> = N extends number ? number[] : number;
declare type ufixed296x71<N = void> = N extends number ? number[] : number;
declare type ufixed296x72<N = void> = N extends number ? number[] : number;
declare type ufixed296x73<N = void> = N extends number ? number[] : number;
declare type ufixed296x74<N = void> = N extends number ? number[] : number;
declare type ufixed296x75<N = void> = N extends number ? number[] : number;
declare type ufixed296x76<N = void> = N extends number ? number[] : number;
declare type ufixed296x77<N = void> = N extends number ? number[] : number;
declare type ufixed296x78<N = void> = N extends number ? number[] : number;
declare type ufixed296x79<N = void> = N extends number ? number[] : number;
declare type ufixed296x80<N = void> = N extends number ? number[] : number;
declare type ufixed296x81<N = void> = N extends number ? number[] : number;
declare type ufixed296x82<N = void> = N extends number ? number[] : number;
declare type ufixed296x83<N = void> = N extends number ? number[] : number;
declare type ufixed296x84<N = void> = N extends number ? number[] : number;
declare type ufixed296x85<N = void> = N extends number ? number[] : number;
declare type ufixed296x86<N = void> = N extends number ? number[] : number;
declare type ufixed296x87<N = void> = N extends number ? number[] : number;
declare type ufixed296x88<N = void> = N extends number ? number[] : number;
declare type ufixed296x89<N = void> = N extends number ? number[] : number;
declare type ufixed296x90<N = void> = N extends number ? number[] : number;
declare type ufixed296x91<N = void> = N extends number ? number[] : number;
declare type ufixed296x92<N = void> = N extends number ? number[] : number;
declare type ufixed296x93<N = void> = N extends number ? number[] : number;
declare type ufixed296x94<N = void> = N extends number ? number[] : number;
declare type ufixed296x95<N = void> = N extends number ? number[] : number;
declare type ufixed296x96<N = void> = N extends number ? number[] : number;
declare type ufixed296x97<N = void> = N extends number ? number[] : number;
declare type ufixed296x98<N = void> = N extends number ? number[] : number;
declare type ufixed296x99<N = void> = N extends number ? number[] : number;
declare type ufixed296x100<N = void> = N extends number ? number[] : number;
declare type ufixed296x101<N = void> = N extends number ? number[] : number;
declare type ufixed296x102<N = void> = N extends number ? number[] : number;
declare type ufixed296x103<N = void> = N extends number ? number[] : number;
declare type ufixed296x104<N = void> = N extends number ? number[] : number;
declare type ufixed296x105<N = void> = N extends number ? number[] : number;
declare type ufixed296x106<N = void> = N extends number ? number[] : number;
declare type ufixed296x107<N = void> = N extends number ? number[] : number;
declare type ufixed296x108<N = void> = N extends number ? number[] : number;
declare type ufixed296x109<N = void> = N extends number ? number[] : number;
declare type ufixed296x110<N = void> = N extends number ? number[] : number;
declare type ufixed296x111<N = void> = N extends number ? number[] : number;
declare type ufixed296x112<N = void> = N extends number ? number[] : number;
declare type ufixed296x113<N = void> = N extends number ? number[] : number;
declare type ufixed296x114<N = void> = N extends number ? number[] : number;
declare type ufixed296x115<N = void> = N extends number ? number[] : number;
declare type ufixed296x116<N = void> = N extends number ? number[] : number;
declare type ufixed296x117<N = void> = N extends number ? number[] : number;
declare type ufixed296x118<N = void> = N extends number ? number[] : number;
declare type ufixed296x119<N = void> = N extends number ? number[] : number;
declare type ufixed296x120<N = void> = N extends number ? number[] : number;
declare type ufixed296x121<N = void> = N extends number ? number[] : number;
declare type ufixed296x122<N = void> = N extends number ? number[] : number;
declare type ufixed296x123<N = void> = N extends number ? number[] : number;
declare type ufixed296x124<N = void> = N extends number ? number[] : number;
declare type ufixed296x125<N = void> = N extends number ? number[] : number;
declare type ufixed296x126<N = void> = N extends number ? number[] : number;
declare type ufixed296x127<N = void> = N extends number ? number[] : number;
declare type ufixed296x128<N = void> = N extends number ? number[] : number;
declare type ufixed296x129<N = void> = N extends number ? number[] : number;
declare type ufixed296x130<N = void> = N extends number ? number[] : number;
declare type ufixed296x131<N = void> = N extends number ? number[] : number;
declare type ufixed296x132<N = void> = N extends number ? number[] : number;
declare type ufixed296x133<N = void> = N extends number ? number[] : number;
declare type ufixed296x134<N = void> = N extends number ? number[] : number;
declare type ufixed296x135<N = void> = N extends number ? number[] : number;
declare type ufixed296x136<N = void> = N extends number ? number[] : number;
declare type ufixed296x137<N = void> = N extends number ? number[] : number;
declare type ufixed296x138<N = void> = N extends number ? number[] : number;
declare type ufixed296x139<N = void> = N extends number ? number[] : number;
declare type ufixed296x140<N = void> = N extends number ? number[] : number;
declare type ufixed296x141<N = void> = N extends number ? number[] : number;
declare type ufixed296x142<N = void> = N extends number ? number[] : number;
declare type ufixed296x143<N = void> = N extends number ? number[] : number;
declare type ufixed296x144<N = void> = N extends number ? number[] : number;
declare type ufixed296x145<N = void> = N extends number ? number[] : number;
declare type ufixed296x146<N = void> = N extends number ? number[] : number;
declare type ufixed296x147<N = void> = N extends number ? number[] : number;
declare type ufixed296x148<N = void> = N extends number ? number[] : number;
declare type ufixed296x149<N = void> = N extends number ? number[] : number;
declare type ufixed296x150<N = void> = N extends number ? number[] : number;
declare type ufixed296x151<N = void> = N extends number ? number[] : number;
declare type ufixed296x152<N = void> = N extends number ? number[] : number;
declare type ufixed296x153<N = void> = N extends number ? number[] : number;
declare type ufixed296x154<N = void> = N extends number ? number[] : number;
declare type ufixed296x155<N = void> = N extends number ? number[] : number;
declare type ufixed296x156<N = void> = N extends number ? number[] : number;
declare type ufixed296x157<N = void> = N extends number ? number[] : number;
declare type ufixed296x158<N = void> = N extends number ? number[] : number;
declare type ufixed296x159<N = void> = N extends number ? number[] : number;
declare type ufixed296x160<N = void> = N extends number ? number[] : number;
declare type ufixed304x1<N = void> = N extends number ? number[] : number;
declare type ufixed304x2<N = void> = N extends number ? number[] : number;
declare type ufixed304x3<N = void> = N extends number ? number[] : number;
declare type ufixed304x4<N = void> = N extends number ? number[] : number;
declare type ufixed304x5<N = void> = N extends number ? number[] : number;
declare type ufixed304x6<N = void> = N extends number ? number[] : number;
declare type ufixed304x7<N = void> = N extends number ? number[] : number;
declare type ufixed304x8<N = void> = N extends number ? number[] : number;
declare type ufixed304x9<N = void> = N extends number ? number[] : number;
declare type ufixed304x10<N = void> = N extends number ? number[] : number;
declare type ufixed304x11<N = void> = N extends number ? number[] : number;
declare type ufixed304x12<N = void> = N extends number ? number[] : number;
declare type ufixed304x13<N = void> = N extends number ? number[] : number;
declare type ufixed304x14<N = void> = N extends number ? number[] : number;
declare type ufixed304x15<N = void> = N extends number ? number[] : number;
declare type ufixed304x16<N = void> = N extends number ? number[] : number;
declare type ufixed304x17<N = void> = N extends number ? number[] : number;
declare type ufixed304x18<N = void> = N extends number ? number[] : number;
declare type ufixed304x19<N = void> = N extends number ? number[] : number;
declare type ufixed304x20<N = void> = N extends number ? number[] : number;
declare type ufixed304x21<N = void> = N extends number ? number[] : number;
declare type ufixed304x22<N = void> = N extends number ? number[] : number;
declare type ufixed304x23<N = void> = N extends number ? number[] : number;
declare type ufixed304x24<N = void> = N extends number ? number[] : number;
declare type ufixed304x25<N = void> = N extends number ? number[] : number;
declare type ufixed304x26<N = void> = N extends number ? number[] : number;
declare type ufixed304x27<N = void> = N extends number ? number[] : number;
declare type ufixed304x28<N = void> = N extends number ? number[] : number;
declare type ufixed304x29<N = void> = N extends number ? number[] : number;
declare type ufixed304x30<N = void> = N extends number ? number[] : number;
declare type ufixed304x31<N = void> = N extends number ? number[] : number;
declare type ufixed304x32<N = void> = N extends number ? number[] : number;
declare type ufixed304x33<N = void> = N extends number ? number[] : number;
declare type ufixed304x34<N = void> = N extends number ? number[] : number;
declare type ufixed304x35<N = void> = N extends number ? number[] : number;
declare type ufixed304x36<N = void> = N extends number ? number[] : number;
declare type ufixed304x37<N = void> = N extends number ? number[] : number;
declare type ufixed304x38<N = void> = N extends number ? number[] : number;
declare type ufixed304x39<N = void> = N extends number ? number[] : number;
declare type ufixed304x40<N = void> = N extends number ? number[] : number;
declare type ufixed304x41<N = void> = N extends number ? number[] : number;
declare type ufixed304x42<N = void> = N extends number ? number[] : number;
declare type ufixed304x43<N = void> = N extends number ? number[] : number;
declare type ufixed304x44<N = void> = N extends number ? number[] : number;
declare type ufixed304x45<N = void> = N extends number ? number[] : number;
declare type ufixed304x46<N = void> = N extends number ? number[] : number;
declare type ufixed304x47<N = void> = N extends number ? number[] : number;
declare type ufixed304x48<N = void> = N extends number ? number[] : number;
declare type ufixed304x49<N = void> = N extends number ? number[] : number;
declare type ufixed304x50<N = void> = N extends number ? number[] : number;
declare type ufixed304x51<N = void> = N extends number ? number[] : number;
declare type ufixed304x52<N = void> = N extends number ? number[] : number;
declare type ufixed304x53<N = void> = N extends number ? number[] : number;
declare type ufixed304x54<N = void> = N extends number ? number[] : number;
declare type ufixed304x55<N = void> = N extends number ? number[] : number;
declare type ufixed304x56<N = void> = N extends number ? number[] : number;
declare type ufixed304x57<N = void> = N extends number ? number[] : number;
declare type ufixed304x58<N = void> = N extends number ? number[] : number;
declare type ufixed304x59<N = void> = N extends number ? number[] : number;
declare type ufixed304x60<N = void> = N extends number ? number[] : number;
declare type ufixed304x61<N = void> = N extends number ? number[] : number;
declare type ufixed304x62<N = void> = N extends number ? number[] : number;
declare type ufixed304x63<N = void> = N extends number ? number[] : number;
declare type ufixed304x64<N = void> = N extends number ? number[] : number;
declare type ufixed304x65<N = void> = N extends number ? number[] : number;
declare type ufixed304x66<N = void> = N extends number ? number[] : number;
declare type ufixed304x67<N = void> = N extends number ? number[] : number;
declare type ufixed304x68<N = void> = N extends number ? number[] : number;
declare type ufixed304x69<N = void> = N extends number ? number[] : number;
declare type ufixed304x70<N = void> = N extends number ? number[] : number;
declare type ufixed304x71<N = void> = N extends number ? number[] : number;
declare type ufixed304x72<N = void> = N extends number ? number[] : number;
declare type ufixed304x73<N = void> = N extends number ? number[] : number;
declare type ufixed304x74<N = void> = N extends number ? number[] : number;
declare type ufixed304x75<N = void> = N extends number ? number[] : number;
declare type ufixed304x76<N = void> = N extends number ? number[] : number;
declare type ufixed304x77<N = void> = N extends number ? number[] : number;
declare type ufixed304x78<N = void> = N extends number ? number[] : number;
declare type ufixed304x79<N = void> = N extends number ? number[] : number;
declare type ufixed304x80<N = void> = N extends number ? number[] : number;
declare type ufixed304x81<N = void> = N extends number ? number[] : number;
declare type ufixed304x82<N = void> = N extends number ? number[] : number;
declare type ufixed304x83<N = void> = N extends number ? number[] : number;
declare type ufixed304x84<N = void> = N extends number ? number[] : number;
declare type ufixed304x85<N = void> = N extends number ? number[] : number;
declare type ufixed304x86<N = void> = N extends number ? number[] : number;
declare type ufixed304x87<N = void> = N extends number ? number[] : number;
declare type ufixed304x88<N = void> = N extends number ? number[] : number;
declare type ufixed304x89<N = void> = N extends number ? number[] : number;
declare type ufixed304x90<N = void> = N extends number ? number[] : number;
declare type ufixed304x91<N = void> = N extends number ? number[] : number;
declare type ufixed304x92<N = void> = N extends number ? number[] : number;
declare type ufixed304x93<N = void> = N extends number ? number[] : number;
declare type ufixed304x94<N = void> = N extends number ? number[] : number;
declare type ufixed304x95<N = void> = N extends number ? number[] : number;
declare type ufixed304x96<N = void> = N extends number ? number[] : number;
declare type ufixed304x97<N = void> = N extends number ? number[] : number;
declare type ufixed304x98<N = void> = N extends number ? number[] : number;
declare type ufixed304x99<N = void> = N extends number ? number[] : number;
declare type ufixed304x100<N = void> = N extends number ? number[] : number;
declare type ufixed304x101<N = void> = N extends number ? number[] : number;
declare type ufixed304x102<N = void> = N extends number ? number[] : number;
declare type ufixed304x103<N = void> = N extends number ? number[] : number;
declare type ufixed304x104<N = void> = N extends number ? number[] : number;
declare type ufixed304x105<N = void> = N extends number ? number[] : number;
declare type ufixed304x106<N = void> = N extends number ? number[] : number;
declare type ufixed304x107<N = void> = N extends number ? number[] : number;
declare type ufixed304x108<N = void> = N extends number ? number[] : number;
declare type ufixed304x109<N = void> = N extends number ? number[] : number;
declare type ufixed304x110<N = void> = N extends number ? number[] : number;
declare type ufixed304x111<N = void> = N extends number ? number[] : number;
declare type ufixed304x112<N = void> = N extends number ? number[] : number;
declare type ufixed304x113<N = void> = N extends number ? number[] : number;
declare type ufixed304x114<N = void> = N extends number ? number[] : number;
declare type ufixed304x115<N = void> = N extends number ? number[] : number;
declare type ufixed304x116<N = void> = N extends number ? number[] : number;
declare type ufixed304x117<N = void> = N extends number ? number[] : number;
declare type ufixed304x118<N = void> = N extends number ? number[] : number;
declare type ufixed304x119<N = void> = N extends number ? number[] : number;
declare type ufixed304x120<N = void> = N extends number ? number[] : number;
declare type ufixed304x121<N = void> = N extends number ? number[] : number;
declare type ufixed304x122<N = void> = N extends number ? number[] : number;
declare type ufixed304x123<N = void> = N extends number ? number[] : number;
declare type ufixed304x124<N = void> = N extends number ? number[] : number;
declare type ufixed304x125<N = void> = N extends number ? number[] : number;
declare type ufixed304x126<N = void> = N extends number ? number[] : number;
declare type ufixed304x127<N = void> = N extends number ? number[] : number;
declare type ufixed304x128<N = void> = N extends number ? number[] : number;
declare type ufixed304x129<N = void> = N extends number ? number[] : number;
declare type ufixed304x130<N = void> = N extends number ? number[] : number;
declare type ufixed304x131<N = void> = N extends number ? number[] : number;
declare type ufixed304x132<N = void> = N extends number ? number[] : number;
declare type ufixed304x133<N = void> = N extends number ? number[] : number;
declare type ufixed304x134<N = void> = N extends number ? number[] : number;
declare type ufixed304x135<N = void> = N extends number ? number[] : number;
declare type ufixed304x136<N = void> = N extends number ? number[] : number;
declare type ufixed304x137<N = void> = N extends number ? number[] : number;
declare type ufixed304x138<N = void> = N extends number ? number[] : number;
declare type ufixed304x139<N = void> = N extends number ? number[] : number;
declare type ufixed304x140<N = void> = N extends number ? number[] : number;
declare type ufixed304x141<N = void> = N extends number ? number[] : number;
declare type ufixed304x142<N = void> = N extends number ? number[] : number;
declare type ufixed304x143<N = void> = N extends number ? number[] : number;
declare type ufixed304x144<N = void> = N extends number ? number[] : number;
declare type ufixed304x145<N = void> = N extends number ? number[] : number;
declare type ufixed304x146<N = void> = N extends number ? number[] : number;
declare type ufixed304x147<N = void> = N extends number ? number[] : number;
declare type ufixed304x148<N = void> = N extends number ? number[] : number;
declare type ufixed304x149<N = void> = N extends number ? number[] : number;
declare type ufixed304x150<N = void> = N extends number ? number[] : number;
declare type ufixed304x151<N = void> = N extends number ? number[] : number;
declare type ufixed304x152<N = void> = N extends number ? number[] : number;
declare type ufixed304x153<N = void> = N extends number ? number[] : number;
declare type ufixed304x154<N = void> = N extends number ? number[] : number;
declare type ufixed304x155<N = void> = N extends number ? number[] : number;
declare type ufixed304x156<N = void> = N extends number ? number[] : number;
declare type ufixed304x157<N = void> = N extends number ? number[] : number;
declare type ufixed304x158<N = void> = N extends number ? number[] : number;
declare type ufixed304x159<N = void> = N extends number ? number[] : number;
declare type ufixed304x160<N = void> = N extends number ? number[] : number;
declare type ufixed312x1<N = void> = N extends number ? number[] : number;
declare type ufixed312x2<N = void> = N extends number ? number[] : number;
declare type ufixed312x3<N = void> = N extends number ? number[] : number;
declare type ufixed312x4<N = void> = N extends number ? number[] : number;
declare type ufixed312x5<N = void> = N extends number ? number[] : number;
declare type ufixed312x6<N = void> = N extends number ? number[] : number;
declare type ufixed312x7<N = void> = N extends number ? number[] : number;
declare type ufixed312x8<N = void> = N extends number ? number[] : number;
declare type ufixed312x9<N = void> = N extends number ? number[] : number;
declare type ufixed312x10<N = void> = N extends number ? number[] : number;
declare type ufixed312x11<N = void> = N extends number ? number[] : number;
declare type ufixed312x12<N = void> = N extends number ? number[] : number;
declare type ufixed312x13<N = void> = N extends number ? number[] : number;
declare type ufixed312x14<N = void> = N extends number ? number[] : number;
declare type ufixed312x15<N = void> = N extends number ? number[] : number;
declare type ufixed312x16<N = void> = N extends number ? number[] : number;
declare type ufixed312x17<N = void> = N extends number ? number[] : number;
declare type ufixed312x18<N = void> = N extends number ? number[] : number;
declare type ufixed312x19<N = void> = N extends number ? number[] : number;
declare type ufixed312x20<N = void> = N extends number ? number[] : number;
declare type ufixed312x21<N = void> = N extends number ? number[] : number;
declare type ufixed312x22<N = void> = N extends number ? number[] : number;
declare type ufixed312x23<N = void> = N extends number ? number[] : number;
declare type ufixed312x24<N = void> = N extends number ? number[] : number;
declare type ufixed312x25<N = void> = N extends number ? number[] : number;
declare type ufixed312x26<N = void> = N extends number ? number[] : number;
declare type ufixed312x27<N = void> = N extends number ? number[] : number;
declare type ufixed312x28<N = void> = N extends number ? number[] : number;
declare type ufixed312x29<N = void> = N extends number ? number[] : number;
declare type ufixed312x30<N = void> = N extends number ? number[] : number;
declare type ufixed312x31<N = void> = N extends number ? number[] : number;
declare type ufixed312x32<N = void> = N extends number ? number[] : number;
declare type ufixed312x33<N = void> = N extends number ? number[] : number;
declare type ufixed312x34<N = void> = N extends number ? number[] : number;
declare type ufixed312x35<N = void> = N extends number ? number[] : number;
declare type ufixed312x36<N = void> = N extends number ? number[] : number;
declare type ufixed312x37<N = void> = N extends number ? number[] : number;
declare type ufixed312x38<N = void> = N extends number ? number[] : number;
declare type ufixed312x39<N = void> = N extends number ? number[] : number;
declare type ufixed312x40<N = void> = N extends number ? number[] : number;
declare type ufixed312x41<N = void> = N extends number ? number[] : number;
declare type ufixed312x42<N = void> = N extends number ? number[] : number;
declare type ufixed312x43<N = void> = N extends number ? number[] : number;
declare type ufixed312x44<N = void> = N extends number ? number[] : number;
declare type ufixed312x45<N = void> = N extends number ? number[] : number;
declare type ufixed312x46<N = void> = N extends number ? number[] : number;
declare type ufixed312x47<N = void> = N extends number ? number[] : number;
declare type ufixed312x48<N = void> = N extends number ? number[] : number;
declare type ufixed312x49<N = void> = N extends number ? number[] : number;
declare type ufixed312x50<N = void> = N extends number ? number[] : number;
declare type ufixed312x51<N = void> = N extends number ? number[] : number;
declare type ufixed312x52<N = void> = N extends number ? number[] : number;
declare type ufixed312x53<N = void> = N extends number ? number[] : number;
declare type ufixed312x54<N = void> = N extends number ? number[] : number;
declare type ufixed312x55<N = void> = N extends number ? number[] : number;
declare type ufixed312x56<N = void> = N extends number ? number[] : number;
declare type ufixed312x57<N = void> = N extends number ? number[] : number;
declare type ufixed312x58<N = void> = N extends number ? number[] : number;
declare type ufixed312x59<N = void> = N extends number ? number[] : number;
declare type ufixed312x60<N = void> = N extends number ? number[] : number;
declare type ufixed312x61<N = void> = N extends number ? number[] : number;
declare type ufixed312x62<N = void> = N extends number ? number[] : number;
declare type ufixed312x63<N = void> = N extends number ? number[] : number;
declare type ufixed312x64<N = void> = N extends number ? number[] : number;
declare type ufixed312x65<N = void> = N extends number ? number[] : number;
declare type ufixed312x66<N = void> = N extends number ? number[] : number;
declare type ufixed312x67<N = void> = N extends number ? number[] : number;
declare type ufixed312x68<N = void> = N extends number ? number[] : number;
declare type ufixed312x69<N = void> = N extends number ? number[] : number;
declare type ufixed312x70<N = void> = N extends number ? number[] : number;
declare type ufixed312x71<N = void> = N extends number ? number[] : number;
declare type ufixed312x72<N = void> = N extends number ? number[] : number;
declare type ufixed312x73<N = void> = N extends number ? number[] : number;
declare type ufixed312x74<N = void> = N extends number ? number[] : number;
declare type ufixed312x75<N = void> = N extends number ? number[] : number;
declare type ufixed312x76<N = void> = N extends number ? number[] : number;
declare type ufixed312x77<N = void> = N extends number ? number[] : number;
declare type ufixed312x78<N = void> = N extends number ? number[] : number;
declare type ufixed312x79<N = void> = N extends number ? number[] : number;
declare type ufixed312x80<N = void> = N extends number ? number[] : number;
declare type ufixed312x81<N = void> = N extends number ? number[] : number;
declare type ufixed312x82<N = void> = N extends number ? number[] : number;
declare type ufixed312x83<N = void> = N extends number ? number[] : number;
declare type ufixed312x84<N = void> = N extends number ? number[] : number;
declare type ufixed312x85<N = void> = N extends number ? number[] : number;
declare type ufixed312x86<N = void> = N extends number ? number[] : number;
declare type ufixed312x87<N = void> = N extends number ? number[] : number;
declare type ufixed312x88<N = void> = N extends number ? number[] : number;
declare type ufixed312x89<N = void> = N extends number ? number[] : number;
declare type ufixed312x90<N = void> = N extends number ? number[] : number;
declare type ufixed312x91<N = void> = N extends number ? number[] : number;
declare type ufixed312x92<N = void> = N extends number ? number[] : number;
declare type ufixed312x93<N = void> = N extends number ? number[] : number;
declare type ufixed312x94<N = void> = N extends number ? number[] : number;
declare type ufixed312x95<N = void> = N extends number ? number[] : number;
declare type ufixed312x96<N = void> = N extends number ? number[] : number;
declare type ufixed312x97<N = void> = N extends number ? number[] : number;
declare type ufixed312x98<N = void> = N extends number ? number[] : number;
declare type ufixed312x99<N = void> = N extends number ? number[] : number;
declare type ufixed312x100<N = void> = N extends number ? number[] : number;
declare type ufixed312x101<N = void> = N extends number ? number[] : number;
declare type ufixed312x102<N = void> = N extends number ? number[] : number;
declare type ufixed312x103<N = void> = N extends number ? number[] : number;
declare type ufixed312x104<N = void> = N extends number ? number[] : number;
declare type ufixed312x105<N = void> = N extends number ? number[] : number;
declare type ufixed312x106<N = void> = N extends number ? number[] : number;
declare type ufixed312x107<N = void> = N extends number ? number[] : number;
declare type ufixed312x108<N = void> = N extends number ? number[] : number;
declare type ufixed312x109<N = void> = N extends number ? number[] : number;
declare type ufixed312x110<N = void> = N extends number ? number[] : number;
declare type ufixed312x111<N = void> = N extends number ? number[] : number;
declare type ufixed312x112<N = void> = N extends number ? number[] : number;
declare type ufixed312x113<N = void> = N extends number ? number[] : number;
declare type ufixed312x114<N = void> = N extends number ? number[] : number;
declare type ufixed312x115<N = void> = N extends number ? number[] : number;
declare type ufixed312x116<N = void> = N extends number ? number[] : number;
declare type ufixed312x117<N = void> = N extends number ? number[] : number;
declare type ufixed312x118<N = void> = N extends number ? number[] : number;
declare type ufixed312x119<N = void> = N extends number ? number[] : number;
declare type ufixed312x120<N = void> = N extends number ? number[] : number;
declare type ufixed312x121<N = void> = N extends number ? number[] : number;
declare type ufixed312x122<N = void> = N extends number ? number[] : number;
declare type ufixed312x123<N = void> = N extends number ? number[] : number;
declare type ufixed312x124<N = void> = N extends number ? number[] : number;
declare type ufixed312x125<N = void> = N extends number ? number[] : number;
declare type ufixed312x126<N = void> = N extends number ? number[] : number;
declare type ufixed312x127<N = void> = N extends number ? number[] : number;
declare type ufixed312x128<N = void> = N extends number ? number[] : number;
declare type ufixed312x129<N = void> = N extends number ? number[] : number;
declare type ufixed312x130<N = void> = N extends number ? number[] : number;
declare type ufixed312x131<N = void> = N extends number ? number[] : number;
declare type ufixed312x132<N = void> = N extends number ? number[] : number;
declare type ufixed312x133<N = void> = N extends number ? number[] : number;
declare type ufixed312x134<N = void> = N extends number ? number[] : number;
declare type ufixed312x135<N = void> = N extends number ? number[] : number;
declare type ufixed312x136<N = void> = N extends number ? number[] : number;
declare type ufixed312x137<N = void> = N extends number ? number[] : number;
declare type ufixed312x138<N = void> = N extends number ? number[] : number;
declare type ufixed312x139<N = void> = N extends number ? number[] : number;
declare type ufixed312x140<N = void> = N extends number ? number[] : number;
declare type ufixed312x141<N = void> = N extends number ? number[] : number;
declare type ufixed312x142<N = void> = N extends number ? number[] : number;
declare type ufixed312x143<N = void> = N extends number ? number[] : number;
declare type ufixed312x144<N = void> = N extends number ? number[] : number;
declare type ufixed312x145<N = void> = N extends number ? number[] : number;
declare type ufixed312x146<N = void> = N extends number ? number[] : number;
declare type ufixed312x147<N = void> = N extends number ? number[] : number;
declare type ufixed312x148<N = void> = N extends number ? number[] : number;
declare type ufixed312x149<N = void> = N extends number ? number[] : number;
declare type ufixed312x150<N = void> = N extends number ? number[] : number;
declare type ufixed312x151<N = void> = N extends number ? number[] : number;
declare type ufixed312x152<N = void> = N extends number ? number[] : number;
declare type ufixed312x153<N = void> = N extends number ? number[] : number;
declare type ufixed312x154<N = void> = N extends number ? number[] : number;
declare type ufixed312x155<N = void> = N extends number ? number[] : number;
declare type ufixed312x156<N = void> = N extends number ? number[] : number;
declare type ufixed312x157<N = void> = N extends number ? number[] : number;
declare type ufixed312x158<N = void> = N extends number ? number[] : number;
declare type ufixed312x159<N = void> = N extends number ? number[] : number;
declare type ufixed312x160<N = void> = N extends number ? number[] : number;
declare type ufixed320x1<N = void> = N extends number ? number[] : number;
declare type ufixed320x2<N = void> = N extends number ? number[] : number;
declare type ufixed320x3<N = void> = N extends number ? number[] : number;
declare type ufixed320x4<N = void> = N extends number ? number[] : number;
declare type ufixed320x5<N = void> = N extends number ? number[] : number;
declare type ufixed320x6<N = void> = N extends number ? number[] : number;
declare type ufixed320x7<N = void> = N extends number ? number[] : number;
declare type ufixed320x8<N = void> = N extends number ? number[] : number;
declare type ufixed320x9<N = void> = N extends number ? number[] : number;
declare type ufixed320x10<N = void> = N extends number ? number[] : number;
declare type ufixed320x11<N = void> = N extends number ? number[] : number;
declare type ufixed320x12<N = void> = N extends number ? number[] : number;
declare type ufixed320x13<N = void> = N extends number ? number[] : number;
declare type ufixed320x14<N = void> = N extends number ? number[] : number;
declare type ufixed320x15<N = void> = N extends number ? number[] : number;
declare type ufixed320x16<N = void> = N extends number ? number[] : number;
declare type ufixed320x17<N = void> = N extends number ? number[] : number;
declare type ufixed320x18<N = void> = N extends number ? number[] : number;
declare type ufixed320x19<N = void> = N extends number ? number[] : number;
declare type ufixed320x20<N = void> = N extends number ? number[] : number;
declare type ufixed320x21<N = void> = N extends number ? number[] : number;
declare type ufixed320x22<N = void> = N extends number ? number[] : number;
declare type ufixed320x23<N = void> = N extends number ? number[] : number;
declare type ufixed320x24<N = void> = N extends number ? number[] : number;
declare type ufixed320x25<N = void> = N extends number ? number[] : number;
declare type ufixed320x26<N = void> = N extends number ? number[] : number;
declare type ufixed320x27<N = void> = N extends number ? number[] : number;
declare type ufixed320x28<N = void> = N extends number ? number[] : number;
declare type ufixed320x29<N = void> = N extends number ? number[] : number;
declare type ufixed320x30<N = void> = N extends number ? number[] : number;
declare type ufixed320x31<N = void> = N extends number ? number[] : number;
declare type ufixed320x32<N = void> = N extends number ? number[] : number;
declare type ufixed320x33<N = void> = N extends number ? number[] : number;
declare type ufixed320x34<N = void> = N extends number ? number[] : number;
declare type ufixed320x35<N = void> = N extends number ? number[] : number;
declare type ufixed320x36<N = void> = N extends number ? number[] : number;
declare type ufixed320x37<N = void> = N extends number ? number[] : number;
declare type ufixed320x38<N = void> = N extends number ? number[] : number;
declare type ufixed320x39<N = void> = N extends number ? number[] : number;
declare type ufixed320x40<N = void> = N extends number ? number[] : number;
declare type ufixed320x41<N = void> = N extends number ? number[] : number;
declare type ufixed320x42<N = void> = N extends number ? number[] : number;
declare type ufixed320x43<N = void> = N extends number ? number[] : number;
declare type ufixed320x44<N = void> = N extends number ? number[] : number;
declare type ufixed320x45<N = void> = N extends number ? number[] : number;
declare type ufixed320x46<N = void> = N extends number ? number[] : number;
declare type ufixed320x47<N = void> = N extends number ? number[] : number;
declare type ufixed320x48<N = void> = N extends number ? number[] : number;
declare type ufixed320x49<N = void> = N extends number ? number[] : number;
declare type ufixed320x50<N = void> = N extends number ? number[] : number;
declare type ufixed320x51<N = void> = N extends number ? number[] : number;
declare type ufixed320x52<N = void> = N extends number ? number[] : number;
declare type ufixed320x53<N = void> = N extends number ? number[] : number;
declare type ufixed320x54<N = void> = N extends number ? number[] : number;
declare type ufixed320x55<N = void> = N extends number ? number[] : number;
declare type ufixed320x56<N = void> = N extends number ? number[] : number;
declare type ufixed320x57<N = void> = N extends number ? number[] : number;
declare type ufixed320x58<N = void> = N extends number ? number[] : number;
declare type ufixed320x59<N = void> = N extends number ? number[] : number;
declare type ufixed320x60<N = void> = N extends number ? number[] : number;
declare type ufixed320x61<N = void> = N extends number ? number[] : number;
declare type ufixed320x62<N = void> = N extends number ? number[] : number;
declare type ufixed320x63<N = void> = N extends number ? number[] : number;
declare type ufixed320x64<N = void> = N extends number ? number[] : number;
declare type ufixed320x65<N = void> = N extends number ? number[] : number;
declare type ufixed320x66<N = void> = N extends number ? number[] : number;
declare type ufixed320x67<N = void> = N extends number ? number[] : number;
declare type ufixed320x68<N = void> = N extends number ? number[] : number;
declare type ufixed320x69<N = void> = N extends number ? number[] : number;
declare type ufixed320x70<N = void> = N extends number ? number[] : number;
declare type ufixed320x71<N = void> = N extends number ? number[] : number;
declare type ufixed320x72<N = void> = N extends number ? number[] : number;
declare type ufixed320x73<N = void> = N extends number ? number[] : number;
declare type ufixed320x74<N = void> = N extends number ? number[] : number;
declare type ufixed320x75<N = void> = N extends number ? number[] : number;
declare type ufixed320x76<N = void> = N extends number ? number[] : number;
declare type ufixed320x77<N = void> = N extends number ? number[] : number;
declare type ufixed320x78<N = void> = N extends number ? number[] : number;
declare type ufixed320x79<N = void> = N extends number ? number[] : number;
declare type ufixed320x80<N = void> = N extends number ? number[] : number;
declare type ufixed320x81<N = void> = N extends number ? number[] : number;
declare type ufixed320x82<N = void> = N extends number ? number[] : number;
declare type ufixed320x83<N = void> = N extends number ? number[] : number;
declare type ufixed320x84<N = void> = N extends number ? number[] : number;
declare type ufixed320x85<N = void> = N extends number ? number[] : number;
declare type ufixed320x86<N = void> = N extends number ? number[] : number;
declare type ufixed320x87<N = void> = N extends number ? number[] : number;
declare type ufixed320x88<N = void> = N extends number ? number[] : number;
declare type ufixed320x89<N = void> = N extends number ? number[] : number;
declare type ufixed320x90<N = void> = N extends number ? number[] : number;
declare type ufixed320x91<N = void> = N extends number ? number[] : number;
declare type ufixed320x92<N = void> = N extends number ? number[] : number;
declare type ufixed320x93<N = void> = N extends number ? number[] : number;
declare type ufixed320x94<N = void> = N extends number ? number[] : number;
declare type ufixed320x95<N = void> = N extends number ? number[] : number;
declare type ufixed320x96<N = void> = N extends number ? number[] : number;
declare type ufixed320x97<N = void> = N extends number ? number[] : number;
declare type ufixed320x98<N = void> = N extends number ? number[] : number;
declare type ufixed320x99<N = void> = N extends number ? number[] : number;
declare type ufixed320x100<N = void> = N extends number ? number[] : number;
declare type ufixed320x101<N = void> = N extends number ? number[] : number;
declare type ufixed320x102<N = void> = N extends number ? number[] : number;
declare type ufixed320x103<N = void> = N extends number ? number[] : number;
declare type ufixed320x104<N = void> = N extends number ? number[] : number;
declare type ufixed320x105<N = void> = N extends number ? number[] : number;
declare type ufixed320x106<N = void> = N extends number ? number[] : number;
declare type ufixed320x107<N = void> = N extends number ? number[] : number;
declare type ufixed320x108<N = void> = N extends number ? number[] : number;
declare type ufixed320x109<N = void> = N extends number ? number[] : number;
declare type ufixed320x110<N = void> = N extends number ? number[] : number;
declare type ufixed320x111<N = void> = N extends number ? number[] : number;
declare type ufixed320x112<N = void> = N extends number ? number[] : number;
declare type ufixed320x113<N = void> = N extends number ? number[] : number;
declare type ufixed320x114<N = void> = N extends number ? number[] : number;
declare type ufixed320x115<N = void> = N extends number ? number[] : number;
declare type ufixed320x116<N = void> = N extends number ? number[] : number;
declare type ufixed320x117<N = void> = N extends number ? number[] : number;
declare type ufixed320x118<N = void> = N extends number ? number[] : number;
declare type ufixed320x119<N = void> = N extends number ? number[] : number;
declare type ufixed320x120<N = void> = N extends number ? number[] : number;
declare type ufixed320x121<N = void> = N extends number ? number[] : number;
declare type ufixed320x122<N = void> = N extends number ? number[] : number;
declare type ufixed320x123<N = void> = N extends number ? number[] : number;
declare type ufixed320x124<N = void> = N extends number ? number[] : number;
declare type ufixed320x125<N = void> = N extends number ? number[] : number;
declare type ufixed320x126<N = void> = N extends number ? number[] : number;
declare type ufixed320x127<N = void> = N extends number ? number[] : number;
declare type ufixed320x128<N = void> = N extends number ? number[] : number;
declare type ufixed320x129<N = void> = N extends number ? number[] : number;
declare type ufixed320x130<N = void> = N extends number ? number[] : number;
declare type ufixed320x131<N = void> = N extends number ? number[] : number;
declare type ufixed320x132<N = void> = N extends number ? number[] : number;
declare type ufixed320x133<N = void> = N extends number ? number[] : number;
declare type ufixed320x134<N = void> = N extends number ? number[] : number;
declare type ufixed320x135<N = void> = N extends number ? number[] : number;
declare type ufixed320x136<N = void> = N extends number ? number[] : number;
declare type ufixed320x137<N = void> = N extends number ? number[] : number;
declare type ufixed320x138<N = void> = N extends number ? number[] : number;
declare type ufixed320x139<N = void> = N extends number ? number[] : number;
declare type ufixed320x140<N = void> = N extends number ? number[] : number;
declare type ufixed320x141<N = void> = N extends number ? number[] : number;
declare type ufixed320x142<N = void> = N extends number ? number[] : number;
declare type ufixed320x143<N = void> = N extends number ? number[] : number;
declare type ufixed320x144<N = void> = N extends number ? number[] : number;
declare type ufixed320x145<N = void> = N extends number ? number[] : number;
declare type ufixed320x146<N = void> = N extends number ? number[] : number;
declare type ufixed320x147<N = void> = N extends number ? number[] : number;
declare type ufixed320x148<N = void> = N extends number ? number[] : number;
declare type ufixed320x149<N = void> = N extends number ? number[] : number;
declare type ufixed320x150<N = void> = N extends number ? number[] : number;
declare type ufixed320x151<N = void> = N extends number ? number[] : number;
declare type ufixed320x152<N = void> = N extends number ? number[] : number;
declare type ufixed320x153<N = void> = N extends number ? number[] : number;
declare type ufixed320x154<N = void> = N extends number ? number[] : number;
declare type ufixed320x155<N = void> = N extends number ? number[] : number;
declare type ufixed320x156<N = void> = N extends number ? number[] : number;
declare type ufixed320x157<N = void> = N extends number ? number[] : number;
declare type ufixed320x158<N = void> = N extends number ? number[] : number;
declare type ufixed320x159<N = void> = N extends number ? number[] : number;
declare type ufixed320x160<N = void> = N extends number ? number[] : number;
declare type ufixed328x1<N = void> = N extends number ? number[] : number;
declare type ufixed328x2<N = void> = N extends number ? number[] : number;
declare type ufixed328x3<N = void> = N extends number ? number[] : number;
declare type ufixed328x4<N = void> = N extends number ? number[] : number;
declare type ufixed328x5<N = void> = N extends number ? number[] : number;
declare type ufixed328x6<N = void> = N extends number ? number[] : number;
declare type ufixed328x7<N = void> = N extends number ? number[] : number;
declare type ufixed328x8<N = void> = N extends number ? number[] : number;
declare type ufixed328x9<N = void> = N extends number ? number[] : number;
declare type ufixed328x10<N = void> = N extends number ? number[] : number;
declare type ufixed328x11<N = void> = N extends number ? number[] : number;
declare type ufixed328x12<N = void> = N extends number ? number[] : number;
declare type ufixed328x13<N = void> = N extends number ? number[] : number;
declare type ufixed328x14<N = void> = N extends number ? number[] : number;
declare type ufixed328x15<N = void> = N extends number ? number[] : number;
declare type ufixed328x16<N = void> = N extends number ? number[] : number;
declare type ufixed328x17<N = void> = N extends number ? number[] : number;
declare type ufixed328x18<N = void> = N extends number ? number[] : number;
declare type ufixed328x19<N = void> = N extends number ? number[] : number;
declare type ufixed328x20<N = void> = N extends number ? number[] : number;
declare type ufixed328x21<N = void> = N extends number ? number[] : number;
declare type ufixed328x22<N = void> = N extends number ? number[] : number;
declare type ufixed328x23<N = void> = N extends number ? number[] : number;
declare type ufixed328x24<N = void> = N extends number ? number[] : number;
declare type ufixed328x25<N = void> = N extends number ? number[] : number;
declare type ufixed328x26<N = void> = N extends number ? number[] : number;
declare type ufixed328x27<N = void> = N extends number ? number[] : number;
declare type ufixed328x28<N = void> = N extends number ? number[] : number;
declare type ufixed328x29<N = void> = N extends number ? number[] : number;
declare type ufixed328x30<N = void> = N extends number ? number[] : number;
declare type ufixed328x31<N = void> = N extends number ? number[] : number;
declare type ufixed328x32<N = void> = N extends number ? number[] : number;
declare type ufixed328x33<N = void> = N extends number ? number[] : number;
declare type ufixed328x34<N = void> = N extends number ? number[] : number;
declare type ufixed328x35<N = void> = N extends number ? number[] : number;
declare type ufixed328x36<N = void> = N extends number ? number[] : number;
declare type ufixed328x37<N = void> = N extends number ? number[] : number;
declare type ufixed328x38<N = void> = N extends number ? number[] : number;
declare type ufixed328x39<N = void> = N extends number ? number[] : number;
declare type ufixed328x40<N = void> = N extends number ? number[] : number;
declare type ufixed328x41<N = void> = N extends number ? number[] : number;
declare type ufixed328x42<N = void> = N extends number ? number[] : number;
declare type ufixed328x43<N = void> = N extends number ? number[] : number;
declare type ufixed328x44<N = void> = N extends number ? number[] : number;
declare type ufixed328x45<N = void> = N extends number ? number[] : number;
declare type ufixed328x46<N = void> = N extends number ? number[] : number;
declare type ufixed328x47<N = void> = N extends number ? number[] : number;
declare type ufixed328x48<N = void> = N extends number ? number[] : number;
declare type ufixed328x49<N = void> = N extends number ? number[] : number;
declare type ufixed328x50<N = void> = N extends number ? number[] : number;
declare type ufixed328x51<N = void> = N extends number ? number[] : number;
declare type ufixed328x52<N = void> = N extends number ? number[] : number;
declare type ufixed328x53<N = void> = N extends number ? number[] : number;
declare type ufixed328x54<N = void> = N extends number ? number[] : number;
declare type ufixed328x55<N = void> = N extends number ? number[] : number;
declare type ufixed328x56<N = void> = N extends number ? number[] : number;
declare type ufixed328x57<N = void> = N extends number ? number[] : number;
declare type ufixed328x58<N = void> = N extends number ? number[] : number;
declare type ufixed328x59<N = void> = N extends number ? number[] : number;
declare type ufixed328x60<N = void> = N extends number ? number[] : number;
declare type ufixed328x61<N = void> = N extends number ? number[] : number;
declare type ufixed328x62<N = void> = N extends number ? number[] : number;
declare type ufixed328x63<N = void> = N extends number ? number[] : number;
declare type ufixed328x64<N = void> = N extends number ? number[] : number;
declare type ufixed328x65<N = void> = N extends number ? number[] : number;
declare type ufixed328x66<N = void> = N extends number ? number[] : number;
declare type ufixed328x67<N = void> = N extends number ? number[] : number;
declare type ufixed328x68<N = void> = N extends number ? number[] : number;
declare type ufixed328x69<N = void> = N extends number ? number[] : number;
declare type ufixed328x70<N = void> = N extends number ? number[] : number;
declare type ufixed328x71<N = void> = N extends number ? number[] : number;
declare type ufixed328x72<N = void> = N extends number ? number[] : number;
declare type ufixed328x73<N = void> = N extends number ? number[] : number;
declare type ufixed328x74<N = void> = N extends number ? number[] : number;
declare type ufixed328x75<N = void> = N extends number ? number[] : number;
declare type ufixed328x76<N = void> = N extends number ? number[] : number;
declare type ufixed328x77<N = void> = N extends number ? number[] : number;
declare type ufixed328x78<N = void> = N extends number ? number[] : number;
declare type ufixed328x79<N = void> = N extends number ? number[] : number;
declare type ufixed328x80<N = void> = N extends number ? number[] : number;
declare type ufixed328x81<N = void> = N extends number ? number[] : number;
declare type ufixed328x82<N = void> = N extends number ? number[] : number;
declare type ufixed328x83<N = void> = N extends number ? number[] : number;
declare type ufixed328x84<N = void> = N extends number ? number[] : number;
declare type ufixed328x85<N = void> = N extends number ? number[] : number;
declare type ufixed328x86<N = void> = N extends number ? number[] : number;
declare type ufixed328x87<N = void> = N extends number ? number[] : number;
declare type ufixed328x88<N = void> = N extends number ? number[] : number;
declare type ufixed328x89<N = void> = N extends number ? number[] : number;
declare type ufixed328x90<N = void> = N extends number ? number[] : number;
declare type ufixed328x91<N = void> = N extends number ? number[] : number;
declare type ufixed328x92<N = void> = N extends number ? number[] : number;
declare type ufixed328x93<N = void> = N extends number ? number[] : number;
declare type ufixed328x94<N = void> = N extends number ? number[] : number;
declare type ufixed328x95<N = void> = N extends number ? number[] : number;
declare type ufixed328x96<N = void> = N extends number ? number[] : number;
declare type ufixed328x97<N = void> = N extends number ? number[] : number;
declare type ufixed328x98<N = void> = N extends number ? number[] : number;
declare type ufixed328x99<N = void> = N extends number ? number[] : number;
declare type ufixed328x100<N = void> = N extends number ? number[] : number;
declare type ufixed328x101<N = void> = N extends number ? number[] : number;
declare type ufixed328x102<N = void> = N extends number ? number[] : number;
declare type ufixed328x103<N = void> = N extends number ? number[] : number;
declare type ufixed328x104<N = void> = N extends number ? number[] : number;
declare type ufixed328x105<N = void> = N extends number ? number[] : number;
declare type ufixed328x106<N = void> = N extends number ? number[] : number;
declare type ufixed328x107<N = void> = N extends number ? number[] : number;
declare type ufixed328x108<N = void> = N extends number ? number[] : number;
declare type ufixed328x109<N = void> = N extends number ? number[] : number;
declare type ufixed328x110<N = void> = N extends number ? number[] : number;
declare type ufixed328x111<N = void> = N extends number ? number[] : number;
declare type ufixed328x112<N = void> = N extends number ? number[] : number;
declare type ufixed328x113<N = void> = N extends number ? number[] : number;
declare type ufixed328x114<N = void> = N extends number ? number[] : number;
declare type ufixed328x115<N = void> = N extends number ? number[] : number;
declare type ufixed328x116<N = void> = N extends number ? number[] : number;
declare type ufixed328x117<N = void> = N extends number ? number[] : number;
declare type ufixed328x118<N = void> = N extends number ? number[] : number;
declare type ufixed328x119<N = void> = N extends number ? number[] : number;
declare type ufixed328x120<N = void> = N extends number ? number[] : number;
declare type ufixed328x121<N = void> = N extends number ? number[] : number;
declare type ufixed328x122<N = void> = N extends number ? number[] : number;
declare type ufixed328x123<N = void> = N extends number ? number[] : number;
declare type ufixed328x124<N = void> = N extends number ? number[] : number;
declare type ufixed328x125<N = void> = N extends number ? number[] : number;
declare type ufixed328x126<N = void> = N extends number ? number[] : number;
declare type ufixed328x127<N = void> = N extends number ? number[] : number;
declare type ufixed328x128<N = void> = N extends number ? number[] : number;
declare type ufixed328x129<N = void> = N extends number ? number[] : number;
declare type ufixed328x130<N = void> = N extends number ? number[] : number;
declare type ufixed328x131<N = void> = N extends number ? number[] : number;
declare type ufixed328x132<N = void> = N extends number ? number[] : number;
declare type ufixed328x133<N = void> = N extends number ? number[] : number;
declare type ufixed328x134<N = void> = N extends number ? number[] : number;
declare type ufixed328x135<N = void> = N extends number ? number[] : number;
declare type ufixed328x136<N = void> = N extends number ? number[] : number;
declare type ufixed328x137<N = void> = N extends number ? number[] : number;
declare type ufixed328x138<N = void> = N extends number ? number[] : number;
declare type ufixed328x139<N = void> = N extends number ? number[] : number;
declare type ufixed328x140<N = void> = N extends number ? number[] : number;
declare type ufixed328x141<N = void> = N extends number ? number[] : number;
declare type ufixed328x142<N = void> = N extends number ? number[] : number;
declare type ufixed328x143<N = void> = N extends number ? number[] : number;
declare type ufixed328x144<N = void> = N extends number ? number[] : number;
declare type ufixed328x145<N = void> = N extends number ? number[] : number;
declare type ufixed328x146<N = void> = N extends number ? number[] : number;
declare type ufixed328x147<N = void> = N extends number ? number[] : number;
declare type ufixed328x148<N = void> = N extends number ? number[] : number;
declare type ufixed328x149<N = void> = N extends number ? number[] : number;
declare type ufixed328x150<N = void> = N extends number ? number[] : number;
declare type ufixed328x151<N = void> = N extends number ? number[] : number;
declare type ufixed328x152<N = void> = N extends number ? number[] : number;
declare type ufixed328x153<N = void> = N extends number ? number[] : number;
declare type ufixed328x154<N = void> = N extends number ? number[] : number;
declare type ufixed328x155<N = void> = N extends number ? number[] : number;
declare type ufixed328x156<N = void> = N extends number ? number[] : number;
declare type ufixed328x157<N = void> = N extends number ? number[] : number;
declare type ufixed328x158<N = void> = N extends number ? number[] : number;
declare type ufixed328x159<N = void> = N extends number ? number[] : number;
declare type ufixed328x160<N = void> = N extends number ? number[] : number;
declare type ufixed336x1<N = void> = N extends number ? number[] : number;
declare type ufixed336x2<N = void> = N extends number ? number[] : number;
declare type ufixed336x3<N = void> = N extends number ? number[] : number;
declare type ufixed336x4<N = void> = N extends number ? number[] : number;
declare type ufixed336x5<N = void> = N extends number ? number[] : number;
declare type ufixed336x6<N = void> = N extends number ? number[] : number;
declare type ufixed336x7<N = void> = N extends number ? number[] : number;
declare type ufixed336x8<N = void> = N extends number ? number[] : number;
declare type ufixed336x9<N = void> = N extends number ? number[] : number;
declare type ufixed336x10<N = void> = N extends number ? number[] : number;
declare type ufixed336x11<N = void> = N extends number ? number[] : number;
declare type ufixed336x12<N = void> = N extends number ? number[] : number;
declare type ufixed336x13<N = void> = N extends number ? number[] : number;
declare type ufixed336x14<N = void> = N extends number ? number[] : number;
declare type ufixed336x15<N = void> = N extends number ? number[] : number;
declare type ufixed336x16<N = void> = N extends number ? number[] : number;
declare type ufixed336x17<N = void> = N extends number ? number[] : number;
declare type ufixed336x18<N = void> = N extends number ? number[] : number;
declare type ufixed336x19<N = void> = N extends number ? number[] : number;
declare type ufixed336x20<N = void> = N extends number ? number[] : number;
declare type ufixed336x21<N = void> = N extends number ? number[] : number;
declare type ufixed336x22<N = void> = N extends number ? number[] : number;
declare type ufixed336x23<N = void> = N extends number ? number[] : number;
declare type ufixed336x24<N = void> = N extends number ? number[] : number;
declare type ufixed336x25<N = void> = N extends number ? number[] : number;
declare type ufixed336x26<N = void> = N extends number ? number[] : number;
declare type ufixed336x27<N = void> = N extends number ? number[] : number;
declare type ufixed336x28<N = void> = N extends number ? number[] : number;
declare type ufixed336x29<N = void> = N extends number ? number[] : number;
declare type ufixed336x30<N = void> = N extends number ? number[] : number;
declare type ufixed336x31<N = void> = N extends number ? number[] : number;
declare type ufixed336x32<N = void> = N extends number ? number[] : number;
declare type ufixed336x33<N = void> = N extends number ? number[] : number;
declare type ufixed336x34<N = void> = N extends number ? number[] : number;
declare type ufixed336x35<N = void> = N extends number ? number[] : number;
declare type ufixed336x36<N = void> = N extends number ? number[] : number;
declare type ufixed336x37<N = void> = N extends number ? number[] : number;
declare type ufixed336x38<N = void> = N extends number ? number[] : number;
declare type ufixed336x39<N = void> = N extends number ? number[] : number;
declare type ufixed336x40<N = void> = N extends number ? number[] : number;
declare type ufixed336x41<N = void> = N extends number ? number[] : number;
declare type ufixed336x42<N = void> = N extends number ? number[] : number;
declare type ufixed336x43<N = void> = N extends number ? number[] : number;
declare type ufixed336x44<N = void> = N extends number ? number[] : number;
declare type ufixed336x45<N = void> = N extends number ? number[] : number;
declare type ufixed336x46<N = void> = N extends number ? number[] : number;
declare type ufixed336x47<N = void> = N extends number ? number[] : number;
declare type ufixed336x48<N = void> = N extends number ? number[] : number;
declare type ufixed336x49<N = void> = N extends number ? number[] : number;
declare type ufixed336x50<N = void> = N extends number ? number[] : number;
declare type ufixed336x51<N = void> = N extends number ? number[] : number;
declare type ufixed336x52<N = void> = N extends number ? number[] : number;
declare type ufixed336x53<N = void> = N extends number ? number[] : number;
declare type ufixed336x54<N = void> = N extends number ? number[] : number;
declare type ufixed336x55<N = void> = N extends number ? number[] : number;
declare type ufixed336x56<N = void> = N extends number ? number[] : number;
declare type ufixed336x57<N = void> = N extends number ? number[] : number;
declare type ufixed336x58<N = void> = N extends number ? number[] : number;
declare type ufixed336x59<N = void> = N extends number ? number[] : number;
declare type ufixed336x60<N = void> = N extends number ? number[] : number;
declare type ufixed336x61<N = void> = N extends number ? number[] : number;
declare type ufixed336x62<N = void> = N extends number ? number[] : number;
declare type ufixed336x63<N = void> = N extends number ? number[] : number;
declare type ufixed336x64<N = void> = N extends number ? number[] : number;
declare type ufixed336x65<N = void> = N extends number ? number[] : number;
declare type ufixed336x66<N = void> = N extends number ? number[] : number;
declare type ufixed336x67<N = void> = N extends number ? number[] : number;
declare type ufixed336x68<N = void> = N extends number ? number[] : number;
declare type ufixed336x69<N = void> = N extends number ? number[] : number;
declare type ufixed336x70<N = void> = N extends number ? number[] : number;
declare type ufixed336x71<N = void> = N extends number ? number[] : number;
declare type ufixed336x72<N = void> = N extends number ? number[] : number;
declare type ufixed336x73<N = void> = N extends number ? number[] : number;
declare type ufixed336x74<N = void> = N extends number ? number[] : number;
declare type ufixed336x75<N = void> = N extends number ? number[] : number;
declare type ufixed336x76<N = void> = N extends number ? number[] : number;
declare type ufixed336x77<N = void> = N extends number ? number[] : number;
declare type ufixed336x78<N = void> = N extends number ? number[] : number;
declare type ufixed336x79<N = void> = N extends number ? number[] : number;
declare type ufixed336x80<N = void> = N extends number ? number[] : number;
declare type ufixed336x81<N = void> = N extends number ? number[] : number;
declare type ufixed336x82<N = void> = N extends number ? number[] : number;
declare type ufixed336x83<N = void> = N extends number ? number[] : number;
declare type ufixed336x84<N = void> = N extends number ? number[] : number;
declare type ufixed336x85<N = void> = N extends number ? number[] : number;
declare type ufixed336x86<N = void> = N extends number ? number[] : number;
declare type ufixed336x87<N = void> = N extends number ? number[] : number;
declare type ufixed336x88<N = void> = N extends number ? number[] : number;
declare type ufixed336x89<N = void> = N extends number ? number[] : number;
declare type ufixed336x90<N = void> = N extends number ? number[] : number;
declare type ufixed336x91<N = void> = N extends number ? number[] : number;
declare type ufixed336x92<N = void> = N extends number ? number[] : number;
declare type ufixed336x93<N = void> = N extends number ? number[] : number;
declare type ufixed336x94<N = void> = N extends number ? number[] : number;
declare type ufixed336x95<N = void> = N extends number ? number[] : number;
declare type ufixed336x96<N = void> = N extends number ? number[] : number;
declare type ufixed336x97<N = void> = N extends number ? number[] : number;
declare type ufixed336x98<N = void> = N extends number ? number[] : number;
declare type ufixed336x99<N = void> = N extends number ? number[] : number;
declare type ufixed336x100<N = void> = N extends number ? number[] : number;
declare type ufixed336x101<N = void> = N extends number ? number[] : number;
declare type ufixed336x102<N = void> = N extends number ? number[] : number;
declare type ufixed336x103<N = void> = N extends number ? number[] : number;
declare type ufixed336x104<N = void> = N extends number ? number[] : number;
declare type ufixed336x105<N = void> = N extends number ? number[] : number;
declare type ufixed336x106<N = void> = N extends number ? number[] : number;
declare type ufixed336x107<N = void> = N extends number ? number[] : number;
declare type ufixed336x108<N = void> = N extends number ? number[] : number;
declare type ufixed336x109<N = void> = N extends number ? number[] : number;
declare type ufixed336x110<N = void> = N extends number ? number[] : number;
declare type ufixed336x111<N = void> = N extends number ? number[] : number;
declare type ufixed336x112<N = void> = N extends number ? number[] : number;
declare type ufixed336x113<N = void> = N extends number ? number[] : number;
declare type ufixed336x114<N = void> = N extends number ? number[] : number;
declare type ufixed336x115<N = void> = N extends number ? number[] : number;
declare type ufixed336x116<N = void> = N extends number ? number[] : number;
declare type ufixed336x117<N = void> = N extends number ? number[] : number;
declare type ufixed336x118<N = void> = N extends number ? number[] : number;
declare type ufixed336x119<N = void> = N extends number ? number[] : number;
declare type ufixed336x120<N = void> = N extends number ? number[] : number;
declare type ufixed336x121<N = void> = N extends number ? number[] : number;
declare type ufixed336x122<N = void> = N extends number ? number[] : number;
declare type ufixed336x123<N = void> = N extends number ? number[] : number;
declare type ufixed336x124<N = void> = N extends number ? number[] : number;
declare type ufixed336x125<N = void> = N extends number ? number[] : number;
declare type ufixed336x126<N = void> = N extends number ? number[] : number;
declare type ufixed336x127<N = void> = N extends number ? number[] : number;
declare type ufixed336x128<N = void> = N extends number ? number[] : number;
declare type ufixed336x129<N = void> = N extends number ? number[] : number;
declare type ufixed336x130<N = void> = N extends number ? number[] : number;
declare type ufixed336x131<N = void> = N extends number ? number[] : number;
declare type ufixed336x132<N = void> = N extends number ? number[] : number;
declare type ufixed336x133<N = void> = N extends number ? number[] : number;
declare type ufixed336x134<N = void> = N extends number ? number[] : number;
declare type ufixed336x135<N = void> = N extends number ? number[] : number;
declare type ufixed336x136<N = void> = N extends number ? number[] : number;
declare type ufixed336x137<N = void> = N extends number ? number[] : number;
declare type ufixed336x138<N = void> = N extends number ? number[] : number;
declare type ufixed336x139<N = void> = N extends number ? number[] : number;
declare type ufixed336x140<N = void> = N extends number ? number[] : number;
declare type ufixed336x141<N = void> = N extends number ? number[] : number;
declare type ufixed336x142<N = void> = N extends number ? number[] : number;
declare type ufixed336x143<N = void> = N extends number ? number[] : number;
declare type ufixed336x144<N = void> = N extends number ? number[] : number;
declare type ufixed336x145<N = void> = N extends number ? number[] : number;
declare type ufixed336x146<N = void> = N extends number ? number[] : number;
declare type ufixed336x147<N = void> = N extends number ? number[] : number;
declare type ufixed336x148<N = void> = N extends number ? number[] : number;
declare type ufixed336x149<N = void> = N extends number ? number[] : number;
declare type ufixed336x150<N = void> = N extends number ? number[] : number;
declare type ufixed336x151<N = void> = N extends number ? number[] : number;
declare type ufixed336x152<N = void> = N extends number ? number[] : number;
declare type ufixed336x153<N = void> = N extends number ? number[] : number;
declare type ufixed336x154<N = void> = N extends number ? number[] : number;
declare type ufixed336x155<N = void> = N extends number ? number[] : number;
declare type ufixed336x156<N = void> = N extends number ? number[] : number;
declare type ufixed336x157<N = void> = N extends number ? number[] : number;
declare type ufixed336x158<N = void> = N extends number ? number[] : number;
declare type ufixed336x159<N = void> = N extends number ? number[] : number;
declare type ufixed336x160<N = void> = N extends number ? number[] : number;
declare type ufixed344x1<N = void> = N extends number ? number[] : number;
declare type ufixed344x2<N = void> = N extends number ? number[] : number;
declare type ufixed344x3<N = void> = N extends number ? number[] : number;
declare type ufixed344x4<N = void> = N extends number ? number[] : number;
declare type ufixed344x5<N = void> = N extends number ? number[] : number;
declare type ufixed344x6<N = void> = N extends number ? number[] : number;
declare type ufixed344x7<N = void> = N extends number ? number[] : number;
declare type ufixed344x8<N = void> = N extends number ? number[] : number;
declare type ufixed344x9<N = void> = N extends number ? number[] : number;
declare type ufixed344x10<N = void> = N extends number ? number[] : number;
declare type ufixed344x11<N = void> = N extends number ? number[] : number;
declare type ufixed344x12<N = void> = N extends number ? number[] : number;
declare type ufixed344x13<N = void> = N extends number ? number[] : number;
declare type ufixed344x14<N = void> = N extends number ? number[] : number;
declare type ufixed344x15<N = void> = N extends number ? number[] : number;
declare type ufixed344x16<N = void> = N extends number ? number[] : number;
declare type ufixed344x17<N = void> = N extends number ? number[] : number;
declare type ufixed344x18<N = void> = N extends number ? number[] : number;
declare type ufixed344x19<N = void> = N extends number ? number[] : number;
declare type ufixed344x20<N = void> = N extends number ? number[] : number;
declare type ufixed344x21<N = void> = N extends number ? number[] : number;
declare type ufixed344x22<N = void> = N extends number ? number[] : number;
declare type ufixed344x23<N = void> = N extends number ? number[] : number;
declare type ufixed344x24<N = void> = N extends number ? number[] : number;
declare type ufixed344x25<N = void> = N extends number ? number[] : number;
declare type ufixed344x26<N = void> = N extends number ? number[] : number;
declare type ufixed344x27<N = void> = N extends number ? number[] : number;
declare type ufixed344x28<N = void> = N extends number ? number[] : number;
declare type ufixed344x29<N = void> = N extends number ? number[] : number;
declare type ufixed344x30<N = void> = N extends number ? number[] : number;
declare type ufixed344x31<N = void> = N extends number ? number[] : number;
declare type ufixed344x32<N = void> = N extends number ? number[] : number;
declare type ufixed344x33<N = void> = N extends number ? number[] : number;
declare type ufixed344x34<N = void> = N extends number ? number[] : number;
declare type ufixed344x35<N = void> = N extends number ? number[] : number;
declare type ufixed344x36<N = void> = N extends number ? number[] : number;
declare type ufixed344x37<N = void> = N extends number ? number[] : number;
declare type ufixed344x38<N = void> = N extends number ? number[] : number;
declare type ufixed344x39<N = void> = N extends number ? number[] : number;
declare type ufixed344x40<N = void> = N extends number ? number[] : number;
declare type ufixed344x41<N = void> = N extends number ? number[] : number;
declare type ufixed344x42<N = void> = N extends number ? number[] : number;
declare type ufixed344x43<N = void> = N extends number ? number[] : number;
declare type ufixed344x44<N = void> = N extends number ? number[] : number;
declare type ufixed344x45<N = void> = N extends number ? number[] : number;
declare type ufixed344x46<N = void> = N extends number ? number[] : number;
declare type ufixed344x47<N = void> = N extends number ? number[] : number;
declare type ufixed344x48<N = void> = N extends number ? number[] : number;
declare type ufixed344x49<N = void> = N extends number ? number[] : number;
declare type ufixed344x50<N = void> = N extends number ? number[] : number;
declare type ufixed344x51<N = void> = N extends number ? number[] : number;
declare type ufixed344x52<N = void> = N extends number ? number[] : number;
declare type ufixed344x53<N = void> = N extends number ? number[] : number;
declare type ufixed344x54<N = void> = N extends number ? number[] : number;
declare type ufixed344x55<N = void> = N extends number ? number[] : number;
declare type ufixed344x56<N = void> = N extends number ? number[] : number;
declare type ufixed344x57<N = void> = N extends number ? number[] : number;
declare type ufixed344x58<N = void> = N extends number ? number[] : number;
declare type ufixed344x59<N = void> = N extends number ? number[] : number;
declare type ufixed344x60<N = void> = N extends number ? number[] : number;
declare type ufixed344x61<N = void> = N extends number ? number[] : number;
declare type ufixed344x62<N = void> = N extends number ? number[] : number;
declare type ufixed344x63<N = void> = N extends number ? number[] : number;
declare type ufixed344x64<N = void> = N extends number ? number[] : number;
declare type ufixed344x65<N = void> = N extends number ? number[] : number;
declare type ufixed344x66<N = void> = N extends number ? number[] : number;
declare type ufixed344x67<N = void> = N extends number ? number[] : number;
declare type ufixed344x68<N = void> = N extends number ? number[] : number;
declare type ufixed344x69<N = void> = N extends number ? number[] : number;
declare type ufixed344x70<N = void> = N extends number ? number[] : number;
declare type ufixed344x71<N = void> = N extends number ? number[] : number;
declare type ufixed344x72<N = void> = N extends number ? number[] : number;
declare type ufixed344x73<N = void> = N extends number ? number[] : number;
declare type ufixed344x74<N = void> = N extends number ? number[] : number;
declare type ufixed344x75<N = void> = N extends number ? number[] : number;
declare type ufixed344x76<N = void> = N extends number ? number[] : number;
declare type ufixed344x77<N = void> = N extends number ? number[] : number;
declare type ufixed344x78<N = void> = N extends number ? number[] : number;
declare type ufixed344x79<N = void> = N extends number ? number[] : number;
declare type ufixed344x80<N = void> = N extends number ? number[] : number;
declare type ufixed344x81<N = void> = N extends number ? number[] : number;
declare type ufixed344x82<N = void> = N extends number ? number[] : number;
declare type ufixed344x83<N = void> = N extends number ? number[] : number;
declare type ufixed344x84<N = void> = N extends number ? number[] : number;
declare type ufixed344x85<N = void> = N extends number ? number[] : number;
declare type ufixed344x86<N = void> = N extends number ? number[] : number;
declare type ufixed344x87<N = void> = N extends number ? number[] : number;
declare type ufixed344x88<N = void> = N extends number ? number[] : number;
declare type ufixed344x89<N = void> = N extends number ? number[] : number;
declare type ufixed344x90<N = void> = N extends number ? number[] : number;
declare type ufixed344x91<N = void> = N extends number ? number[] : number;
declare type ufixed344x92<N = void> = N extends number ? number[] : number;
declare type ufixed344x93<N = void> = N extends number ? number[] : number;
declare type ufixed344x94<N = void> = N extends number ? number[] : number;
declare type ufixed344x95<N = void> = N extends number ? number[] : number;
declare type ufixed344x96<N = void> = N extends number ? number[] : number;
declare type ufixed344x97<N = void> = N extends number ? number[] : number;
declare type ufixed344x98<N = void> = N extends number ? number[] : number;
declare type ufixed344x99<N = void> = N extends number ? number[] : number;
declare type ufixed344x100<N = void> = N extends number ? number[] : number;
declare type ufixed344x101<N = void> = N extends number ? number[] : number;
declare type ufixed344x102<N = void> = N extends number ? number[] : number;
declare type ufixed344x103<N = void> = N extends number ? number[] : number;
declare type ufixed344x104<N = void> = N extends number ? number[] : number;
declare type ufixed344x105<N = void> = N extends number ? number[] : number;
declare type ufixed344x106<N = void> = N extends number ? number[] : number;
declare type ufixed344x107<N = void> = N extends number ? number[] : number;
declare type ufixed344x108<N = void> = N extends number ? number[] : number;
declare type ufixed344x109<N = void> = N extends number ? number[] : number;
declare type ufixed344x110<N = void> = N extends number ? number[] : number;
declare type ufixed344x111<N = void> = N extends number ? number[] : number;
declare type ufixed344x112<N = void> = N extends number ? number[] : number;
declare type ufixed344x113<N = void> = N extends number ? number[] : number;
declare type ufixed344x114<N = void> = N extends number ? number[] : number;
declare type ufixed344x115<N = void> = N extends number ? number[] : number;
declare type ufixed344x116<N = void> = N extends number ? number[] : number;
declare type ufixed344x117<N = void> = N extends number ? number[] : number;
declare type ufixed344x118<N = void> = N extends number ? number[] : number;
declare type ufixed344x119<N = void> = N extends number ? number[] : number;
declare type ufixed344x120<N = void> = N extends number ? number[] : number;
declare type ufixed344x121<N = void> = N extends number ? number[] : number;
declare type ufixed344x122<N = void> = N extends number ? number[] : number;
declare type ufixed344x123<N = void> = N extends number ? number[] : number;
declare type ufixed344x124<N = void> = N extends number ? number[] : number;
declare type ufixed344x125<N = void> = N extends number ? number[] : number;
declare type ufixed344x126<N = void> = N extends number ? number[] : number;
declare type ufixed344x127<N = void> = N extends number ? number[] : number;
declare type ufixed344x128<N = void> = N extends number ? number[] : number;
declare type ufixed344x129<N = void> = N extends number ? number[] : number;
declare type ufixed344x130<N = void> = N extends number ? number[] : number;
declare type ufixed344x131<N = void> = N extends number ? number[] : number;
declare type ufixed344x132<N = void> = N extends number ? number[] : number;
declare type ufixed344x133<N = void> = N extends number ? number[] : number;
declare type ufixed344x134<N = void> = N extends number ? number[] : number;
declare type ufixed344x135<N = void> = N extends number ? number[] : number;
declare type ufixed344x136<N = void> = N extends number ? number[] : number;
declare type ufixed344x137<N = void> = N extends number ? number[] : number;
declare type ufixed344x138<N = void> = N extends number ? number[] : number;
declare type ufixed344x139<N = void> = N extends number ? number[] : number;
declare type ufixed344x140<N = void> = N extends number ? number[] : number;
declare type ufixed344x141<N = void> = N extends number ? number[] : number;
declare type ufixed344x142<N = void> = N extends number ? number[] : number;
declare type ufixed344x143<N = void> = N extends number ? number[] : number;
declare type ufixed344x144<N = void> = N extends number ? number[] : number;
declare type ufixed344x145<N = void> = N extends number ? number[] : number;
declare type ufixed344x146<N = void> = N extends number ? number[] : number;
declare type ufixed344x147<N = void> = N extends number ? number[] : number;
declare type ufixed344x148<N = void> = N extends number ? number[] : number;
declare type ufixed344x149<N = void> = N extends number ? number[] : number;
declare type ufixed344x150<N = void> = N extends number ? number[] : number;
declare type ufixed344x151<N = void> = N extends number ? number[] : number;
declare type ufixed344x152<N = void> = N extends number ? number[] : number;
declare type ufixed344x153<N = void> = N extends number ? number[] : number;
declare type ufixed344x154<N = void> = N extends number ? number[] : number;
declare type ufixed344x155<N = void> = N extends number ? number[] : number;
declare type ufixed344x156<N = void> = N extends number ? number[] : number;
declare type ufixed344x157<N = void> = N extends number ? number[] : number;
declare type ufixed344x158<N = void> = N extends number ? number[] : number;
declare type ufixed344x159<N = void> = N extends number ? number[] : number;
declare type ufixed344x160<N = void> = N extends number ? number[] : number;
declare type ufixed352x1<N = void> = N extends number ? number[] : number;
declare type ufixed352x2<N = void> = N extends number ? number[] : number;
declare type ufixed352x3<N = void> = N extends number ? number[] : number;
declare type ufixed352x4<N = void> = N extends number ? number[] : number;
declare type ufixed352x5<N = void> = N extends number ? number[] : number;
declare type ufixed352x6<N = void> = N extends number ? number[] : number;
declare type ufixed352x7<N = void> = N extends number ? number[] : number;
declare type ufixed352x8<N = void> = N extends number ? number[] : number;
declare type ufixed352x9<N = void> = N extends number ? number[] : number;
declare type ufixed352x10<N = void> = N extends number ? number[] : number;
declare type ufixed352x11<N = void> = N extends number ? number[] : number;
declare type ufixed352x12<N = void> = N extends number ? number[] : number;
declare type ufixed352x13<N = void> = N extends number ? number[] : number;
declare type ufixed352x14<N = void> = N extends number ? number[] : number;
declare type ufixed352x15<N = void> = N extends number ? number[] : number;
declare type ufixed352x16<N = void> = N extends number ? number[] : number;
declare type ufixed352x17<N = void> = N extends number ? number[] : number;
declare type ufixed352x18<N = void> = N extends number ? number[] : number;
declare type ufixed352x19<N = void> = N extends number ? number[] : number;
declare type ufixed352x20<N = void> = N extends number ? number[] : number;
declare type ufixed352x21<N = void> = N extends number ? number[] : number;
declare type ufixed352x22<N = void> = N extends number ? number[] : number;
declare type ufixed352x23<N = void> = N extends number ? number[] : number;
declare type ufixed352x24<N = void> = N extends number ? number[] : number;
declare type ufixed352x25<N = void> = N extends number ? number[] : number;
declare type ufixed352x26<N = void> = N extends number ? number[] : number;
declare type ufixed352x27<N = void> = N extends number ? number[] : number;
declare type ufixed352x28<N = void> = N extends number ? number[] : number;
declare type ufixed352x29<N = void> = N extends number ? number[] : number;
declare type ufixed352x30<N = void> = N extends number ? number[] : number;
declare type ufixed352x31<N = void> = N extends number ? number[] : number;
declare type ufixed352x32<N = void> = N extends number ? number[] : number;
declare type ufixed352x33<N = void> = N extends number ? number[] : number;
declare type ufixed352x34<N = void> = N extends number ? number[] : number;
declare type ufixed352x35<N = void> = N extends number ? number[] : number;
declare type ufixed352x36<N = void> = N extends number ? number[] : number;
declare type ufixed352x37<N = void> = N extends number ? number[] : number;
declare type ufixed352x38<N = void> = N extends number ? number[] : number;
declare type ufixed352x39<N = void> = N extends number ? number[] : number;
declare type ufixed352x40<N = void> = N extends number ? number[] : number;
declare type ufixed352x41<N = void> = N extends number ? number[] : number;
declare type ufixed352x42<N = void> = N extends number ? number[] : number;
declare type ufixed352x43<N = void> = N extends number ? number[] : number;
declare type ufixed352x44<N = void> = N extends number ? number[] : number;
declare type ufixed352x45<N = void> = N extends number ? number[] : number;
declare type ufixed352x46<N = void> = N extends number ? number[] : number;
declare type ufixed352x47<N = void> = N extends number ? number[] : number;
declare type ufixed352x48<N = void> = N extends number ? number[] : number;
declare type ufixed352x49<N = void> = N extends number ? number[] : number;
declare type ufixed352x50<N = void> = N extends number ? number[] : number;
declare type ufixed352x51<N = void> = N extends number ? number[] : number;
declare type ufixed352x52<N = void> = N extends number ? number[] : number;
declare type ufixed352x53<N = void> = N extends number ? number[] : number;
declare type ufixed352x54<N = void> = N extends number ? number[] : number;
declare type ufixed352x55<N = void> = N extends number ? number[] : number;
declare type ufixed352x56<N = void> = N extends number ? number[] : number;
declare type ufixed352x57<N = void> = N extends number ? number[] : number;
declare type ufixed352x58<N = void> = N extends number ? number[] : number;
declare type ufixed352x59<N = void> = N extends number ? number[] : number;
declare type ufixed352x60<N = void> = N extends number ? number[] : number;
declare type ufixed352x61<N = void> = N extends number ? number[] : number;
declare type ufixed352x62<N = void> = N extends number ? number[] : number;
declare type ufixed352x63<N = void> = N extends number ? number[] : number;
declare type ufixed352x64<N = void> = N extends number ? number[] : number;
declare type ufixed352x65<N = void> = N extends number ? number[] : number;
declare type ufixed352x66<N = void> = N extends number ? number[] : number;
declare type ufixed352x67<N = void> = N extends number ? number[] : number;
declare type ufixed352x68<N = void> = N extends number ? number[] : number;
declare type ufixed352x69<N = void> = N extends number ? number[] : number;
declare type ufixed352x70<N = void> = N extends number ? number[] : number;
declare type ufixed352x71<N = void> = N extends number ? number[] : number;
declare type ufixed352x72<N = void> = N extends number ? number[] : number;
declare type ufixed352x73<N = void> = N extends number ? number[] : number;
declare type ufixed352x74<N = void> = N extends number ? number[] : number;
declare type ufixed352x75<N = void> = N extends number ? number[] : number;
declare type ufixed352x76<N = void> = N extends number ? number[] : number;
declare type ufixed352x77<N = void> = N extends number ? number[] : number;
declare type ufixed352x78<N = void> = N extends number ? number[] : number;
declare type ufixed352x79<N = void> = N extends number ? number[] : number;
declare type ufixed352x80<N = void> = N extends number ? number[] : number;
declare type ufixed352x81<N = void> = N extends number ? number[] : number;
declare type ufixed352x82<N = void> = N extends number ? number[] : number;
declare type ufixed352x83<N = void> = N extends number ? number[] : number;
declare type ufixed352x84<N = void> = N extends number ? number[] : number;
declare type ufixed352x85<N = void> = N extends number ? number[] : number;
declare type ufixed352x86<N = void> = N extends number ? number[] : number;
declare type ufixed352x87<N = void> = N extends number ? number[] : number;
declare type ufixed352x88<N = void> = N extends number ? number[] : number;
declare type ufixed352x89<N = void> = N extends number ? number[] : number;
declare type ufixed352x90<N = void> = N extends number ? number[] : number;
declare type ufixed352x91<N = void> = N extends number ? number[] : number;
declare type ufixed352x92<N = void> = N extends number ? number[] : number;
declare type ufixed352x93<N = void> = N extends number ? number[] : number;
declare type ufixed352x94<N = void> = N extends number ? number[] : number;
declare type ufixed352x95<N = void> = N extends number ? number[] : number;
declare type ufixed352x96<N = void> = N extends number ? number[] : number;
declare type ufixed352x97<N = void> = N extends number ? number[] : number;
declare type ufixed352x98<N = void> = N extends number ? number[] : number;
declare type ufixed352x99<N = void> = N extends number ? number[] : number;
declare type ufixed352x100<N = void> = N extends number ? number[] : number;
declare type ufixed352x101<N = void> = N extends number ? number[] : number;
declare type ufixed352x102<N = void> = N extends number ? number[] : number;
declare type ufixed352x103<N = void> = N extends number ? number[] : number;
declare type ufixed352x104<N = void> = N extends number ? number[] : number;
declare type ufixed352x105<N = void> = N extends number ? number[] : number;
declare type ufixed352x106<N = void> = N extends number ? number[] : number;
declare type ufixed352x107<N = void> = N extends number ? number[] : number;
declare type ufixed352x108<N = void> = N extends number ? number[] : number;
declare type ufixed352x109<N = void> = N extends number ? number[] : number;
declare type ufixed352x110<N = void> = N extends number ? number[] : number;
declare type ufixed352x111<N = void> = N extends number ? number[] : number;
declare type ufixed352x112<N = void> = N extends number ? number[] : number;
declare type ufixed352x113<N = void> = N extends number ? number[] : number;
declare type ufixed352x114<N = void> = N extends number ? number[] : number;
declare type ufixed352x115<N = void> = N extends number ? number[] : number;
declare type ufixed352x116<N = void> = N extends number ? number[] : number;
declare type ufixed352x117<N = void> = N extends number ? number[] : number;
declare type ufixed352x118<N = void> = N extends number ? number[] : number;
declare type ufixed352x119<N = void> = N extends number ? number[] : number;
declare type ufixed352x120<N = void> = N extends number ? number[] : number;
declare type ufixed352x121<N = void> = N extends number ? number[] : number;
declare type ufixed352x122<N = void> = N extends number ? number[] : number;
declare type ufixed352x123<N = void> = N extends number ? number[] : number;
declare type ufixed352x124<N = void> = N extends number ? number[] : number;
declare type ufixed352x125<N = void> = N extends number ? number[] : number;
declare type ufixed352x126<N = void> = N extends number ? number[] : number;
declare type ufixed352x127<N = void> = N extends number ? number[] : number;
declare type ufixed352x128<N = void> = N extends number ? number[] : number;
declare type ufixed352x129<N = void> = N extends number ? number[] : number;
declare type ufixed352x130<N = void> = N extends number ? number[] : number;
declare type ufixed352x131<N = void> = N extends number ? number[] : number;
declare type ufixed352x132<N = void> = N extends number ? number[] : number;
declare type ufixed352x133<N = void> = N extends number ? number[] : number;
declare type ufixed352x134<N = void> = N extends number ? number[] : number;
declare type ufixed352x135<N = void> = N extends number ? number[] : number;
declare type ufixed352x136<N = void> = N extends number ? number[] : number;
declare type ufixed352x137<N = void> = N extends number ? number[] : number;
declare type ufixed352x138<N = void> = N extends number ? number[] : number;
declare type ufixed352x139<N = void> = N extends number ? number[] : number;
declare type ufixed352x140<N = void> = N extends number ? number[] : number;
declare type ufixed352x141<N = void> = N extends number ? number[] : number;
declare type ufixed352x142<N = void> = N extends number ? number[] : number;
declare type ufixed352x143<N = void> = N extends number ? number[] : number;
declare type ufixed352x144<N = void> = N extends number ? number[] : number;
declare type ufixed352x145<N = void> = N extends number ? number[] : number;
declare type ufixed352x146<N = void> = N extends number ? number[] : number;
declare type ufixed352x147<N = void> = N extends number ? number[] : number;
declare type ufixed352x148<N = void> = N extends number ? number[] : number;
declare type ufixed352x149<N = void> = N extends number ? number[] : number;
declare type ufixed352x150<N = void> = N extends number ? number[] : number;
declare type ufixed352x151<N = void> = N extends number ? number[] : number;
declare type ufixed352x152<N = void> = N extends number ? number[] : number;
declare type ufixed352x153<N = void> = N extends number ? number[] : number;
declare type ufixed352x154<N = void> = N extends number ? number[] : number;
declare type ufixed352x155<N = void> = N extends number ? number[] : number;
declare type ufixed352x156<N = void> = N extends number ? number[] : number;
declare type ufixed352x157<N = void> = N extends number ? number[] : number;
declare type ufixed352x158<N = void> = N extends number ? number[] : number;
declare type ufixed352x159<N = void> = N extends number ? number[] : number;
declare type ufixed352x160<N = void> = N extends number ? number[] : number;
declare type ufixed360x1<N = void> = N extends number ? number[] : number;
declare type ufixed360x2<N = void> = N extends number ? number[] : number;
declare type ufixed360x3<N = void> = N extends number ? number[] : number;
declare type ufixed360x4<N = void> = N extends number ? number[] : number;
declare type ufixed360x5<N = void> = N extends number ? number[] : number;
declare type ufixed360x6<N = void> = N extends number ? number[] : number;
declare type ufixed360x7<N = void> = N extends number ? number[] : number;
declare type ufixed360x8<N = void> = N extends number ? number[] : number;
declare type ufixed360x9<N = void> = N extends number ? number[] : number;
declare type ufixed360x10<N = void> = N extends number ? number[] : number;
declare type ufixed360x11<N = void> = N extends number ? number[] : number;
declare type ufixed360x12<N = void> = N extends number ? number[] : number;
declare type ufixed360x13<N = void> = N extends number ? number[] : number;
declare type ufixed360x14<N = void> = N extends number ? number[] : number;
declare type ufixed360x15<N = void> = N extends number ? number[] : number;
declare type ufixed360x16<N = void> = N extends number ? number[] : number;
declare type ufixed360x17<N = void> = N extends number ? number[] : number;
declare type ufixed360x18<N = void> = N extends number ? number[] : number;
declare type ufixed360x19<N = void> = N extends number ? number[] : number;
declare type ufixed360x20<N = void> = N extends number ? number[] : number;
declare type ufixed360x21<N = void> = N extends number ? number[] : number;
declare type ufixed360x22<N = void> = N extends number ? number[] : number;
declare type ufixed360x23<N = void> = N extends number ? number[] : number;
declare type ufixed360x24<N = void> = N extends number ? number[] : number;
declare type ufixed360x25<N = void> = N extends number ? number[] : number;
declare type ufixed360x26<N = void> = N extends number ? number[] : number;
declare type ufixed360x27<N = void> = N extends number ? number[] : number;
declare type ufixed360x28<N = void> = N extends number ? number[] : number;
declare type ufixed360x29<N = void> = N extends number ? number[] : number;
declare type ufixed360x30<N = void> = N extends number ? number[] : number;
declare type ufixed360x31<N = void> = N extends number ? number[] : number;
declare type ufixed360x32<N = void> = N extends number ? number[] : number;
declare type ufixed360x33<N = void> = N extends number ? number[] : number;
declare type ufixed360x34<N = void> = N extends number ? number[] : number;
declare type ufixed360x35<N = void> = N extends number ? number[] : number;
declare type ufixed360x36<N = void> = N extends number ? number[] : number;
declare type ufixed360x37<N = void> = N extends number ? number[] : number;
declare type ufixed360x38<N = void> = N extends number ? number[] : number;
declare type ufixed360x39<N = void> = N extends number ? number[] : number;
declare type ufixed360x40<N = void> = N extends number ? number[] : number;
declare type ufixed360x41<N = void> = N extends number ? number[] : number;
declare type ufixed360x42<N = void> = N extends number ? number[] : number;
declare type ufixed360x43<N = void> = N extends number ? number[] : number;
declare type ufixed360x44<N = void> = N extends number ? number[] : number;
declare type ufixed360x45<N = void> = N extends number ? number[] : number;
declare type ufixed360x46<N = void> = N extends number ? number[] : number;
declare type ufixed360x47<N = void> = N extends number ? number[] : number;
declare type ufixed360x48<N = void> = N extends number ? number[] : number;
declare type ufixed360x49<N = void> = N extends number ? number[] : number;
declare type ufixed360x50<N = void> = N extends number ? number[] : number;
declare type ufixed360x51<N = void> = N extends number ? number[] : number;
declare type ufixed360x52<N = void> = N extends number ? number[] : number;
declare type ufixed360x53<N = void> = N extends number ? number[] : number;
declare type ufixed360x54<N = void> = N extends number ? number[] : number;
declare type ufixed360x55<N = void> = N extends number ? number[] : number;
declare type ufixed360x56<N = void> = N extends number ? number[] : number;
declare type ufixed360x57<N = void> = N extends number ? number[] : number;
declare type ufixed360x58<N = void> = N extends number ? number[] : number;
declare type ufixed360x59<N = void> = N extends number ? number[] : number;
declare type ufixed360x60<N = void> = N extends number ? number[] : number;
declare type ufixed360x61<N = void> = N extends number ? number[] : number;
declare type ufixed360x62<N = void> = N extends number ? number[] : number;
declare type ufixed360x63<N = void> = N extends number ? number[] : number;
declare type ufixed360x64<N = void> = N extends number ? number[] : number;
declare type ufixed360x65<N = void> = N extends number ? number[] : number;
declare type ufixed360x66<N = void> = N extends number ? number[] : number;
declare type ufixed360x67<N = void> = N extends number ? number[] : number;
declare type ufixed360x68<N = void> = N extends number ? number[] : number;
declare type ufixed360x69<N = void> = N extends number ? number[] : number;
declare type ufixed360x70<N = void> = N extends number ? number[] : number;
declare type ufixed360x71<N = void> = N extends number ? number[] : number;
declare type ufixed360x72<N = void> = N extends number ? number[] : number;
declare type ufixed360x73<N = void> = N extends number ? number[] : number;
declare type ufixed360x74<N = void> = N extends number ? number[] : number;
declare type ufixed360x75<N = void> = N extends number ? number[] : number;
declare type ufixed360x76<N = void> = N extends number ? number[] : number;
declare type ufixed360x77<N = void> = N extends number ? number[] : number;
declare type ufixed360x78<N = void> = N extends number ? number[] : number;
declare type ufixed360x79<N = void> = N extends number ? number[] : number;
declare type ufixed360x80<N = void> = N extends number ? number[] : number;
declare type ufixed360x81<N = void> = N extends number ? number[] : number;
declare type ufixed360x82<N = void> = N extends number ? number[] : number;
declare type ufixed360x83<N = void> = N extends number ? number[] : number;
declare type ufixed360x84<N = void> = N extends number ? number[] : number;
declare type ufixed360x85<N = void> = N extends number ? number[] : number;
declare type ufixed360x86<N = void> = N extends number ? number[] : number;
declare type ufixed360x87<N = void> = N extends number ? number[] : number;
declare type ufixed360x88<N = void> = N extends number ? number[] : number;
declare type ufixed360x89<N = void> = N extends number ? number[] : number;
declare type ufixed360x90<N = void> = N extends number ? number[] : number;
declare type ufixed360x91<N = void> = N extends number ? number[] : number;
declare type ufixed360x92<N = void> = N extends number ? number[] : number;
declare type ufixed360x93<N = void> = N extends number ? number[] : number;
declare type ufixed360x94<N = void> = N extends number ? number[] : number;
declare type ufixed360x95<N = void> = N extends number ? number[] : number;
declare type ufixed360x96<N = void> = N extends number ? number[] : number;
declare type ufixed360x97<N = void> = N extends number ? number[] : number;
declare type ufixed360x98<N = void> = N extends number ? number[] : number;
declare type ufixed360x99<N = void> = N extends number ? number[] : number;
declare type ufixed360x100<N = void> = N extends number ? number[] : number;
declare type ufixed360x101<N = void> = N extends number ? number[] : number;
declare type ufixed360x102<N = void> = N extends number ? number[] : number;
declare type ufixed360x103<N = void> = N extends number ? number[] : number;
declare type ufixed360x104<N = void> = N extends number ? number[] : number;
declare type ufixed360x105<N = void> = N extends number ? number[] : number;
declare type ufixed360x106<N = void> = N extends number ? number[] : number;
declare type ufixed360x107<N = void> = N extends number ? number[] : number;
declare type ufixed360x108<N = void> = N extends number ? number[] : number;
declare type ufixed360x109<N = void> = N extends number ? number[] : number;
declare type ufixed360x110<N = void> = N extends number ? number[] : number;
declare type ufixed360x111<N = void> = N extends number ? number[] : number;
declare type ufixed360x112<N = void> = N extends number ? number[] : number;
declare type ufixed360x113<N = void> = N extends number ? number[] : number;
declare type ufixed360x114<N = void> = N extends number ? number[] : number;
declare type ufixed360x115<N = void> = N extends number ? number[] : number;
declare type ufixed360x116<N = void> = N extends number ? number[] : number;
declare type ufixed360x117<N = void> = N extends number ? number[] : number;
declare type ufixed360x118<N = void> = N extends number ? number[] : number;
declare type ufixed360x119<N = void> = N extends number ? number[] : number;
declare type ufixed360x120<N = void> = N extends number ? number[] : number;
declare type ufixed360x121<N = void> = N extends number ? number[] : number;
declare type ufixed360x122<N = void> = N extends number ? number[] : number;
declare type ufixed360x123<N = void> = N extends number ? number[] : number;
declare type ufixed360x124<N = void> = N extends number ? number[] : number;
declare type ufixed360x125<N = void> = N extends number ? number[] : number;
declare type ufixed360x126<N = void> = N extends number ? number[] : number;
declare type ufixed360x127<N = void> = N extends number ? number[] : number;
declare type ufixed360x128<N = void> = N extends number ? number[] : number;
declare type ufixed360x129<N = void> = N extends number ? number[] : number;
declare type ufixed360x130<N = void> = N extends number ? number[] : number;
declare type ufixed360x131<N = void> = N extends number ? number[] : number;
declare type ufixed360x132<N = void> = N extends number ? number[] : number;
declare type ufixed360x133<N = void> = N extends number ? number[] : number;
declare type ufixed360x134<N = void> = N extends number ? number[] : number;
declare type ufixed360x135<N = void> = N extends number ? number[] : number;
declare type ufixed360x136<N = void> = N extends number ? number[] : number;
declare type ufixed360x137<N = void> = N extends number ? number[] : number;
declare type ufixed360x138<N = void> = N extends number ? number[] : number;
declare type ufixed360x139<N = void> = N extends number ? number[] : number;
declare type ufixed360x140<N = void> = N extends number ? number[] : number;
declare type ufixed360x141<N = void> = N extends number ? number[] : number;
declare type ufixed360x142<N = void> = N extends number ? number[] : number;
declare type ufixed360x143<N = void> = N extends number ? number[] : number;
declare type ufixed360x144<N = void> = N extends number ? number[] : number;
declare type ufixed360x145<N = void> = N extends number ? number[] : number;
declare type ufixed360x146<N = void> = N extends number ? number[] : number;
declare type ufixed360x147<N = void> = N extends number ? number[] : number;
declare type ufixed360x148<N = void> = N extends number ? number[] : number;
declare type ufixed360x149<N = void> = N extends number ? number[] : number;
declare type ufixed360x150<N = void> = N extends number ? number[] : number;
declare type ufixed360x151<N = void> = N extends number ? number[] : number;
declare type ufixed360x152<N = void> = N extends number ? number[] : number;
declare type ufixed360x153<N = void> = N extends number ? number[] : number;
declare type ufixed360x154<N = void> = N extends number ? number[] : number;
declare type ufixed360x155<N = void> = N extends number ? number[] : number;
declare type ufixed360x156<N = void> = N extends number ? number[] : number;
declare type ufixed360x157<N = void> = N extends number ? number[] : number;
declare type ufixed360x158<N = void> = N extends number ? number[] : number;
declare type ufixed360x159<N = void> = N extends number ? number[] : number;
declare type ufixed360x160<N = void> = N extends number ? number[] : number;
declare type ufixed368x1<N = void> = N extends number ? number[] : number;
declare type ufixed368x2<N = void> = N extends number ? number[] : number;
declare type ufixed368x3<N = void> = N extends number ? number[] : number;
declare type ufixed368x4<N = void> = N extends number ? number[] : number;
declare type ufixed368x5<N = void> = N extends number ? number[] : number;
declare type ufixed368x6<N = void> = N extends number ? number[] : number;
declare type ufixed368x7<N = void> = N extends number ? number[] : number;
declare type ufixed368x8<N = void> = N extends number ? number[] : number;
declare type ufixed368x9<N = void> = N extends number ? number[] : number;
declare type ufixed368x10<N = void> = N extends number ? number[] : number;
declare type ufixed368x11<N = void> = N extends number ? number[] : number;
declare type ufixed368x12<N = void> = N extends number ? number[] : number;
declare type ufixed368x13<N = void> = N extends number ? number[] : number;
declare type ufixed368x14<N = void> = N extends number ? number[] : number;
declare type ufixed368x15<N = void> = N extends number ? number[] : number;
declare type ufixed368x16<N = void> = N extends number ? number[] : number;
declare type ufixed368x17<N = void> = N extends number ? number[] : number;
declare type ufixed368x18<N = void> = N extends number ? number[] : number;
declare type ufixed368x19<N = void> = N extends number ? number[] : number;
declare type ufixed368x20<N = void> = N extends number ? number[] : number;
declare type ufixed368x21<N = void> = N extends number ? number[] : number;
declare type ufixed368x22<N = void> = N extends number ? number[] : number;
declare type ufixed368x23<N = void> = N extends number ? number[] : number;
declare type ufixed368x24<N = void> = N extends number ? number[] : number;
declare type ufixed368x25<N = void> = N extends number ? number[] : number;
declare type ufixed368x26<N = void> = N extends number ? number[] : number;
declare type ufixed368x27<N = void> = N extends number ? number[] : number;
declare type ufixed368x28<N = void> = N extends number ? number[] : number;
declare type ufixed368x29<N = void> = N extends number ? number[] : number;
declare type ufixed368x30<N = void> = N extends number ? number[] : number;
declare type ufixed368x31<N = void> = N extends number ? number[] : number;
declare type ufixed368x32<N = void> = N extends number ? number[] : number;
declare type ufixed368x33<N = void> = N extends number ? number[] : number;
declare type ufixed368x34<N = void> = N extends number ? number[] : number;
declare type ufixed368x35<N = void> = N extends number ? number[] : number;
declare type ufixed368x36<N = void> = N extends number ? number[] : number;
declare type ufixed368x37<N = void> = N extends number ? number[] : number;
declare type ufixed368x38<N = void> = N extends number ? number[] : number;
declare type ufixed368x39<N = void> = N extends number ? number[] : number;
declare type ufixed368x40<N = void> = N extends number ? number[] : number;
declare type ufixed368x41<N = void> = N extends number ? number[] : number;
declare type ufixed368x42<N = void> = N extends number ? number[] : number;
declare type ufixed368x43<N = void> = N extends number ? number[] : number;
declare type ufixed368x44<N = void> = N extends number ? number[] : number;
declare type ufixed368x45<N = void> = N extends number ? number[] : number;
declare type ufixed368x46<N = void> = N extends number ? number[] : number;
declare type ufixed368x47<N = void> = N extends number ? number[] : number;
declare type ufixed368x48<N = void> = N extends number ? number[] : number;
declare type ufixed368x49<N = void> = N extends number ? number[] : number;
declare type ufixed368x50<N = void> = N extends number ? number[] : number;
declare type ufixed368x51<N = void> = N extends number ? number[] : number;
declare type ufixed368x52<N = void> = N extends number ? number[] : number;
declare type ufixed368x53<N = void> = N extends number ? number[] : number;
declare type ufixed368x54<N = void> = N extends number ? number[] : number;
declare type ufixed368x55<N = void> = N extends number ? number[] : number;
declare type ufixed368x56<N = void> = N extends number ? number[] : number;
declare type ufixed368x57<N = void> = N extends number ? number[] : number;
declare type ufixed368x58<N = void> = N extends number ? number[] : number;
declare type ufixed368x59<N = void> = N extends number ? number[] : number;
declare type ufixed368x60<N = void> = N extends number ? number[] : number;
declare type ufixed368x61<N = void> = N extends number ? number[] : number;
declare type ufixed368x62<N = void> = N extends number ? number[] : number;
declare type ufixed368x63<N = void> = N extends number ? number[] : number;
declare type ufixed368x64<N = void> = N extends number ? number[] : number;
declare type ufixed368x65<N = void> = N extends number ? number[] : number;
declare type ufixed368x66<N = void> = N extends number ? number[] : number;
declare type ufixed368x67<N = void> = N extends number ? number[] : number;
declare type ufixed368x68<N = void> = N extends number ? number[] : number;
declare type ufixed368x69<N = void> = N extends number ? number[] : number;
declare type ufixed368x70<N = void> = N extends number ? number[] : number;
declare type ufixed368x71<N = void> = N extends number ? number[] : number;
declare type ufixed368x72<N = void> = N extends number ? number[] : number;
declare type ufixed368x73<N = void> = N extends number ? number[] : number;
declare type ufixed368x74<N = void> = N extends number ? number[] : number;
declare type ufixed368x75<N = void> = N extends number ? number[] : number;
declare type ufixed368x76<N = void> = N extends number ? number[] : number;
declare type ufixed368x77<N = void> = N extends number ? number[] : number;
declare type ufixed368x78<N = void> = N extends number ? number[] : number;
declare type ufixed368x79<N = void> = N extends number ? number[] : number;
declare type ufixed368x80<N = void> = N extends number ? number[] : number;
declare type ufixed368x81<N = void> = N extends number ? number[] : number;
declare type ufixed368x82<N = void> = N extends number ? number[] : number;
declare type ufixed368x83<N = void> = N extends number ? number[] : number;
declare type ufixed368x84<N = void> = N extends number ? number[] : number;
declare type ufixed368x85<N = void> = N extends number ? number[] : number;
declare type ufixed368x86<N = void> = N extends number ? number[] : number;
declare type ufixed368x87<N = void> = N extends number ? number[] : number;
declare type ufixed368x88<N = void> = N extends number ? number[] : number;
declare type ufixed368x89<N = void> = N extends number ? number[] : number;
declare type ufixed368x90<N = void> = N extends number ? number[] : number;
declare type ufixed368x91<N = void> = N extends number ? number[] : number;
declare type ufixed368x92<N = void> = N extends number ? number[] : number;
declare type ufixed368x93<N = void> = N extends number ? number[] : number;
declare type ufixed368x94<N = void> = N extends number ? number[] : number;
declare type ufixed368x95<N = void> = N extends number ? number[] : number;
declare type ufixed368x96<N = void> = N extends number ? number[] : number;
declare type ufixed368x97<N = void> = N extends number ? number[] : number;
declare type ufixed368x98<N = void> = N extends number ? number[] : number;
declare type ufixed368x99<N = void> = N extends number ? number[] : number;
declare type ufixed368x100<N = void> = N extends number ? number[] : number;
declare type ufixed368x101<N = void> = N extends number ? number[] : number;
declare type ufixed368x102<N = void> = N extends number ? number[] : number;
declare type ufixed368x103<N = void> = N extends number ? number[] : number;
declare type ufixed368x104<N = void> = N extends number ? number[] : number;
declare type ufixed368x105<N = void> = N extends number ? number[] : number;
declare type ufixed368x106<N = void> = N extends number ? number[] : number;
declare type ufixed368x107<N = void> = N extends number ? number[] : number;
declare type ufixed368x108<N = void> = N extends number ? number[] : number;
declare type ufixed368x109<N = void> = N extends number ? number[] : number;
declare type ufixed368x110<N = void> = N extends number ? number[] : number;
declare type ufixed368x111<N = void> = N extends number ? number[] : number;
declare type ufixed368x112<N = void> = N extends number ? number[] : number;
declare type ufixed368x113<N = void> = N extends number ? number[] : number;
declare type ufixed368x114<N = void> = N extends number ? number[] : number;
declare type ufixed368x115<N = void> = N extends number ? number[] : number;
declare type ufixed368x116<N = void> = N extends number ? number[] : number;
declare type ufixed368x117<N = void> = N extends number ? number[] : number;
declare type ufixed368x118<N = void> = N extends number ? number[] : number;
declare type ufixed368x119<N = void> = N extends number ? number[] : number;
declare type ufixed368x120<N = void> = N extends number ? number[] : number;
declare type ufixed368x121<N = void> = N extends number ? number[] : number;
declare type ufixed368x122<N = void> = N extends number ? number[] : number;
declare type ufixed368x123<N = void> = N extends number ? number[] : number;
declare type ufixed368x124<N = void> = N extends number ? number[] : number;
declare type ufixed368x125<N = void> = N extends number ? number[] : number;
declare type ufixed368x126<N = void> = N extends number ? number[] : number;
declare type ufixed368x127<N = void> = N extends number ? number[] : number;
declare type ufixed368x128<N = void> = N extends number ? number[] : number;
declare type ufixed368x129<N = void> = N extends number ? number[] : number;
declare type ufixed368x130<N = void> = N extends number ? number[] : number;
declare type ufixed368x131<N = void> = N extends number ? number[] : number;
declare type ufixed368x132<N = void> = N extends number ? number[] : number;
declare type ufixed368x133<N = void> = N extends number ? number[] : number;
declare type ufixed368x134<N = void> = N extends number ? number[] : number;
declare type ufixed368x135<N = void> = N extends number ? number[] : number;
declare type ufixed368x136<N = void> = N extends number ? number[] : number;
declare type ufixed368x137<N = void> = N extends number ? number[] : number;
declare type ufixed368x138<N = void> = N extends number ? number[] : number;
declare type ufixed368x139<N = void> = N extends number ? number[] : number;
declare type ufixed368x140<N = void> = N extends number ? number[] : number;
declare type ufixed368x141<N = void> = N extends number ? number[] : number;
declare type ufixed368x142<N = void> = N extends number ? number[] : number;
declare type ufixed368x143<N = void> = N extends number ? number[] : number;
declare type ufixed368x144<N = void> = N extends number ? number[] : number;
declare type ufixed368x145<N = void> = N extends number ? number[] : number;
declare type ufixed368x146<N = void> = N extends number ? number[] : number;
declare type ufixed368x147<N = void> = N extends number ? number[] : number;
declare type ufixed368x148<N = void> = N extends number ? number[] : number;
declare type ufixed368x149<N = void> = N extends number ? number[] : number;
declare type ufixed368x150<N = void> = N extends number ? number[] : number;
declare type ufixed368x151<N = void> = N extends number ? number[] : number;
declare type ufixed368x152<N = void> = N extends number ? number[] : number;
declare type ufixed368x153<N = void> = N extends number ? number[] : number;
declare type ufixed368x154<N = void> = N extends number ? number[] : number;
declare type ufixed368x155<N = void> = N extends number ? number[] : number;
declare type ufixed368x156<N = void> = N extends number ? number[] : number;
declare type ufixed368x157<N = void> = N extends number ? number[] : number;
declare type ufixed368x158<N = void> = N extends number ? number[] : number;
declare type ufixed368x159<N = void> = N extends number ? number[] : number;
declare type ufixed368x160<N = void> = N extends number ? number[] : number;
declare type ufixed376x1<N = void> = N extends number ? number[] : number;
declare type ufixed376x2<N = void> = N extends number ? number[] : number;
declare type ufixed376x3<N = void> = N extends number ? number[] : number;
declare type ufixed376x4<N = void> = N extends number ? number[] : number;
declare type ufixed376x5<N = void> = N extends number ? number[] : number;
declare type ufixed376x6<N = void> = N extends number ? number[] : number;
declare type ufixed376x7<N = void> = N extends number ? number[] : number;
declare type ufixed376x8<N = void> = N extends number ? number[] : number;
declare type ufixed376x9<N = void> = N extends number ? number[] : number;
declare type ufixed376x10<N = void> = N extends number ? number[] : number;
declare type ufixed376x11<N = void> = N extends number ? number[] : number;
declare type ufixed376x12<N = void> = N extends number ? number[] : number;
declare type ufixed376x13<N = void> = N extends number ? number[] : number;
declare type ufixed376x14<N = void> = N extends number ? number[] : number;
declare type ufixed376x15<N = void> = N extends number ? number[] : number;
declare type ufixed376x16<N = void> = N extends number ? number[] : number;
declare type ufixed376x17<N = void> = N extends number ? number[] : number;
declare type ufixed376x18<N = void> = N extends number ? number[] : number;
declare type ufixed376x19<N = void> = N extends number ? number[] : number;
declare type ufixed376x20<N = void> = N extends number ? number[] : number;
declare type ufixed376x21<N = void> = N extends number ? number[] : number;
declare type ufixed376x22<N = void> = N extends number ? number[] : number;
declare type ufixed376x23<N = void> = N extends number ? number[] : number;
declare type ufixed376x24<N = void> = N extends number ? number[] : number;
declare type ufixed376x25<N = void> = N extends number ? number[] : number;
declare type ufixed376x26<N = void> = N extends number ? number[] : number;
declare type ufixed376x27<N = void> = N extends number ? number[] : number;
declare type ufixed376x28<N = void> = N extends number ? number[] : number;
declare type ufixed376x29<N = void> = N extends number ? number[] : number;
declare type ufixed376x30<N = void> = N extends number ? number[] : number;
declare type ufixed376x31<N = void> = N extends number ? number[] : number;
declare type ufixed376x32<N = void> = N extends number ? number[] : number;
declare type ufixed376x33<N = void> = N extends number ? number[] : number;
declare type ufixed376x34<N = void> = N extends number ? number[] : number;
declare type ufixed376x35<N = void> = N extends number ? number[] : number;
declare type ufixed376x36<N = void> = N extends number ? number[] : number;
declare type ufixed376x37<N = void> = N extends number ? number[] : number;
declare type ufixed376x38<N = void> = N extends number ? number[] : number;
declare type ufixed376x39<N = void> = N extends number ? number[] : number;
declare type ufixed376x40<N = void> = N extends number ? number[] : number;
declare type ufixed376x41<N = void> = N extends number ? number[] : number;
declare type ufixed376x42<N = void> = N extends number ? number[] : number;
declare type ufixed376x43<N = void> = N extends number ? number[] : number;
declare type ufixed376x44<N = void> = N extends number ? number[] : number;
declare type ufixed376x45<N = void> = N extends number ? number[] : number;
declare type ufixed376x46<N = void> = N extends number ? number[] : number;
declare type ufixed376x47<N = void> = N extends number ? number[] : number;
declare type ufixed376x48<N = void> = N extends number ? number[] : number;
declare type ufixed376x49<N = void> = N extends number ? number[] : number;
declare type ufixed376x50<N = void> = N extends number ? number[] : number;
declare type ufixed376x51<N = void> = N extends number ? number[] : number;
declare type ufixed376x52<N = void> = N extends number ? number[] : number;
declare type ufixed376x53<N = void> = N extends number ? number[] : number;
declare type ufixed376x54<N = void> = N extends number ? number[] : number;
declare type ufixed376x55<N = void> = N extends number ? number[] : number;
declare type ufixed376x56<N = void> = N extends number ? number[] : number;
declare type ufixed376x57<N = void> = N extends number ? number[] : number;
declare type ufixed376x58<N = void> = N extends number ? number[] : number;
declare type ufixed376x59<N = void> = N extends number ? number[] : number;
declare type ufixed376x60<N = void> = N extends number ? number[] : number;
declare type ufixed376x61<N = void> = N extends number ? number[] : number;
declare type ufixed376x62<N = void> = N extends number ? number[] : number;
declare type ufixed376x63<N = void> = N extends number ? number[] : number;
declare type ufixed376x64<N = void> = N extends number ? number[] : number;
declare type ufixed376x65<N = void> = N extends number ? number[] : number;
declare type ufixed376x66<N = void> = N extends number ? number[] : number;
declare type ufixed376x67<N = void> = N extends number ? number[] : number;
declare type ufixed376x68<N = void> = N extends number ? number[] : number;
declare type ufixed376x69<N = void> = N extends number ? number[] : number;
declare type ufixed376x70<N = void> = N extends number ? number[] : number;
declare type ufixed376x71<N = void> = N extends number ? number[] : number;
declare type ufixed376x72<N = void> = N extends number ? number[] : number;
declare type ufixed376x73<N = void> = N extends number ? number[] : number;
declare type ufixed376x74<N = void> = N extends number ? number[] : number;
declare type ufixed376x75<N = void> = N extends number ? number[] : number;
declare type ufixed376x76<N = void> = N extends number ? number[] : number;
declare type ufixed376x77<N = void> = N extends number ? number[] : number;
declare type ufixed376x78<N = void> = N extends number ? number[] : number;
declare type ufixed376x79<N = void> = N extends number ? number[] : number;
declare type ufixed376x80<N = void> = N extends number ? number[] : number;
declare type ufixed376x81<N = void> = N extends number ? number[] : number;
declare type ufixed376x82<N = void> = N extends number ? number[] : number;
declare type ufixed376x83<N = void> = N extends number ? number[] : number;
declare type ufixed376x84<N = void> = N extends number ? number[] : number;
declare type ufixed376x85<N = void> = N extends number ? number[] : number;
declare type ufixed376x86<N = void> = N extends number ? number[] : number;
declare type ufixed376x87<N = void> = N extends number ? number[] : number;
declare type ufixed376x88<N = void> = N extends number ? number[] : number;
declare type ufixed376x89<N = void> = N extends number ? number[] : number;
declare type ufixed376x90<N = void> = N extends number ? number[] : number;
declare type ufixed376x91<N = void> = N extends number ? number[] : number;
declare type ufixed376x92<N = void> = N extends number ? number[] : number;
declare type ufixed376x93<N = void> = N extends number ? number[] : number;
declare type ufixed376x94<N = void> = N extends number ? number[] : number;
declare type ufixed376x95<N = void> = N extends number ? number[] : number;
declare type ufixed376x96<N = void> = N extends number ? number[] : number;
declare type ufixed376x97<N = void> = N extends number ? number[] : number;
declare type ufixed376x98<N = void> = N extends number ? number[] : number;
declare type ufixed376x99<N = void> = N extends number ? number[] : number;
declare type ufixed376x100<N = void> = N extends number ? number[] : number;
declare type ufixed376x101<N = void> = N extends number ? number[] : number;
declare type ufixed376x102<N = void> = N extends number ? number[] : number;
declare type ufixed376x103<N = void> = N extends number ? number[] : number;
declare type ufixed376x104<N = void> = N extends number ? number[] : number;
declare type ufixed376x105<N = void> = N extends number ? number[] : number;
declare type ufixed376x106<N = void> = N extends number ? number[] : number;
declare type ufixed376x107<N = void> = N extends number ? number[] : number;
declare type ufixed376x108<N = void> = N extends number ? number[] : number;
declare type ufixed376x109<N = void> = N extends number ? number[] : number;
declare type ufixed376x110<N = void> = N extends number ? number[] : number;
declare type ufixed376x111<N = void> = N extends number ? number[] : number;
declare type ufixed376x112<N = void> = N extends number ? number[] : number;
declare type ufixed376x113<N = void> = N extends number ? number[] : number;
declare type ufixed376x114<N = void> = N extends number ? number[] : number;
declare type ufixed376x115<N = void> = N extends number ? number[] : number;
declare type ufixed376x116<N = void> = N extends number ? number[] : number;
declare type ufixed376x117<N = void> = N extends number ? number[] : number;
declare type ufixed376x118<N = void> = N extends number ? number[] : number;
declare type ufixed376x119<N = void> = N extends number ? number[] : number;
declare type ufixed376x120<N = void> = N extends number ? number[] : number;
declare type ufixed376x121<N = void> = N extends number ? number[] : number;
declare type ufixed376x122<N = void> = N extends number ? number[] : number;
declare type ufixed376x123<N = void> = N extends number ? number[] : number;
declare type ufixed376x124<N = void> = N extends number ? number[] : number;
declare type ufixed376x125<N = void> = N extends number ? number[] : number;
declare type ufixed376x126<N = void> = N extends number ? number[] : number;
declare type ufixed376x127<N = void> = N extends number ? number[] : number;
declare type ufixed376x128<N = void> = N extends number ? number[] : number;
declare type ufixed376x129<N = void> = N extends number ? number[] : number;
declare type ufixed376x130<N = void> = N extends number ? number[] : number;
declare type ufixed376x131<N = void> = N extends number ? number[] : number;
declare type ufixed376x132<N = void> = N extends number ? number[] : number;
declare type ufixed376x133<N = void> = N extends number ? number[] : number;
declare type ufixed376x134<N = void> = N extends number ? number[] : number;
declare type ufixed376x135<N = void> = N extends number ? number[] : number;
declare type ufixed376x136<N = void> = N extends number ? number[] : number;
declare type ufixed376x137<N = void> = N extends number ? number[] : number;
declare type ufixed376x138<N = void> = N extends number ? number[] : number;
declare type ufixed376x139<N = void> = N extends number ? number[] : number;
declare type ufixed376x140<N = void> = N extends number ? number[] : number;
declare type ufixed376x141<N = void> = N extends number ? number[] : number;
declare type ufixed376x142<N = void> = N extends number ? number[] : number;
declare type ufixed376x143<N = void> = N extends number ? number[] : number;
declare type ufixed376x144<N = void> = N extends number ? number[] : number;
declare type ufixed376x145<N = void> = N extends number ? number[] : number;
declare type ufixed376x146<N = void> = N extends number ? number[] : number;
declare type ufixed376x147<N = void> = N extends number ? number[] : number;
declare type ufixed376x148<N = void> = N extends number ? number[] : number;
declare type ufixed376x149<N = void> = N extends number ? number[] : number;
declare type ufixed376x150<N = void> = N extends number ? number[] : number;
declare type ufixed376x151<N = void> = N extends number ? number[] : number;
declare type ufixed376x152<N = void> = N extends number ? number[] : number;
declare type ufixed376x153<N = void> = N extends number ? number[] : number;
declare type ufixed376x154<N = void> = N extends number ? number[] : number;
declare type ufixed376x155<N = void> = N extends number ? number[] : number;
declare type ufixed376x156<N = void> = N extends number ? number[] : number;
declare type ufixed376x157<N = void> = N extends number ? number[] : number;
declare type ufixed376x158<N = void> = N extends number ? number[] : number;
declare type ufixed376x159<N = void> = N extends number ? number[] : number;
declare type ufixed376x160<N = void> = N extends number ? number[] : number;
declare type ufixed384x1<N = void> = N extends number ? number[] : number;
declare type ufixed384x2<N = void> = N extends number ? number[] : number;
declare type ufixed384x3<N = void> = N extends number ? number[] : number;
declare type ufixed384x4<N = void> = N extends number ? number[] : number;
declare type ufixed384x5<N = void> = N extends number ? number[] : number;
declare type ufixed384x6<N = void> = N extends number ? number[] : number;
declare type ufixed384x7<N = void> = N extends number ? number[] : number;
declare type ufixed384x8<N = void> = N extends number ? number[] : number;
declare type ufixed384x9<N = void> = N extends number ? number[] : number;
declare type ufixed384x10<N = void> = N extends number ? number[] : number;
declare type ufixed384x11<N = void> = N extends number ? number[] : number;
declare type ufixed384x12<N = void> = N extends number ? number[] : number;
declare type ufixed384x13<N = void> = N extends number ? number[] : number;
declare type ufixed384x14<N = void> = N extends number ? number[] : number;
declare type ufixed384x15<N = void> = N extends number ? number[] : number;
declare type ufixed384x16<N = void> = N extends number ? number[] : number;
declare type ufixed384x17<N = void> = N extends number ? number[] : number;
declare type ufixed384x18<N = void> = N extends number ? number[] : number;
declare type ufixed384x19<N = void> = N extends number ? number[] : number;
declare type ufixed384x20<N = void> = N extends number ? number[] : number;
declare type ufixed384x21<N = void> = N extends number ? number[] : number;
declare type ufixed384x22<N = void> = N extends number ? number[] : number;
declare type ufixed384x23<N = void> = N extends number ? number[] : number;
declare type ufixed384x24<N = void> = N extends number ? number[] : number;
declare type ufixed384x25<N = void> = N extends number ? number[] : number;
declare type ufixed384x26<N = void> = N extends number ? number[] : number;
declare type ufixed384x27<N = void> = N extends number ? number[] : number;
declare type ufixed384x28<N = void> = N extends number ? number[] : number;
declare type ufixed384x29<N = void> = N extends number ? number[] : number;
declare type ufixed384x30<N = void> = N extends number ? number[] : number;
declare type ufixed384x31<N = void> = N extends number ? number[] : number;
declare type ufixed384x32<N = void> = N extends number ? number[] : number;
declare type ufixed384x33<N = void> = N extends number ? number[] : number;
declare type ufixed384x34<N = void> = N extends number ? number[] : number;
declare type ufixed384x35<N = void> = N extends number ? number[] : number;
declare type ufixed384x36<N = void> = N extends number ? number[] : number;
declare type ufixed384x37<N = void> = N extends number ? number[] : number;
declare type ufixed384x38<N = void> = N extends number ? number[] : number;
declare type ufixed384x39<N = void> = N extends number ? number[] : number;
declare type ufixed384x40<N = void> = N extends number ? number[] : number;
declare type ufixed384x41<N = void> = N extends number ? number[] : number;
declare type ufixed384x42<N = void> = N extends number ? number[] : number;
declare type ufixed384x43<N = void> = N extends number ? number[] : number;
declare type ufixed384x44<N = void> = N extends number ? number[] : number;
declare type ufixed384x45<N = void> = N extends number ? number[] : number;
declare type ufixed384x46<N = void> = N extends number ? number[] : number;
declare type ufixed384x47<N = void> = N extends number ? number[] : number;
declare type ufixed384x48<N = void> = N extends number ? number[] : number;
declare type ufixed384x49<N = void> = N extends number ? number[] : number;
declare type ufixed384x50<N = void> = N extends number ? number[] : number;
declare type ufixed384x51<N = void> = N extends number ? number[] : number;
declare type ufixed384x52<N = void> = N extends number ? number[] : number;
declare type ufixed384x53<N = void> = N extends number ? number[] : number;
declare type ufixed384x54<N = void> = N extends number ? number[] : number;
declare type ufixed384x55<N = void> = N extends number ? number[] : number;
declare type ufixed384x56<N = void> = N extends number ? number[] : number;
declare type ufixed384x57<N = void> = N extends number ? number[] : number;
declare type ufixed384x58<N = void> = N extends number ? number[] : number;
declare type ufixed384x59<N = void> = N extends number ? number[] : number;
declare type ufixed384x60<N = void> = N extends number ? number[] : number;
declare type ufixed384x61<N = void> = N extends number ? number[] : number;
declare type ufixed384x62<N = void> = N extends number ? number[] : number;
declare type ufixed384x63<N = void> = N extends number ? number[] : number;
declare type ufixed384x64<N = void> = N extends number ? number[] : number;
declare type ufixed384x65<N = void> = N extends number ? number[] : number;
declare type ufixed384x66<N = void> = N extends number ? number[] : number;
declare type ufixed384x67<N = void> = N extends number ? number[] : number;
declare type ufixed384x68<N = void> = N extends number ? number[] : number;
declare type ufixed384x69<N = void> = N extends number ? number[] : number;
declare type ufixed384x70<N = void> = N extends number ? number[] : number;
declare type ufixed384x71<N = void> = N extends number ? number[] : number;
declare type ufixed384x72<N = void> = N extends number ? number[] : number;
declare type ufixed384x73<N = void> = N extends number ? number[] : number;
declare type ufixed384x74<N = void> = N extends number ? number[] : number;
declare type ufixed384x75<N = void> = N extends number ? number[] : number;
declare type ufixed384x76<N = void> = N extends number ? number[] : number;
declare type ufixed384x77<N = void> = N extends number ? number[] : number;
declare type ufixed384x78<N = void> = N extends number ? number[] : number;
declare type ufixed384x79<N = void> = N extends number ? number[] : number;
declare type ufixed384x80<N = void> = N extends number ? number[] : number;
declare type ufixed384x81<N = void> = N extends number ? number[] : number;
declare type ufixed384x82<N = void> = N extends number ? number[] : number;
declare type ufixed384x83<N = void> = N extends number ? number[] : number;
declare type ufixed384x84<N = void> = N extends number ? number[] : number;
declare type ufixed384x85<N = void> = N extends number ? number[] : number;
declare type ufixed384x86<N = void> = N extends number ? number[] : number;
declare type ufixed384x87<N = void> = N extends number ? number[] : number;
declare type ufixed384x88<N = void> = N extends number ? number[] : number;
declare type ufixed384x89<N = void> = N extends number ? number[] : number;
declare type ufixed384x90<N = void> = N extends number ? number[] : number;
declare type ufixed384x91<N = void> = N extends number ? number[] : number;
declare type ufixed384x92<N = void> = N extends number ? number[] : number;
declare type ufixed384x93<N = void> = N extends number ? number[] : number;
declare type ufixed384x94<N = void> = N extends number ? number[] : number;
declare type ufixed384x95<N = void> = N extends number ? number[] : number;
declare type ufixed384x96<N = void> = N extends number ? number[] : number;
declare type ufixed384x97<N = void> = N extends number ? number[] : number;
declare type ufixed384x98<N = void> = N extends number ? number[] : number;
declare type ufixed384x99<N = void> = N extends number ? number[] : number;
declare type ufixed384x100<N = void> = N extends number ? number[] : number;
declare type ufixed384x101<N = void> = N extends number ? number[] : number;
declare type ufixed384x102<N = void> = N extends number ? number[] : number;
declare type ufixed384x103<N = void> = N extends number ? number[] : number;
declare type ufixed384x104<N = void> = N extends number ? number[] : number;
declare type ufixed384x105<N = void> = N extends number ? number[] : number;
declare type ufixed384x106<N = void> = N extends number ? number[] : number;
declare type ufixed384x107<N = void> = N extends number ? number[] : number;
declare type ufixed384x108<N = void> = N extends number ? number[] : number;
declare type ufixed384x109<N = void> = N extends number ? number[] : number;
declare type ufixed384x110<N = void> = N extends number ? number[] : number;
declare type ufixed384x111<N = void> = N extends number ? number[] : number;
declare type ufixed384x112<N = void> = N extends number ? number[] : number;
declare type ufixed384x113<N = void> = N extends number ? number[] : number;
declare type ufixed384x114<N = void> = N extends number ? number[] : number;
declare type ufixed384x115<N = void> = N extends number ? number[] : number;
declare type ufixed384x116<N = void> = N extends number ? number[] : number;
declare type ufixed384x117<N = void> = N extends number ? number[] : number;
declare type ufixed384x118<N = void> = N extends number ? number[] : number;
declare type ufixed384x119<N = void> = N extends number ? number[] : number;
declare type ufixed384x120<N = void> = N extends number ? number[] : number;
declare type ufixed384x121<N = void> = N extends number ? number[] : number;
declare type ufixed384x122<N = void> = N extends number ? number[] : number;
declare type ufixed384x123<N = void> = N extends number ? number[] : number;
declare type ufixed384x124<N = void> = N extends number ? number[] : number;
declare type ufixed384x125<N = void> = N extends number ? number[] : number;
declare type ufixed384x126<N = void> = N extends number ? number[] : number;
declare type ufixed384x127<N = void> = N extends number ? number[] : number;
declare type ufixed384x128<N = void> = N extends number ? number[] : number;
declare type ufixed384x129<N = void> = N extends number ? number[] : number;
declare type ufixed384x130<N = void> = N extends number ? number[] : number;
declare type ufixed384x131<N = void> = N extends number ? number[] : number;
declare type ufixed384x132<N = void> = N extends number ? number[] : number;
declare type ufixed384x133<N = void> = N extends number ? number[] : number;
declare type ufixed384x134<N = void> = N extends number ? number[] : number;
declare type ufixed384x135<N = void> = N extends number ? number[] : number;
declare type ufixed384x136<N = void> = N extends number ? number[] : number;
declare type ufixed384x137<N = void> = N extends number ? number[] : number;
declare type ufixed384x138<N = void> = N extends number ? number[] : number;
declare type ufixed384x139<N = void> = N extends number ? number[] : number;
declare type ufixed384x140<N = void> = N extends number ? number[] : number;
declare type ufixed384x141<N = void> = N extends number ? number[] : number;
declare type ufixed384x142<N = void> = N extends number ? number[] : number;
declare type ufixed384x143<N = void> = N extends number ? number[] : number;
declare type ufixed384x144<N = void> = N extends number ? number[] : number;
declare type ufixed384x145<N = void> = N extends number ? number[] : number;
declare type ufixed384x146<N = void> = N extends number ? number[] : number;
declare type ufixed384x147<N = void> = N extends number ? number[] : number;
declare type ufixed384x148<N = void> = N extends number ? number[] : number;
declare type ufixed384x149<N = void> = N extends number ? number[] : number;
declare type ufixed384x150<N = void> = N extends number ? number[] : number;
declare type ufixed384x151<N = void> = N extends number ? number[] : number;
declare type ufixed384x152<N = void> = N extends number ? number[] : number;
declare type ufixed384x153<N = void> = N extends number ? number[] : number;
declare type ufixed384x154<N = void> = N extends number ? number[] : number;
declare type ufixed384x155<N = void> = N extends number ? number[] : number;
declare type ufixed384x156<N = void> = N extends number ? number[] : number;
declare type ufixed384x157<N = void> = N extends number ? number[] : number;
declare type ufixed384x158<N = void> = N extends number ? number[] : number;
declare type ufixed384x159<N = void> = N extends number ? number[] : number;
declare type ufixed384x160<N = void> = N extends number ? number[] : number;
declare type ufixed392x1<N = void> = N extends number ? number[] : number;
declare type ufixed392x2<N = void> = N extends number ? number[] : number;
declare type ufixed392x3<N = void> = N extends number ? number[] : number;
declare type ufixed392x4<N = void> = N extends number ? number[] : number;
declare type ufixed392x5<N = void> = N extends number ? number[] : number;
declare type ufixed392x6<N = void> = N extends number ? number[] : number;
declare type ufixed392x7<N = void> = N extends number ? number[] : number;
declare type ufixed392x8<N = void> = N extends number ? number[] : number;
declare type ufixed392x9<N = void> = N extends number ? number[] : number;
declare type ufixed392x10<N = void> = N extends number ? number[] : number;
declare type ufixed392x11<N = void> = N extends number ? number[] : number;
declare type ufixed392x12<N = void> = N extends number ? number[] : number;
declare type ufixed392x13<N = void> = N extends number ? number[] : number;
declare type ufixed392x14<N = void> = N extends number ? number[] : number;
declare type ufixed392x15<N = void> = N extends number ? number[] : number;
declare type ufixed392x16<N = void> = N extends number ? number[] : number;
declare type ufixed392x17<N = void> = N extends number ? number[] : number;
declare type ufixed392x18<N = void> = N extends number ? number[] : number;
declare type ufixed392x19<N = void> = N extends number ? number[] : number;
declare type ufixed392x20<N = void> = N extends number ? number[] : number;
declare type ufixed392x21<N = void> = N extends number ? number[] : number;
declare type ufixed392x22<N = void> = N extends number ? number[] : number;
declare type ufixed392x23<N = void> = N extends number ? number[] : number;
declare type ufixed392x24<N = void> = N extends number ? number[] : number;
declare type ufixed392x25<N = void> = N extends number ? number[] : number;
declare type ufixed392x26<N = void> = N extends number ? number[] : number;
declare type ufixed392x27<N = void> = N extends number ? number[] : number;
declare type ufixed392x28<N = void> = N extends number ? number[] : number;
declare type ufixed392x29<N = void> = N extends number ? number[] : number;
declare type ufixed392x30<N = void> = N extends number ? number[] : number;
declare type ufixed392x31<N = void> = N extends number ? number[] : number;
declare type ufixed392x32<N = void> = N extends number ? number[] : number;
declare type ufixed392x33<N = void> = N extends number ? number[] : number;
declare type ufixed392x34<N = void> = N extends number ? number[] : number;
declare type ufixed392x35<N = void> = N extends number ? number[] : number;
declare type ufixed392x36<N = void> = N extends number ? number[] : number;
declare type ufixed392x37<N = void> = N extends number ? number[] : number;
declare type ufixed392x38<N = void> = N extends number ? number[] : number;
declare type ufixed392x39<N = void> = N extends number ? number[] : number;
declare type ufixed392x40<N = void> = N extends number ? number[] : number;
declare type ufixed392x41<N = void> = N extends number ? number[] : number;
declare type ufixed392x42<N = void> = N extends number ? number[] : number;
declare type ufixed392x43<N = void> = N extends number ? number[] : number;
declare type ufixed392x44<N = void> = N extends number ? number[] : number;
declare type ufixed392x45<N = void> = N extends number ? number[] : number;
declare type ufixed392x46<N = void> = N extends number ? number[] : number;
declare type ufixed392x47<N = void> = N extends number ? number[] : number;
declare type ufixed392x48<N = void> = N extends number ? number[] : number;
declare type ufixed392x49<N = void> = N extends number ? number[] : number;
declare type ufixed392x50<N = void> = N extends number ? number[] : number;
declare type ufixed392x51<N = void> = N extends number ? number[] : number;
declare type ufixed392x52<N = void> = N extends number ? number[] : number;
declare type ufixed392x53<N = void> = N extends number ? number[] : number;
declare type ufixed392x54<N = void> = N extends number ? number[] : number;
declare type ufixed392x55<N = void> = N extends number ? number[] : number;
declare type ufixed392x56<N = void> = N extends number ? number[] : number;
declare type ufixed392x57<N = void> = N extends number ? number[] : number;
declare type ufixed392x58<N = void> = N extends number ? number[] : number;
declare type ufixed392x59<N = void> = N extends number ? number[] : number;
declare type ufixed392x60<N = void> = N extends number ? number[] : number;
declare type ufixed392x61<N = void> = N extends number ? number[] : number;
declare type ufixed392x62<N = void> = N extends number ? number[] : number;
declare type ufixed392x63<N = void> = N extends number ? number[] : number;
declare type ufixed392x64<N = void> = N extends number ? number[] : number;
declare type ufixed392x65<N = void> = N extends number ? number[] : number;
declare type ufixed392x66<N = void> = N extends number ? number[] : number;
declare type ufixed392x67<N = void> = N extends number ? number[] : number;
declare type ufixed392x68<N = void> = N extends number ? number[] : number;
declare type ufixed392x69<N = void> = N extends number ? number[] : number;
declare type ufixed392x70<N = void> = N extends number ? number[] : number;
declare type ufixed392x71<N = void> = N extends number ? number[] : number;
declare type ufixed392x72<N = void> = N extends number ? number[] : number;
declare type ufixed392x73<N = void> = N extends number ? number[] : number;
declare type ufixed392x74<N = void> = N extends number ? number[] : number;
declare type ufixed392x75<N = void> = N extends number ? number[] : number;
declare type ufixed392x76<N = void> = N extends number ? number[] : number;
declare type ufixed392x77<N = void> = N extends number ? number[] : number;
declare type ufixed392x78<N = void> = N extends number ? number[] : number;
declare type ufixed392x79<N = void> = N extends number ? number[] : number;
declare type ufixed392x80<N = void> = N extends number ? number[] : number;
declare type ufixed392x81<N = void> = N extends number ? number[] : number;
declare type ufixed392x82<N = void> = N extends number ? number[] : number;
declare type ufixed392x83<N = void> = N extends number ? number[] : number;
declare type ufixed392x84<N = void> = N extends number ? number[] : number;
declare type ufixed392x85<N = void> = N extends number ? number[] : number;
declare type ufixed392x86<N = void> = N extends number ? number[] : number;
declare type ufixed392x87<N = void> = N extends number ? number[] : number;
declare type ufixed392x88<N = void> = N extends number ? number[] : number;
declare type ufixed392x89<N = void> = N extends number ? number[] : number;
declare type ufixed392x90<N = void> = N extends number ? number[] : number;
declare type ufixed392x91<N = void> = N extends number ? number[] : number;
declare type ufixed392x92<N = void> = N extends number ? number[] : number;
declare type ufixed392x93<N = void> = N extends number ? number[] : number;
declare type ufixed392x94<N = void> = N extends number ? number[] : number;
declare type ufixed392x95<N = void> = N extends number ? number[] : number;
declare type ufixed392x96<N = void> = N extends number ? number[] : number;
declare type ufixed392x97<N = void> = N extends number ? number[] : number;
declare type ufixed392x98<N = void> = N extends number ? number[] : number;
declare type ufixed392x99<N = void> = N extends number ? number[] : number;
declare type ufixed392x100<N = void> = N extends number ? number[] : number;
declare type ufixed392x101<N = void> = N extends number ? number[] : number;
declare type ufixed392x102<N = void> = N extends number ? number[] : number;
declare type ufixed392x103<N = void> = N extends number ? number[] : number;
declare type ufixed392x104<N = void> = N extends number ? number[] : number;
declare type ufixed392x105<N = void> = N extends number ? number[] : number;
declare type ufixed392x106<N = void> = N extends number ? number[] : number;
declare type ufixed392x107<N = void> = N extends number ? number[] : number;
declare type ufixed392x108<N = void> = N extends number ? number[] : number;
declare type ufixed392x109<N = void> = N extends number ? number[] : number;
declare type ufixed392x110<N = void> = N extends number ? number[] : number;
declare type ufixed392x111<N = void> = N extends number ? number[] : number;
declare type ufixed392x112<N = void> = N extends number ? number[] : number;
declare type ufixed392x113<N = void> = N extends number ? number[] : number;
declare type ufixed392x114<N = void> = N extends number ? number[] : number;
declare type ufixed392x115<N = void> = N extends number ? number[] : number;
declare type ufixed392x116<N = void> = N extends number ? number[] : number;
declare type ufixed392x117<N = void> = N extends number ? number[] : number;
declare type ufixed392x118<N = void> = N extends number ? number[] : number;
declare type ufixed392x119<N = void> = N extends number ? number[] : number;
declare type ufixed392x120<N = void> = N extends number ? number[] : number;
declare type ufixed392x121<N = void> = N extends number ? number[] : number;
declare type ufixed392x122<N = void> = N extends number ? number[] : number;
declare type ufixed392x123<N = void> = N extends number ? number[] : number;
declare type ufixed392x124<N = void> = N extends number ? number[] : number;
declare type ufixed392x125<N = void> = N extends number ? number[] : number;
declare type ufixed392x126<N = void> = N extends number ? number[] : number;
declare type ufixed392x127<N = void> = N extends number ? number[] : number;
declare type ufixed392x128<N = void> = N extends number ? number[] : number;
declare type ufixed392x129<N = void> = N extends number ? number[] : number;
declare type ufixed392x130<N = void> = N extends number ? number[] : number;
declare type ufixed392x131<N = void> = N extends number ? number[] : number;
declare type ufixed392x132<N = void> = N extends number ? number[] : number;
declare type ufixed392x133<N = void> = N extends number ? number[] : number;
declare type ufixed392x134<N = void> = N extends number ? number[] : number;
declare type ufixed392x135<N = void> = N extends number ? number[] : number;
declare type ufixed392x136<N = void> = N extends number ? number[] : number;
declare type ufixed392x137<N = void> = N extends number ? number[] : number;
declare type ufixed392x138<N = void> = N extends number ? number[] : number;
declare type ufixed392x139<N = void> = N extends number ? number[] : number;
declare type ufixed392x140<N = void> = N extends number ? number[] : number;
declare type ufixed392x141<N = void> = N extends number ? number[] : number;
declare type ufixed392x142<N = void> = N extends number ? number[] : number;
declare type ufixed392x143<N = void> = N extends number ? number[] : number;
declare type ufixed392x144<N = void> = N extends number ? number[] : number;
declare type ufixed392x145<N = void> = N extends number ? number[] : number;
declare type ufixed392x146<N = void> = N extends number ? number[] : number;
declare type ufixed392x147<N = void> = N extends number ? number[] : number;
declare type ufixed392x148<N = void> = N extends number ? number[] : number;
declare type ufixed392x149<N = void> = N extends number ? number[] : number;
declare type ufixed392x150<N = void> = N extends number ? number[] : number;
declare type ufixed392x151<N = void> = N extends number ? number[] : number;
declare type ufixed392x152<N = void> = N extends number ? number[] : number;
declare type ufixed392x153<N = void> = N extends number ? number[] : number;
declare type ufixed392x154<N = void> = N extends number ? number[] : number;
declare type ufixed392x155<N = void> = N extends number ? number[] : number;
declare type ufixed392x156<N = void> = N extends number ? number[] : number;
declare type ufixed392x157<N = void> = N extends number ? number[] : number;
declare type ufixed392x158<N = void> = N extends number ? number[] : number;
declare type ufixed392x159<N = void> = N extends number ? number[] : number;
declare type ufixed392x160<N = void> = N extends number ? number[] : number;
declare type ufixed400x1<N = void> = N extends number ? number[] : number;
declare type ufixed400x2<N = void> = N extends number ? number[] : number;
declare type ufixed400x3<N = void> = N extends number ? number[] : number;
declare type ufixed400x4<N = void> = N extends number ? number[] : number;
declare type ufixed400x5<N = void> = N extends number ? number[] : number;
declare type ufixed400x6<N = void> = N extends number ? number[] : number;
declare type ufixed400x7<N = void> = N extends number ? number[] : number;
declare type ufixed400x8<N = void> = N extends number ? number[] : number;
declare type ufixed400x9<N = void> = N extends number ? number[] : number;
declare type ufixed400x10<N = void> = N extends number ? number[] : number;
declare type ufixed400x11<N = void> = N extends number ? number[] : number;
declare type ufixed400x12<N = void> = N extends number ? number[] : number;
declare type ufixed400x13<N = void> = N extends number ? number[] : number;
declare type ufixed400x14<N = void> = N extends number ? number[] : number;
declare type ufixed400x15<N = void> = N extends number ? number[] : number;
declare type ufixed400x16<N = void> = N extends number ? number[] : number;
declare type ufixed400x17<N = void> = N extends number ? number[] : number;
declare type ufixed400x18<N = void> = N extends number ? number[] : number;
declare type ufixed400x19<N = void> = N extends number ? number[] : number;
declare type ufixed400x20<N = void> = N extends number ? number[] : number;
declare type ufixed400x21<N = void> = N extends number ? number[] : number;
declare type ufixed400x22<N = void> = N extends number ? number[] : number;
declare type ufixed400x23<N = void> = N extends number ? number[] : number;
declare type ufixed400x24<N = void> = N extends number ? number[] : number;
declare type ufixed400x25<N = void> = N extends number ? number[] : number;
declare type ufixed400x26<N = void> = N extends number ? number[] : number;
declare type ufixed400x27<N = void> = N extends number ? number[] : number;
declare type ufixed400x28<N = void> = N extends number ? number[] : number;
declare type ufixed400x29<N = void> = N extends number ? number[] : number;
declare type ufixed400x30<N = void> = N extends number ? number[] : number;
declare type ufixed400x31<N = void> = N extends number ? number[] : number;
declare type ufixed400x32<N = void> = N extends number ? number[] : number;
declare type ufixed400x33<N = void> = N extends number ? number[] : number;
declare type ufixed400x34<N = void> = N extends number ? number[] : number;
declare type ufixed400x35<N = void> = N extends number ? number[] : number;
declare type ufixed400x36<N = void> = N extends number ? number[] : number;
declare type ufixed400x37<N = void> = N extends number ? number[] : number;
declare type ufixed400x38<N = void> = N extends number ? number[] : number;
declare type ufixed400x39<N = void> = N extends number ? number[] : number;
declare type ufixed400x40<N = void> = N extends number ? number[] : number;
declare type ufixed400x41<N = void> = N extends number ? number[] : number;
declare type ufixed400x42<N = void> = N extends number ? number[] : number;
declare type ufixed400x43<N = void> = N extends number ? number[] : number;
declare type ufixed400x44<N = void> = N extends number ? number[] : number;
declare type ufixed400x45<N = void> = N extends number ? number[] : number;
declare type ufixed400x46<N = void> = N extends number ? number[] : number;
declare type ufixed400x47<N = void> = N extends number ? number[] : number;
declare type ufixed400x48<N = void> = N extends number ? number[] : number;
declare type ufixed400x49<N = void> = N extends number ? number[] : number;
declare type ufixed400x50<N = void> = N extends number ? number[] : number;
declare type ufixed400x51<N = void> = N extends number ? number[] : number;
declare type ufixed400x52<N = void> = N extends number ? number[] : number;
declare type ufixed400x53<N = void> = N extends number ? number[] : number;
declare type ufixed400x54<N = void> = N extends number ? number[] : number;
declare type ufixed400x55<N = void> = N extends number ? number[] : number;
declare type ufixed400x56<N = void> = N extends number ? number[] : number;
declare type ufixed400x57<N = void> = N extends number ? number[] : number;
declare type ufixed400x58<N = void> = N extends number ? number[] : number;
declare type ufixed400x59<N = void> = N extends number ? number[] : number;
declare type ufixed400x60<N = void> = N extends number ? number[] : number;
declare type ufixed400x61<N = void> = N extends number ? number[] : number;
declare type ufixed400x62<N = void> = N extends number ? number[] : number;
declare type ufixed400x63<N = void> = N extends number ? number[] : number;
declare type ufixed400x64<N = void> = N extends number ? number[] : number;
declare type ufixed400x65<N = void> = N extends number ? number[] : number;
declare type ufixed400x66<N = void> = N extends number ? number[] : number;
declare type ufixed400x67<N = void> = N extends number ? number[] : number;
declare type ufixed400x68<N = void> = N extends number ? number[] : number;
declare type ufixed400x69<N = void> = N extends number ? number[] : number;
declare type ufixed400x70<N = void> = N extends number ? number[] : number;
declare type ufixed400x71<N = void> = N extends number ? number[] : number;
declare type ufixed400x72<N = void> = N extends number ? number[] : number;
declare type ufixed400x73<N = void> = N extends number ? number[] : number;
declare type ufixed400x74<N = void> = N extends number ? number[] : number;
declare type ufixed400x75<N = void> = N extends number ? number[] : number;
declare type ufixed400x76<N = void> = N extends number ? number[] : number;
declare type ufixed400x77<N = void> = N extends number ? number[] : number;
declare type ufixed400x78<N = void> = N extends number ? number[] : number;
declare type ufixed400x79<N = void> = N extends number ? number[] : number;
declare type ufixed400x80<N = void> = N extends number ? number[] : number;
declare type ufixed400x81<N = void> = N extends number ? number[] : number;
declare type ufixed400x82<N = void> = N extends number ? number[] : number;
declare type ufixed400x83<N = void> = N extends number ? number[] : number;
declare type ufixed400x84<N = void> = N extends number ? number[] : number;
declare type ufixed400x85<N = void> = N extends number ? number[] : number;
declare type ufixed400x86<N = void> = N extends number ? number[] : number;
declare type ufixed400x87<N = void> = N extends number ? number[] : number;
declare type ufixed400x88<N = void> = N extends number ? number[] : number;
declare type ufixed400x89<N = void> = N extends number ? number[] : number;
declare type ufixed400x90<N = void> = N extends number ? number[] : number;
declare type ufixed400x91<N = void> = N extends number ? number[] : number;
declare type ufixed400x92<N = void> = N extends number ? number[] : number;
declare type ufixed400x93<N = void> = N extends number ? number[] : number;
declare type ufixed400x94<N = void> = N extends number ? number[] : number;
declare type ufixed400x95<N = void> = N extends number ? number[] : number;
declare type ufixed400x96<N = void> = N extends number ? number[] : number;
declare type ufixed400x97<N = void> = N extends number ? number[] : number;
declare type ufixed400x98<N = void> = N extends number ? number[] : number;
declare type ufixed400x99<N = void> = N extends number ? number[] : number;
declare type ufixed400x100<N = void> = N extends number ? number[] : number;
declare type ufixed400x101<N = void> = N extends number ? number[] : number;
declare type ufixed400x102<N = void> = N extends number ? number[] : number;
declare type ufixed400x103<N = void> = N extends number ? number[] : number;
declare type ufixed400x104<N = void> = N extends number ? number[] : number;
declare type ufixed400x105<N = void> = N extends number ? number[] : number;
declare type ufixed400x106<N = void> = N extends number ? number[] : number;
declare type ufixed400x107<N = void> = N extends number ? number[] : number;
declare type ufixed400x108<N = void> = N extends number ? number[] : number;
declare type ufixed400x109<N = void> = N extends number ? number[] : number;
declare type ufixed400x110<N = void> = N extends number ? number[] : number;
declare type ufixed400x111<N = void> = N extends number ? number[] : number;
declare type ufixed400x112<N = void> = N extends number ? number[] : number;
declare type ufixed400x113<N = void> = N extends number ? number[] : number;
declare type ufixed400x114<N = void> = N extends number ? number[] : number;
declare type ufixed400x115<N = void> = N extends number ? number[] : number;
declare type ufixed400x116<N = void> = N extends number ? number[] : number;
declare type ufixed400x117<N = void> = N extends number ? number[] : number;
declare type ufixed400x118<N = void> = N extends number ? number[] : number;
declare type ufixed400x119<N = void> = N extends number ? number[] : number;
declare type ufixed400x120<N = void> = N extends number ? number[] : number;
declare type ufixed400x121<N = void> = N extends number ? number[] : number;
declare type ufixed400x122<N = void> = N extends number ? number[] : number;
declare type ufixed400x123<N = void> = N extends number ? number[] : number;
declare type ufixed400x124<N = void> = N extends number ? number[] : number;
declare type ufixed400x125<N = void> = N extends number ? number[] : number;
declare type ufixed400x126<N = void> = N extends number ? number[] : number;
declare type ufixed400x127<N = void> = N extends number ? number[] : number;
declare type ufixed400x128<N = void> = N extends number ? number[] : number;
declare type ufixed400x129<N = void> = N extends number ? number[] : number;
declare type ufixed400x130<N = void> = N extends number ? number[] : number;
declare type ufixed400x131<N = void> = N extends number ? number[] : number;
declare type ufixed400x132<N = void> = N extends number ? number[] : number;
declare type ufixed400x133<N = void> = N extends number ? number[] : number;
declare type ufixed400x134<N = void> = N extends number ? number[] : number;
declare type ufixed400x135<N = void> = N extends number ? number[] : number;
declare type ufixed400x136<N = void> = N extends number ? number[] : number;
declare type ufixed400x137<N = void> = N extends number ? number[] : number;
declare type ufixed400x138<N = void> = N extends number ? number[] : number;
declare type ufixed400x139<N = void> = N extends number ? number[] : number;
declare type ufixed400x140<N = void> = N extends number ? number[] : number;
declare type ufixed400x141<N = void> = N extends number ? number[] : number;
declare type ufixed400x142<N = void> = N extends number ? number[] : number;
declare type ufixed400x143<N = void> = N extends number ? number[] : number;
declare type ufixed400x144<N = void> = N extends number ? number[] : number;
declare type ufixed400x145<N = void> = N extends number ? number[] : number;
declare type ufixed400x146<N = void> = N extends number ? number[] : number;
declare type ufixed400x147<N = void> = N extends number ? number[] : number;
declare type ufixed400x148<N = void> = N extends number ? number[] : number;
declare type ufixed400x149<N = void> = N extends number ? number[] : number;
declare type ufixed400x150<N = void> = N extends number ? number[] : number;
declare type ufixed400x151<N = void> = N extends number ? number[] : number;
declare type ufixed400x152<N = void> = N extends number ? number[] : number;
declare type ufixed400x153<N = void> = N extends number ? number[] : number;
declare type ufixed400x154<N = void> = N extends number ? number[] : number;
declare type ufixed400x155<N = void> = N extends number ? number[] : number;
declare type ufixed400x156<N = void> = N extends number ? number[] : number;
declare type ufixed400x157<N = void> = N extends number ? number[] : number;
declare type ufixed400x158<N = void> = N extends number ? number[] : number;
declare type ufixed400x159<N = void> = N extends number ? number[] : number;
declare type ufixed400x160<N = void> = N extends number ? number[] : number;
declare type ufixed408x1<N = void> = N extends number ? number[] : number;
declare type ufixed408x2<N = void> = N extends number ? number[] : number;
declare type ufixed408x3<N = void> = N extends number ? number[] : number;
declare type ufixed408x4<N = void> = N extends number ? number[] : number;
declare type ufixed408x5<N = void> = N extends number ? number[] : number;
declare type ufixed408x6<N = void> = N extends number ? number[] : number;
declare type ufixed408x7<N = void> = N extends number ? number[] : number;
declare type ufixed408x8<N = void> = N extends number ? number[] : number;
declare type ufixed408x9<N = void> = N extends number ? number[] : number;
declare type ufixed408x10<N = void> = N extends number ? number[] : number;
declare type ufixed408x11<N = void> = N extends number ? number[] : number;
declare type ufixed408x12<N = void> = N extends number ? number[] : number;
declare type ufixed408x13<N = void> = N extends number ? number[] : number;
declare type ufixed408x14<N = void> = N extends number ? number[] : number;
declare type ufixed408x15<N = void> = N extends number ? number[] : number;
declare type ufixed408x16<N = void> = N extends number ? number[] : number;
declare type ufixed408x17<N = void> = N extends number ? number[] : number;
declare type ufixed408x18<N = void> = N extends number ? number[] : number;
declare type ufixed408x19<N = void> = N extends number ? number[] : number;
declare type ufixed408x20<N = void> = N extends number ? number[] : number;
declare type ufixed408x21<N = void> = N extends number ? number[] : number;
declare type ufixed408x22<N = void> = N extends number ? number[] : number;
declare type ufixed408x23<N = void> = N extends number ? number[] : number;
declare type ufixed408x24<N = void> = N extends number ? number[] : number;
declare type ufixed408x25<N = void> = N extends number ? number[] : number;
declare type ufixed408x26<N = void> = N extends number ? number[] : number;
declare type ufixed408x27<N = void> = N extends number ? number[] : number;
declare type ufixed408x28<N = void> = N extends number ? number[] : number;
declare type ufixed408x29<N = void> = N extends number ? number[] : number;
declare type ufixed408x30<N = void> = N extends number ? number[] : number;
declare type ufixed408x31<N = void> = N extends number ? number[] : number;
declare type ufixed408x32<N = void> = N extends number ? number[] : number;
declare type ufixed408x33<N = void> = N extends number ? number[] : number;
declare type ufixed408x34<N = void> = N extends number ? number[] : number;
declare type ufixed408x35<N = void> = N extends number ? number[] : number;
declare type ufixed408x36<N = void> = N extends number ? number[] : number;
declare type ufixed408x37<N = void> = N extends number ? number[] : number;
declare type ufixed408x38<N = void> = N extends number ? number[] : number;
declare type ufixed408x39<N = void> = N extends number ? number[] : number;
declare type ufixed408x40<N = void> = N extends number ? number[] : number;
declare type ufixed408x41<N = void> = N extends number ? number[] : number;
declare type ufixed408x42<N = void> = N extends number ? number[] : number;
declare type ufixed408x43<N = void> = N extends number ? number[] : number;
declare type ufixed408x44<N = void> = N extends number ? number[] : number;
declare type ufixed408x45<N = void> = N extends number ? number[] : number;
declare type ufixed408x46<N = void> = N extends number ? number[] : number;
declare type ufixed408x47<N = void> = N extends number ? number[] : number;
declare type ufixed408x48<N = void> = N extends number ? number[] : number;
declare type ufixed408x49<N = void> = N extends number ? number[] : number;
declare type ufixed408x50<N = void> = N extends number ? number[] : number;
declare type ufixed408x51<N = void> = N extends number ? number[] : number;
declare type ufixed408x52<N = void> = N extends number ? number[] : number;
declare type ufixed408x53<N = void> = N extends number ? number[] : number;
declare type ufixed408x54<N = void> = N extends number ? number[] : number;
declare type ufixed408x55<N = void> = N extends number ? number[] : number;
declare type ufixed408x56<N = void> = N extends number ? number[] : number;
declare type ufixed408x57<N = void> = N extends number ? number[] : number;
declare type ufixed408x58<N = void> = N extends number ? number[] : number;
declare type ufixed408x59<N = void> = N extends number ? number[] : number;
declare type ufixed408x60<N = void> = N extends number ? number[] : number;
declare type ufixed408x61<N = void> = N extends number ? number[] : number;
declare type ufixed408x62<N = void> = N extends number ? number[] : number;
declare type ufixed408x63<N = void> = N extends number ? number[] : number;
declare type ufixed408x64<N = void> = N extends number ? number[] : number;
declare type ufixed408x65<N = void> = N extends number ? number[] : number;
declare type ufixed408x66<N = void> = N extends number ? number[] : number;
declare type ufixed408x67<N = void> = N extends number ? number[] : number;
declare type ufixed408x68<N = void> = N extends number ? number[] : number;
declare type ufixed408x69<N = void> = N extends number ? number[] : number;
declare type ufixed408x70<N = void> = N extends number ? number[] : number;
declare type ufixed408x71<N = void> = N extends number ? number[] : number;
declare type ufixed408x72<N = void> = N extends number ? number[] : number;
declare type ufixed408x73<N = void> = N extends number ? number[] : number;
declare type ufixed408x74<N = void> = N extends number ? number[] : number;
declare type ufixed408x75<N = void> = N extends number ? number[] : number;
declare type ufixed408x76<N = void> = N extends number ? number[] : number;
declare type ufixed408x77<N = void> = N extends number ? number[] : number;
declare type ufixed408x78<N = void> = N extends number ? number[] : number;
declare type ufixed408x79<N = void> = N extends number ? number[] : number;
declare type ufixed408x80<N = void> = N extends number ? number[] : number;
declare type ufixed408x81<N = void> = N extends number ? number[] : number;
declare type ufixed408x82<N = void> = N extends number ? number[] : number;
declare type ufixed408x83<N = void> = N extends number ? number[] : number;
declare type ufixed408x84<N = void> = N extends number ? number[] : number;
declare type ufixed408x85<N = void> = N extends number ? number[] : number;
declare type ufixed408x86<N = void> = N extends number ? number[] : number;
declare type ufixed408x87<N = void> = N extends number ? number[] : number;
declare type ufixed408x88<N = void> = N extends number ? number[] : number;
declare type ufixed408x89<N = void> = N extends number ? number[] : number;
declare type ufixed408x90<N = void> = N extends number ? number[] : number;
declare type ufixed408x91<N = void> = N extends number ? number[] : number;
declare type ufixed408x92<N = void> = N extends number ? number[] : number;
declare type ufixed408x93<N = void> = N extends number ? number[] : number;
declare type ufixed408x94<N = void> = N extends number ? number[] : number;
declare type ufixed408x95<N = void> = N extends number ? number[] : number;
declare type ufixed408x96<N = void> = N extends number ? number[] : number;
declare type ufixed408x97<N = void> = N extends number ? number[] : number;
declare type ufixed408x98<N = void> = N extends number ? number[] : number;
declare type ufixed408x99<N = void> = N extends number ? number[] : number;
declare type ufixed408x100<N = void> = N extends number ? number[] : number;
declare type ufixed408x101<N = void> = N extends number ? number[] : number;
declare type ufixed408x102<N = void> = N extends number ? number[] : number;
declare type ufixed408x103<N = void> = N extends number ? number[] : number;
declare type ufixed408x104<N = void> = N extends number ? number[] : number;
declare type ufixed408x105<N = void> = N extends number ? number[] : number;
declare type ufixed408x106<N = void> = N extends number ? number[] : number;
declare type ufixed408x107<N = void> = N extends number ? number[] : number;
declare type ufixed408x108<N = void> = N extends number ? number[] : number;
declare type ufixed408x109<N = void> = N extends number ? number[] : number;
declare type ufixed408x110<N = void> = N extends number ? number[] : number;
declare type ufixed408x111<N = void> = N extends number ? number[] : number;
declare type ufixed408x112<N = void> = N extends number ? number[] : number;
declare type ufixed408x113<N = void> = N extends number ? number[] : number;
declare type ufixed408x114<N = void> = N extends number ? number[] : number;
declare type ufixed408x115<N = void> = N extends number ? number[] : number;
declare type ufixed408x116<N = void> = N extends number ? number[] : number;
declare type ufixed408x117<N = void> = N extends number ? number[] : number;
declare type ufixed408x118<N = void> = N extends number ? number[] : number;
declare type ufixed408x119<N = void> = N extends number ? number[] : number;
declare type ufixed408x120<N = void> = N extends number ? number[] : number;
declare type ufixed408x121<N = void> = N extends number ? number[] : number;
declare type ufixed408x122<N = void> = N extends number ? number[] : number;
declare type ufixed408x123<N = void> = N extends number ? number[] : number;
declare type ufixed408x124<N = void> = N extends number ? number[] : number;
declare type ufixed408x125<N = void> = N extends number ? number[] : number;
declare type ufixed408x126<N = void> = N extends number ? number[] : number;
declare type ufixed408x127<N = void> = N extends number ? number[] : number;
declare type ufixed408x128<N = void> = N extends number ? number[] : number;
declare type ufixed408x129<N = void> = N extends number ? number[] : number;
declare type ufixed408x130<N = void> = N extends number ? number[] : number;
declare type ufixed408x131<N = void> = N extends number ? number[] : number;
declare type ufixed408x132<N = void> = N extends number ? number[] : number;
declare type ufixed408x133<N = void> = N extends number ? number[] : number;
declare type ufixed408x134<N = void> = N extends number ? number[] : number;
declare type ufixed408x135<N = void> = N extends number ? number[] : number;
declare type ufixed408x136<N = void> = N extends number ? number[] : number;
declare type ufixed408x137<N = void> = N extends number ? number[] : number;
declare type ufixed408x138<N = void> = N extends number ? number[] : number;
declare type ufixed408x139<N = void> = N extends number ? number[] : number;
declare type ufixed408x140<N = void> = N extends number ? number[] : number;
declare type ufixed408x141<N = void> = N extends number ? number[] : number;
declare type ufixed408x142<N = void> = N extends number ? number[] : number;
declare type ufixed408x143<N = void> = N extends number ? number[] : number;
declare type ufixed408x144<N = void> = N extends number ? number[] : number;
declare type ufixed408x145<N = void> = N extends number ? number[] : number;
declare type ufixed408x146<N = void> = N extends number ? number[] : number;
declare type ufixed408x147<N = void> = N extends number ? number[] : number;
declare type ufixed408x148<N = void> = N extends number ? number[] : number;
declare type ufixed408x149<N = void> = N extends number ? number[] : number;
declare type ufixed408x150<N = void> = N extends number ? number[] : number;
declare type ufixed408x151<N = void> = N extends number ? number[] : number;
declare type ufixed408x152<N = void> = N extends number ? number[] : number;
declare type ufixed408x153<N = void> = N extends number ? number[] : number;
declare type ufixed408x154<N = void> = N extends number ? number[] : number;
declare type ufixed408x155<N = void> = N extends number ? number[] : number;
declare type ufixed408x156<N = void> = N extends number ? number[] : number;
declare type ufixed408x157<N = void> = N extends number ? number[] : number;
declare type ufixed408x158<N = void> = N extends number ? number[] : number;
declare type ufixed408x159<N = void> = N extends number ? number[] : number;
declare type ufixed408x160<N = void> = N extends number ? number[] : number;
declare type ufixed416x1<N = void> = N extends number ? number[] : number;
declare type ufixed416x2<N = void> = N extends number ? number[] : number;
declare type ufixed416x3<N = void> = N extends number ? number[] : number;
declare type ufixed416x4<N = void> = N extends number ? number[] : number;
declare type ufixed416x5<N = void> = N extends number ? number[] : number;
declare type ufixed416x6<N = void> = N extends number ? number[] : number;
declare type ufixed416x7<N = void> = N extends number ? number[] : number;
declare type ufixed416x8<N = void> = N extends number ? number[] : number;
declare type ufixed416x9<N = void> = N extends number ? number[] : number;
declare type ufixed416x10<N = void> = N extends number ? number[] : number;
declare type ufixed416x11<N = void> = N extends number ? number[] : number;
declare type ufixed416x12<N = void> = N extends number ? number[] : number;
declare type ufixed416x13<N = void> = N extends number ? number[] : number;
declare type ufixed416x14<N = void> = N extends number ? number[] : number;
declare type ufixed416x15<N = void> = N extends number ? number[] : number;
declare type ufixed416x16<N = void> = N extends number ? number[] : number;
declare type ufixed416x17<N = void> = N extends number ? number[] : number;
declare type ufixed416x18<N = void> = N extends number ? number[] : number;
declare type ufixed416x19<N = void> = N extends number ? number[] : number;
declare type ufixed416x20<N = void> = N extends number ? number[] : number;
declare type ufixed416x21<N = void> = N extends number ? number[] : number;
declare type ufixed416x22<N = void> = N extends number ? number[] : number;
declare type ufixed416x23<N = void> = N extends number ? number[] : number;
declare type ufixed416x24<N = void> = N extends number ? number[] : number;
declare type ufixed416x25<N = void> = N extends number ? number[] : number;
declare type ufixed416x26<N = void> = N extends number ? number[] : number;
declare type ufixed416x27<N = void> = N extends number ? number[] : number;
declare type ufixed416x28<N = void> = N extends number ? number[] : number;
declare type ufixed416x29<N = void> = N extends number ? number[] : number;
declare type ufixed416x30<N = void> = N extends number ? number[] : number;
declare type ufixed416x31<N = void> = N extends number ? number[] : number;
declare type ufixed416x32<N = void> = N extends number ? number[] : number;
declare type ufixed416x33<N = void> = N extends number ? number[] : number;
declare type ufixed416x34<N = void> = N extends number ? number[] : number;
declare type ufixed416x35<N = void> = N extends number ? number[] : number;
declare type ufixed416x36<N = void> = N extends number ? number[] : number;
declare type ufixed416x37<N = void> = N extends number ? number[] : number;
declare type ufixed416x38<N = void> = N extends number ? number[] : number;
declare type ufixed416x39<N = void> = N extends number ? number[] : number;
declare type ufixed416x40<N = void> = N extends number ? number[] : number;
declare type ufixed416x41<N = void> = N extends number ? number[] : number;
declare type ufixed416x42<N = void> = N extends number ? number[] : number;
declare type ufixed416x43<N = void> = N extends number ? number[] : number;
declare type ufixed416x44<N = void> = N extends number ? number[] : number;
declare type ufixed416x45<N = void> = N extends number ? number[] : number;
declare type ufixed416x46<N = void> = N extends number ? number[] : number;
declare type ufixed416x47<N = void> = N extends number ? number[] : number;
declare type ufixed416x48<N = void> = N extends number ? number[] : number;
declare type ufixed416x49<N = void> = N extends number ? number[] : number;
declare type ufixed416x50<N = void> = N extends number ? number[] : number;
declare type ufixed416x51<N = void> = N extends number ? number[] : number;
declare type ufixed416x52<N = void> = N extends number ? number[] : number;
declare type ufixed416x53<N = void> = N extends number ? number[] : number;
declare type ufixed416x54<N = void> = N extends number ? number[] : number;
declare type ufixed416x55<N = void> = N extends number ? number[] : number;
declare type ufixed416x56<N = void> = N extends number ? number[] : number;
declare type ufixed416x57<N = void> = N extends number ? number[] : number;
declare type ufixed416x58<N = void> = N extends number ? number[] : number;
declare type ufixed416x59<N = void> = N extends number ? number[] : number;
declare type ufixed416x60<N = void> = N extends number ? number[] : number;
declare type ufixed416x61<N = void> = N extends number ? number[] : number;
declare type ufixed416x62<N = void> = N extends number ? number[] : number;
declare type ufixed416x63<N = void> = N extends number ? number[] : number;
declare type ufixed416x64<N = void> = N extends number ? number[] : number;
declare type ufixed416x65<N = void> = N extends number ? number[] : number;
declare type ufixed416x66<N = void> = N extends number ? number[] : number;
declare type ufixed416x67<N = void> = N extends number ? number[] : number;
declare type ufixed416x68<N = void> = N extends number ? number[] : number;
declare type ufixed416x69<N = void> = N extends number ? number[] : number;
declare type ufixed416x70<N = void> = N extends number ? number[] : number;
declare type ufixed416x71<N = void> = N extends number ? number[] : number;
declare type ufixed416x72<N = void> = N extends number ? number[] : number;
declare type ufixed416x73<N = void> = N extends number ? number[] : number;
declare type ufixed416x74<N = void> = N extends number ? number[] : number;
declare type ufixed416x75<N = void> = N extends number ? number[] : number;
declare type ufixed416x76<N = void> = N extends number ? number[] : number;
declare type ufixed416x77<N = void> = N extends number ? number[] : number;
declare type ufixed416x78<N = void> = N extends number ? number[] : number;
declare type ufixed416x79<N = void> = N extends number ? number[] : number;
declare type ufixed416x80<N = void> = N extends number ? number[] : number;
declare type ufixed416x81<N = void> = N extends number ? number[] : number;
declare type ufixed416x82<N = void> = N extends number ? number[] : number;
declare type ufixed416x83<N = void> = N extends number ? number[] : number;
declare type ufixed416x84<N = void> = N extends number ? number[] : number;
declare type ufixed416x85<N = void> = N extends number ? number[] : number;
declare type ufixed416x86<N = void> = N extends number ? number[] : number;
declare type ufixed416x87<N = void> = N extends number ? number[] : number;
declare type ufixed416x88<N = void> = N extends number ? number[] : number;
declare type ufixed416x89<N = void> = N extends number ? number[] : number;
declare type ufixed416x90<N = void> = N extends number ? number[] : number;
declare type ufixed416x91<N = void> = N extends number ? number[] : number;
declare type ufixed416x92<N = void> = N extends number ? number[] : number;
declare type ufixed416x93<N = void> = N extends number ? number[] : number;
declare type ufixed416x94<N = void> = N extends number ? number[] : number;
declare type ufixed416x95<N = void> = N extends number ? number[] : number;
declare type ufixed416x96<N = void> = N extends number ? number[] : number;
declare type ufixed416x97<N = void> = N extends number ? number[] : number;
declare type ufixed416x98<N = void> = N extends number ? number[] : number;
declare type ufixed416x99<N = void> = N extends number ? number[] : number;
declare type ufixed416x100<N = void> = N extends number ? number[] : number;
declare type ufixed416x101<N = void> = N extends number ? number[] : number;
declare type ufixed416x102<N = void> = N extends number ? number[] : number;
declare type ufixed416x103<N = void> = N extends number ? number[] : number;
declare type ufixed416x104<N = void> = N extends number ? number[] : number;
declare type ufixed416x105<N = void> = N extends number ? number[] : number;
declare type ufixed416x106<N = void> = N extends number ? number[] : number;
declare type ufixed416x107<N = void> = N extends number ? number[] : number;
declare type ufixed416x108<N = void> = N extends number ? number[] : number;
declare type ufixed416x109<N = void> = N extends number ? number[] : number;
declare type ufixed416x110<N = void> = N extends number ? number[] : number;
declare type ufixed416x111<N = void> = N extends number ? number[] : number;
declare type ufixed416x112<N = void> = N extends number ? number[] : number;
declare type ufixed416x113<N = void> = N extends number ? number[] : number;
declare type ufixed416x114<N = void> = N extends number ? number[] : number;
declare type ufixed416x115<N = void> = N extends number ? number[] : number;
declare type ufixed416x116<N = void> = N extends number ? number[] : number;
declare type ufixed416x117<N = void> = N extends number ? number[] : number;
declare type ufixed416x118<N = void> = N extends number ? number[] : number;
declare type ufixed416x119<N = void> = N extends number ? number[] : number;
declare type ufixed416x120<N = void> = N extends number ? number[] : number;
declare type ufixed416x121<N = void> = N extends number ? number[] : number;
declare type ufixed416x122<N = void> = N extends number ? number[] : number;
declare type ufixed416x123<N = void> = N extends number ? number[] : number;
declare type ufixed416x124<N = void> = N extends number ? number[] : number;
declare type ufixed416x125<N = void> = N extends number ? number[] : number;
declare type ufixed416x126<N = void> = N extends number ? number[] : number;
declare type ufixed416x127<N = void> = N extends number ? number[] : number;
declare type ufixed416x128<N = void> = N extends number ? number[] : number;
declare type ufixed416x129<N = void> = N extends number ? number[] : number;
declare type ufixed416x130<N = void> = N extends number ? number[] : number;
declare type ufixed416x131<N = void> = N extends number ? number[] : number;
declare type ufixed416x132<N = void> = N extends number ? number[] : number;
declare type ufixed416x133<N = void> = N extends number ? number[] : number;
declare type ufixed416x134<N = void> = N extends number ? number[] : number;
declare type ufixed416x135<N = void> = N extends number ? number[] : number;
declare type ufixed416x136<N = void> = N extends number ? number[] : number;
declare type ufixed416x137<N = void> = N extends number ? number[] : number;
declare type ufixed416x138<N = void> = N extends number ? number[] : number;
declare type ufixed416x139<N = void> = N extends number ? number[] : number;
declare type ufixed416x140<N = void> = N extends number ? number[] : number;
declare type ufixed416x141<N = void> = N extends number ? number[] : number;
declare type ufixed416x142<N = void> = N extends number ? number[] : number;
declare type ufixed416x143<N = void> = N extends number ? number[] : number;
declare type ufixed416x144<N = void> = N extends number ? number[] : number;
declare type ufixed416x145<N = void> = N extends number ? number[] : number;
declare type ufixed416x146<N = void> = N extends number ? number[] : number;
declare type ufixed416x147<N = void> = N extends number ? number[] : number;
declare type ufixed416x148<N = void> = N extends number ? number[] : number;
declare type ufixed416x149<N = void> = N extends number ? number[] : number;
declare type ufixed416x150<N = void> = N extends number ? number[] : number;
declare type ufixed416x151<N = void> = N extends number ? number[] : number;
declare type ufixed416x152<N = void> = N extends number ? number[] : number;
declare type ufixed416x153<N = void> = N extends number ? number[] : number;
declare type ufixed416x154<N = void> = N extends number ? number[] : number;
declare type ufixed416x155<N = void> = N extends number ? number[] : number;
declare type ufixed416x156<N = void> = N extends number ? number[] : number;
declare type ufixed416x157<N = void> = N extends number ? number[] : number;
declare type ufixed416x158<N = void> = N extends number ? number[] : number;
declare type ufixed416x159<N = void> = N extends number ? number[] : number;
declare type ufixed416x160<N = void> = N extends number ? number[] : number;
declare type ufixed424x1<N = void> = N extends number ? number[] : number;
declare type ufixed424x2<N = void> = N extends number ? number[] : number;
declare type ufixed424x3<N = void> = N extends number ? number[] : number;
declare type ufixed424x4<N = void> = N extends number ? number[] : number;
declare type ufixed424x5<N = void> = N extends number ? number[] : number;
declare type ufixed424x6<N = void> = N extends number ? number[] : number;
declare type ufixed424x7<N = void> = N extends number ? number[] : number;
declare type ufixed424x8<N = void> = N extends number ? number[] : number;
declare type ufixed424x9<N = void> = N extends number ? number[] : number;
declare type ufixed424x10<N = void> = N extends number ? number[] : number;
declare type ufixed424x11<N = void> = N extends number ? number[] : number;
declare type ufixed424x12<N = void> = N extends number ? number[] : number;
declare type ufixed424x13<N = void> = N extends number ? number[] : number;
declare type ufixed424x14<N = void> = N extends number ? number[] : number;
declare type ufixed424x15<N = void> = N extends number ? number[] : number;
declare type ufixed424x16<N = void> = N extends number ? number[] : number;
declare type ufixed424x17<N = void> = N extends number ? number[] : number;
declare type ufixed424x18<N = void> = N extends number ? number[] : number;
declare type ufixed424x19<N = void> = N extends number ? number[] : number;
declare type ufixed424x20<N = void> = N extends number ? number[] : number;
declare type ufixed424x21<N = void> = N extends number ? number[] : number;
declare type ufixed424x22<N = void> = N extends number ? number[] : number;
declare type ufixed424x23<N = void> = N extends number ? number[] : number;
declare type ufixed424x24<N = void> = N extends number ? number[] : number;
declare type ufixed424x25<N = void> = N extends number ? number[] : number;
declare type ufixed424x26<N = void> = N extends number ? number[] : number;
declare type ufixed424x27<N = void> = N extends number ? number[] : number;
declare type ufixed424x28<N = void> = N extends number ? number[] : number;
declare type ufixed424x29<N = void> = N extends number ? number[] : number;
declare type ufixed424x30<N = void> = N extends number ? number[] : number;
declare type ufixed424x31<N = void> = N extends number ? number[] : number;
declare type ufixed424x32<N = void> = N extends number ? number[] : number;
declare type ufixed424x33<N = void> = N extends number ? number[] : number;
declare type ufixed424x34<N = void> = N extends number ? number[] : number;
declare type ufixed424x35<N = void> = N extends number ? number[] : number;
declare type ufixed424x36<N = void> = N extends number ? number[] : number;
declare type ufixed424x37<N = void> = N extends number ? number[] : number;
declare type ufixed424x38<N = void> = N extends number ? number[] : number;
declare type ufixed424x39<N = void> = N extends number ? number[] : number;
declare type ufixed424x40<N = void> = N extends number ? number[] : number;
declare type ufixed424x41<N = void> = N extends number ? number[] : number;
declare type ufixed424x42<N = void> = N extends number ? number[] : number;
declare type ufixed424x43<N = void> = N extends number ? number[] : number;
declare type ufixed424x44<N = void> = N extends number ? number[] : number;
declare type ufixed424x45<N = void> = N extends number ? number[] : number;
declare type ufixed424x46<N = void> = N extends number ? number[] : number;
declare type ufixed424x47<N = void> = N extends number ? number[] : number;
declare type ufixed424x48<N = void> = N extends number ? number[] : number;
declare type ufixed424x49<N = void> = N extends number ? number[] : number;
declare type ufixed424x50<N = void> = N extends number ? number[] : number;
declare type ufixed424x51<N = void> = N extends number ? number[] : number;
declare type ufixed424x52<N = void> = N extends number ? number[] : number;
declare type ufixed424x53<N = void> = N extends number ? number[] : number;
declare type ufixed424x54<N = void> = N extends number ? number[] : number;
declare type ufixed424x55<N = void> = N extends number ? number[] : number;
declare type ufixed424x56<N = void> = N extends number ? number[] : number;
declare type ufixed424x57<N = void> = N extends number ? number[] : number;
declare type ufixed424x58<N = void> = N extends number ? number[] : number;
declare type ufixed424x59<N = void> = N extends number ? number[] : number;
declare type ufixed424x60<N = void> = N extends number ? number[] : number;
declare type ufixed424x61<N = void> = N extends number ? number[] : number;
declare type ufixed424x62<N = void> = N extends number ? number[] : number;
declare type ufixed424x63<N = void> = N extends number ? number[] : number;
declare type ufixed424x64<N = void> = N extends number ? number[] : number;
declare type ufixed424x65<N = void> = N extends number ? number[] : number;
declare type ufixed424x66<N = void> = N extends number ? number[] : number;
declare type ufixed424x67<N = void> = N extends number ? number[] : number;
declare type ufixed424x68<N = void> = N extends number ? number[] : number;
declare type ufixed424x69<N = void> = N extends number ? number[] : number;
declare type ufixed424x70<N = void> = N extends number ? number[] : number;
declare type ufixed424x71<N = void> = N extends number ? number[] : number;
declare type ufixed424x72<N = void> = N extends number ? number[] : number;
declare type ufixed424x73<N = void> = N extends number ? number[] : number;
declare type ufixed424x74<N = void> = N extends number ? number[] : number;
declare type ufixed424x75<N = void> = N extends number ? number[] : number;
declare type ufixed424x76<N = void> = N extends number ? number[] : number;
declare type ufixed424x77<N = void> = N extends number ? number[] : number;
declare type ufixed424x78<N = void> = N extends number ? number[] : number;
declare type ufixed424x79<N = void> = N extends number ? number[] : number;
declare type ufixed424x80<N = void> = N extends number ? number[] : number;
declare type ufixed424x81<N = void> = N extends number ? number[] : number;
declare type ufixed424x82<N = void> = N extends number ? number[] : number;
declare type ufixed424x83<N = void> = N extends number ? number[] : number;
declare type ufixed424x84<N = void> = N extends number ? number[] : number;
declare type ufixed424x85<N = void> = N extends number ? number[] : number;
declare type ufixed424x86<N = void> = N extends number ? number[] : number;
declare type ufixed424x87<N = void> = N extends number ? number[] : number;
declare type ufixed424x88<N = void> = N extends number ? number[] : number;
declare type ufixed424x89<N = void> = N extends number ? number[] : number;
declare type ufixed424x90<N = void> = N extends number ? number[] : number;
declare type ufixed424x91<N = void> = N extends number ? number[] : number;
declare type ufixed424x92<N = void> = N extends number ? number[] : number;
declare type ufixed424x93<N = void> = N extends number ? number[] : number;
declare type ufixed424x94<N = void> = N extends number ? number[] : number;
declare type ufixed424x95<N = void> = N extends number ? number[] : number;
declare type ufixed424x96<N = void> = N extends number ? number[] : number;
declare type ufixed424x97<N = void> = N extends number ? number[] : number;
declare type ufixed424x98<N = void> = N extends number ? number[] : number;
declare type ufixed424x99<N = void> = N extends number ? number[] : number;
declare type ufixed424x100<N = void> = N extends number ? number[] : number;
declare type ufixed424x101<N = void> = N extends number ? number[] : number;
declare type ufixed424x102<N = void> = N extends number ? number[] : number;
declare type ufixed424x103<N = void> = N extends number ? number[] : number;
declare type ufixed424x104<N = void> = N extends number ? number[] : number;
declare type ufixed424x105<N = void> = N extends number ? number[] : number;
declare type ufixed424x106<N = void> = N extends number ? number[] : number;
declare type ufixed424x107<N = void> = N extends number ? number[] : number;
declare type ufixed424x108<N = void> = N extends number ? number[] : number;
declare type ufixed424x109<N = void> = N extends number ? number[] : number;
declare type ufixed424x110<N = void> = N extends number ? number[] : number;
declare type ufixed424x111<N = void> = N extends number ? number[] : number;
declare type ufixed424x112<N = void> = N extends number ? number[] : number;
declare type ufixed424x113<N = void> = N extends number ? number[] : number;
declare type ufixed424x114<N = void> = N extends number ? number[] : number;
declare type ufixed424x115<N = void> = N extends number ? number[] : number;
declare type ufixed424x116<N = void> = N extends number ? number[] : number;
declare type ufixed424x117<N = void> = N extends number ? number[] : number;
declare type ufixed424x118<N = void> = N extends number ? number[] : number;
declare type ufixed424x119<N = void> = N extends number ? number[] : number;
declare type ufixed424x120<N = void> = N extends number ? number[] : number;
declare type ufixed424x121<N = void> = N extends number ? number[] : number;
declare type ufixed424x122<N = void> = N extends number ? number[] : number;
declare type ufixed424x123<N = void> = N extends number ? number[] : number;
declare type ufixed424x124<N = void> = N extends number ? number[] : number;
declare type ufixed424x125<N = void> = N extends number ? number[] : number;
declare type ufixed424x126<N = void> = N extends number ? number[] : number;
declare type ufixed424x127<N = void> = N extends number ? number[] : number;
declare type ufixed424x128<N = void> = N extends number ? number[] : number;
declare type ufixed424x129<N = void> = N extends number ? number[] : number;
declare type ufixed424x130<N = void> = N extends number ? number[] : number;
declare type ufixed424x131<N = void> = N extends number ? number[] : number;
declare type ufixed424x132<N = void> = N extends number ? number[] : number;
declare type ufixed424x133<N = void> = N extends number ? number[] : number;
declare type ufixed424x134<N = void> = N extends number ? number[] : number;
declare type ufixed424x135<N = void> = N extends number ? number[] : number;
declare type ufixed424x136<N = void> = N extends number ? number[] : number;
declare type ufixed424x137<N = void> = N extends number ? number[] : number;
declare type ufixed424x138<N = void> = N extends number ? number[] : number;
declare type ufixed424x139<N = void> = N extends number ? number[] : number;
declare type ufixed424x140<N = void> = N extends number ? number[] : number;
declare type ufixed424x141<N = void> = N extends number ? number[] : number;
declare type ufixed424x142<N = void> = N extends number ? number[] : number;
declare type ufixed424x143<N = void> = N extends number ? number[] : number;
declare type ufixed424x144<N = void> = N extends number ? number[] : number;
declare type ufixed424x145<N = void> = N extends number ? number[] : number;
declare type ufixed424x146<N = void> = N extends number ? number[] : number;
declare type ufixed424x147<N = void> = N extends number ? number[] : number;
declare type ufixed424x148<N = void> = N extends number ? number[] : number;
declare type ufixed424x149<N = void> = N extends number ? number[] : number;
declare type ufixed424x150<N = void> = N extends number ? number[] : number;
declare type ufixed424x151<N = void> = N extends number ? number[] : number;
declare type ufixed424x152<N = void> = N extends number ? number[] : number;
declare type ufixed424x153<N = void> = N extends number ? number[] : number;
declare type ufixed424x154<N = void> = N extends number ? number[] : number;
declare type ufixed424x155<N = void> = N extends number ? number[] : number;
declare type ufixed424x156<N = void> = N extends number ? number[] : number;
declare type ufixed424x157<N = void> = N extends number ? number[] : number;
declare type ufixed424x158<N = void> = N extends number ? number[] : number;
declare type ufixed424x159<N = void> = N extends number ? number[] : number;
declare type ufixed424x160<N = void> = N extends number ? number[] : number;
declare type ufixed432x1<N = void> = N extends number ? number[] : number;
declare type ufixed432x2<N = void> = N extends number ? number[] : number;
declare type ufixed432x3<N = void> = N extends number ? number[] : number;
declare type ufixed432x4<N = void> = N extends number ? number[] : number;
declare type ufixed432x5<N = void> = N extends number ? number[] : number;
declare type ufixed432x6<N = void> = N extends number ? number[] : number;
declare type ufixed432x7<N = void> = N extends number ? number[] : number;
declare type ufixed432x8<N = void> = N extends number ? number[] : number;
declare type ufixed432x9<N = void> = N extends number ? number[] : number;
declare type ufixed432x10<N = void> = N extends number ? number[] : number;
declare type ufixed432x11<N = void> = N extends number ? number[] : number;
declare type ufixed432x12<N = void> = N extends number ? number[] : number;
declare type ufixed432x13<N = void> = N extends number ? number[] : number;
declare type ufixed432x14<N = void> = N extends number ? number[] : number;
declare type ufixed432x15<N = void> = N extends number ? number[] : number;
declare type ufixed432x16<N = void> = N extends number ? number[] : number;
declare type ufixed432x17<N = void> = N extends number ? number[] : number;
declare type ufixed432x18<N = void> = N extends number ? number[] : number;
declare type ufixed432x19<N = void> = N extends number ? number[] : number;
declare type ufixed432x20<N = void> = N extends number ? number[] : number;
declare type ufixed432x21<N = void> = N extends number ? number[] : number;
declare type ufixed432x22<N = void> = N extends number ? number[] : number;
declare type ufixed432x23<N = void> = N extends number ? number[] : number;
declare type ufixed432x24<N = void> = N extends number ? number[] : number;
declare type ufixed432x25<N = void> = N extends number ? number[] : number;
declare type ufixed432x26<N = void> = N extends number ? number[] : number;
declare type ufixed432x27<N = void> = N extends number ? number[] : number;
declare type ufixed432x28<N = void> = N extends number ? number[] : number;
declare type ufixed432x29<N = void> = N extends number ? number[] : number;
declare type ufixed432x30<N = void> = N extends number ? number[] : number;
declare type ufixed432x31<N = void> = N extends number ? number[] : number;
declare type ufixed432x32<N = void> = N extends number ? number[] : number;
declare type ufixed432x33<N = void> = N extends number ? number[] : number;
declare type ufixed432x34<N = void> = N extends number ? number[] : number;
declare type ufixed432x35<N = void> = N extends number ? number[] : number;
declare type ufixed432x36<N = void> = N extends number ? number[] : number;
declare type ufixed432x37<N = void> = N extends number ? number[] : number;
declare type ufixed432x38<N = void> = N extends number ? number[] : number;
declare type ufixed432x39<N = void> = N extends number ? number[] : number;
declare type ufixed432x40<N = void> = N extends number ? number[] : number;
declare type ufixed432x41<N = void> = N extends number ? number[] : number;
declare type ufixed432x42<N = void> = N extends number ? number[] : number;
declare type ufixed432x43<N = void> = N extends number ? number[] : number;
declare type ufixed432x44<N = void> = N extends number ? number[] : number;
declare type ufixed432x45<N = void> = N extends number ? number[] : number;
declare type ufixed432x46<N = void> = N extends number ? number[] : number;
declare type ufixed432x47<N = void> = N extends number ? number[] : number;
declare type ufixed432x48<N = void> = N extends number ? number[] : number;
declare type ufixed432x49<N = void> = N extends number ? number[] : number;
declare type ufixed432x50<N = void> = N extends number ? number[] : number;
declare type ufixed432x51<N = void> = N extends number ? number[] : number;
declare type ufixed432x52<N = void> = N extends number ? number[] : number;
declare type ufixed432x53<N = void> = N extends number ? number[] : number;
declare type ufixed432x54<N = void> = N extends number ? number[] : number;
declare type ufixed432x55<N = void> = N extends number ? number[] : number;
declare type ufixed432x56<N = void> = N extends number ? number[] : number;
declare type ufixed432x57<N = void> = N extends number ? number[] : number;
declare type ufixed432x58<N = void> = N extends number ? number[] : number;
declare type ufixed432x59<N = void> = N extends number ? number[] : number;
declare type ufixed432x60<N = void> = N extends number ? number[] : number;
declare type ufixed432x61<N = void> = N extends number ? number[] : number;
declare type ufixed432x62<N = void> = N extends number ? number[] : number;
declare type ufixed432x63<N = void> = N extends number ? number[] : number;
declare type ufixed432x64<N = void> = N extends number ? number[] : number;
declare type ufixed432x65<N = void> = N extends number ? number[] : number;
declare type ufixed432x66<N = void> = N extends number ? number[] : number;
declare type ufixed432x67<N = void> = N extends number ? number[] : number;
declare type ufixed432x68<N = void> = N extends number ? number[] : number;
declare type ufixed432x69<N = void> = N extends number ? number[] : number;
declare type ufixed432x70<N = void> = N extends number ? number[] : number;
declare type ufixed432x71<N = void> = N extends number ? number[] : number;
declare type ufixed432x72<N = void> = N extends number ? number[] : number;
declare type ufixed432x73<N = void> = N extends number ? number[] : number;
declare type ufixed432x74<N = void> = N extends number ? number[] : number;
declare type ufixed432x75<N = void> = N extends number ? number[] : number;
declare type ufixed432x76<N = void> = N extends number ? number[] : number;
declare type ufixed432x77<N = void> = N extends number ? number[] : number;
declare type ufixed432x78<N = void> = N extends number ? number[] : number;
declare type ufixed432x79<N = void> = N extends number ? number[] : number;
declare type ufixed432x80<N = void> = N extends number ? number[] : number;
declare type ufixed432x81<N = void> = N extends number ? number[] : number;
declare type ufixed432x82<N = void> = N extends number ? number[] : number;
declare type ufixed432x83<N = void> = N extends number ? number[] : number;
declare type ufixed432x84<N = void> = N extends number ? number[] : number;
declare type ufixed432x85<N = void> = N extends number ? number[] : number;
declare type ufixed432x86<N = void> = N extends number ? number[] : number;
declare type ufixed432x87<N = void> = N extends number ? number[] : number;
declare type ufixed432x88<N = void> = N extends number ? number[] : number;
declare type ufixed432x89<N = void> = N extends number ? number[] : number;
declare type ufixed432x90<N = void> = N extends number ? number[] : number;
declare type ufixed432x91<N = void> = N extends number ? number[] : number;
declare type ufixed432x92<N = void> = N extends number ? number[] : number;
declare type ufixed432x93<N = void> = N extends number ? number[] : number;
declare type ufixed432x94<N = void> = N extends number ? number[] : number;
declare type ufixed432x95<N = void> = N extends number ? number[] : number;
declare type ufixed432x96<N = void> = N extends number ? number[] : number;
declare type ufixed432x97<N = void> = N extends number ? number[] : number;
declare type ufixed432x98<N = void> = N extends number ? number[] : number;
declare type ufixed432x99<N = void> = N extends number ? number[] : number;
declare type ufixed432x100<N = void> = N extends number ? number[] : number;
declare type ufixed432x101<N = void> = N extends number ? number[] : number;
declare type ufixed432x102<N = void> = N extends number ? number[] : number;
declare type ufixed432x103<N = void> = N extends number ? number[] : number;
declare type ufixed432x104<N = void> = N extends number ? number[] : number;
declare type ufixed432x105<N = void> = N extends number ? number[] : number;
declare type ufixed432x106<N = void> = N extends number ? number[] : number;
declare type ufixed432x107<N = void> = N extends number ? number[] : number;
declare type ufixed432x108<N = void> = N extends number ? number[] : number;
declare type ufixed432x109<N = void> = N extends number ? number[] : number;
declare type ufixed432x110<N = void> = N extends number ? number[] : number;
declare type ufixed432x111<N = void> = N extends number ? number[] : number;
declare type ufixed432x112<N = void> = N extends number ? number[] : number;
declare type ufixed432x113<N = void> = N extends number ? number[] : number;
declare type ufixed432x114<N = void> = N extends number ? number[] : number;
declare type ufixed432x115<N = void> = N extends number ? number[] : number;
declare type ufixed432x116<N = void> = N extends number ? number[] : number;
declare type ufixed432x117<N = void> = N extends number ? number[] : number;
declare type ufixed432x118<N = void> = N extends number ? number[] : number;
declare type ufixed432x119<N = void> = N extends number ? number[] : number;
declare type ufixed432x120<N = void> = N extends number ? number[] : number;
declare type ufixed432x121<N = void> = N extends number ? number[] : number;
declare type ufixed432x122<N = void> = N extends number ? number[] : number;
declare type ufixed432x123<N = void> = N extends number ? number[] : number;
declare type ufixed432x124<N = void> = N extends number ? number[] : number;
declare type ufixed432x125<N = void> = N extends number ? number[] : number;
declare type ufixed432x126<N = void> = N extends number ? number[] : number;
declare type ufixed432x127<N = void> = N extends number ? number[] : number;
declare type ufixed432x128<N = void> = N extends number ? number[] : number;
declare type ufixed432x129<N = void> = N extends number ? number[] : number;
declare type ufixed432x130<N = void> = N extends number ? number[] : number;
declare type ufixed432x131<N = void> = N extends number ? number[] : number;
declare type ufixed432x132<N = void> = N extends number ? number[] : number;
declare type ufixed432x133<N = void> = N extends number ? number[] : number;
declare type ufixed432x134<N = void> = N extends number ? number[] : number;
declare type ufixed432x135<N = void> = N extends number ? number[] : number;
declare type ufixed432x136<N = void> = N extends number ? number[] : number;
declare type ufixed432x137<N = void> = N extends number ? number[] : number;
declare type ufixed432x138<N = void> = N extends number ? number[] : number;
declare type ufixed432x139<N = void> = N extends number ? number[] : number;
declare type ufixed432x140<N = void> = N extends number ? number[] : number;
declare type ufixed432x141<N = void> = N extends number ? number[] : number;
declare type ufixed432x142<N = void> = N extends number ? number[] : number;
declare type ufixed432x143<N = void> = N extends number ? number[] : number;
declare type ufixed432x144<N = void> = N extends number ? number[] : number;
declare type ufixed432x145<N = void> = N extends number ? number[] : number;
declare type ufixed432x146<N = void> = N extends number ? number[] : number;
declare type ufixed432x147<N = void> = N extends number ? number[] : number;
declare type ufixed432x148<N = void> = N extends number ? number[] : number;
declare type ufixed432x149<N = void> = N extends number ? number[] : number;
declare type ufixed432x150<N = void> = N extends number ? number[] : number;
declare type ufixed432x151<N = void> = N extends number ? number[] : number;
declare type ufixed432x152<N = void> = N extends number ? number[] : number;
declare type ufixed432x153<N = void> = N extends number ? number[] : number;
declare type ufixed432x154<N = void> = N extends number ? number[] : number;
declare type ufixed432x155<N = void> = N extends number ? number[] : number;
declare type ufixed432x156<N = void> = N extends number ? number[] : number;
declare type ufixed432x157<N = void> = N extends number ? number[] : number;
declare type ufixed432x158<N = void> = N extends number ? number[] : number;
declare type ufixed432x159<N = void> = N extends number ? number[] : number;
declare type ufixed432x160<N = void> = N extends number ? number[] : number;
declare type ufixed440x1<N = void> = N extends number ? number[] : number;
declare type ufixed440x2<N = void> = N extends number ? number[] : number;
declare type ufixed440x3<N = void> = N extends number ? number[] : number;
declare type ufixed440x4<N = void> = N extends number ? number[] : number;
declare type ufixed440x5<N = void> = N extends number ? number[] : number;
declare type ufixed440x6<N = void> = N extends number ? number[] : number;
declare type ufixed440x7<N = void> = N extends number ? number[] : number;
declare type ufixed440x8<N = void> = N extends number ? number[] : number;
declare type ufixed440x9<N = void> = N extends number ? number[] : number;
declare type ufixed440x10<N = void> = N extends number ? number[] : number;
declare type ufixed440x11<N = void> = N extends number ? number[] : number;
declare type ufixed440x12<N = void> = N extends number ? number[] : number;
declare type ufixed440x13<N = void> = N extends number ? number[] : number;
declare type ufixed440x14<N = void> = N extends number ? number[] : number;
declare type ufixed440x15<N = void> = N extends number ? number[] : number;
declare type ufixed440x16<N = void> = N extends number ? number[] : number;
declare type ufixed440x17<N = void> = N extends number ? number[] : number;
declare type ufixed440x18<N = void> = N extends number ? number[] : number;
declare type ufixed440x19<N = void> = N extends number ? number[] : number;
declare type ufixed440x20<N = void> = N extends number ? number[] : number;
declare type ufixed440x21<N = void> = N extends number ? number[] : number;
declare type ufixed440x22<N = void> = N extends number ? number[] : number;
declare type ufixed440x23<N = void> = N extends number ? number[] : number;
declare type ufixed440x24<N = void> = N extends number ? number[] : number;
declare type ufixed440x25<N = void> = N extends number ? number[] : number;
declare type ufixed440x26<N = void> = N extends number ? number[] : number;
declare type ufixed440x27<N = void> = N extends number ? number[] : number;
declare type ufixed440x28<N = void> = N extends number ? number[] : number;
declare type ufixed440x29<N = void> = N extends number ? number[] : number;
declare type ufixed440x30<N = void> = N extends number ? number[] : number;
declare type ufixed440x31<N = void> = N extends number ? number[] : number;
declare type ufixed440x32<N = void> = N extends number ? number[] : number;
declare type ufixed440x33<N = void> = N extends number ? number[] : number;
declare type ufixed440x34<N = void> = N extends number ? number[] : number;
declare type ufixed440x35<N = void> = N extends number ? number[] : number;
declare type ufixed440x36<N = void> = N extends number ? number[] : number;
declare type ufixed440x37<N = void> = N extends number ? number[] : number;
declare type ufixed440x38<N = void> = N extends number ? number[] : number;
declare type ufixed440x39<N = void> = N extends number ? number[] : number;
declare type ufixed440x40<N = void> = N extends number ? number[] : number;
declare type ufixed440x41<N = void> = N extends number ? number[] : number;
declare type ufixed440x42<N = void> = N extends number ? number[] : number;
declare type ufixed440x43<N = void> = N extends number ? number[] : number;
declare type ufixed440x44<N = void> = N extends number ? number[] : number;
declare type ufixed440x45<N = void> = N extends number ? number[] : number;
declare type ufixed440x46<N = void> = N extends number ? number[] : number;
declare type ufixed440x47<N = void> = N extends number ? number[] : number;
declare type ufixed440x48<N = void> = N extends number ? number[] : number;
declare type ufixed440x49<N = void> = N extends number ? number[] : number;
declare type ufixed440x50<N = void> = N extends number ? number[] : number;
declare type ufixed440x51<N = void> = N extends number ? number[] : number;
declare type ufixed440x52<N = void> = N extends number ? number[] : number;
declare type ufixed440x53<N = void> = N extends number ? number[] : number;
declare type ufixed440x54<N = void> = N extends number ? number[] : number;
declare type ufixed440x55<N = void> = N extends number ? number[] : number;
declare type ufixed440x56<N = void> = N extends number ? number[] : number;
declare type ufixed440x57<N = void> = N extends number ? number[] : number;
declare type ufixed440x58<N = void> = N extends number ? number[] : number;
declare type ufixed440x59<N = void> = N extends number ? number[] : number;
declare type ufixed440x60<N = void> = N extends number ? number[] : number;
declare type ufixed440x61<N = void> = N extends number ? number[] : number;
declare type ufixed440x62<N = void> = N extends number ? number[] : number;
declare type ufixed440x63<N = void> = N extends number ? number[] : number;
declare type ufixed440x64<N = void> = N extends number ? number[] : number;
declare type ufixed440x65<N = void> = N extends number ? number[] : number;
declare type ufixed440x66<N = void> = N extends number ? number[] : number;
declare type ufixed440x67<N = void> = N extends number ? number[] : number;
declare type ufixed440x68<N = void> = N extends number ? number[] : number;
declare type ufixed440x69<N = void> = N extends number ? number[] : number;
declare type ufixed440x70<N = void> = N extends number ? number[] : number;
declare type ufixed440x71<N = void> = N extends number ? number[] : number;
declare type ufixed440x72<N = void> = N extends number ? number[] : number;
declare type ufixed440x73<N = void> = N extends number ? number[] : number;
declare type ufixed440x74<N = void> = N extends number ? number[] : number;
declare type ufixed440x75<N = void> = N extends number ? number[] : number;
declare type ufixed440x76<N = void> = N extends number ? number[] : number;
declare type ufixed440x77<N = void> = N extends number ? number[] : number;
declare type ufixed440x78<N = void> = N extends number ? number[] : number;
declare type ufixed440x79<N = void> = N extends number ? number[] : number;
declare type ufixed440x80<N = void> = N extends number ? number[] : number;
declare type ufixed440x81<N = void> = N extends number ? number[] : number;
declare type ufixed440x82<N = void> = N extends number ? number[] : number;
declare type ufixed440x83<N = void> = N extends number ? number[] : number;
declare type ufixed440x84<N = void> = N extends number ? number[] : number;
declare type ufixed440x85<N = void> = N extends number ? number[] : number;
declare type ufixed440x86<N = void> = N extends number ? number[] : number;
declare type ufixed440x87<N = void> = N extends number ? number[] : number;
declare type ufixed440x88<N = void> = N extends number ? number[] : number;
declare type ufixed440x89<N = void> = N extends number ? number[] : number;
declare type ufixed440x90<N = void> = N extends number ? number[] : number;
declare type ufixed440x91<N = void> = N extends number ? number[] : number;
declare type ufixed440x92<N = void> = N extends number ? number[] : number;
declare type ufixed440x93<N = void> = N extends number ? number[] : number;
declare type ufixed440x94<N = void> = N extends number ? number[] : number;
declare type ufixed440x95<N = void> = N extends number ? number[] : number;
declare type ufixed440x96<N = void> = N extends number ? number[] : number;
declare type ufixed440x97<N = void> = N extends number ? number[] : number;
declare type ufixed440x98<N = void> = N extends number ? number[] : number;
declare type ufixed440x99<N = void> = N extends number ? number[] : number;
declare type ufixed440x100<N = void> = N extends number ? number[] : number;
declare type ufixed440x101<N = void> = N extends number ? number[] : number;
declare type ufixed440x102<N = void> = N extends number ? number[] : number;
declare type ufixed440x103<N = void> = N extends number ? number[] : number;
declare type ufixed440x104<N = void> = N extends number ? number[] : number;
declare type ufixed440x105<N = void> = N extends number ? number[] : number;
declare type ufixed440x106<N = void> = N extends number ? number[] : number;
declare type ufixed440x107<N = void> = N extends number ? number[] : number;
declare type ufixed440x108<N = void> = N extends number ? number[] : number;
declare type ufixed440x109<N = void> = N extends number ? number[] : number;
declare type ufixed440x110<N = void> = N extends number ? number[] : number;
declare type ufixed440x111<N = void> = N extends number ? number[] : number;
declare type ufixed440x112<N = void> = N extends number ? number[] : number;
declare type ufixed440x113<N = void> = N extends number ? number[] : number;
declare type ufixed440x114<N = void> = N extends number ? number[] : number;
declare type ufixed440x115<N = void> = N extends number ? number[] : number;
declare type ufixed440x116<N = void> = N extends number ? number[] : number;
declare type ufixed440x117<N = void> = N extends number ? number[] : number;
declare type ufixed440x118<N = void> = N extends number ? number[] : number;
declare type ufixed440x119<N = void> = N extends number ? number[] : number;
declare type ufixed440x120<N = void> = N extends number ? number[] : number;
declare type ufixed440x121<N = void> = N extends number ? number[] : number;
declare type ufixed440x122<N = void> = N extends number ? number[] : number;
declare type ufixed440x123<N = void> = N extends number ? number[] : number;
declare type ufixed440x124<N = void> = N extends number ? number[] : number;
declare type ufixed440x125<N = void> = N extends number ? number[] : number;
declare type ufixed440x126<N = void> = N extends number ? number[] : number;
declare type ufixed440x127<N = void> = N extends number ? number[] : number;
declare type ufixed440x128<N = void> = N extends number ? number[] : number;
declare type ufixed440x129<N = void> = N extends number ? number[] : number;
declare type ufixed440x130<N = void> = N extends number ? number[] : number;
declare type ufixed440x131<N = void> = N extends number ? number[] : number;
declare type ufixed440x132<N = void> = N extends number ? number[] : number;
declare type ufixed440x133<N = void> = N extends number ? number[] : number;
declare type ufixed440x134<N = void> = N extends number ? number[] : number;
declare type ufixed440x135<N = void> = N extends number ? number[] : number;
declare type ufixed440x136<N = void> = N extends number ? number[] : number;
declare type ufixed440x137<N = void> = N extends number ? number[] : number;
declare type ufixed440x138<N = void> = N extends number ? number[] : number;
declare type ufixed440x139<N = void> = N extends number ? number[] : number;
declare type ufixed440x140<N = void> = N extends number ? number[] : number;
declare type ufixed440x141<N = void> = N extends number ? number[] : number;
declare type ufixed440x142<N = void> = N extends number ? number[] : number;
declare type ufixed440x143<N = void> = N extends number ? number[] : number;
declare type ufixed440x144<N = void> = N extends number ? number[] : number;
declare type ufixed440x145<N = void> = N extends number ? number[] : number;
declare type ufixed440x146<N = void> = N extends number ? number[] : number;
declare type ufixed440x147<N = void> = N extends number ? number[] : number;
declare type ufixed440x148<N = void> = N extends number ? number[] : number;
declare type ufixed440x149<N = void> = N extends number ? number[] : number;
declare type ufixed440x150<N = void> = N extends number ? number[] : number;
declare type ufixed440x151<N = void> = N extends number ? number[] : number;
declare type ufixed440x152<N = void> = N extends number ? number[] : number;
declare type ufixed440x153<N = void> = N extends number ? number[] : number;
declare type ufixed440x154<N = void> = N extends number ? number[] : number;
declare type ufixed440x155<N = void> = N extends number ? number[] : number;
declare type ufixed440x156<N = void> = N extends number ? number[] : number;
declare type ufixed440x157<N = void> = N extends number ? number[] : number;
declare type ufixed440x158<N = void> = N extends number ? number[] : number;
declare type ufixed440x159<N = void> = N extends number ? number[] : number;
declare type ufixed440x160<N = void> = N extends number ? number[] : number;
declare type ufixed448x1<N = void> = N extends number ? number[] : number;
declare type ufixed448x2<N = void> = N extends number ? number[] : number;
declare type ufixed448x3<N = void> = N extends number ? number[] : number;
declare type ufixed448x4<N = void> = N extends number ? number[] : number;
declare type ufixed448x5<N = void> = N extends number ? number[] : number;
declare type ufixed448x6<N = void> = N extends number ? number[] : number;
declare type ufixed448x7<N = void> = N extends number ? number[] : number;
declare type ufixed448x8<N = void> = N extends number ? number[] : number;
declare type ufixed448x9<N = void> = N extends number ? number[] : number;
declare type ufixed448x10<N = void> = N extends number ? number[] : number;
declare type ufixed448x11<N = void> = N extends number ? number[] : number;
declare type ufixed448x12<N = void> = N extends number ? number[] : number;
declare type ufixed448x13<N = void> = N extends number ? number[] : number;
declare type ufixed448x14<N = void> = N extends number ? number[] : number;
declare type ufixed448x15<N = void> = N extends number ? number[] : number;
declare type ufixed448x16<N = void> = N extends number ? number[] : number;
declare type ufixed448x17<N = void> = N extends number ? number[] : number;
declare type ufixed448x18<N = void> = N extends number ? number[] : number;
declare type ufixed448x19<N = void> = N extends number ? number[] : number;
declare type ufixed448x20<N = void> = N extends number ? number[] : number;
declare type ufixed448x21<N = void> = N extends number ? number[] : number;
declare type ufixed448x22<N = void> = N extends number ? number[] : number;
declare type ufixed448x23<N = void> = N extends number ? number[] : number;
declare type ufixed448x24<N = void> = N extends number ? number[] : number;
declare type ufixed448x25<N = void> = N extends number ? number[] : number;
declare type ufixed448x26<N = void> = N extends number ? number[] : number;
declare type ufixed448x27<N = void> = N extends number ? number[] : number;
declare type ufixed448x28<N = void> = N extends number ? number[] : number;
declare type ufixed448x29<N = void> = N extends number ? number[] : number;
declare type ufixed448x30<N = void> = N extends number ? number[] : number;
declare type ufixed448x31<N = void> = N extends number ? number[] : number;
declare type ufixed448x32<N = void> = N extends number ? number[] : number;
declare type ufixed448x33<N = void> = N extends number ? number[] : number;
declare type ufixed448x34<N = void> = N extends number ? number[] : number;
declare type ufixed448x35<N = void> = N extends number ? number[] : number;
declare type ufixed448x36<N = void> = N extends number ? number[] : number;
declare type ufixed448x37<N = void> = N extends number ? number[] : number;
declare type ufixed448x38<N = void> = N extends number ? number[] : number;
declare type ufixed448x39<N = void> = N extends number ? number[] : number;
declare type ufixed448x40<N = void> = N extends number ? number[] : number;
declare type ufixed448x41<N = void> = N extends number ? number[] : number;
declare type ufixed448x42<N = void> = N extends number ? number[] : number;
declare type ufixed448x43<N = void> = N extends number ? number[] : number;
declare type ufixed448x44<N = void> = N extends number ? number[] : number;
declare type ufixed448x45<N = void> = N extends number ? number[] : number;
declare type ufixed448x46<N = void> = N extends number ? number[] : number;
declare type ufixed448x47<N = void> = N extends number ? number[] : number;
declare type ufixed448x48<N = void> = N extends number ? number[] : number;
declare type ufixed448x49<N = void> = N extends number ? number[] : number;
declare type ufixed448x50<N = void> = N extends number ? number[] : number;
declare type ufixed448x51<N = void> = N extends number ? number[] : number;
declare type ufixed448x52<N = void> = N extends number ? number[] : number;
declare type ufixed448x53<N = void> = N extends number ? number[] : number;
declare type ufixed448x54<N = void> = N extends number ? number[] : number;
declare type ufixed448x55<N = void> = N extends number ? number[] : number;
declare type ufixed448x56<N = void> = N extends number ? number[] : number;
declare type ufixed448x57<N = void> = N extends number ? number[] : number;
declare type ufixed448x58<N = void> = N extends number ? number[] : number;
declare type ufixed448x59<N = void> = N extends number ? number[] : number;
declare type ufixed448x60<N = void> = N extends number ? number[] : number;
declare type ufixed448x61<N = void> = N extends number ? number[] : number;
declare type ufixed448x62<N = void> = N extends number ? number[] : number;
declare type ufixed448x63<N = void> = N extends number ? number[] : number;
declare type ufixed448x64<N = void> = N extends number ? number[] : number;
declare type ufixed448x65<N = void> = N extends number ? number[] : number;
declare type ufixed448x66<N = void> = N extends number ? number[] : number;
declare type ufixed448x67<N = void> = N extends number ? number[] : number;
declare type ufixed448x68<N = void> = N extends number ? number[] : number;
declare type ufixed448x69<N = void> = N extends number ? number[] : number;
declare type ufixed448x70<N = void> = N extends number ? number[] : number;
declare type ufixed448x71<N = void> = N extends number ? number[] : number;
declare type ufixed448x72<N = void> = N extends number ? number[] : number;
declare type ufixed448x73<N = void> = N extends number ? number[] : number;
declare type ufixed448x74<N = void> = N extends number ? number[] : number;
declare type ufixed448x75<N = void> = N extends number ? number[] : number;
declare type ufixed448x76<N = void> = N extends number ? number[] : number;
declare type ufixed448x77<N = void> = N extends number ? number[] : number;
declare type ufixed448x78<N = void> = N extends number ? number[] : number;
declare type ufixed448x79<N = void> = N extends number ? number[] : number;
declare type ufixed448x80<N = void> = N extends number ? number[] : number;
declare type ufixed448x81<N = void> = N extends number ? number[] : number;
declare type ufixed448x82<N = void> = N extends number ? number[] : number;
declare type ufixed448x83<N = void> = N extends number ? number[] : number;
declare type ufixed448x84<N = void> = N extends number ? number[] : number;
declare type ufixed448x85<N = void> = N extends number ? number[] : number;
declare type ufixed448x86<N = void> = N extends number ? number[] : number;
declare type ufixed448x87<N = void> = N extends number ? number[] : number;
declare type ufixed448x88<N = void> = N extends number ? number[] : number;
declare type ufixed448x89<N = void> = N extends number ? number[] : number;
declare type ufixed448x90<N = void> = N extends number ? number[] : number;
declare type ufixed448x91<N = void> = N extends number ? number[] : number;
declare type ufixed448x92<N = void> = N extends number ? number[] : number;
declare type ufixed448x93<N = void> = N extends number ? number[] : number;
declare type ufixed448x94<N = void> = N extends number ? number[] : number;
declare type ufixed448x95<N = void> = N extends number ? number[] : number;
declare type ufixed448x96<N = void> = N extends number ? number[] : number;
declare type ufixed448x97<N = void> = N extends number ? number[] : number;
declare type ufixed448x98<N = void> = N extends number ? number[] : number;
declare type ufixed448x99<N = void> = N extends number ? number[] : number;
declare type ufixed448x100<N = void> = N extends number ? number[] : number;
declare type ufixed448x101<N = void> = N extends number ? number[] : number;
declare type ufixed448x102<N = void> = N extends number ? number[] : number;
declare type ufixed448x103<N = void> = N extends number ? number[] : number;
declare type ufixed448x104<N = void> = N extends number ? number[] : number;
declare type ufixed448x105<N = void> = N extends number ? number[] : number;
declare type ufixed448x106<N = void> = N extends number ? number[] : number;
declare type ufixed448x107<N = void> = N extends number ? number[] : number;
declare type ufixed448x108<N = void> = N extends number ? number[] : number;
declare type ufixed448x109<N = void> = N extends number ? number[] : number;
declare type ufixed448x110<N = void> = N extends number ? number[] : number;
declare type ufixed448x111<N = void> = N extends number ? number[] : number;
declare type ufixed448x112<N = void> = N extends number ? number[] : number;
declare type ufixed448x113<N = void> = N extends number ? number[] : number;
declare type ufixed448x114<N = void> = N extends number ? number[] : number;
declare type ufixed448x115<N = void> = N extends number ? number[] : number;
declare type ufixed448x116<N = void> = N extends number ? number[] : number;
declare type ufixed448x117<N = void> = N extends number ? number[] : number;
declare type ufixed448x118<N = void> = N extends number ? number[] : number;
declare type ufixed448x119<N = void> = N extends number ? number[] : number;
declare type ufixed448x120<N = void> = N extends number ? number[] : number;
declare type ufixed448x121<N = void> = N extends number ? number[] : number;
declare type ufixed448x122<N = void> = N extends number ? number[] : number;
declare type ufixed448x123<N = void> = N extends number ? number[] : number;
declare type ufixed448x124<N = void> = N extends number ? number[] : number;
declare type ufixed448x125<N = void> = N extends number ? number[] : number;
declare type ufixed448x126<N = void> = N extends number ? number[] : number;
declare type ufixed448x127<N = void> = N extends number ? number[] : number;
declare type ufixed448x128<N = void> = N extends number ? number[] : number;
declare type ufixed448x129<N = void> = N extends number ? number[] : number;
declare type ufixed448x130<N = void> = N extends number ? number[] : number;
declare type ufixed448x131<N = void> = N extends number ? number[] : number;
declare type ufixed448x132<N = void> = N extends number ? number[] : number;
declare type ufixed448x133<N = void> = N extends number ? number[] : number;
declare type ufixed448x134<N = void> = N extends number ? number[] : number;
declare type ufixed448x135<N = void> = N extends number ? number[] : number;
declare type ufixed448x136<N = void> = N extends number ? number[] : number;
declare type ufixed448x137<N = void> = N extends number ? number[] : number;
declare type ufixed448x138<N = void> = N extends number ? number[] : number;
declare type ufixed448x139<N = void> = N extends number ? number[] : number;
declare type ufixed448x140<N = void> = N extends number ? number[] : number;
declare type ufixed448x141<N = void> = N extends number ? number[] : number;
declare type ufixed448x142<N = void> = N extends number ? number[] : number;
declare type ufixed448x143<N = void> = N extends number ? number[] : number;
declare type ufixed448x144<N = void> = N extends number ? number[] : number;
declare type ufixed448x145<N = void> = N extends number ? number[] : number;
declare type ufixed448x146<N = void> = N extends number ? number[] : number;
declare type ufixed448x147<N = void> = N extends number ? number[] : number;
declare type ufixed448x148<N = void> = N extends number ? number[] : number;
declare type ufixed448x149<N = void> = N extends number ? number[] : number;
declare type ufixed448x150<N = void> = N extends number ? number[] : number;
declare type ufixed448x151<N = void> = N extends number ? number[] : number;
declare type ufixed448x152<N = void> = N extends number ? number[] : number;
declare type ufixed448x153<N = void> = N extends number ? number[] : number;
declare type ufixed448x154<N = void> = N extends number ? number[] : number;
declare type ufixed448x155<N = void> = N extends number ? number[] : number;
declare type ufixed448x156<N = void> = N extends number ? number[] : number;
declare type ufixed448x157<N = void> = N extends number ? number[] : number;
declare type ufixed448x158<N = void> = N extends number ? number[] : number;
declare type ufixed448x159<N = void> = N extends number ? number[] : number;
declare type ufixed448x160<N = void> = N extends number ? number[] : number;
declare type ufixed456x1<N = void> = N extends number ? number[] : number;
declare type ufixed456x2<N = void> = N extends number ? number[] : number;
declare type ufixed456x3<N = void> = N extends number ? number[] : number;
declare type ufixed456x4<N = void> = N extends number ? number[] : number;
declare type ufixed456x5<N = void> = N extends number ? number[] : number;
declare type ufixed456x6<N = void> = N extends number ? number[] : number;
declare type ufixed456x7<N = void> = N extends number ? number[] : number;
declare type ufixed456x8<N = void> = N extends number ? number[] : number;
declare type ufixed456x9<N = void> = N extends number ? number[] : number;
declare type ufixed456x10<N = void> = N extends number ? number[] : number;
declare type ufixed456x11<N = void> = N extends number ? number[] : number;
declare type ufixed456x12<N = void> = N extends number ? number[] : number;
declare type ufixed456x13<N = void> = N extends number ? number[] : number;
declare type ufixed456x14<N = void> = N extends number ? number[] : number;
declare type ufixed456x15<N = void> = N extends number ? number[] : number;
declare type ufixed456x16<N = void> = N extends number ? number[] : number;
declare type ufixed456x17<N = void> = N extends number ? number[] : number;
declare type ufixed456x18<N = void> = N extends number ? number[] : number;
declare type ufixed456x19<N = void> = N extends number ? number[] : number;
declare type ufixed456x20<N = void> = N extends number ? number[] : number;
declare type ufixed456x21<N = void> = N extends number ? number[] : number;
declare type ufixed456x22<N = void> = N extends number ? number[] : number;
declare type ufixed456x23<N = void> = N extends number ? number[] : number;
declare type ufixed456x24<N = void> = N extends number ? number[] : number;
declare type ufixed456x25<N = void> = N extends number ? number[] : number;
declare type ufixed456x26<N = void> = N extends number ? number[] : number;
declare type ufixed456x27<N = void> = N extends number ? number[] : number;
declare type ufixed456x28<N = void> = N extends number ? number[] : number;
declare type ufixed456x29<N = void> = N extends number ? number[] : number;
declare type ufixed456x30<N = void> = N extends number ? number[] : number;
declare type ufixed456x31<N = void> = N extends number ? number[] : number;
declare type ufixed456x32<N = void> = N extends number ? number[] : number;
declare type ufixed456x33<N = void> = N extends number ? number[] : number;
declare type ufixed456x34<N = void> = N extends number ? number[] : number;
declare type ufixed456x35<N = void> = N extends number ? number[] : number;
declare type ufixed456x36<N = void> = N extends number ? number[] : number;
declare type ufixed456x37<N = void> = N extends number ? number[] : number;
declare type ufixed456x38<N = void> = N extends number ? number[] : number;
declare type ufixed456x39<N = void> = N extends number ? number[] : number;
declare type ufixed456x40<N = void> = N extends number ? number[] : number;
declare type ufixed456x41<N = void> = N extends number ? number[] : number;
declare type ufixed456x42<N = void> = N extends number ? number[] : number;
declare type ufixed456x43<N = void> = N extends number ? number[] : number;
declare type ufixed456x44<N = void> = N extends number ? number[] : number;
declare type ufixed456x45<N = void> = N extends number ? number[] : number;
declare type ufixed456x46<N = void> = N extends number ? number[] : number;
declare type ufixed456x47<N = void> = N extends number ? number[] : number;
declare type ufixed456x48<N = void> = N extends number ? number[] : number;
declare type ufixed456x49<N = void> = N extends number ? number[] : number;
declare type ufixed456x50<N = void> = N extends number ? number[] : number;
declare type ufixed456x51<N = void> = N extends number ? number[] : number;
declare type ufixed456x52<N = void> = N extends number ? number[] : number;
declare type ufixed456x53<N = void> = N extends number ? number[] : number;
declare type ufixed456x54<N = void> = N extends number ? number[] : number;
declare type ufixed456x55<N = void> = N extends number ? number[] : number;
declare type ufixed456x56<N = void> = N extends number ? number[] : number;
declare type ufixed456x57<N = void> = N extends number ? number[] : number;
declare type ufixed456x58<N = void> = N extends number ? number[] : number;
declare type ufixed456x59<N = void> = N extends number ? number[] : number;
declare type ufixed456x60<N = void> = N extends number ? number[] : number;
declare type ufixed456x61<N = void> = N extends number ? number[] : number;
declare type ufixed456x62<N = void> = N extends number ? number[] : number;
declare type ufixed456x63<N = void> = N extends number ? number[] : number;
declare type ufixed456x64<N = void> = N extends number ? number[] : number;
declare type ufixed456x65<N = void> = N extends number ? number[] : number;
declare type ufixed456x66<N = void> = N extends number ? number[] : number;
declare type ufixed456x67<N = void> = N extends number ? number[] : number;
declare type ufixed456x68<N = void> = N extends number ? number[] : number;
declare type ufixed456x69<N = void> = N extends number ? number[] : number;
declare type ufixed456x70<N = void> = N extends number ? number[] : number;
declare type ufixed456x71<N = void> = N extends number ? number[] : number;
declare type ufixed456x72<N = void> = N extends number ? number[] : number;
declare type ufixed456x73<N = void> = N extends number ? number[] : number;
declare type ufixed456x74<N = void> = N extends number ? number[] : number;
declare type ufixed456x75<N = void> = N extends number ? number[] : number;
declare type ufixed456x76<N = void> = N extends number ? number[] : number;
declare type ufixed456x77<N = void> = N extends number ? number[] : number;
declare type ufixed456x78<N = void> = N extends number ? number[] : number;
declare type ufixed456x79<N = void> = N extends number ? number[] : number;
declare type ufixed456x80<N = void> = N extends number ? number[] : number;
declare type ufixed456x81<N = void> = N extends number ? number[] : number;
declare type ufixed456x82<N = void> = N extends number ? number[] : number;
declare type ufixed456x83<N = void> = N extends number ? number[] : number;
declare type ufixed456x84<N = void> = N extends number ? number[] : number;
declare type ufixed456x85<N = void> = N extends number ? number[] : number;
declare type ufixed456x86<N = void> = N extends number ? number[] : number;
declare type ufixed456x87<N = void> = N extends number ? number[] : number;
declare type ufixed456x88<N = void> = N extends number ? number[] : number;
declare type ufixed456x89<N = void> = N extends number ? number[] : number;
declare type ufixed456x90<N = void> = N extends number ? number[] : number;
declare type ufixed456x91<N = void> = N extends number ? number[] : number;
declare type ufixed456x92<N = void> = N extends number ? number[] : number;
declare type ufixed456x93<N = void> = N extends number ? number[] : number;
declare type ufixed456x94<N = void> = N extends number ? number[] : number;
declare type ufixed456x95<N = void> = N extends number ? number[] : number;
declare type ufixed456x96<N = void> = N extends number ? number[] : number;
declare type ufixed456x97<N = void> = N extends number ? number[] : number;
declare type ufixed456x98<N = void> = N extends number ? number[] : number;
declare type ufixed456x99<N = void> = N extends number ? number[] : number;
declare type ufixed456x100<N = void> = N extends number ? number[] : number;
declare type ufixed456x101<N = void> = N extends number ? number[] : number;
declare type ufixed456x102<N = void> = N extends number ? number[] : number;
declare type ufixed456x103<N = void> = N extends number ? number[] : number;
declare type ufixed456x104<N = void> = N extends number ? number[] : number;
declare type ufixed456x105<N = void> = N extends number ? number[] : number;
declare type ufixed456x106<N = void> = N extends number ? number[] : number;
declare type ufixed456x107<N = void> = N extends number ? number[] : number;
declare type ufixed456x108<N = void> = N extends number ? number[] : number;
declare type ufixed456x109<N = void> = N extends number ? number[] : number;
declare type ufixed456x110<N = void> = N extends number ? number[] : number;
declare type ufixed456x111<N = void> = N extends number ? number[] : number;
declare type ufixed456x112<N = void> = N extends number ? number[] : number;
declare type ufixed456x113<N = void> = N extends number ? number[] : number;
declare type ufixed456x114<N = void> = N extends number ? number[] : number;
declare type ufixed456x115<N = void> = N extends number ? number[] : number;
declare type ufixed456x116<N = void> = N extends number ? number[] : number;
declare type ufixed456x117<N = void> = N extends number ? number[] : number;
declare type ufixed456x118<N = void> = N extends number ? number[] : number;
declare type ufixed456x119<N = void> = N extends number ? number[] : number;
declare type ufixed456x120<N = void> = N extends number ? number[] : number;
declare type ufixed456x121<N = void> = N extends number ? number[] : number;
declare type ufixed456x122<N = void> = N extends number ? number[] : number;
declare type ufixed456x123<N = void> = N extends number ? number[] : number;
declare type ufixed456x124<N = void> = N extends number ? number[] : number;
declare type ufixed456x125<N = void> = N extends number ? number[] : number;
declare type ufixed456x126<N = void> = N extends number ? number[] : number;
declare type ufixed456x127<N = void> = N extends number ? number[] : number;
declare type ufixed456x128<N = void> = N extends number ? number[] : number;
declare type ufixed456x129<N = void> = N extends number ? number[] : number;
declare type ufixed456x130<N = void> = N extends number ? number[] : number;
declare type ufixed456x131<N = void> = N extends number ? number[] : number;
declare type ufixed456x132<N = void> = N extends number ? number[] : number;
declare type ufixed456x133<N = void> = N extends number ? number[] : number;
declare type ufixed456x134<N = void> = N extends number ? number[] : number;
declare type ufixed456x135<N = void> = N extends number ? number[] : number;
declare type ufixed456x136<N = void> = N extends number ? number[] : number;
declare type ufixed456x137<N = void> = N extends number ? number[] : number;
declare type ufixed456x138<N = void> = N extends number ? number[] : number;
declare type ufixed456x139<N = void> = N extends number ? number[] : number;
declare type ufixed456x140<N = void> = N extends number ? number[] : number;
declare type ufixed456x141<N = void> = N extends number ? number[] : number;
declare type ufixed456x142<N = void> = N extends number ? number[] : number;
declare type ufixed456x143<N = void> = N extends number ? number[] : number;
declare type ufixed456x144<N = void> = N extends number ? number[] : number;
declare type ufixed456x145<N = void> = N extends number ? number[] : number;
declare type ufixed456x146<N = void> = N extends number ? number[] : number;
declare type ufixed456x147<N = void> = N extends number ? number[] : number;
declare type ufixed456x148<N = void> = N extends number ? number[] : number;
declare type ufixed456x149<N = void> = N extends number ? number[] : number;
declare type ufixed456x150<N = void> = N extends number ? number[] : number;
declare type ufixed456x151<N = void> = N extends number ? number[] : number;
declare type ufixed456x152<N = void> = N extends number ? number[] : number;
declare type ufixed456x153<N = void> = N extends number ? number[] : number;
declare type ufixed456x154<N = void> = N extends number ? number[] : number;
declare type ufixed456x155<N = void> = N extends number ? number[] : number;
declare type ufixed456x156<N = void> = N extends number ? number[] : number;
declare type ufixed456x157<N = void> = N extends number ? number[] : number;
declare type ufixed456x158<N = void> = N extends number ? number[] : number;
declare type ufixed456x159<N = void> = N extends number ? number[] : number;
declare type ufixed456x160<N = void> = N extends number ? number[] : number;
declare type ufixed464x1<N = void> = N extends number ? number[] : number;
declare type ufixed464x2<N = void> = N extends number ? number[] : number;
declare type ufixed464x3<N = void> = N extends number ? number[] : number;
declare type ufixed464x4<N = void> = N extends number ? number[] : number;
declare type ufixed464x5<N = void> = N extends number ? number[] : number;
declare type ufixed464x6<N = void> = N extends number ? number[] : number;
declare type ufixed464x7<N = void> = N extends number ? number[] : number;
declare type ufixed464x8<N = void> = N extends number ? number[] : number;
declare type ufixed464x9<N = void> = N extends number ? number[] : number;
declare type ufixed464x10<N = void> = N extends number ? number[] : number;
declare type ufixed464x11<N = void> = N extends number ? number[] : number;
declare type ufixed464x12<N = void> = N extends number ? number[] : number;
declare type ufixed464x13<N = void> = N extends number ? number[] : number;
declare type ufixed464x14<N = void> = N extends number ? number[] : number;
declare type ufixed464x15<N = void> = N extends number ? number[] : number;
declare type ufixed464x16<N = void> = N extends number ? number[] : number;
declare type ufixed464x17<N = void> = N extends number ? number[] : number;
declare type ufixed464x18<N = void> = N extends number ? number[] : number;
declare type ufixed464x19<N = void> = N extends number ? number[] : number;
declare type ufixed464x20<N = void> = N extends number ? number[] : number;
declare type ufixed464x21<N = void> = N extends number ? number[] : number;
declare type ufixed464x22<N = void> = N extends number ? number[] : number;
declare type ufixed464x23<N = void> = N extends number ? number[] : number;
declare type ufixed464x24<N = void> = N extends number ? number[] : number;
declare type ufixed464x25<N = void> = N extends number ? number[] : number;
declare type ufixed464x26<N = void> = N extends number ? number[] : number;
declare type ufixed464x27<N = void> = N extends number ? number[] : number;
declare type ufixed464x28<N = void> = N extends number ? number[] : number;
declare type ufixed464x29<N = void> = N extends number ? number[] : number;
declare type ufixed464x30<N = void> = N extends number ? number[] : number;
declare type ufixed464x31<N = void> = N extends number ? number[] : number;
declare type ufixed464x32<N = void> = N extends number ? number[] : number;
declare type ufixed464x33<N = void> = N extends number ? number[] : number;
declare type ufixed464x34<N = void> = N extends number ? number[] : number;
declare type ufixed464x35<N = void> = N extends number ? number[] : number;
declare type ufixed464x36<N = void> = N extends number ? number[] : number;
declare type ufixed464x37<N = void> = N extends number ? number[] : number;
declare type ufixed464x38<N = void> = N extends number ? number[] : number;
declare type ufixed464x39<N = void> = N extends number ? number[] : number;
declare type ufixed464x40<N = void> = N extends number ? number[] : number;
declare type ufixed464x41<N = void> = N extends number ? number[] : number;
declare type ufixed464x42<N = void> = N extends number ? number[] : number;
declare type ufixed464x43<N = void> = N extends number ? number[] : number;
declare type ufixed464x44<N = void> = N extends number ? number[] : number;
declare type ufixed464x45<N = void> = N extends number ? number[] : number;
declare type ufixed464x46<N = void> = N extends number ? number[] : number;
declare type ufixed464x47<N = void> = N extends number ? number[] : number;
declare type ufixed464x48<N = void> = N extends number ? number[] : number;
declare type ufixed464x49<N = void> = N extends number ? number[] : number;
declare type ufixed464x50<N = void> = N extends number ? number[] : number;
declare type ufixed464x51<N = void> = N extends number ? number[] : number;
declare type ufixed464x52<N = void> = N extends number ? number[] : number;
declare type ufixed464x53<N = void> = N extends number ? number[] : number;
declare type ufixed464x54<N = void> = N extends number ? number[] : number;
declare type ufixed464x55<N = void> = N extends number ? number[] : number;
declare type ufixed464x56<N = void> = N extends number ? number[] : number;
declare type ufixed464x57<N = void> = N extends number ? number[] : number;
declare type ufixed464x58<N = void> = N extends number ? number[] : number;
declare type ufixed464x59<N = void> = N extends number ? number[] : number;
declare type ufixed464x60<N = void> = N extends number ? number[] : number;
declare type ufixed464x61<N = void> = N extends number ? number[] : number;
declare type ufixed464x62<N = void> = N extends number ? number[] : number;
declare type ufixed464x63<N = void> = N extends number ? number[] : number;
declare type ufixed464x64<N = void> = N extends number ? number[] : number;
declare type ufixed464x65<N = void> = N extends number ? number[] : number;
declare type ufixed464x66<N = void> = N extends number ? number[] : number;
declare type ufixed464x67<N = void> = N extends number ? number[] : number;
declare type ufixed464x68<N = void> = N extends number ? number[] : number;
declare type ufixed464x69<N = void> = N extends number ? number[] : number;
declare type ufixed464x70<N = void> = N extends number ? number[] : number;
declare type ufixed464x71<N = void> = N extends number ? number[] : number;
declare type ufixed464x72<N = void> = N extends number ? number[] : number;
declare type ufixed464x73<N = void> = N extends number ? number[] : number;
declare type ufixed464x74<N = void> = N extends number ? number[] : number;
declare type ufixed464x75<N = void> = N extends number ? number[] : number;
declare type ufixed464x76<N = void> = N extends number ? number[] : number;
declare type ufixed464x77<N = void> = N extends number ? number[] : number;
declare type ufixed464x78<N = void> = N extends number ? number[] : number;
declare type ufixed464x79<N = void> = N extends number ? number[] : number;
declare type ufixed464x80<N = void> = N extends number ? number[] : number;
declare type ufixed464x81<N = void> = N extends number ? number[] : number;
declare type ufixed464x82<N = void> = N extends number ? number[] : number;
declare type ufixed464x83<N = void> = N extends number ? number[] : number;
declare type ufixed464x84<N = void> = N extends number ? number[] : number;
declare type ufixed464x85<N = void> = N extends number ? number[] : number;
declare type ufixed464x86<N = void> = N extends number ? number[] : number;
declare type ufixed464x87<N = void> = N extends number ? number[] : number;
declare type ufixed464x88<N = void> = N extends number ? number[] : number;
declare type ufixed464x89<N = void> = N extends number ? number[] : number;
declare type ufixed464x90<N = void> = N extends number ? number[] : number;
declare type ufixed464x91<N = void> = N extends number ? number[] : number;
declare type ufixed464x92<N = void> = N extends number ? number[] : number;
declare type ufixed464x93<N = void> = N extends number ? number[] : number;
declare type ufixed464x94<N = void> = N extends number ? number[] : number;
declare type ufixed464x95<N = void> = N extends number ? number[] : number;
declare type ufixed464x96<N = void> = N extends number ? number[] : number;
declare type ufixed464x97<N = void> = N extends number ? number[] : number;
declare type ufixed464x98<N = void> = N extends number ? number[] : number;
declare type ufixed464x99<N = void> = N extends number ? number[] : number;
declare type ufixed464x100<N = void> = N extends number ? number[] : number;
declare type ufixed464x101<N = void> = N extends number ? number[] : number;
declare type ufixed464x102<N = void> = N extends number ? number[] : number;
declare type ufixed464x103<N = void> = N extends number ? number[] : number;
declare type ufixed464x104<N = void> = N extends number ? number[] : number;
declare type ufixed464x105<N = void> = N extends number ? number[] : number;
declare type ufixed464x106<N = void> = N extends number ? number[] : number;
declare type ufixed464x107<N = void> = N extends number ? number[] : number;
declare type ufixed464x108<N = void> = N extends number ? number[] : number;
declare type ufixed464x109<N = void> = N extends number ? number[] : number;
declare type ufixed464x110<N = void> = N extends number ? number[] : number;
declare type ufixed464x111<N = void> = N extends number ? number[] : number;
declare type ufixed464x112<N = void> = N extends number ? number[] : number;
declare type ufixed464x113<N = void> = N extends number ? number[] : number;
declare type ufixed464x114<N = void> = N extends number ? number[] : number;
declare type ufixed464x115<N = void> = N extends number ? number[] : number;
declare type ufixed464x116<N = void> = N extends number ? number[] : number;
declare type ufixed464x117<N = void> = N extends number ? number[] : number;
declare type ufixed464x118<N = void> = N extends number ? number[] : number;
declare type ufixed464x119<N = void> = N extends number ? number[] : number;
declare type ufixed464x120<N = void> = N extends number ? number[] : number;
declare type ufixed464x121<N = void> = N extends number ? number[] : number;
declare type ufixed464x122<N = void> = N extends number ? number[] : number;
declare type ufixed464x123<N = void> = N extends number ? number[] : number;
declare type ufixed464x124<N = void> = N extends number ? number[] : number;
declare type ufixed464x125<N = void> = N extends number ? number[] : number;
declare type ufixed464x126<N = void> = N extends number ? number[] : number;
declare type ufixed464x127<N = void> = N extends number ? number[] : number;
declare type ufixed464x128<N = void> = N extends number ? number[] : number;
declare type ufixed464x129<N = void> = N extends number ? number[] : number;
declare type ufixed464x130<N = void> = N extends number ? number[] : number;
declare type ufixed464x131<N = void> = N extends number ? number[] : number;
declare type ufixed464x132<N = void> = N extends number ? number[] : number;
declare type ufixed464x133<N = void> = N extends number ? number[] : number;
declare type ufixed464x134<N = void> = N extends number ? number[] : number;
declare type ufixed464x135<N = void> = N extends number ? number[] : number;
declare type ufixed464x136<N = void> = N extends number ? number[] : number;
declare type ufixed464x137<N = void> = N extends number ? number[] : number;
declare type ufixed464x138<N = void> = N extends number ? number[] : number;
declare type ufixed464x139<N = void> = N extends number ? number[] : number;
declare type ufixed464x140<N = void> = N extends number ? number[] : number;
declare type ufixed464x141<N = void> = N extends number ? number[] : number;
declare type ufixed464x142<N = void> = N extends number ? number[] : number;
declare type ufixed464x143<N = void> = N extends number ? number[] : number;
declare type ufixed464x144<N = void> = N extends number ? number[] : number;
declare type ufixed464x145<N = void> = N extends number ? number[] : number;
declare type ufixed464x146<N = void> = N extends number ? number[] : number;
declare type ufixed464x147<N = void> = N extends number ? number[] : number;
declare type ufixed464x148<N = void> = N extends number ? number[] : number;
declare type ufixed464x149<N = void> = N extends number ? number[] : number;
declare type ufixed464x150<N = void> = N extends number ? number[] : number;
declare type ufixed464x151<N = void> = N extends number ? number[] : number;
declare type ufixed464x152<N = void> = N extends number ? number[] : number;
declare type ufixed464x153<N = void> = N extends number ? number[] : number;
declare type ufixed464x154<N = void> = N extends number ? number[] : number;
declare type ufixed464x155<N = void> = N extends number ? number[] : number;
declare type ufixed464x156<N = void> = N extends number ? number[] : number;
declare type ufixed464x157<N = void> = N extends number ? number[] : number;
declare type ufixed464x158<N = void> = N extends number ? number[] : number;
declare type ufixed464x159<N = void> = N extends number ? number[] : number;
declare type ufixed464x160<N = void> = N extends number ? number[] : number;
declare type ufixed472x1<N = void> = N extends number ? number[] : number;
declare type ufixed472x2<N = void> = N extends number ? number[] : number;
declare type ufixed472x3<N = void> = N extends number ? number[] : number;
declare type ufixed472x4<N = void> = N extends number ? number[] : number;
declare type ufixed472x5<N = void> = N extends number ? number[] : number;
declare type ufixed472x6<N = void> = N extends number ? number[] : number;
declare type ufixed472x7<N = void> = N extends number ? number[] : number;
declare type ufixed472x8<N = void> = N extends number ? number[] : number;
declare type ufixed472x9<N = void> = N extends number ? number[] : number;
declare type ufixed472x10<N = void> = N extends number ? number[] : number;
declare type ufixed472x11<N = void> = N extends number ? number[] : number;
declare type ufixed472x12<N = void> = N extends number ? number[] : number;
declare type ufixed472x13<N = void> = N extends number ? number[] : number;
declare type ufixed472x14<N = void> = N extends number ? number[] : number;
declare type ufixed472x15<N = void> = N extends number ? number[] : number;
declare type ufixed472x16<N = void> = N extends number ? number[] : number;
declare type ufixed472x17<N = void> = N extends number ? number[] : number;
declare type ufixed472x18<N = void> = N extends number ? number[] : number;
declare type ufixed472x19<N = void> = N extends number ? number[] : number;
declare type ufixed472x20<N = void> = N extends number ? number[] : number;
declare type ufixed472x21<N = void> = N extends number ? number[] : number;
declare type ufixed472x22<N = void> = N extends number ? number[] : number;
declare type ufixed472x23<N = void> = N extends number ? number[] : number;
declare type ufixed472x24<N = void> = N extends number ? number[] : number;
declare type ufixed472x25<N = void> = N extends number ? number[] : number;
declare type ufixed472x26<N = void> = N extends number ? number[] : number;
declare type ufixed472x27<N = void> = N extends number ? number[] : number;
declare type ufixed472x28<N = void> = N extends number ? number[] : number;
declare type ufixed472x29<N = void> = N extends number ? number[] : number;
declare type ufixed472x30<N = void> = N extends number ? number[] : number;
declare type ufixed472x31<N = void> = N extends number ? number[] : number;
declare type ufixed472x32<N = void> = N extends number ? number[] : number;
declare type ufixed472x33<N = void> = N extends number ? number[] : number;
declare type ufixed472x34<N = void> = N extends number ? number[] : number;
declare type ufixed472x35<N = void> = N extends number ? number[] : number;
declare type ufixed472x36<N = void> = N extends number ? number[] : number;
declare type ufixed472x37<N = void> = N extends number ? number[] : number;
declare type ufixed472x38<N = void> = N extends number ? number[] : number;
declare type ufixed472x39<N = void> = N extends number ? number[] : number;
declare type ufixed472x40<N = void> = N extends number ? number[] : number;
declare type ufixed472x41<N = void> = N extends number ? number[] : number;
declare type ufixed472x42<N = void> = N extends number ? number[] : number;
declare type ufixed472x43<N = void> = N extends number ? number[] : number;
declare type ufixed472x44<N = void> = N extends number ? number[] : number;
declare type ufixed472x45<N = void> = N extends number ? number[] : number;
declare type ufixed472x46<N = void> = N extends number ? number[] : number;
declare type ufixed472x47<N = void> = N extends number ? number[] : number;
declare type ufixed472x48<N = void> = N extends number ? number[] : number;
declare type ufixed472x49<N = void> = N extends number ? number[] : number;
declare type ufixed472x50<N = void> = N extends number ? number[] : number;
declare type ufixed472x51<N = void> = N extends number ? number[] : number;
declare type ufixed472x52<N = void> = N extends number ? number[] : number;
declare type ufixed472x53<N = void> = N extends number ? number[] : number;
declare type ufixed472x54<N = void> = N extends number ? number[] : number;
declare type ufixed472x55<N = void> = N extends number ? number[] : number;
declare type ufixed472x56<N = void> = N extends number ? number[] : number;
declare type ufixed472x57<N = void> = N extends number ? number[] : number;
declare type ufixed472x58<N = void> = N extends number ? number[] : number;
declare type ufixed472x59<N = void> = N extends number ? number[] : number;
declare type ufixed472x60<N = void> = N extends number ? number[] : number;
declare type ufixed472x61<N = void> = N extends number ? number[] : number;
declare type ufixed472x62<N = void> = N extends number ? number[] : number;
declare type ufixed472x63<N = void> = N extends number ? number[] : number;
declare type ufixed472x64<N = void> = N extends number ? number[] : number;
declare type ufixed472x65<N = void> = N extends number ? number[] : number;
declare type ufixed472x66<N = void> = N extends number ? number[] : number;
declare type ufixed472x67<N = void> = N extends number ? number[] : number;
declare type ufixed472x68<N = void> = N extends number ? number[] : number;
declare type ufixed472x69<N = void> = N extends number ? number[] : number;
declare type ufixed472x70<N = void> = N extends number ? number[] : number;
declare type ufixed472x71<N = void> = N extends number ? number[] : number;
declare type ufixed472x72<N = void> = N extends number ? number[] : number;
declare type ufixed472x73<N = void> = N extends number ? number[] : number;
declare type ufixed472x74<N = void> = N extends number ? number[] : number;
declare type ufixed472x75<N = void> = N extends number ? number[] : number;
declare type ufixed472x76<N = void> = N extends number ? number[] : number;
declare type ufixed472x77<N = void> = N extends number ? number[] : number;
declare type ufixed472x78<N = void> = N extends number ? number[] : number;
declare type ufixed472x79<N = void> = N extends number ? number[] : number;
declare type ufixed472x80<N = void> = N extends number ? number[] : number;
declare type ufixed472x81<N = void> = N extends number ? number[] : number;
declare type ufixed472x82<N = void> = N extends number ? number[] : number;
declare type ufixed472x83<N = void> = N extends number ? number[] : number;
declare type ufixed472x84<N = void> = N extends number ? number[] : number;
declare type ufixed472x85<N = void> = N extends number ? number[] : number;
declare type ufixed472x86<N = void> = N extends number ? number[] : number;
declare type ufixed472x87<N = void> = N extends number ? number[] : number;
declare type ufixed472x88<N = void> = N extends number ? number[] : number;
declare type ufixed472x89<N = void> = N extends number ? number[] : number;
declare type ufixed472x90<N = void> = N extends number ? number[] : number;
declare type ufixed472x91<N = void> = N extends number ? number[] : number;
declare type ufixed472x92<N = void> = N extends number ? number[] : number;
declare type ufixed472x93<N = void> = N extends number ? number[] : number;
declare type ufixed472x94<N = void> = N extends number ? number[] : number;
declare type ufixed472x95<N = void> = N extends number ? number[] : number;
declare type ufixed472x96<N = void> = N extends number ? number[] : number;
declare type ufixed472x97<N = void> = N extends number ? number[] : number;
declare type ufixed472x98<N = void> = N extends number ? number[] : number;
declare type ufixed472x99<N = void> = N extends number ? number[] : number;
declare type ufixed472x100<N = void> = N extends number ? number[] : number;
declare type ufixed472x101<N = void> = N extends number ? number[] : number;
declare type ufixed472x102<N = void> = N extends number ? number[] : number;
declare type ufixed472x103<N = void> = N extends number ? number[] : number;
declare type ufixed472x104<N = void> = N extends number ? number[] : number;
declare type ufixed472x105<N = void> = N extends number ? number[] : number;
declare type ufixed472x106<N = void> = N extends number ? number[] : number;
declare type ufixed472x107<N = void> = N extends number ? number[] : number;
declare type ufixed472x108<N = void> = N extends number ? number[] : number;
declare type ufixed472x109<N = void> = N extends number ? number[] : number;
declare type ufixed472x110<N = void> = N extends number ? number[] : number;
declare type ufixed472x111<N = void> = N extends number ? number[] : number;
declare type ufixed472x112<N = void> = N extends number ? number[] : number;
declare type ufixed472x113<N = void> = N extends number ? number[] : number;
declare type ufixed472x114<N = void> = N extends number ? number[] : number;
declare type ufixed472x115<N = void> = N extends number ? number[] : number;
declare type ufixed472x116<N = void> = N extends number ? number[] : number;
declare type ufixed472x117<N = void> = N extends number ? number[] : number;
declare type ufixed472x118<N = void> = N extends number ? number[] : number;
declare type ufixed472x119<N = void> = N extends number ? number[] : number;
declare type ufixed472x120<N = void> = N extends number ? number[] : number;
declare type ufixed472x121<N = void> = N extends number ? number[] : number;
declare type ufixed472x122<N = void> = N extends number ? number[] : number;
declare type ufixed472x123<N = void> = N extends number ? number[] : number;
declare type ufixed472x124<N = void> = N extends number ? number[] : number;
declare type ufixed472x125<N = void> = N extends number ? number[] : number;
declare type ufixed472x126<N = void> = N extends number ? number[] : number;
declare type ufixed472x127<N = void> = N extends number ? number[] : number;
declare type ufixed472x128<N = void> = N extends number ? number[] : number;
declare type ufixed472x129<N = void> = N extends number ? number[] : number;
declare type ufixed472x130<N = void> = N extends number ? number[] : number;
declare type ufixed472x131<N = void> = N extends number ? number[] : number;
declare type ufixed472x132<N = void> = N extends number ? number[] : number;
declare type ufixed472x133<N = void> = N extends number ? number[] : number;
declare type ufixed472x134<N = void> = N extends number ? number[] : number;
declare type ufixed472x135<N = void> = N extends number ? number[] : number;
declare type ufixed472x136<N = void> = N extends number ? number[] : number;
declare type ufixed472x137<N = void> = N extends number ? number[] : number;
declare type ufixed472x138<N = void> = N extends number ? number[] : number;
declare type ufixed472x139<N = void> = N extends number ? number[] : number;
declare type ufixed472x140<N = void> = N extends number ? number[] : number;
declare type ufixed472x141<N = void> = N extends number ? number[] : number;
declare type ufixed472x142<N = void> = N extends number ? number[] : number;
declare type ufixed472x143<N = void> = N extends number ? number[] : number;
declare type ufixed472x144<N = void> = N extends number ? number[] : number;
declare type ufixed472x145<N = void> = N extends number ? number[] : number;
declare type ufixed472x146<N = void> = N extends number ? number[] : number;
declare type ufixed472x147<N = void> = N extends number ? number[] : number;
declare type ufixed472x148<N = void> = N extends number ? number[] : number;
declare type ufixed472x149<N = void> = N extends number ? number[] : number;
declare type ufixed472x150<N = void> = N extends number ? number[] : number;
declare type ufixed472x151<N = void> = N extends number ? number[] : number;
declare type ufixed472x152<N = void> = N extends number ? number[] : number;
declare type ufixed472x153<N = void> = N extends number ? number[] : number;
declare type ufixed472x154<N = void> = N extends number ? number[] : number;
declare type ufixed472x155<N = void> = N extends number ? number[] : number;
declare type ufixed472x156<N = void> = N extends number ? number[] : number;
declare type ufixed472x157<N = void> = N extends number ? number[] : number;
declare type ufixed472x158<N = void> = N extends number ? number[] : number;
declare type ufixed472x159<N = void> = N extends number ? number[] : number;
declare type ufixed472x160<N = void> = N extends number ? number[] : number;
declare type ufixed480x1<N = void> = N extends number ? number[] : number;
declare type ufixed480x2<N = void> = N extends number ? number[] : number;
declare type ufixed480x3<N = void> = N extends number ? number[] : number;
declare type ufixed480x4<N = void> = N extends number ? number[] : number;
declare type ufixed480x5<N = void> = N extends number ? number[] : number;
declare type ufixed480x6<N = void> = N extends number ? number[] : number;
declare type ufixed480x7<N = void> = N extends number ? number[] : number;
declare type ufixed480x8<N = void> = N extends number ? number[] : number;
declare type ufixed480x9<N = void> = N extends number ? number[] : number;
declare type ufixed480x10<N = void> = N extends number ? number[] : number;
declare type ufixed480x11<N = void> = N extends number ? number[] : number;
declare type ufixed480x12<N = void> = N extends number ? number[] : number;
declare type ufixed480x13<N = void> = N extends number ? number[] : number;
declare type ufixed480x14<N = void> = N extends number ? number[] : number;
declare type ufixed480x15<N = void> = N extends number ? number[] : number;
declare type ufixed480x16<N = void> = N extends number ? number[] : number;
declare type ufixed480x17<N = void> = N extends number ? number[] : number;
declare type ufixed480x18<N = void> = N extends number ? number[] : number;
declare type ufixed480x19<N = void> = N extends number ? number[] : number;
declare type ufixed480x20<N = void> = N extends number ? number[] : number;
declare type ufixed480x21<N = void> = N extends number ? number[] : number;
declare type ufixed480x22<N = void> = N extends number ? number[] : number;
declare type ufixed480x23<N = void> = N extends number ? number[] : number;
declare type ufixed480x24<N = void> = N extends number ? number[] : number;
declare type ufixed480x25<N = void> = N extends number ? number[] : number;
declare type ufixed480x26<N = void> = N extends number ? number[] : number;
declare type ufixed480x27<N = void> = N extends number ? number[] : number;
declare type ufixed480x28<N = void> = N extends number ? number[] : number;
declare type ufixed480x29<N = void> = N extends number ? number[] : number;
declare type ufixed480x30<N = void> = N extends number ? number[] : number;
declare type ufixed480x31<N = void> = N extends number ? number[] : number;
declare type ufixed480x32<N = void> = N extends number ? number[] : number;
declare type ufixed480x33<N = void> = N extends number ? number[] : number;
declare type ufixed480x34<N = void> = N extends number ? number[] : number;
declare type ufixed480x35<N = void> = N extends number ? number[] : number;
declare type ufixed480x36<N = void> = N extends number ? number[] : number;
declare type ufixed480x37<N = void> = N extends number ? number[] : number;
declare type ufixed480x38<N = void> = N extends number ? number[] : number;
declare type ufixed480x39<N = void> = N extends number ? number[] : number;
declare type ufixed480x40<N = void> = N extends number ? number[] : number;
declare type ufixed480x41<N = void> = N extends number ? number[] : number;
declare type ufixed480x42<N = void> = N extends number ? number[] : number;
declare type ufixed480x43<N = void> = N extends number ? number[] : number;
declare type ufixed480x44<N = void> = N extends number ? number[] : number;
declare type ufixed480x45<N = void> = N extends number ? number[] : number;
declare type ufixed480x46<N = void> = N extends number ? number[] : number;
declare type ufixed480x47<N = void> = N extends number ? number[] : number;
declare type ufixed480x48<N = void> = N extends number ? number[] : number;
declare type ufixed480x49<N = void> = N extends number ? number[] : number;
declare type ufixed480x50<N = void> = N extends number ? number[] : number;
declare type ufixed480x51<N = void> = N extends number ? number[] : number;
declare type ufixed480x52<N = void> = N extends number ? number[] : number;
declare type ufixed480x53<N = void> = N extends number ? number[] : number;
declare type ufixed480x54<N = void> = N extends number ? number[] : number;
declare type ufixed480x55<N = void> = N extends number ? number[] : number;
declare type ufixed480x56<N = void> = N extends number ? number[] : number;
declare type ufixed480x57<N = void> = N extends number ? number[] : number;
declare type ufixed480x58<N = void> = N extends number ? number[] : number;
declare type ufixed480x59<N = void> = N extends number ? number[] : number;
declare type ufixed480x60<N = void> = N extends number ? number[] : number;
declare type ufixed480x61<N = void> = N extends number ? number[] : number;
declare type ufixed480x62<N = void> = N extends number ? number[] : number;
declare type ufixed480x63<N = void> = N extends number ? number[] : number;
declare type ufixed480x64<N = void> = N extends number ? number[] : number;
declare type ufixed480x65<N = void> = N extends number ? number[] : number;
declare type ufixed480x66<N = void> = N extends number ? number[] : number;
declare type ufixed480x67<N = void> = N extends number ? number[] : number;
declare type ufixed480x68<N = void> = N extends number ? number[] : number;
declare type ufixed480x69<N = void> = N extends number ? number[] : number;
declare type ufixed480x70<N = void> = N extends number ? number[] : number;
declare type ufixed480x71<N = void> = N extends number ? number[] : number;
declare type ufixed480x72<N = void> = N extends number ? number[] : number;
declare type ufixed480x73<N = void> = N extends number ? number[] : number;
declare type ufixed480x74<N = void> = N extends number ? number[] : number;
declare type ufixed480x75<N = void> = N extends number ? number[] : number;
declare type ufixed480x76<N = void> = N extends number ? number[] : number;
declare type ufixed480x77<N = void> = N extends number ? number[] : number;
declare type ufixed480x78<N = void> = N extends number ? number[] : number;
declare type ufixed480x79<N = void> = N extends number ? number[] : number;
declare type ufixed480x80<N = void> = N extends number ? number[] : number;
declare type ufixed480x81<N = void> = N extends number ? number[] : number;
declare type ufixed480x82<N = void> = N extends number ? number[] : number;
declare type ufixed480x83<N = void> = N extends number ? number[] : number;
declare type ufixed480x84<N = void> = N extends number ? number[] : number;
declare type ufixed480x85<N = void> = N extends number ? number[] : number;
declare type ufixed480x86<N = void> = N extends number ? number[] : number;
declare type ufixed480x87<N = void> = N extends number ? number[] : number;
declare type ufixed480x88<N = void> = N extends number ? number[] : number;
declare type ufixed480x89<N = void> = N extends number ? number[] : number;
declare type ufixed480x90<N = void> = N extends number ? number[] : number;
declare type ufixed480x91<N = void> = N extends number ? number[] : number;
declare type ufixed480x92<N = void> = N extends number ? number[] : number;
declare type ufixed480x93<N = void> = N extends number ? number[] : number;
declare type ufixed480x94<N = void> = N extends number ? number[] : number;
declare type ufixed480x95<N = void> = N extends number ? number[] : number;
declare type ufixed480x96<N = void> = N extends number ? number[] : number;
declare type ufixed480x97<N = void> = N extends number ? number[] : number;
declare type ufixed480x98<N = void> = N extends number ? number[] : number;
declare type ufixed480x99<N = void> = N extends number ? number[] : number;
declare type ufixed480x100<N = void> = N extends number ? number[] : number;
declare type ufixed480x101<N = void> = N extends number ? number[] : number;
declare type ufixed480x102<N = void> = N extends number ? number[] : number;
declare type ufixed480x103<N = void> = N extends number ? number[] : number;
declare type ufixed480x104<N = void> = N extends number ? number[] : number;
declare type ufixed480x105<N = void> = N extends number ? number[] : number;
declare type ufixed480x106<N = void> = N extends number ? number[] : number;
declare type ufixed480x107<N = void> = N extends number ? number[] : number;
declare type ufixed480x108<N = void> = N extends number ? number[] : number;
declare type ufixed480x109<N = void> = N extends number ? number[] : number;
declare type ufixed480x110<N = void> = N extends number ? number[] : number;
declare type ufixed480x111<N = void> = N extends number ? number[] : number;
declare type ufixed480x112<N = void> = N extends number ? number[] : number;
declare type ufixed480x113<N = void> = N extends number ? number[] : number;
declare type ufixed480x114<N = void> = N extends number ? number[] : number;
declare type ufixed480x115<N = void> = N extends number ? number[] : number;
declare type ufixed480x116<N = void> = N extends number ? number[] : number;
declare type ufixed480x117<N = void> = N extends number ? number[] : number;
declare type ufixed480x118<N = void> = N extends number ? number[] : number;
declare type ufixed480x119<N = void> = N extends number ? number[] : number;
declare type ufixed480x120<N = void> = N extends number ? number[] : number;
declare type ufixed480x121<N = void> = N extends number ? number[] : number;
declare type ufixed480x122<N = void> = N extends number ? number[] : number;
declare type ufixed480x123<N = void> = N extends number ? number[] : number;
declare type ufixed480x124<N = void> = N extends number ? number[] : number;
declare type ufixed480x125<N = void> = N extends number ? number[] : number;
declare type ufixed480x126<N = void> = N extends number ? number[] : number;
declare type ufixed480x127<N = void> = N extends number ? number[] : number;
declare type ufixed480x128<N = void> = N extends number ? number[] : number;
declare type ufixed480x129<N = void> = N extends number ? number[] : number;
declare type ufixed480x130<N = void> = N extends number ? number[] : number;
declare type ufixed480x131<N = void> = N extends number ? number[] : number;
declare type ufixed480x132<N = void> = N extends number ? number[] : number;
declare type ufixed480x133<N = void> = N extends number ? number[] : number;
declare type ufixed480x134<N = void> = N extends number ? number[] : number;
declare type ufixed480x135<N = void> = N extends number ? number[] : number;
declare type ufixed480x136<N = void> = N extends number ? number[] : number;
declare type ufixed480x137<N = void> = N extends number ? number[] : number;
declare type ufixed480x138<N = void> = N extends number ? number[] : number;
declare type ufixed480x139<N = void> = N extends number ? number[] : number;
declare type ufixed480x140<N = void> = N extends number ? number[] : number;
declare type ufixed480x141<N = void> = N extends number ? number[] : number;
declare type ufixed480x142<N = void> = N extends number ? number[] : number;
declare type ufixed480x143<N = void> = N extends number ? number[] : number;
declare type ufixed480x144<N = void> = N extends number ? number[] : number;
declare type ufixed480x145<N = void> = N extends number ? number[] : number;
declare type ufixed480x146<N = void> = N extends number ? number[] : number;
declare type ufixed480x147<N = void> = N extends number ? number[] : number;
declare type ufixed480x148<N = void> = N extends number ? number[] : number;
declare type ufixed480x149<N = void> = N extends number ? number[] : number;
declare type ufixed480x150<N = void> = N extends number ? number[] : number;
declare type ufixed480x151<N = void> = N extends number ? number[] : number;
declare type ufixed480x152<N = void> = N extends number ? number[] : number;
declare type ufixed480x153<N = void> = N extends number ? number[] : number;
declare type ufixed480x154<N = void> = N extends number ? number[] : number;
declare type ufixed480x155<N = void> = N extends number ? number[] : number;
declare type ufixed480x156<N = void> = N extends number ? number[] : number;
declare type ufixed480x157<N = void> = N extends number ? number[] : number;
declare type ufixed480x158<N = void> = N extends number ? number[] : number;
declare type ufixed480x159<N = void> = N extends number ? number[] : number;
declare type ufixed480x160<N = void> = N extends number ? number[] : number;
declare type ufixed488x1<N = void> = N extends number ? number[] : number;
declare type ufixed488x2<N = void> = N extends number ? number[] : number;
declare type ufixed488x3<N = void> = N extends number ? number[] : number;
declare type ufixed488x4<N = void> = N extends number ? number[] : number;
declare type ufixed488x5<N = void> = N extends number ? number[] : number;
declare type ufixed488x6<N = void> = N extends number ? number[] : number;
declare type ufixed488x7<N = void> = N extends number ? number[] : number;
declare type ufixed488x8<N = void> = N extends number ? number[] : number;
declare type ufixed488x9<N = void> = N extends number ? number[] : number;
declare type ufixed488x10<N = void> = N extends number ? number[] : number;
declare type ufixed488x11<N = void> = N extends number ? number[] : number;
declare type ufixed488x12<N = void> = N extends number ? number[] : number;
declare type ufixed488x13<N = void> = N extends number ? number[] : number;
declare type ufixed488x14<N = void> = N extends number ? number[] : number;
declare type ufixed488x15<N = void> = N extends number ? number[] : number;
declare type ufixed488x16<N = void> = N extends number ? number[] : number;
declare type ufixed488x17<N = void> = N extends number ? number[] : number;
declare type ufixed488x18<N = void> = N extends number ? number[] : number;
declare type ufixed488x19<N = void> = N extends number ? number[] : number;
declare type ufixed488x20<N = void> = N extends number ? number[] : number;
declare type ufixed488x21<N = void> = N extends number ? number[] : number;
declare type ufixed488x22<N = void> = N extends number ? number[] : number;
declare type ufixed488x23<N = void> = N extends number ? number[] : number;
declare type ufixed488x24<N = void> = N extends number ? number[] : number;
declare type ufixed488x25<N = void> = N extends number ? number[] : number;
declare type ufixed488x26<N = void> = N extends number ? number[] : number;
declare type ufixed488x27<N = void> = N extends number ? number[] : number;
declare type ufixed488x28<N = void> = N extends number ? number[] : number;
declare type ufixed488x29<N = void> = N extends number ? number[] : number;
declare type ufixed488x30<N = void> = N extends number ? number[] : number;
declare type ufixed488x31<N = void> = N extends number ? number[] : number;
declare type ufixed488x32<N = void> = N extends number ? number[] : number;
declare type ufixed488x33<N = void> = N extends number ? number[] : number;
declare type ufixed488x34<N = void> = N extends number ? number[] : number;
declare type ufixed488x35<N = void> = N extends number ? number[] : number;
declare type ufixed488x36<N = void> = N extends number ? number[] : number;
declare type ufixed488x37<N = void> = N extends number ? number[] : number;
declare type ufixed488x38<N = void> = N extends number ? number[] : number;
declare type ufixed488x39<N = void> = N extends number ? number[] : number;
declare type ufixed488x40<N = void> = N extends number ? number[] : number;
declare type ufixed488x41<N = void> = N extends number ? number[] : number;
declare type ufixed488x42<N = void> = N extends number ? number[] : number;
declare type ufixed488x43<N = void> = N extends number ? number[] : number;
declare type ufixed488x44<N = void> = N extends number ? number[] : number;
declare type ufixed488x45<N = void> = N extends number ? number[] : number;
declare type ufixed488x46<N = void> = N extends number ? number[] : number;
declare type ufixed488x47<N = void> = N extends number ? number[] : number;
declare type ufixed488x48<N = void> = N extends number ? number[] : number;
declare type ufixed488x49<N = void> = N extends number ? number[] : number;
declare type ufixed488x50<N = void> = N extends number ? number[] : number;
declare type ufixed488x51<N = void> = N extends number ? number[] : number;
declare type ufixed488x52<N = void> = N extends number ? number[] : number;
declare type ufixed488x53<N = void> = N extends number ? number[] : number;
declare type ufixed488x54<N = void> = N extends number ? number[] : number;
declare type ufixed488x55<N = void> = N extends number ? number[] : number;
declare type ufixed488x56<N = void> = N extends number ? number[] : number;
declare type ufixed488x57<N = void> = N extends number ? number[] : number;
declare type ufixed488x58<N = void> = N extends number ? number[] : number;
declare type ufixed488x59<N = void> = N extends number ? number[] : number;
declare type ufixed488x60<N = void> = N extends number ? number[] : number;
declare type ufixed488x61<N = void> = N extends number ? number[] : number;
declare type ufixed488x62<N = void> = N extends number ? number[] : number;
declare type ufixed488x63<N = void> = N extends number ? number[] : number;
declare type ufixed488x64<N = void> = N extends number ? number[] : number;
declare type ufixed488x65<N = void> = N extends number ? number[] : number;
declare type ufixed488x66<N = void> = N extends number ? number[] : number;
declare type ufixed488x67<N = void> = N extends number ? number[] : number;
declare type ufixed488x68<N = void> = N extends number ? number[] : number;
declare type ufixed488x69<N = void> = N extends number ? number[] : number;
declare type ufixed488x70<N = void> = N extends number ? number[] : number;
declare type ufixed488x71<N = void> = N extends number ? number[] : number;
declare type ufixed488x72<N = void> = N extends number ? number[] : number;
declare type ufixed488x73<N = void> = N extends number ? number[] : number;
declare type ufixed488x74<N = void> = N extends number ? number[] : number;
declare type ufixed488x75<N = void> = N extends number ? number[] : number;
declare type ufixed488x76<N = void> = N extends number ? number[] : number;
declare type ufixed488x77<N = void> = N extends number ? number[] : number;
declare type ufixed488x78<N = void> = N extends number ? number[] : number;
declare type ufixed488x79<N = void> = N extends number ? number[] : number;
declare type ufixed488x80<N = void> = N extends number ? number[] : number;
declare type ufixed488x81<N = void> = N extends number ? number[] : number;
declare type ufixed488x82<N = void> = N extends number ? number[] : number;
declare type ufixed488x83<N = void> = N extends number ? number[] : number;
declare type ufixed488x84<N = void> = N extends number ? number[] : number;
declare type ufixed488x85<N = void> = N extends number ? number[] : number;
declare type ufixed488x86<N = void> = N extends number ? number[] : number;
declare type ufixed488x87<N = void> = N extends number ? number[] : number;
declare type ufixed488x88<N = void> = N extends number ? number[] : number;
declare type ufixed488x89<N = void> = N extends number ? number[] : number;
declare type ufixed488x90<N = void> = N extends number ? number[] : number;
declare type ufixed488x91<N = void> = N extends number ? number[] : number;
declare type ufixed488x92<N = void> = N extends number ? number[] : number;
declare type ufixed488x93<N = void> = N extends number ? number[] : number;
declare type ufixed488x94<N = void> = N extends number ? number[] : number;
declare type ufixed488x95<N = void> = N extends number ? number[] : number;
declare type ufixed488x96<N = void> = N extends number ? number[] : number;
declare type ufixed488x97<N = void> = N extends number ? number[] : number;
declare type ufixed488x98<N = void> = N extends number ? number[] : number;
declare type ufixed488x99<N = void> = N extends number ? number[] : number;
declare type ufixed488x100<N = void> = N extends number ? number[] : number;
declare type ufixed488x101<N = void> = N extends number ? number[] : number;
declare type ufixed488x102<N = void> = N extends number ? number[] : number;
declare type ufixed488x103<N = void> = N extends number ? number[] : number;
declare type ufixed488x104<N = void> = N extends number ? number[] : number;
declare type ufixed488x105<N = void> = N extends number ? number[] : number;
declare type ufixed488x106<N = void> = N extends number ? number[] : number;
declare type ufixed488x107<N = void> = N extends number ? number[] : number;
declare type ufixed488x108<N = void> = N extends number ? number[] : number;
declare type ufixed488x109<N = void> = N extends number ? number[] : number;
declare type ufixed488x110<N = void> = N extends number ? number[] : number;
declare type ufixed488x111<N = void> = N extends number ? number[] : number;
declare type ufixed488x112<N = void> = N extends number ? number[] : number;
declare type ufixed488x113<N = void> = N extends number ? number[] : number;
declare type ufixed488x114<N = void> = N extends number ? number[] : number;
declare type ufixed488x115<N = void> = N extends number ? number[] : number;
declare type ufixed488x116<N = void> = N extends number ? number[] : number;
declare type ufixed488x117<N = void> = N extends number ? number[] : number;
declare type ufixed488x118<N = void> = N extends number ? number[] : number;
declare type ufixed488x119<N = void> = N extends number ? number[] : number;
declare type ufixed488x120<N = void> = N extends number ? number[] : number;
declare type ufixed488x121<N = void> = N extends number ? number[] : number;
declare type ufixed488x122<N = void> = N extends number ? number[] : number;
declare type ufixed488x123<N = void> = N extends number ? number[] : number;
declare type ufixed488x124<N = void> = N extends number ? number[] : number;
declare type ufixed488x125<N = void> = N extends number ? number[] : number;
declare type ufixed488x126<N = void> = N extends number ? number[] : number;
declare type ufixed488x127<N = void> = N extends number ? number[] : number;
declare type ufixed488x128<N = void> = N extends number ? number[] : number;
declare type ufixed488x129<N = void> = N extends number ? number[] : number;
declare type ufixed488x130<N = void> = N extends number ? number[] : number;
declare type ufixed488x131<N = void> = N extends number ? number[] : number;
declare type ufixed488x132<N = void> = N extends number ? number[] : number;
declare type ufixed488x133<N = void> = N extends number ? number[] : number;
declare type ufixed488x134<N = void> = N extends number ? number[] : number;
declare type ufixed488x135<N = void> = N extends number ? number[] : number;
declare type ufixed488x136<N = void> = N extends number ? number[] : number;
declare type ufixed488x137<N = void> = N extends number ? number[] : number;
declare type ufixed488x138<N = void> = N extends number ? number[] : number;
declare type ufixed488x139<N = void> = N extends number ? number[] : number;
declare type ufixed488x140<N = void> = N extends number ? number[] : number;
declare type ufixed488x141<N = void> = N extends number ? number[] : number;
declare type ufixed488x142<N = void> = N extends number ? number[] : number;
declare type ufixed488x143<N = void> = N extends number ? number[] : number;
declare type ufixed488x144<N = void> = N extends number ? number[] : number;
declare type ufixed488x145<N = void> = N extends number ? number[] : number;
declare type ufixed488x146<N = void> = N extends number ? number[] : number;
declare type ufixed488x147<N = void> = N extends number ? number[] : number;
declare type ufixed488x148<N = void> = N extends number ? number[] : number;
declare type ufixed488x149<N = void> = N extends number ? number[] : number;
declare type ufixed488x150<N = void> = N extends number ? number[] : number;
declare type ufixed488x151<N = void> = N extends number ? number[] : number;
declare type ufixed488x152<N = void> = N extends number ? number[] : number;
declare type ufixed488x153<N = void> = N extends number ? number[] : number;
declare type ufixed488x154<N = void> = N extends number ? number[] : number;
declare type ufixed488x155<N = void> = N extends number ? number[] : number;
declare type ufixed488x156<N = void> = N extends number ? number[] : number;
declare type ufixed488x157<N = void> = N extends number ? number[] : number;
declare type ufixed488x158<N = void> = N extends number ? number[] : number;
declare type ufixed488x159<N = void> = N extends number ? number[] : number;
declare type ufixed488x160<N = void> = N extends number ? number[] : number;
declare type ufixed496x1<N = void> = N extends number ? number[] : number;
declare type ufixed496x2<N = void> = N extends number ? number[] : number;
declare type ufixed496x3<N = void> = N extends number ? number[] : number;
declare type ufixed496x4<N = void> = N extends number ? number[] : number;
declare type ufixed496x5<N = void> = N extends number ? number[] : number;
declare type ufixed496x6<N = void> = N extends number ? number[] : number;
declare type ufixed496x7<N = void> = N extends number ? number[] : number;
declare type ufixed496x8<N = void> = N extends number ? number[] : number;
declare type ufixed496x9<N = void> = N extends number ? number[] : number;
declare type ufixed496x10<N = void> = N extends number ? number[] : number;
declare type ufixed496x11<N = void> = N extends number ? number[] : number;
declare type ufixed496x12<N = void> = N extends number ? number[] : number;
declare type ufixed496x13<N = void> = N extends number ? number[] : number;
declare type ufixed496x14<N = void> = N extends number ? number[] : number;
declare type ufixed496x15<N = void> = N extends number ? number[] : number;
declare type ufixed496x16<N = void> = N extends number ? number[] : number;
declare type ufixed496x17<N = void> = N extends number ? number[] : number;
declare type ufixed496x18<N = void> = N extends number ? number[] : number;
declare type ufixed496x19<N = void> = N extends number ? number[] : number;
declare type ufixed496x20<N = void> = N extends number ? number[] : number;
declare type ufixed496x21<N = void> = N extends number ? number[] : number;
declare type ufixed496x22<N = void> = N extends number ? number[] : number;
declare type ufixed496x23<N = void> = N extends number ? number[] : number;
declare type ufixed496x24<N = void> = N extends number ? number[] : number;
declare type ufixed496x25<N = void> = N extends number ? number[] : number;
declare type ufixed496x26<N = void> = N extends number ? number[] : number;
declare type ufixed496x27<N = void> = N extends number ? number[] : number;
declare type ufixed496x28<N = void> = N extends number ? number[] : number;
declare type ufixed496x29<N = void> = N extends number ? number[] : number;
declare type ufixed496x30<N = void> = N extends number ? number[] : number;
declare type ufixed496x31<N = void> = N extends number ? number[] : number;
declare type ufixed496x32<N = void> = N extends number ? number[] : number;
declare type ufixed496x33<N = void> = N extends number ? number[] : number;
declare type ufixed496x34<N = void> = N extends number ? number[] : number;
declare type ufixed496x35<N = void> = N extends number ? number[] : number;
declare type ufixed496x36<N = void> = N extends number ? number[] : number;
declare type ufixed496x37<N = void> = N extends number ? number[] : number;
declare type ufixed496x38<N = void> = N extends number ? number[] : number;
declare type ufixed496x39<N = void> = N extends number ? number[] : number;
declare type ufixed496x40<N = void> = N extends number ? number[] : number;
declare type ufixed496x41<N = void> = N extends number ? number[] : number;
declare type ufixed496x42<N = void> = N extends number ? number[] : number;
declare type ufixed496x43<N = void> = N extends number ? number[] : number;
declare type ufixed496x44<N = void> = N extends number ? number[] : number;
declare type ufixed496x45<N = void> = N extends number ? number[] : number;
declare type ufixed496x46<N = void> = N extends number ? number[] : number;
declare type ufixed496x47<N = void> = N extends number ? number[] : number;
declare type ufixed496x48<N = void> = N extends number ? number[] : number;
declare type ufixed496x49<N = void> = N extends number ? number[] : number;
declare type ufixed496x50<N = void> = N extends number ? number[] : number;
declare type ufixed496x51<N = void> = N extends number ? number[] : number;
declare type ufixed496x52<N = void> = N extends number ? number[] : number;
declare type ufixed496x53<N = void> = N extends number ? number[] : number;
declare type ufixed496x54<N = void> = N extends number ? number[] : number;
declare type ufixed496x55<N = void> = N extends number ? number[] : number;
declare type ufixed496x56<N = void> = N extends number ? number[] : number;
declare type ufixed496x57<N = void> = N extends number ? number[] : number;
declare type ufixed496x58<N = void> = N extends number ? number[] : number;
declare type ufixed496x59<N = void> = N extends number ? number[] : number;
declare type ufixed496x60<N = void> = N extends number ? number[] : number;
declare type ufixed496x61<N = void> = N extends number ? number[] : number;
declare type ufixed496x62<N = void> = N extends number ? number[] : number;
declare type ufixed496x63<N = void> = N extends number ? number[] : number;
declare type ufixed496x64<N = void> = N extends number ? number[] : number;
declare type ufixed496x65<N = void> = N extends number ? number[] : number;
declare type ufixed496x66<N = void> = N extends number ? number[] : number;
declare type ufixed496x67<N = void> = N extends number ? number[] : number;
declare type ufixed496x68<N = void> = N extends number ? number[] : number;
declare type ufixed496x69<N = void> = N extends number ? number[] : number;
declare type ufixed496x70<N = void> = N extends number ? number[] : number;
declare type ufixed496x71<N = void> = N extends number ? number[] : number;
declare type ufixed496x72<N = void> = N extends number ? number[] : number;
declare type ufixed496x73<N = void> = N extends number ? number[] : number;
declare type ufixed496x74<N = void> = N extends number ? number[] : number;
declare type ufixed496x75<N = void> = N extends number ? number[] : number;
declare type ufixed496x76<N = void> = N extends number ? number[] : number;
declare type ufixed496x77<N = void> = N extends number ? number[] : number;
declare type ufixed496x78<N = void> = N extends number ? number[] : number;
declare type ufixed496x79<N = void> = N extends number ? number[] : number;
declare type ufixed496x80<N = void> = N extends number ? number[] : number;
declare type ufixed496x81<N = void> = N extends number ? number[] : number;
declare type ufixed496x82<N = void> = N extends number ? number[] : number;
declare type ufixed496x83<N = void> = N extends number ? number[] : number;
declare type ufixed496x84<N = void> = N extends number ? number[] : number;
declare type ufixed496x85<N = void> = N extends number ? number[] : number;
declare type ufixed496x86<N = void> = N extends number ? number[] : number;
declare type ufixed496x87<N = void> = N extends number ? number[] : number;
declare type ufixed496x88<N = void> = N extends number ? number[] : number;
declare type ufixed496x89<N = void> = N extends number ? number[] : number;
declare type ufixed496x90<N = void> = N extends number ? number[] : number;
declare type ufixed496x91<N = void> = N extends number ? number[] : number;
declare type ufixed496x92<N = void> = N extends number ? number[] : number;
declare type ufixed496x93<N = void> = N extends number ? number[] : number;
declare type ufixed496x94<N = void> = N extends number ? number[] : number;
declare type ufixed496x95<N = void> = N extends number ? number[] : number;
declare type ufixed496x96<N = void> = N extends number ? number[] : number;
declare type ufixed496x97<N = void> = N extends number ? number[] : number;
declare type ufixed496x98<N = void> = N extends number ? number[] : number;
declare type ufixed496x99<N = void> = N extends number ? number[] : number;
declare type ufixed496x100<N = void> = N extends number ? number[] : number;
declare type ufixed496x101<N = void> = N extends number ? number[] : number;
declare type ufixed496x102<N = void> = N extends number ? number[] : number;
declare type ufixed496x103<N = void> = N extends number ? number[] : number;
declare type ufixed496x104<N = void> = N extends number ? number[] : number;
declare type ufixed496x105<N = void> = N extends number ? number[] : number;
declare type ufixed496x106<N = void> = N extends number ? number[] : number;
declare type ufixed496x107<N = void> = N extends number ? number[] : number;
declare type ufixed496x108<N = void> = N extends number ? number[] : number;
declare type ufixed496x109<N = void> = N extends number ? number[] : number;
declare type ufixed496x110<N = void> = N extends number ? number[] : number;
declare type ufixed496x111<N = void> = N extends number ? number[] : number;
declare type ufixed496x112<N = void> = N extends number ? number[] : number;
declare type ufixed496x113<N = void> = N extends number ? number[] : number;
declare type ufixed496x114<N = void> = N extends number ? number[] : number;
declare type ufixed496x115<N = void> = N extends number ? number[] : number;
declare type ufixed496x116<N = void> = N extends number ? number[] : number;
declare type ufixed496x117<N = void> = N extends number ? number[] : number;
declare type ufixed496x118<N = void> = N extends number ? number[] : number;
declare type ufixed496x119<N = void> = N extends number ? number[] : number;
declare type ufixed496x120<N = void> = N extends number ? number[] : number;
declare type ufixed496x121<N = void> = N extends number ? number[] : number;
declare type ufixed496x122<N = void> = N extends number ? number[] : number;
declare type ufixed496x123<N = void> = N extends number ? number[] : number;
declare type ufixed496x124<N = void> = N extends number ? number[] : number;
declare type ufixed496x125<N = void> = N extends number ? number[] : number;
declare type ufixed496x126<N = void> = N extends number ? number[] : number;
declare type ufixed496x127<N = void> = N extends number ? number[] : number;
declare type ufixed496x128<N = void> = N extends number ? number[] : number;
declare type ufixed496x129<N = void> = N extends number ? number[] : number;
declare type ufixed496x130<N = void> = N extends number ? number[] : number;
declare type ufixed496x131<N = void> = N extends number ? number[] : number;
declare type ufixed496x132<N = void> = N extends number ? number[] : number;
declare type ufixed496x133<N = void> = N extends number ? number[] : number;
declare type ufixed496x134<N = void> = N extends number ? number[] : number;
declare type ufixed496x135<N = void> = N extends number ? number[] : number;
declare type ufixed496x136<N = void> = N extends number ? number[] : number;
declare type ufixed496x137<N = void> = N extends number ? number[] : number;
declare type ufixed496x138<N = void> = N extends number ? number[] : number;
declare type ufixed496x139<N = void> = N extends number ? number[] : number;
declare type ufixed496x140<N = void> = N extends number ? number[] : number;
declare type ufixed496x141<N = void> = N extends number ? number[] : number;
declare type ufixed496x142<N = void> = N extends number ? number[] : number;
declare type ufixed496x143<N = void> = N extends number ? number[] : number;
declare type ufixed496x144<N = void> = N extends number ? number[] : number;
declare type ufixed496x145<N = void> = N extends number ? number[] : number;
declare type ufixed496x146<N = void> = N extends number ? number[] : number;
declare type ufixed496x147<N = void> = N extends number ? number[] : number;
declare type ufixed496x148<N = void> = N extends number ? number[] : number;
declare type ufixed496x149<N = void> = N extends number ? number[] : number;
declare type ufixed496x150<N = void> = N extends number ? number[] : number;
declare type ufixed496x151<N = void> = N extends number ? number[] : number;
declare type ufixed496x152<N = void> = N extends number ? number[] : number;
declare type ufixed496x153<N = void> = N extends number ? number[] : number;
declare type ufixed496x154<N = void> = N extends number ? number[] : number;
declare type ufixed496x155<N = void> = N extends number ? number[] : number;
declare type ufixed496x156<N = void> = N extends number ? number[] : number;
declare type ufixed496x157<N = void> = N extends number ? number[] : number;
declare type ufixed496x158<N = void> = N extends number ? number[] : number;
declare type ufixed496x159<N = void> = N extends number ? number[] : number;
declare type ufixed496x160<N = void> = N extends number ? number[] : number;
declare type ufixed504x1<N = void> = N extends number ? number[] : number;
declare type ufixed504x2<N = void> = N extends number ? number[] : number;
declare type ufixed504x3<N = void> = N extends number ? number[] : number;
declare type ufixed504x4<N = void> = N extends number ? number[] : number;
declare type ufixed504x5<N = void> = N extends number ? number[] : number;
declare type ufixed504x6<N = void> = N extends number ? number[] : number;
declare type ufixed504x7<N = void> = N extends number ? number[] : number;
declare type ufixed504x8<N = void> = N extends number ? number[] : number;
declare type ufixed504x9<N = void> = N extends number ? number[] : number;
declare type ufixed504x10<N = void> = N extends number ? number[] : number;
declare type ufixed504x11<N = void> = N extends number ? number[] : number;
declare type ufixed504x12<N = void> = N extends number ? number[] : number;
declare type ufixed504x13<N = void> = N extends number ? number[] : number;
declare type ufixed504x14<N = void> = N extends number ? number[] : number;
declare type ufixed504x15<N = void> = N extends number ? number[] : number;
declare type ufixed504x16<N = void> = N extends number ? number[] : number;
declare type ufixed504x17<N = void> = N extends number ? number[] : number;
declare type ufixed504x18<N = void> = N extends number ? number[] : number;
declare type ufixed504x19<N = void> = N extends number ? number[] : number;
declare type ufixed504x20<N = void> = N extends number ? number[] : number;
declare type ufixed504x21<N = void> = N extends number ? number[] : number;
declare type ufixed504x22<N = void> = N extends number ? number[] : number;
declare type ufixed504x23<N = void> = N extends number ? number[] : number;
declare type ufixed504x24<N = void> = N extends number ? number[] : number;
declare type ufixed504x25<N = void> = N extends number ? number[] : number;
declare type ufixed504x26<N = void> = N extends number ? number[] : number;
declare type ufixed504x27<N = void> = N extends number ? number[] : number;
declare type ufixed504x28<N = void> = N extends number ? number[] : number;
declare type ufixed504x29<N = void> = N extends number ? number[] : number;
declare type ufixed504x30<N = void> = N extends number ? number[] : number;
declare type ufixed504x31<N = void> = N extends number ? number[] : number;
declare type ufixed504x32<N = void> = N extends number ? number[] : number;
declare type ufixed504x33<N = void> = N extends number ? number[] : number;
declare type ufixed504x34<N = void> = N extends number ? number[] : number;
declare type ufixed504x35<N = void> = N extends number ? number[] : number;
declare type ufixed504x36<N = void> = N extends number ? number[] : number;
declare type ufixed504x37<N = void> = N extends number ? number[] : number;
declare type ufixed504x38<N = void> = N extends number ? number[] : number;
declare type ufixed504x39<N = void> = N extends number ? number[] : number;
declare type ufixed504x40<N = void> = N extends number ? number[] : number;
declare type ufixed504x41<N = void> = N extends number ? number[] : number;
declare type ufixed504x42<N = void> = N extends number ? number[] : number;
declare type ufixed504x43<N = void> = N extends number ? number[] : number;
declare type ufixed504x44<N = void> = N extends number ? number[] : number;
declare type ufixed504x45<N = void> = N extends number ? number[] : number;
declare type ufixed504x46<N = void> = N extends number ? number[] : number;
declare type ufixed504x47<N = void> = N extends number ? number[] : number;
declare type ufixed504x48<N = void> = N extends number ? number[] : number;
declare type ufixed504x49<N = void> = N extends number ? number[] : number;
declare type ufixed504x50<N = void> = N extends number ? number[] : number;
declare type ufixed504x51<N = void> = N extends number ? number[] : number;
declare type ufixed504x52<N = void> = N extends number ? number[] : number;
declare type ufixed504x53<N = void> = N extends number ? number[] : number;
declare type ufixed504x54<N = void> = N extends number ? number[] : number;
declare type ufixed504x55<N = void> = N extends number ? number[] : number;
declare type ufixed504x56<N = void> = N extends number ? number[] : number;
declare type ufixed504x57<N = void> = N extends number ? number[] : number;
declare type ufixed504x58<N = void> = N extends number ? number[] : number;
declare type ufixed504x59<N = void> = N extends number ? number[] : number;
declare type ufixed504x60<N = void> = N extends number ? number[] : number;
declare type ufixed504x61<N = void> = N extends number ? number[] : number;
declare type ufixed504x62<N = void> = N extends number ? number[] : number;
declare type ufixed504x63<N = void> = N extends number ? number[] : number;
declare type ufixed504x64<N = void> = N extends number ? number[] : number;
declare type ufixed504x65<N = void> = N extends number ? number[] : number;
declare type ufixed504x66<N = void> = N extends number ? number[] : number;
declare type ufixed504x67<N = void> = N extends number ? number[] : number;
declare type ufixed504x68<N = void> = N extends number ? number[] : number;
declare type ufixed504x69<N = void> = N extends number ? number[] : number;
declare type ufixed504x70<N = void> = N extends number ? number[] : number;
declare type ufixed504x71<N = void> = N extends number ? number[] : number;
declare type ufixed504x72<N = void> = N extends number ? number[] : number;
declare type ufixed504x73<N = void> = N extends number ? number[] : number;
declare type ufixed504x74<N = void> = N extends number ? number[] : number;
declare type ufixed504x75<N = void> = N extends number ? number[] : number;
declare type ufixed504x76<N = void> = N extends number ? number[] : number;
declare type ufixed504x77<N = void> = N extends number ? number[] : number;
declare type ufixed504x78<N = void> = N extends number ? number[] : number;
declare type ufixed504x79<N = void> = N extends number ? number[] : number;
declare type ufixed504x80<N = void> = N extends number ? number[] : number;
declare type ufixed504x81<N = void> = N extends number ? number[] : number;
declare type ufixed504x82<N = void> = N extends number ? number[] : number;
declare type ufixed504x83<N = void> = N extends number ? number[] : number;
declare type ufixed504x84<N = void> = N extends number ? number[] : number;
declare type ufixed504x85<N = void> = N extends number ? number[] : number;
declare type ufixed504x86<N = void> = N extends number ? number[] : number;
declare type ufixed504x87<N = void> = N extends number ? number[] : number;
declare type ufixed504x88<N = void> = N extends number ? number[] : number;
declare type ufixed504x89<N = void> = N extends number ? number[] : number;
declare type ufixed504x90<N = void> = N extends number ? number[] : number;
declare type ufixed504x91<N = void> = N extends number ? number[] : number;
declare type ufixed504x92<N = void> = N extends number ? number[] : number;
declare type ufixed504x93<N = void> = N extends number ? number[] : number;
declare type ufixed504x94<N = void> = N extends number ? number[] : number;
declare type ufixed504x95<N = void> = N extends number ? number[] : number;
declare type ufixed504x96<N = void> = N extends number ? number[] : number;
declare type ufixed504x97<N = void> = N extends number ? number[] : number;
declare type ufixed504x98<N = void> = N extends number ? number[] : number;
declare type ufixed504x99<N = void> = N extends number ? number[] : number;
declare type ufixed504x100<N = void> = N extends number ? number[] : number;
declare type ufixed504x101<N = void> = N extends number ? number[] : number;
declare type ufixed504x102<N = void> = N extends number ? number[] : number;
declare type ufixed504x103<N = void> = N extends number ? number[] : number;
declare type ufixed504x104<N = void> = N extends number ? number[] : number;
declare type ufixed504x105<N = void> = N extends number ? number[] : number;
declare type ufixed504x106<N = void> = N extends number ? number[] : number;
declare type ufixed504x107<N = void> = N extends number ? number[] : number;
declare type ufixed504x108<N = void> = N extends number ? number[] : number;
declare type ufixed504x109<N = void> = N extends number ? number[] : number;
declare type ufixed504x110<N = void> = N extends number ? number[] : number;
declare type ufixed504x111<N = void> = N extends number ? number[] : number;
declare type ufixed504x112<N = void> = N extends number ? number[] : number;
declare type ufixed504x113<N = void> = N extends number ? number[] : number;
declare type ufixed504x114<N = void> = N extends number ? number[] : number;
declare type ufixed504x115<N = void> = N extends number ? number[] : number;
declare type ufixed504x116<N = void> = N extends number ? number[] : number;
declare type ufixed504x117<N = void> = N extends number ? number[] : number;
declare type ufixed504x118<N = void> = N extends number ? number[] : number;
declare type ufixed504x119<N = void> = N extends number ? number[] : number;
declare type ufixed504x120<N = void> = N extends number ? number[] : number;
declare type ufixed504x121<N = void> = N extends number ? number[] : number;
declare type ufixed504x122<N = void> = N extends number ? number[] : number;
declare type ufixed504x123<N = void> = N extends number ? number[] : number;
declare type ufixed504x124<N = void> = N extends number ? number[] : number;
declare type ufixed504x125<N = void> = N extends number ? number[] : number;
declare type ufixed504x126<N = void> = N extends number ? number[] : number;
declare type ufixed504x127<N = void> = N extends number ? number[] : number;
declare type ufixed504x128<N = void> = N extends number ? number[] : number;
declare type ufixed504x129<N = void> = N extends number ? number[] : number;
declare type ufixed504x130<N = void> = N extends number ? number[] : number;
declare type ufixed504x131<N = void> = N extends number ? number[] : number;
declare type ufixed504x132<N = void> = N extends number ? number[] : number;
declare type ufixed504x133<N = void> = N extends number ? number[] : number;
declare type ufixed504x134<N = void> = N extends number ? number[] : number;
declare type ufixed504x135<N = void> = N extends number ? number[] : number;
declare type ufixed504x136<N = void> = N extends number ? number[] : number;
declare type ufixed504x137<N = void> = N extends number ? number[] : number;
declare type ufixed504x138<N = void> = N extends number ? number[] : number;
declare type ufixed504x139<N = void> = N extends number ? number[] : number;
declare type ufixed504x140<N = void> = N extends number ? number[] : number;
declare type ufixed504x141<N = void> = N extends number ? number[] : number;
declare type ufixed504x142<N = void> = N extends number ? number[] : number;
declare type ufixed504x143<N = void> = N extends number ? number[] : number;
declare type ufixed504x144<N = void> = N extends number ? number[] : number;
declare type ufixed504x145<N = void> = N extends number ? number[] : number;
declare type ufixed504x146<N = void> = N extends number ? number[] : number;
declare type ufixed504x147<N = void> = N extends number ? number[] : number;
declare type ufixed504x148<N = void> = N extends number ? number[] : number;
declare type ufixed504x149<N = void> = N extends number ? number[] : number;
declare type ufixed504x150<N = void> = N extends number ? number[] : number;
declare type ufixed504x151<N = void> = N extends number ? number[] : number;
declare type ufixed504x152<N = void> = N extends number ? number[] : number;
declare type ufixed504x153<N = void> = N extends number ? number[] : number;
declare type ufixed504x154<N = void> = N extends number ? number[] : number;
declare type ufixed504x155<N = void> = N extends number ? number[] : number;
declare type ufixed504x156<N = void> = N extends number ? number[] : number;
declare type ufixed504x157<N = void> = N extends number ? number[] : number;
declare type ufixed504x158<N = void> = N extends number ? number[] : number;
declare type ufixed504x159<N = void> = N extends number ? number[] : number;
declare type ufixed504x160<N = void> = N extends number ? number[] : number;
declare type ufixed512x1<N = void> = N extends number ? number[] : number;
declare type ufixed512x2<N = void> = N extends number ? number[] : number;
declare type ufixed512x3<N = void> = N extends number ? number[] : number;
declare type ufixed512x4<N = void> = N extends number ? number[] : number;
declare type ufixed512x5<N = void> = N extends number ? number[] : number;
declare type ufixed512x6<N = void> = N extends number ? number[] : number;
declare type ufixed512x7<N = void> = N extends number ? number[] : number;
declare type ufixed512x8<N = void> = N extends number ? number[] : number;
declare type ufixed512x9<N = void> = N extends number ? number[] : number;
declare type ufixed512x10<N = void> = N extends number ? number[] : number;
declare type ufixed512x11<N = void> = N extends number ? number[] : number;
declare type ufixed512x12<N = void> = N extends number ? number[] : number;
declare type ufixed512x13<N = void> = N extends number ? number[] : number;
declare type ufixed512x14<N = void> = N extends number ? number[] : number;
declare type ufixed512x15<N = void> = N extends number ? number[] : number;
declare type ufixed512x16<N = void> = N extends number ? number[] : number;
declare type ufixed512x17<N = void> = N extends number ? number[] : number;
declare type ufixed512x18<N = void> = N extends number ? number[] : number;
declare type ufixed512x19<N = void> = N extends number ? number[] : number;
declare type ufixed512x20<N = void> = N extends number ? number[] : number;
declare type ufixed512x21<N = void> = N extends number ? number[] : number;
declare type ufixed512x22<N = void> = N extends number ? number[] : number;
declare type ufixed512x23<N = void> = N extends number ? number[] : number;
declare type ufixed512x24<N = void> = N extends number ? number[] : number;
declare type ufixed512x25<N = void> = N extends number ? number[] : number;
declare type ufixed512x26<N = void> = N extends number ? number[] : number;
declare type ufixed512x27<N = void> = N extends number ? number[] : number;
declare type ufixed512x28<N = void> = N extends number ? number[] : number;
declare type ufixed512x29<N = void> = N extends number ? number[] : number;
declare type ufixed512x30<N = void> = N extends number ? number[] : number;
declare type ufixed512x31<N = void> = N extends number ? number[] : number;
declare type ufixed512x32<N = void> = N extends number ? number[] : number;
declare type ufixed512x33<N = void> = N extends number ? number[] : number;
declare type ufixed512x34<N = void> = N extends number ? number[] : number;
declare type ufixed512x35<N = void> = N extends number ? number[] : number;
declare type ufixed512x36<N = void> = N extends number ? number[] : number;
declare type ufixed512x37<N = void> = N extends number ? number[] : number;
declare type ufixed512x38<N = void> = N extends number ? number[] : number;
declare type ufixed512x39<N = void> = N extends number ? number[] : number;
declare type ufixed512x40<N = void> = N extends number ? number[] : number;
declare type ufixed512x41<N = void> = N extends number ? number[] : number;
declare type ufixed512x42<N = void> = N extends number ? number[] : number;
declare type ufixed512x43<N = void> = N extends number ? number[] : number;
declare type ufixed512x44<N = void> = N extends number ? number[] : number;
declare type ufixed512x45<N = void> = N extends number ? number[] : number;
declare type ufixed512x46<N = void> = N extends number ? number[] : number;
declare type ufixed512x47<N = void> = N extends number ? number[] : number;
declare type ufixed512x48<N = void> = N extends number ? number[] : number;
declare type ufixed512x49<N = void> = N extends number ? number[] : number;
declare type ufixed512x50<N = void> = N extends number ? number[] : number;
declare type ufixed512x51<N = void> = N extends number ? number[] : number;
declare type ufixed512x52<N = void> = N extends number ? number[] : number;
declare type ufixed512x53<N = void> = N extends number ? number[] : number;
declare type ufixed512x54<N = void> = N extends number ? number[] : number;
declare type ufixed512x55<N = void> = N extends number ? number[] : number;
declare type ufixed512x56<N = void> = N extends number ? number[] : number;
declare type ufixed512x57<N = void> = N extends number ? number[] : number;
declare type ufixed512x58<N = void> = N extends number ? number[] : number;
declare type ufixed512x59<N = void> = N extends number ? number[] : number;
declare type ufixed512x60<N = void> = N extends number ? number[] : number;
declare type ufixed512x61<N = void> = N extends number ? number[] : number;
declare type ufixed512x62<N = void> = N extends number ? number[] : number;
declare type ufixed512x63<N = void> = N extends number ? number[] : number;
declare type ufixed512x64<N = void> = N extends number ? number[] : number;
declare type ufixed512x65<N = void> = N extends number ? number[] : number;
declare type ufixed512x66<N = void> = N extends number ? number[] : number;
declare type ufixed512x67<N = void> = N extends number ? number[] : number;
declare type ufixed512x68<N = void> = N extends number ? number[] : number;
declare type ufixed512x69<N = void> = N extends number ? number[] : number;
declare type ufixed512x70<N = void> = N extends number ? number[] : number;
declare type ufixed512x71<N = void> = N extends number ? number[] : number;
declare type ufixed512x72<N = void> = N extends number ? number[] : number;
declare type ufixed512x73<N = void> = N extends number ? number[] : number;
declare type ufixed512x74<N = void> = N extends number ? number[] : number;
declare type ufixed512x75<N = void> = N extends number ? number[] : number;
declare type ufixed512x76<N = void> = N extends number ? number[] : number;
declare type ufixed512x77<N = void> = N extends number ? number[] : number;
declare type ufixed512x78<N = void> = N extends number ? number[] : number;
declare type ufixed512x79<N = void> = N extends number ? number[] : number;
declare type ufixed512x80<N = void> = N extends number ? number[] : number;
declare type ufixed512x81<N = void> = N extends number ? number[] : number;
declare type ufixed512x82<N = void> = N extends number ? number[] : number;
declare type ufixed512x83<N = void> = N extends number ? number[] : number;
declare type ufixed512x84<N = void> = N extends number ? number[] : number;
declare type ufixed512x85<N = void> = N extends number ? number[] : number;
declare type ufixed512x86<N = void> = N extends number ? number[] : number;
declare type ufixed512x87<N = void> = N extends number ? number[] : number;
declare type ufixed512x88<N = void> = N extends number ? number[] : number;
declare type ufixed512x89<N = void> = N extends number ? number[] : number;
declare type ufixed512x90<N = void> = N extends number ? number[] : number;
declare type ufixed512x91<N = void> = N extends number ? number[] : number;
declare type ufixed512x92<N = void> = N extends number ? number[] : number;
declare type ufixed512x93<N = void> = N extends number ? number[] : number;
declare type ufixed512x94<N = void> = N extends number ? number[] : number;
declare type ufixed512x95<N = void> = N extends number ? number[] : number;
declare type ufixed512x96<N = void> = N extends number ? number[] : number;
declare type ufixed512x97<N = void> = N extends number ? number[] : number;
declare type ufixed512x98<N = void> = N extends number ? number[] : number;
declare type ufixed512x99<N = void> = N extends number ? number[] : number;
declare type ufixed512x100<N = void> = N extends number ? number[] : number;
declare type ufixed512x101<N = void> = N extends number ? number[] : number;
declare type ufixed512x102<N = void> = N extends number ? number[] : number;
declare type ufixed512x103<N = void> = N extends number ? number[] : number;
declare type ufixed512x104<N = void> = N extends number ? number[] : number;
declare type ufixed512x105<N = void> = N extends number ? number[] : number;
declare type ufixed512x106<N = void> = N extends number ? number[] : number;
declare type ufixed512x107<N = void> = N extends number ? number[] : number;
declare type ufixed512x108<N = void> = N extends number ? number[] : number;
declare type ufixed512x109<N = void> = N extends number ? number[] : number;
declare type ufixed512x110<N = void> = N extends number ? number[] : number;
declare type ufixed512x111<N = void> = N extends number ? number[] : number;
declare type ufixed512x112<N = void> = N extends number ? number[] : number;
declare type ufixed512x113<N = void> = N extends number ? number[] : number;
declare type ufixed512x114<N = void> = N extends number ? number[] : number;
declare type ufixed512x115<N = void> = N extends number ? number[] : number;
declare type ufixed512x116<N = void> = N extends number ? number[] : number;
declare type ufixed512x117<N = void> = N extends number ? number[] : number;
declare type ufixed512x118<N = void> = N extends number ? number[] : number;
declare type ufixed512x119<N = void> = N extends number ? number[] : number;
declare type ufixed512x120<N = void> = N extends number ? number[] : number;
declare type ufixed512x121<N = void> = N extends number ? number[] : number;
declare type ufixed512x122<N = void> = N extends number ? number[] : number;
declare type ufixed512x123<N = void> = N extends number ? number[] : number;
declare type ufixed512x124<N = void> = N extends number ? number[] : number;
declare type ufixed512x125<N = void> = N extends number ? number[] : number;
declare type ufixed512x126<N = void> = N extends number ? number[] : number;
declare type ufixed512x127<N = void> = N extends number ? number[] : number;
declare type ufixed512x128<N = void> = N extends number ? number[] : number;
declare type ufixed512x129<N = void> = N extends number ? number[] : number;
declare type ufixed512x130<N = void> = N extends number ? number[] : number;
declare type ufixed512x131<N = void> = N extends number ? number[] : number;
declare type ufixed512x132<N = void> = N extends number ? number[] : number;
declare type ufixed512x133<N = void> = N extends number ? number[] : number;
declare type ufixed512x134<N = void> = N extends number ? number[] : number;
declare type ufixed512x135<N = void> = N extends number ? number[] : number;
declare type ufixed512x136<N = void> = N extends number ? number[] : number;
declare type ufixed512x137<N = void> = N extends number ? number[] : number;
declare type ufixed512x138<N = void> = N extends number ? number[] : number;
declare type ufixed512x139<N = void> = N extends number ? number[] : number;
declare type ufixed512x140<N = void> = N extends number ? number[] : number;
declare type ufixed512x141<N = void> = N extends number ? number[] : number;
declare type ufixed512x142<N = void> = N extends number ? number[] : number;
declare type ufixed512x143<N = void> = N extends number ? number[] : number;
declare type ufixed512x144<N = void> = N extends number ? number[] : number;
declare type ufixed512x145<N = void> = N extends number ? number[] : number;
declare type ufixed512x146<N = void> = N extends number ? number[] : number;
declare type ufixed512x147<N = void> = N extends number ? number[] : number;
declare type ufixed512x148<N = void> = N extends number ? number[] : number;
declare type ufixed512x149<N = void> = N extends number ? number[] : number;
declare type ufixed512x150<N = void> = N extends number ? number[] : number;
declare type ufixed512x151<N = void> = N extends number ? number[] : number;
declare type ufixed512x152<N = void> = N extends number ? number[] : number;
declare type ufixed512x153<N = void> = N extends number ? number[] : number;
declare type ufixed512x154<N = void> = N extends number ? number[] : number;
declare type ufixed512x155<N = void> = N extends number ? number[] : number;
declare type ufixed512x156<N = void> = N extends number ? number[] : number;
declare type ufixed512x157<N = void> = N extends number ? number[] : number;
declare type ufixed512x158<N = void> = N extends number ? number[] : number;
declare type ufixed512x159<N = void> = N extends number ? number[] : number;
declare type ufixed512x160<N = void> = N extends number ? number[] : number;

{
  "hints": {
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "createApplication(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "removeStake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claimTokens()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "payTokenReward(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateAlgodVer(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "epochBalanceUpdate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "linkToNFD(uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "creatingValidatorContractAppId": {
          "type": "uint64",
          "key": "creatorApp"
        },
        "validatorId": {
          "type": "uint64",
          "key": "validatorId"
        },
        "poolId": {
          "type": "uint64",
          "key": "poolId"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "staked"
        },
        "minEntryStake": {
          "type": "uint64",
          "key": "minEntryStake"
        },
        "lastPayout": {
          "type": "uint64",
          "key": "lastPayout"
        },
        "epochNumber": {
          "type": "uint64",
          "key": "epochNumber"
        },
        "algodVer": {
          "type": "bytes",
          "key": "algodVer"
        },
        "roundsPerDay": {
          "type": "uint64",
          "key": "roundsPerDay"
        },
        "binRoundStart": {
          "type": "uint64",
          "key": "binRoundStart"
        },
        "stakeAccumulator": {
          "type": "bytes",
          "key": "stakeAccumulator"
        },
        "rewardAccumulator": {
          "type": "uint64",
          "key": "rewardAccumulator"
        },
        "weightedMovingAverage": {
          "type": "bytes",
          "key": "ewma"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 11
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "StakingPool",
    "desc": "",
    "methods": [
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.",
        "args": [
          {
            "name": "creatingContractId",
            "type": "uint64",
            "desc": "id of contract that constructed us - the validator application (single global instance)"
          },
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "id of validator we're a staking pool of"
          },
          {
            "name": "poolId",
            "type": "uint64",
            "desc": "which pool id are we"
          },
          {
            "name": "minEntryStake",
            "type": "uint64",
            "desc": "minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initStorage",
        "desc": "Called after we're created and then funded, so we can create our large stakers ledger storage\nCaller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost\nIf this is pool 1 AND the validator has specified a reward token, opt-in to that token\nso that the validator can seed the pool with future rewards of that token.",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of new staking pools' storage"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addStake",
        "desc": "Adds stake to the given account.\nCan ONLY be called by the validator contract that created us\nMust receive payment from the validator contract for amount being staked.",
        "args": [
          {
            "name": "stakedAmountPayment",
            "type": "pay",
            "desc": "prior payment coming from validator contract to us on behalf of staker."
          },
          {
            "name": "staker",
            "type": "address",
            "desc": "The account adding new stake"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "uint64 new 'entry round' round number of stake add"
        }
      },
      {
        "name": "removeStake",
        "desc": "Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in\nfull. Also notifies the validator contract for this pools validator of the staker / balance changes.",
        "args": [
          {
            "name": "staker",
            "type": "address",
            "desc": "account to remove.  normally same as sender, but the validator owner or manager can also call\nthis to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is\nso a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer\nmeet the gating requirements (determined by the node daemon)."
          },
          {
            "name": "amountToUnstake",
            "type": "uint64",
            "desc": "The amount of stake to be removed.  Specify 0 to remove all stake."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claimTokens",
        "desc": "Claims all the available reward tokens a staker has available, sending their entire balance to the staker from\npool 1 (either directly, or via validator-pool1 to pay it out)\nAlso notifies the validator contract for this pools validator of the staker / balance changes.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getStakerInfo",
        "desc": "Retrieves the staked information for a given staker.",
        "args": [
          {
            "name": "staker",
            "type": "address",
            "desc": "The address of the staker."
          }
        ],
        "returns": {
          "type": "(address,uint64,uint64,uint64,uint64)",
          "desc": "StakedInfo - The staked information for the given staker."
        }
      },
      {
        "name": "payTokenReward",
        "desc": "[Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.\nThis can ONLY be called by our validator and only if we're pool 1 - with the token.\nNote: this can also be called by validator as part of OWNER wanting to send the reward tokens\nsomewhere else (ie if they're sunsetting their validator and need the reward tokens back).\nIt's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.",
        "args": [
          {
            "name": "staker",
            "type": "address",
            "desc": "the staker account to send rewards to"
          },
          {
            "name": "rewardToken",
            "type": "uint64",
            "desc": "id of reward token (to avoid re-entrancy in calling validator back to get id)"
          },
          {
            "name": "amountToSend",
            "type": "uint64",
            "desc": "amount to send the staker (there is significant trust here(!) - also why only validator can call us"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateAlgodVer",
        "desc": "Update the (honor system) algod version for the node associated to this pool.  The node management daemon\nshould compare its current nodes version to the version stored in global state, updating when different.\nThe reti node daemon composes its own version string using format:\nmajor.minor.build branch [commit hash],\nie: 3.22.0 rel/stable [6b508975]\n[ ONLY OWNER OR MANAGER CAN CALL ]",
        "args": [
          {
            "name": "algodVer",
            "type": "string",
            "desc": "string representing the algorand node daemon version (reti node daemon composes its own meta version)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "epochBalanceUpdate",
        "desc": "Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)\nstakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance\ncompounds over time and staker can remove that amount at will.\nThe validator is paid their percentage each epoch payout.\n\n\nNote: ANYONE can call this.",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOnline",
        "desc": "Registers a staking pool key online against a participation key.\n[ ONLY OWNER OR MANAGER CAN CALL ]",
        "args": [
          {
            "name": "feePayment",
            "type": "pay",
            "desc": "payment to cover extra fee of going online if offline - or 0 if not renewal"
          },
          {
            "name": "votePK",
            "type": "byte[]",
            "desc": "The vote public key."
          },
          {
            "name": "selectionPK",
            "type": "byte[]",
            "desc": "The selection public key."
          },
          {
            "name": "stateProofPK",
            "type": "byte[]",
            "desc": "The state proof public key."
          },
          {
            "name": "voteFirst",
            "type": "uint64",
            "desc": "The first vote index."
          },
          {
            "name": "voteLast",
            "type": "uint64",
            "desc": "The last vote index."
          },
          {
            "name": "voteKeyDilution",
            "type": "uint64",
            "desc": "The vote key dilution value."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "goOffline",
        "desc": "Marks a staking pool key OFFLINE.\n[ ONLY OWNER OR MANAGER CAN CALL ]",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "linkToNFD",
        "args": [
          {
            "name": "nfdAppId",
            "type": "uint64"
          },
          {
            "name": "nfdName",
            "type": "string"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "proxiedSetTokenPayoutRatio",
        "desc": "proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1\nWe need to verify that we are in fact being called by another of OUR pools (not us)\nand then we'll call the validator on their behalf to update the token payouts",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "ValidatorPoolKey tuple"
          }
        ],
        "returns": {
          "type": "(uint64[24],uint64)"
        }
      }
    ]
  }
}
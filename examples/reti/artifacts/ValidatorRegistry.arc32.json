{
  "hints": {
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "initStakingContract(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "loadStakingContractData(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "finalizeStakingContract()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getMbrAmounts()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNumValidators()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorState(uint64)(uint16,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getValidatorOwnerAndManager(uint64)(address,address)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPools(uint64)(uint64,uint16,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolAppId(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getCurMaxStakePerPool(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "doesStakerNeedToPayMBR(address)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getTokenPayoutRatio(uint64)(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNodePoolAssignments(uint64)((uint64[3])[8])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getNFDRegistryID()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorManager(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorSunsetInfo(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorNFD(uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorCommissionAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addPool(pay,uint64,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "addStake(pay,uint64,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setTokenPayoutRatio(uint64)(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "movePoolToNode(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "emptyTokenRewards(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "stakingPoolInitialized": {
          "type": "bytes",
          "key": "init"
        },
        "numValidators": {
          "type": "uint64",
          "key": "numV"
        },
        "numStakers": {
          "type": "uint64",
          "key": "numStakers"
        },
        "totalAlgoStaked": {
          "type": "uint64",
          "key": "staked"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ValidatorRegistry",
    "desc": "",
    "methods": [
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "initStakingContract",
        "args": [
          {
            "name": "approvalProgramSize",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "loadStakingContractData",
        "args": [
          {
            "name": "offset",
            "type": "uint64"
          },
          {
            "name": "data",
            "type": "byte[]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "finalizeStakingContract",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gas",
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getMbrAmounts",
        "desc": "Returns the MBR amounts needed for various actions:[addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contractaddPoolMbr: uint64 - mbr needed to add a new pool - paid to validatorpoolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itselfaddStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)]",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getProtocolConstraints",
        "desc": "Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.",
        "args": [],
        "returns": {
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getNumValidators",
        "desc": "Returns the current number of validators",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getValidatorConfig",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
        }
      },
      {
        "name": "getValidatorState",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(uint16,uint64,uint64,uint64)"
        }
      },
      {
        "name": "getValidatorOwnerAndManager",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "(address,address)"
        }
      },
      {
        "name": "getPools",
        "desc": "Return list of all pools for this validator.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "@return{PoolInfo[]}- array of poolsNot callable from other contracts because>1K return but can be called w/ simulate which bumps log returns"
          }
        ],
        "returns": {
          "type": "(uint64,uint16,uint64)[]"
        }
      },
      {
        "name": "getPoolAppId",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "poolId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "getPoolInfo",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)"
          }
        ],
        "returns": {
          "type": "(uint64,uint16,uint64)"
        }
      },
      {
        "name": "getCurMaxStakePerPool",
        "desc": "Calculate the maximum stake per pool for a given validator.Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools soas pools are added the max allowed per pool can reduce.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "doesStakerNeedToPayMBR",
        "desc": "Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount",
        "args": [
          {
            "name": "staker",
            "type": "address"
          }
        ],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "getStakedPoolsForAccount",
        "desc": "Retrieves the staked pools for an account.",
        "args": [
          {
            "name": "staker",
            "type": "address",
            "desc": "The account to retrieve staked pools for.@return{ValidatorPoolKey[]}- The array of staked pools for the account."
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)[]"
        }
      },
      {
        "name": "getTokenPayoutRatio",
        "desc": "Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that tokenpayouts across pools can be based on a stable snaphost of stake.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator.@return{PoolTokenPayoutRatio}- The token payout ratio for the validator."
          }
        ],
        "returns": {
          "type": "(uint64[24],uint64)"
        }
      },
      {
        "name": "getNodePoolAssignments",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "((uint64[3])[8])"
        }
      },
      {
        "name": "getNFDRegistryID",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "addValidator",
        "desc": "Adds a new validatorRequires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of new validator storage"
          },
          {
            "name": "nfdName",
            "type": "string",
            "desc": "(Optional) Name of nfd (used as double-check against id specified in config)"
          },
          {
            "name": "config",
            "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
            "desc": "ValidatorConfig struct"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "{uint64}validator id"
        }
      },
      {
        "name": "changeValidatorManager",
        "desc": "Changes the Validator manager for a specific Validator id.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator to change the manager for."
          },
          {
            "name": "manager",
            "type": "address",
            "desc": "The new manager address."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorSunsetInfo",
        "desc": "Updates the sunset information for a given validator.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator to update."
          },
          {
            "name": "sunsettingOn",
            "type": "uint64",
            "desc": "The new sunset timestamp."
          },
          {
            "name": "sunsettingTo",
            "type": "uint64",
            "desc": "The new sunset to validator id."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorNFD",
        "desc": "Changes the NFD for a validator in the validatorList contract.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator to update."
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The application id of the NFD to assign to the validator."
          },
          {
            "name": "nfdName",
            "type": "string",
            "desc": "The name of the NFD (which must match)"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorCommissionAddress",
        "desc": "Change the commission address that validator rewards are sent to.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "commissionAddress",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "changeValidatorRewardInfo",
        "desc": "Allow the additional rewards (gating entry, additional token rewards) information be changed at will.[ ONLY OWNER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64"
          },
          {
            "name": "EntryGatingType",
            "type": "uint8"
          },
          {
            "name": "EntryGatingAddress",
            "type": "address"
          },
          {
            "name": "EntryGatingAssets",
            "type": "uint64[4]"
          },
          {
            "name": "GatingAssetMinBalance",
            "type": "uint64"
          },
          {
            "name": "RewardPerPayout",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "addPool",
        "desc": "Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.[ ONLY OWNER OR MANAGER CAN call ]",
        "args": [
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "payment from caller which covers mbr increase of adding a new pool"
          },
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "is id of validator to pool to (must be owner or manager)"
          },
          {
            "name": "nodeNum",
            "type": "uint64",
            "desc": "is node number to add to"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "{ValidatorPoolKey}pool key to created pool"
        }
      },
      {
        "name": "addStake",
        "desc": "Adds stake to a validator pool.",
        "args": [
          {
            "name": "stakedAmountPayment",
            "type": "pay",
            "desc": "payment coming from staker to place into a pool"
          },
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          },
          {
            "name": "valueToVerify",
            "type": "uint64",
            "desc": "only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.Txn sender is factored in as well if that is part of gating.*"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "{ValidatorPoolKey}- The key of the validator pool."
        }
      },
      {
        "name": "setTokenPayoutRatio",
        "desc": "setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratiosof stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered bypool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead oftheir 'current' stake which changes as part of the payouts themselves (and people could be changing stakeduring the epoch updates across pools)Multiple pools will call us via pool 1 (pool2->pool1->validator, etc.) so don't assert on pool1 calling multipletimes in same epoch.  Just return.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator."
          }
        ],
        "returns": {
          "type": "(uint64[24],uint64)",
          "desc": "PoolTokenPayoutRatio - the finished ratio data"
        }
      },
      {
        "name": "stakeUpdatedViaRewards",
        "desc": "stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of totalstake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.The calling App id is validated against our pool list as well.",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "ValidatorPoolKey type"
          },
          {
            "name": "algoToAdd",
            "type": "uint64",
            "desc": "amount this validator's total stake increased via rewards"
          },
          {
            "name": "rewardTokenAmountReserved",
            "type": "uint64",
            "desc": "amount this validator's total stake increased via rewards (that should be"
          },
          {
            "name": "validatorCommission",
            "type": "uint64",
            "desc": "the commission amount the validator was paid, if any"
          },
          {
            "name": "saturatedBurnToFeeSink",
            "type": "uint64",
            "desc": "if the pool was in saturated state, the amount sent back to the fee sink.seen as 'accounted for/pending spent')"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stakeRemoved",
        "desc": "stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removedfrom the specified pool.  This is used to update the stats we have in our PoolInfo storage.If any amount of rewardRemoved is specified, then that amount of reward is sent to the useThe calling App id is validated against our pool list as well.",
        "args": [
          {
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
            "desc": "calling us from which stake was removed"
          },
          {
            "name": "staker",
            "type": "address"
          },
          {
            "name": "amountRemoved",
            "type": "uint64",
            "desc": "algo amount removed"
          },
          {
            "name": "rewardRemoved",
            "type": "uint64",
            "desc": "if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)"
          },
          {
            "name": "stakerRemoved",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "findPoolForStaker",
        "desc": "Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then addsto new pool if necessary.",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          },
          {
            "name": "staker",
            "type": "address",
            "desc": "The address of the staker."
          },
          {
            "name": "amountToStake",
            "type": "uint64",
            "desc": "The amount to stake."
          }
        ],
        "returns": {
          "type": "((uint64,uint64,uint64),bool,bool)",
          "desc": "{ValidatorPoolKey, boolean, boolean}- The pool for the staker, true/false on whether the staker is 'new'to this VALIDATOR, and true/false if staker is new to the protocol."
        }
      },
      {
        "name": "movePoolToNode",
        "desc": "Find the specified pool (in any node number) and move it to the specified node.The pool account is forced offline if moved so prior node will still run for 320 rounds butnew key goes online on new node soon after (320 rounds after it goes online)No-op if success, asserts if not found or can't move  (no space in target)[ ONLY OWNER OR MANAGER CAN CHANGE ]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          },
          {
            "name": "poolAppId",
            "type": "uint64"
          },
          {
            "name": "nodeNum",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "emptyTokenRewards",
        "desc": "Sends the reward tokens held in pool 1 to specified receiver.This is intended to be used by the owner when they want to get reward tokens 'back' which they sent tothe first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim willNOT be sent as they must be held back for stakers to later claim.[ ONLY OWNER CAN CALL]",
        "args": [
          {
            "name": "validatorId",
            "type": "uint64",
            "desc": "The id of the validator."
          },
          {
            "name": "receiver",
            "type": "address",
            "desc": "the account to send the tokens to (must already be opted-in to the reward token)"
          }
        ],
        "returns": {
          "type": "uint64",
          "desc": "{uint64}the amount of reward token sent"
        }
      }
    ]
  }
}
{
  "hints": {
    "createVault(account,pay)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyAxfer(account,axfer,application)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "hasVault(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVaultId(account)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getVaultAddr(account)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteVault(application,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "Master",
    "desc": "",
    "methods": [
      {
        "name": "createVault",
        "args": [
          {
            "name": "receiver",
            "type": "account",
            "desc": ""
          },
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "verifyAxfer",
        "args": [
          {
            "name": "receiver",
            "type": "account",
            "desc": ""
          },
          {
            "name": "vaultAxfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "vault",
            "type": "application",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "hasVault",
        "args": [
          {
            "name": "receiver",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getVaultId",
        "args": [
          {
            "name": "receiver",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "getVaultAddr",
        "args": [
          {
            "name": "receiver",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "address",
          "desc": ""
        }
      },
      {
        "name": "deleteVault",
        "args": [
          {
            "name": "vault",
            "type": "application",
            "desc": ""
          },
          {
            "name": "creator",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}
/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "add(string,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "update(string,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "upsert(string,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "CREATE"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDgKCWIgbWFpbgoKYWJpX3JvdXRlX2FkZDoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoKCS8vIG5vIGR1cG4gbmVlZGVkCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCWNhbGxzdWIgYWRkCglpbnQgMQoJcmV0dXJuCgphZGQ6Cglwcm90byAyIDAKCgkvLyBBbGdvcmFuZERCU3RvcmFnZS5hbGdvLnRzOjE0CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzKQoJdHhuIFNlbmRlcgoJZ2xvYmFsIENyZWF0b3JBZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gQWxnb3JhbmREQlN0b3JhZ2UuYWxnby50czoxNQoJLy8gYXNzZXJ0KCF0aGlzLmRhdGEuZXhpc3RzKGtleSkpCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBieXRlcwoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBBbGdvcmFuZERCU3RvcmFnZS5hbGdvLnRzOjE2CgkvLyB0aGlzLmRhdGEuc2V0KGtleSwgdmFsdWUpCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBieXRlcwoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogYnl0ZXMKCWJveF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoKCS8vIG5vIGR1cG4gbmVlZGVkCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglleHRyYWN0IDIgMAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZXh0cmFjdCAyIDAKCWNhbGxzdWIgdXBkYXRlCglpbnQgMQoJcmV0dXJuCgp1cGRhdGU6Cglwcm90byAyIDAKCgkvLyBBbGdvcmFuZERCU3RvcmFnZS5hbGdvLnRzOjI2CgkvLyBhc3NlcnQodGhpcy50eG4uc2VuZGVyID09PSBnbG9iYWxzLmNyZWF0b3JBZGRyZXNzKQoJdHhuIFNlbmRlcgoJZ2xvYmFsIENyZWF0b3JBZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gQWxnb3JhbmREQlN0b3JhZ2UuYWxnby50czoyNwoJLy8gYXNzZXJ0KHRoaXMuZGF0YS5leGlzdHMoa2V5KSkKCWZyYW1lX2RpZyAtMSAvLyBrZXk6IGJ5dGVzCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoKCS8vIEFsZ29yYW5kREJTdG9yYWdlLmFsZ28udHM6MjgKCS8vIHRoaXMuZGF0YS5zZXQoa2V5LCB2YWx1ZSkKCWZyYW1lX2RpZyAtMSAvLyBrZXk6IGJ5dGVzCglkdXAKCWJveF9kZWwKCXBvcAoJZnJhbWVfZGlnIC0yIC8vIHZhbHVlOiBieXRlcwoJYm94X3B1dAoJcmV0c3ViCgphYmlfcm91dGVfdXBzZXJ0OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CgoJLy8gbm8gZHVwbiBuZWVkZWQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoJY2FsbHN1YiB1cHNlcnQKCWludCAxCglyZXR1cm4KCnVwc2VydDoKCXByb3RvIDIgMAoKCS8vIEFsZ29yYW5kREJTdG9yYWdlLmFsZ28udHM6MzgKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IGdsb2JhbHMuY3JlYXRvckFkZHJlc3MpCgl0eG4gU2VuZGVyCglnbG9iYWwgQ3JlYXRvckFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBBbGdvcmFuZERCU3RvcmFnZS5hbGdvLnRzOjM5CgkvLyB0aGlzLmRhdGEuc2V0KGtleSwgdmFsdWUpCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBieXRlcwoJZHVwCglib3hfZGVsCglwb3AKCWZyYW1lX2RpZyAtMiAvLyB2YWx1ZTogYnl0ZXMKCWJveF9wdXQKCXJldHN1YgoKYWJpX3JvdXRlX2RlbGV0ZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoKCS8vIG5vIGR1cG4gbmVlZGVkCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoJY2FsbHN1YiBkZWxldGUKCWludCAxCglyZXR1cm4KCmRlbGV0ZToKCXByb3RvIDEgMAoKCS8vIEFsZ29yYW5kREJTdG9yYWdlLmFsZ28udHM6NDgKCS8vIGFzc2VydCh0aGlzLnR4bi5zZW5kZXIgPT09IGdsb2JhbHMuY3JlYXRvckFkZHJlc3MpCgl0eG4gU2VuZGVyCglnbG9iYWwgQ3JlYXRvckFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBBbGdvcmFuZERCU3RvcmFnZS5hbGdvLnRzOjQ5CgkvLyBhc3NlcnQodGhpcy5kYXRhLmV4aXN0cyhrZXkpKQoJZnJhbWVfZGlnIC0xIC8vIGtleTogYnl0ZXMKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CgoJLy8gQWxnb3JhbmREQlN0b3JhZ2UuYWxnby50czo1MAoJLy8gdGhpcy5kYXRhLmRlbGV0ZShrZXkpCglmcmFtZV9kaWcgLTEgLy8ga2V5OiBieXRlcwoJYm94X2RlbAoJcmV0c3ViCgptYWluOgoJdHhuIE51bUFwcEFyZ3MKCWJueiByb3V0ZV9hYmkKCgkvLyBkZWZhdWx0IGNyZWF0ZUFwcGxpY2F0aW9uCgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCT09Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCSYmCglyZXR1cm4KCnJvdXRlX2FiaToKCW1ldGhvZCAiYWRkKHN0cmluZyxieXRlW10pdm9pZCIKCW1ldGhvZCAidXBkYXRlKHN0cmluZyxieXRlW10pdm9pZCIKCW1ldGhvZCAidXBzZXJ0KHN0cmluZyxieXRlW10pdm9pZCIKCW1ldGhvZCAiZGVsZXRlKHN0cmluZyl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX2FkZCBhYmlfcm91dGVfdXBkYXRlIGFiaV9yb3V0ZV91cHNlcnQgYWJpX3JvdXRlX2RlbGV0ZQoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"
  },
  "contract": {
    "name": "AlgorandDBStorage",
    "desc": "",
    "methods": [
      {
        "name": "add",
        "args": [
          {
            "name": "key",
            "type": "string",
            "desc": ""
          },
          {
            "name": "value",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "update",
        "args": [
          {
            "name": "key",
            "type": "string",
            "desc": ""
          },
          {
            "name": "value",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "upsert",
        "args": [
          {
            "name": "key",
            "type": "string",
            "desc": ""
          },
          {
            "name": "value",
            "type": "byte[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "delete",
        "args": [
          {
            "name": "key",
            "type": "string",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the AlgorandDbStorage smart contract.
 */
export type AlgorandDbStorage = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'add(string,byte[])void' | 'add', {
      argsObj: {
        key: string
        value: Uint8Array
      }
      argsTuple: [key: string, value: Uint8Array]
      returns: void
    }>
    & Record<'update(string,byte[])void' | 'update', {
      argsObj: {
        key: string
        value: Uint8Array
      }
      argsTuple: [key: string, value: Uint8Array]
      returns: void
    }>
    & Record<'upsert(string,byte[])void' | 'upsert', {
      argsObj: {
        key: string
        value: Uint8Array
      }
      argsTuple: [key: string, value: Uint8Array]
      returns: void
    }>
    & Record<'delete(string)void' | 'delete', {
      argsObj: {
        key: string
      }
      argsTuple: [key: string]
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type AlgorandDbStorageSig = keyof AlgorandDbStorage['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgorandDbStorageSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AlgorandDbStorage smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgorandDbStorageSig> = AlgorandDbStorage['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgorandDbStorage smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgorandDbStorageSig> = AlgorandDbStorage['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgorandDbStorageCreateCalls = (typeof AlgorandDbStorageCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgorandDbStorageCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type AlgorandDbStorageDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgorandDbStorageCreateCalls) => AlgorandDbStorageCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgorandDbStorageCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AlgorandDBStorage smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the add(string,byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static add(args: MethodArgs<'add(string,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'add(string,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.key, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the update(string,byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static update(args: MethodArgs<'update(string,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'update(string,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.key, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the upsert(string,byte[])void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static upsert(args: MethodArgs<'upsert(string,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'upsert(string,byte[])void' as const,
      methodArgs: Array.isArray(args) ? args : [args.key, args.value],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the delete(string)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static delete(args: MethodArgs<'delete(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'delete(string)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.key],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AlgorandDBStorage smart contract
 */
export class AlgorandDbStorageClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AlgorandDbStorageClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AlgorandDbStorage['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AlgorandDBStorage smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AlgorandDbStorageDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AlgorandDbStorageCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AlgorandDBStorage smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgorandDBStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the add(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public add(args: MethodArgs<'add(string,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandDbStorageCallFactory.add(args, params))
  }

  /**
   * Calls the update(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public update(args: MethodArgs<'update(string,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandDbStorageCallFactory.update(args, params))
  }

  /**
   * Calls the upsert(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public upsert(args: MethodArgs<'upsert(string,byte[])void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandDbStorageCallFactory.upsert(args, params))
  }

  /**
   * Calls the delete(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public delete(args: MethodArgs<'delete(string)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgorandDbStorageCallFactory.delete(args, params))
  }

  public compose(): AlgorandDbStorageComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      add(args: MethodArgs<'add(string,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.add(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      update(args: MethodArgs<'update(string,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.update(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      upsert(args: MethodArgs<'upsert(string,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.upsert(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      delete(args: MethodArgs<'delete(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.delete(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AlgorandDbStorageComposer
  }
}
export type AlgorandDbStorageComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the add(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  add(args: MethodArgs<'add(string,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandDbStorageComposer<[...TReturns, MethodReturn<'add(string,byte[])void'>]>

  /**
   * Calls the update(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  update(args: MethodArgs<'update(string,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandDbStorageComposer<[...TReturns, MethodReturn<'update(string,byte[])void'>]>

  /**
   * Calls the upsert(string,byte[])void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  upsert(args: MethodArgs<'upsert(string,byte[])void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandDbStorageComposer<[...TReturns, MethodReturn<'upsert(string,byte[])void'>]>

  /**
   * Calls the delete(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  delete(args: MethodArgs<'delete(string)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AlgorandDbStorageComposer<[...TReturns, MethodReturn<'delete(string)void'>]>

  /**
   * Makes a clear_state call to an existing instance of the AlgorandDBStorage smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AlgorandDbStorageComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AlgorandDbStorageComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AlgorandDbStorageComposerResults<TReturns>>
}
export type AlgorandDbStorageComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}

#pragma version 9

// This TEAL was generated by TEALScript v0.63.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// createApplication(uint64,uint64)void
//
// Create the raffle
//
// @param ticketPrice The price of a single ticket (uALGO)
// @param randomnessOracle The app ID of the randomness oracle
abi_route_createApplication:
	// randomnessOracle: uint64
	txna ApplicationArgs 2
	btoi

	// ticketPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64)void
	callsub createApplication
	int 1
	return

createApplication:
	proto 2 0

	// examples/raffle/raffle.algo.ts:43
	// this.randomnessOracle.value = randomnessOracle
	byte 0x72616e646f6d6e6573734f7261636c65 // "randomnessOracle"
	frame_dig -2 // randomnessOracle: uint64
	app_global_put

	// examples/raffle/raffle.algo.ts:44
	// this.ticketPrice.value = ticketPrice
	byte 0x7469636b65745072696365 // "ticketPrice"
	frame_dig -1 // ticketPrice: uint64
	app_global_put
	retsub

// setAsset(asset)void
//
// Set the asset to be raffled
//
// @param asset The asset to be raffled
abi_route_setAsset:
	// asset: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// execute setAsset(asset)void
	callsub setAsset
	int 1
	return

setAsset:
	proto 1 0

	// examples/raffle/raffle.algo.ts:54
	// assert(!this.asset.exists)
	txna Applications 0
	byte 0x6173736574 // "asset"
	app_global_get_ex
	swap
	pop
	!
	assert

	// examples/raffle/raffle.algo.ts:56
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: asset,
	//       assetAmount: 0,
	//       fee: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// examples/raffle/raffle.algo.ts:57
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// examples/raffle/raffle.algo.ts:58
	// xferAsset: asset
	frame_dig -1 // asset: asset
	itxn_field XferAsset

	// examples/raffle/raffle.algo.ts:59
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// examples/raffle/raffle.algo.ts:60
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/raffle/raffle.algo.ts:63
	// this.asset.value = asset
	byte 0x6173736574 // "asset"
	frame_dig -1 // asset: asset
	app_global_put
	retsub

// startRaffle(uint64,uint64)void
//
// Start the raffle
//
// @param end The round number when the raffle ends
// @param draw The round number when the raffle is drawn
abi_route_startRaffle:
	// draw: uint64
	txna ApplicationArgs 2
	btoi

	// end: uint64
	txna ApplicationArgs 1
	btoi

	// execute startRaffle(uint64,uint64)void
	callsub startRaffle
	int 1
	return

startRaffle:
	proto 2 0

	// examples/raffle/raffle.algo.ts:74
	// assert(this.app.address.assetBalance(this.asset.value) > 0)
	global CurrentApplicationAddress
	byte 0x6173736574 // "asset"
	app_global_get
	asset_holding_get AssetBalance
	assert
	int 0
	>
	assert

	// examples/raffle/raffle.algo.ts:76
	// assert(draw > end)
	frame_dig -2 // draw: uint64
	frame_dig -1 // end: uint64
	>
	assert

	// examples/raffle/raffle.algo.ts:77
	// this.endRound.value = end
	byte 0x656e64526f756e64 // "endRound"
	frame_dig -1 // end: uint64
	app_global_put

	// examples/raffle/raffle.algo.ts:78
	// this.drawRound.value = draw
	byte 0x64726177526f756e64 // "drawRound"
	frame_dig -2 // draw: uint64
	app_global_put
	retsub

// buyTickets(uint64,pay)void
//
// Buy tickets. Note this can only be called once!
// It would be possible to allow multiple purchases, but
// for simplicity, only one purchase is allowed.
//
// @param payment The payment for the tickets
// @param quanity The number of tickets to buy
//
// @returns The total number of tickets owned by the sender
abi_route_buyTickets:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// quanity: uint64
	txna ApplicationArgs 1
	btoi

	// payment: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute buyTickets(uint64,pay)void
	callsub buyTickets
	int 1
	return

buyTickets:
	proto 3 0

	// examples/raffle/raffle.algo.ts:92
	// assert(globals.round < this.endRound.value)
	global Round
	byte 0x656e64526f756e64 // "endRound"
	app_global_get
	<
	assert

	// examples/raffle/raffle.algo.ts:93
	// assert(quanity > 0)
	frame_dig -2 // quanity: uint64
	int 0
	>
	assert

	// examples/raffle/raffle.algo.ts:95
	// assert(payment.amount === this.ticketPrice.value * quanity)
	frame_dig -1 // payment: pay
	gtxns Amount
	byte 0x7469636b65745072696365 // "ticketPrice"
	app_global_get
	frame_dig -2 // quanity: uint64
	*
	==
	assert

	// examples/raffle/raffle.algo.ts:96
	// assert(payment.sender === this.txn.sender)
	frame_dig -1 // payment: pay
	gtxns Sender
	txn Sender
	==
	assert

	// examples/raffle/raffle.algo.ts:97
	// assert(payment.receiver === this.app.address)
	frame_dig -1 // payment: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// examples/raffle/raffle.algo.ts:99
	// assert(!this.tickets(payment.sender).exists)
	frame_dig -1 // payment: pay
	gtxns Sender
	box_len
	swap
	pop
	!
	assert

	// examples/raffle/raffle.algo.ts:101
	// newTotal = this.totalTickets.value + quanity + 1
	byte 0x746f74616c5469636b657473 // "totalTickets"
	app_global_get
	frame_dig -2 // quanity: uint64
	+
	int 1
	+
	frame_bury -3 // newTotal: uint64

	// examples/raffle/raffle.algo.ts:103
	// this.tickets(payment.sender).value = { start: this.totalTickets.value, end: newTotal - 1 }
	frame_dig -1 // payment: pay
	gtxns Sender
	byte 0x746f74616c5469636b657473 // "totalTickets"
	app_global_get
	itob
	frame_dig -3 // newTotal: uint64
	int 1
	-
	itob
	concat
	box_put

	// examples/raffle/raffle.algo.ts:104
	// this.totalTickets.value = newTotal
	byte 0x746f74616c5469636b657473 // "totalTickets"
	frame_dig -3 // newTotal: uint64
	app_global_put
	retsub

getRandomBytes:
	proto 0 0

	// if0_condition
	// examples/raffle/raffle.algo.ts:109
	// this.randomBytes.exists
	txna Applications 0
	byte 0x72616e646f6d4279746573 // "randomBytes"
	app_global_get_ex
	swap
	pop
	bz if0_else

	// if0_consequent
	// examples/raffle/raffle.algo.ts:110
	// this.randomBytes.value = sha256(this.randomBytes.value) as bytes
	byte 0x72616e646f6d4279746573 // "randomBytes"
	byte 0x72616e646f6d4279746573 // "randomBytes"
	app_global_get
	sha256
	app_global_put
	b if0_end

if0_else:
	// examples/raffle/raffle.algo.ts:112
	// this.randomBytes.value = sendMethodCall<[uint64, bytes], bytes>({
	//         name: 'must_get',
	//         methodArgs: [this.drawRound.value, ''],
	//         applicationID: Application.fromID(this.randomnessOracle.value),
	//         fee: 0,
	//         onCompletion: 'NoOp',
	//       })
	byte 0x72616e646f6d4279746573 // "randomBytes"
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "must_get(uint64,byte[])byte[]"
	itxn_field ApplicationArgs

	// examples/raffle/raffle.algo.ts:114
	// methodArgs: [this.drawRound.value, '']
	byte 0x64726177526f756e64 // "drawRound"
	app_global_get
	itob
	itxn_field ApplicationArgs
	byte 0x0000
	itxn_field ApplicationArgs

	// examples/raffle/raffle.algo.ts:115
	// applicationID: Application.fromID(this.randomnessOracle.value)
	byte 0x72616e646f6d6e6573734f7261636c65 // "randomnessOracle"
	app_global_get
	itxn_field ApplicationID

	// examples/raffle/raffle.algo.ts:116
	// fee: 0
	int 0
	itxn_field Fee

	// examples/raffle/raffle.algo.ts:117
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	app_global_put

if0_end:
	retsub

// draw()bool
//
// Draw the winning ticket
abi_route_draw:
	byte 0x; dupn 3 // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute draw()bool
	callsub draw
	int 1
	return

draw:
	proto 4 0

	// examples/raffle/raffle.algo.ts:124
	// assert(!this.winningTicket.exists)
	txna Applications 0
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	app_global_get_ex
	swap
	pop
	!
	assert

	// examples/raffle/raffle.algo.ts:125
	// this.getRandomBytes()
	callsub getRandomBytes

	// examples/raffle/raffle.algo.ts:129
	// n = this.totalTickets.value
	byte 0x746f74616c5469636b657473 // "totalTickets"
	app_global_get
	frame_bury -1 // n: uint64

	// examples/raffle/raffle.algo.ts:131
	// offset = 0
	int 0
	frame_bury -3 // offset: uint64

do_while_0:
	// examples/raffle/raffle.algo.ts:135
	// x = extract_uint64(this.randomBytes.value, offset)
	byte 0x72616e646f6d4279746573 // "randomBytes"
	app_global_get
	frame_dig -3 // offset: uint64
	extract_uint64
	frame_bury -2 // x: uint64

	// examples/raffle/raffle.algo.ts:137
	// offset = offset + 8
	frame_dig -3 // offset: uint64
	int 8
	+
	frame_bury -3 // offset: uint64

	// examples/raffle/raffle.algo.ts:139
	// maxCondition = x > RAND_MAX - (((RAND_MAX % n) + 1) % n)
	frame_dig -2 // x: uint64
	int 18_446_744_073_709_551_615
	int 18_446_744_073_709_551_615
	frame_dig -1 // n: uint64
	%
	int 1
	+
	frame_dig -1 // n: uint64
	%
	-
	>
	frame_bury -4 // maxCondition: bool
	frame_dig -4 // maxCondition: bool
	dup
	bz skip_and0
	frame_dig -3 // offset: uint64
	int 32
	<
	&&

skip_and0:
	bnz do_while_0

	// if1_condition
	// examples/raffle/raffle.algo.ts:142
	// maxCondition
	frame_dig -4 // maxCondition: bool
	bz if1_end

	// if1_consequent
	// examples/raffle/raffle.algo.ts:142
	// return false;
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

if1_end:
	// examples/raffle/raffle.algo.ts:144
	// this.winningTicket.value = x % n
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	frame_dig -2 // x: uint64
	frame_dig -1 // n: uint64
	%
	app_global_put

	// examples/raffle/raffle.algo.ts:145
	// return true;
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// claim()void
//
// Send the asset to the the sender if they have the winning ticket
abi_route_claim:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute claim()void
	callsub claim
	int 1
	return

claim:
	proto 1 0

	// examples/raffle/raffle.algo.ts:150
	// ticketRange = this.tickets(this.txn.sender).value
	txn Sender
	frame_bury -1 // storage key//ticketRange

	// examples/raffle/raffle.algo.ts:152
	// assert(ticketRange.start <= this.winningTicket.value)
	frame_dig -1 // storage key//ticketRange
	box_get
	assert
	extract 0 8
	btoi
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	app_global_get
	<=
	assert

	// examples/raffle/raffle.algo.ts:153
	// assert(ticketRange.end >= this.winningTicket.value)
	frame_dig -1 // storage key//ticketRange
	box_get
	assert
	extract 8 8
	btoi
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	app_global_get
	>=
	assert

	// examples/raffle/raffle.algo.ts:155
	// sendAssetTransfer({
	//       assetReceiver: this.txn.sender,
	//       xferAsset: this.asset.value,
	//       assetAmount: this.app.address.assetBalance(this.asset.value),
	//       assetCloseTo: this.txn.sender,
	//       fee: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// examples/raffle/raffle.algo.ts:156
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// examples/raffle/raffle.algo.ts:157
	// xferAsset: this.asset.value
	byte 0x6173736574 // "asset"
	app_global_get
	itxn_field XferAsset

	// examples/raffle/raffle.algo.ts:158
	// assetAmount: this.app.address.assetBalance(this.asset.value)
	global CurrentApplicationAddress
	byte 0x6173736574 // "asset"
	app_global_get
	asset_holding_get AssetBalance
	assert
	itxn_field AssetAmount

	// examples/raffle/raffle.algo.ts:159
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// examples/raffle/raffle.algo.ts:160
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// getRefund()void
//
// Allows purchasers to get a refund if the winning ticket has not been drawn
// and 1512 rounds have passed since the draw round, meaning the oracle no
// longer has the data for the draw round
abi_route_getRefund:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute getRefund()void
	callsub getRefund
	int 1
	return

getRefund:
	proto 2 0

	// examples/raffle/raffle.algo.ts:170
	// assert(!this.winningTicket.exists)
	txna Applications 0
	byte 0x77696e6e696e675469636b6574 // "winningTicket"
	app_global_get_ex
	swap
	pop
	!
	assert

	// examples/raffle/raffle.algo.ts:171
	// assert(globals.round > this.drawRound.value + 1512)
	global Round
	byte 0x64726177526f756e64 // "drawRound"
	app_global_get
	int 1512
	+
	>
	assert

	// examples/raffle/raffle.algo.ts:173
	// ticketRange = this.tickets(this.txn.sender).value
	txn Sender
	frame_bury -1 // storage key//ticketRange

	// examples/raffle/raffle.algo.ts:174
	// ticketCount = ticketRange.end - ticketRange.start + 1
	frame_dig -1 // storage key//ticketRange
	box_get
	assert
	extract 8 8
	btoi
	frame_dig -1 // storage key//ticketRange
	box_get
	assert
	extract 0 8
	btoi
	-
	int 1
	+
	frame_bury -2 // ticketCount: uint64

	// examples/raffle/raffle.algo.ts:176
	// this.tickets(this.txn.sender).delete()
	txn Sender
	box_del

	// examples/raffle/raffle.algo.ts:178
	// sendPayment({
	//       amount: this.ticketPrice.value * ticketCount,
	//       receiver: this.txn.sender,
	//       fee: 0,
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// examples/raffle/raffle.algo.ts:179
	// amount: this.ticketPrice.value * ticketCount
	byte 0x7469636b65745072696365 // "ticketPrice"
	app_global_get
	frame_dig -2 // ticketCount: uint64
	*
	itxn_field Amount

	// examples/raffle/raffle.algo.ts:180
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// examples/raffle/raffle.algo.ts:181
	// fee: 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

create_NoOp:
	method "createApplication(uint64,uint64)void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "setAsset(asset)void"
	method "startRaffle(uint64,uint64)void"
	method "buyTickets(pay,uint64)void"
	method "draw()bool"
	method "claim()void"
	method "getRefund()void"
	txna ApplicationArgs 0
	match abi_route_setAsset abi_route_startRaffle abi_route_buyTickets abi_route_draw abi_route_claim abi_route_getRefund
	err
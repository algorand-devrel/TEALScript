/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import type { TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createApplication(uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "setAsset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "startRaffle(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "buyTickets(pay,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "draw(application)bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getRefund()void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "randomnessOracle": {
          "type": "uint64",
          "key": "randomnessOracle"
        },
        "ticketPrice": {
          "type": "uint64",
          "key": "ticketPrice"
        },
        "asset": {
          "type": "uint64",
          "key": "asset"
        },
        "endRound": {
          "type": "uint64",
          "key": "endRound"
        },
        "drawRound": {
          "type": "uint64",
          "key": "drawRound"
        },
        "totalTickets": {
          "type": "uint64",
          "key": "totalTickets"
        },
        "winningTicket": {
          "type": "uint64",
          "key": "winningTicket"
        },
        "randomBytes": {
          "type": "bytes",
          "key": "randomBytes"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 7
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNjMuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wCgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCi8vIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCx1aW50NjQpdm9pZAovLwovLyBDcmVhdGUgdGhlIHJhZmZsZQovLwovLyBAcGFyYW0gdGlja2V0UHJpY2UgVGhlIHByaWNlIG9mIGEgc2luZ2xlIHRpY2tldCAodUFMR08pCi8vIEBwYXJhbSByYW5kb21uZXNzT3JhY2xlIFRoZSBhcHAgSUQgb2YgdGhlIHJhbmRvbW5lc3Mgb3JhY2xlCmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCS8vIHJhbmRvbW5lc3NPcmFjbGU6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIHRpY2tldFByaWNlOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGNyZWF0ZUFwcGxpY2F0aW9uKHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgoJaW50IDEKCXJldHVybgoKY3JlYXRlQXBwbGljYXRpb246Cglwcm90byAyIDAKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6NDMKCS8vIHRoaXMucmFuZG9tbmVzc09yYWNsZS52YWx1ZSA9IHJhbmRvbW5lc3NPcmFjbGUKCWJ5dGUgMHg3MjYxNmU2NDZmNmQ2ZTY1NzM3MzRmNzI2MTYzNmM2NSAvLyAicmFuZG9tbmVzc09yYWNsZSIKCWZyYW1lX2RpZyAtMiAvLyByYW5kb21uZXNzT3JhY2xlOiB1aW50NjQKCWFwcF9nbG9iYWxfcHV0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjQ0CgkvLyB0aGlzLnRpY2tldFByaWNlLnZhbHVlID0gdGlja2V0UHJpY2UKCWJ5dGUgMHg3NDY5NjM2YjY1NzQ1MDcyNjk2MzY1IC8vICJ0aWNrZXRQcmljZSIKCWZyYW1lX2RpZyAtMSAvLyB0aWNrZXRQcmljZTogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzZXRBc3NldChhc3NldCl2b2lkCi8vCi8vIFNldCB0aGUgYXNzZXQgdG8gYmUgcmFmZmxlZAovLwovLyBAcGFyYW0gYXNzZXQgVGhlIGFzc2V0IHRvIGJlIHJhZmZsZWQKYWJpX3JvdXRlX3NldEFzc2V0OgoJLy8gYXNzZXQ6IGFzc2V0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBc3NldHMKCgkvLyBleGVjdXRlIHNldEFzc2V0KGFzc2V0KXZvaWQKCWNhbGxzdWIgc2V0QXNzZXQKCWludCAxCglyZXR1cm4KCnNldEFzc2V0OgoJcHJvdG8gMSAwCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjU0CgkvLyBhc3NlcnQoIXRoaXMuYXNzZXQuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDYxNzM3MzY1NzQgLy8gImFzc2V0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjU2CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAwLAoJLy8gICAgICAgZmVlOiAwLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6NTcKCS8vIGFzc2V0UmVjZWl2ZXI6IHRoaXMuYXBwLmFkZHJlc3MKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6NTgKCS8vIHhmZXJBc3NldDogYXNzZXQKCWZyYW1lX2RpZyAtMSAvLyBhc3NldDogYXNzZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjU5CgkvLyBhc3NldEFtb3VudDogMAoJaW50IDAKCWl0eG5fZmllbGQgQXNzZXRBbW91bnQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6NjAKCS8vIGZlZTogMAoJaW50IDAKCWl0eG5fZmllbGQgRmVlCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czo2MwoJLy8gdGhpcy5hc3NldC52YWx1ZSA9IGFzc2V0CglieXRlIDB4NjE3MzczNjU3NCAvLyAiYXNzZXQiCglmcmFtZV9kaWcgLTEgLy8gYXNzZXQ6IGFzc2V0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBzdGFydFJhZmZsZSh1aW50NjQsdWludDY0LGF4ZmVyKXZvaWQKLy8KLy8gU3RhcnQgdGhlIHJhZmZsZQovLwovLyBAcGFyYW0gZW5kIFRoZSByb3VuZCBudW1iZXIgd2hlbiB0aGUgcmFmZmxlIGVuZHMKLy8gQHBhcmFtIGRyYXcgVGhlIHJvdW5kIG51bWJlciB3aGVuIHRoZSByYWZmbGUgaXMgZHJhd24KYWJpX3JvdXRlX3N0YXJ0UmFmZmxlOgoJLy8gZHJhdzogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gZW5kOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBheGZlcjogYXhmZXIKCXR4biBHcm91cEluZGV4CglpbnQgMQoJLQoJZHVwCglndHhucyBUeXBlRW51bQoJaW50IGF4ZmVyCgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBzdGFydFJhZmZsZSh1aW50NjQsdWludDY0LGF4ZmVyKXZvaWQKCWNhbGxzdWIgc3RhcnRSYWZmbGUKCWludCAxCglyZXR1cm4KCnN0YXJ0UmFmZmxlOgoJcHJvdG8gMyAwCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjc0CgkvLyB2ZXJpZnlUeG4oYXhmZXIsIHsKCS8vICAgICAgIGFzc2V0QW1vdW50OiB7IGdyZWF0ZXJUaGFuOiAwIH0sCgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiB0aGlzLmFwcC5hZGRyZXNzLAoJLy8gICAgICAgeGZlckFzc2V0OiB0aGlzLmFzc2V0LnZhbHVlLAoJLy8gICAgIH0pCgkvLyB2ZXJpZnkgYXNzZXRBbW91bnQKCWZyYW1lX2RpZyAtMSAvLyBheGZlcjogYXhmZXIKCWd0eG5zIEFzc2V0QW1vdW50CglpbnQgMAoJPgoJYXNzZXJ0CgoJLy8gdmVyaWZ5IGFzc2V0UmVjZWl2ZXIKCWZyYW1lX2RpZyAtMSAvLyBheGZlcjogYXhmZXIKCWd0eG5zIEFzc2V0UmVjZWl2ZXIKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHhmZXJBc3NldAoJZnJhbWVfZGlnIC0xIC8vIGF4ZmVyOiBheGZlcgoJZ3R4bnMgWGZlckFzc2V0CglieXRlIDB4NjE3MzczNjU3NCAvLyAiYXNzZXQiCglhcHBfZ2xvYmFsX2dldAoJPT0KCWFzc2VydAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czo4MAoJLy8gYXNzZXJ0KGRyYXcgPiBlbmQpCglmcmFtZV9kaWcgLTMgLy8gZHJhdzogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gZW5kOiB1aW50NjQKCT4KCWFzc2VydAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czo4MQoJLy8gdGhpcy5lbmRSb3VuZC52YWx1ZSA9IGVuZAoJYnl0ZSAweDY1NmU2NDUyNmY3NTZlNjQgLy8gImVuZFJvdW5kIgoJZnJhbWVfZGlnIC0yIC8vIGVuZDogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czo4MgoJLy8gdGhpcy5kcmF3Um91bmQudmFsdWUgPSBkcmF3CglieXRlIDB4NjQ3MjYxNzc1MjZmNzU2ZTY0IC8vICJkcmF3Um91bmQiCglmcmFtZV9kaWcgLTMgLy8gZHJhdzogdWludDY0CglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBidXlUaWNrZXRzKHVpbnQ2NCxwYXkpdm9pZAovLwovLyBCdXkgdGlja2V0cy4gTm90ZSB0aGlzIGNhbiBvbmx5IGJlIGNhbGxlZCBvbmNlIQovLyBJdCB3b3VsZCBiZSBwb3NzaWJsZSB0byBhbGxvdyBtdWx0aXBsZSBwdXJjaGFzZXMsIGJ1dAovLyBmb3Igc2ltcGxpY2l0eSwgb25seSBvbmUgcHVyY2hhc2UgaXMgYWxsb3dlZC4KLy8KLy8gQHBhcmFtIHBheW1lbnQgVGhlIHBheW1lbnQgZm9yIHRoZSB0aWNrZXRzCi8vIEBwYXJhbSBxdWFuaXR5IFRoZSBudW1iZXIgb2YgdGlja2V0cyB0byBidXkKLy8KLy8gQHJldHVybnMgVGhlIHRvdGFsIG51bWJlciBvZiB0aWNrZXRzIG93bmVkIGJ5IHRoZSBzZW5kZXIKYWJpX3JvdXRlX2J1eVRpY2tldHM6CglieXRlIDB4OyBkdXBuIDIgLy8gcHVzaCBlbXB0eSBieXRlcyB0byBmaWxsIHRoZSBzdGFjayBmcmFtZSBmb3IgdGhpcyBzdWJyb3V0aW5lJ3MgbG9jYWwgdmFyaWFibGVzCgoJLy8gcXVhbnRpdHk6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIHBheW1lbnQ6IHBheQoJdHhuIEdyb3VwSW5kZXgKCWludCAxCgktCglkdXAKCWd0eG5zIFR5cGVFbnVtCglpbnQgcGF5Cgk9PQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBidXlUaWNrZXRzKHVpbnQ2NCxwYXkpdm9pZAoJY2FsbHN1YiBidXlUaWNrZXRzCglpbnQgMQoJcmV0dXJuCgpidXlUaWNrZXRzOgoJcHJvdG8gNSAwCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjk2CgkvLyBhc3NlcnQoZ2xvYmFscy5yb3VuZCA8IHRoaXMuZW5kUm91bmQudmFsdWUpCglnbG9iYWwgUm91bmQKCWJ5dGUgMHg2NTZlNjQ1MjZmNzU2ZTY0IC8vICJlbmRSb3VuZCIKCWFwcF9nbG9iYWxfZ2V0Cgk8Cglhc3NlcnQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6OTcKCS8vIGFzc2VydChxdWFudGl0eSA+IDApCglmcmFtZV9kaWcgLTIgLy8gcXVhbnRpdHk6IHVpbnQ2NAoJaW50IDAKCT4KCWFzc2VydAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czo5OQoJLy8gYXNzZXJ0KCF0aGlzLnRpY2tldHMocGF5bWVudC5zZW5kZXIpLmV4aXN0cykKCWZyYW1lX2RpZyAtMSAvLyBwYXltZW50OiBwYXkKCWd0eG5zIFNlbmRlcgoJYm94X2xlbgoJc3dhcAoJcG9wCgkhCglhc3NlcnQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTAxCgkvLyBuZXdUb3RhbCA9IHRoaXMudG90YWxUaWNrZXRzLnZhbHVlICsgcXVhbnRpdHkgKyAxCglieXRlIDB4NzQ2Zjc0NjE2YzU0Njk2MzZiNjU3NDczIC8vICJ0b3RhbFRpY2tldHMiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIHF1YW50aXR5OiB1aW50NjQKCSsKCWludCAxCgkrCglmcmFtZV9idXJ5IC0zIC8vIG5ld1RvdGFsOiB1aW50NjQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTAzCgkvLyBwcmVNQlIgPSB0aGlzLmFwcC5hZGRyZXNzLm1pbkJhbGFuY2UKCWdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCglhY2N0X3BhcmFtc19nZXQgQWNjdE1pbkJhbGFuY2UKCWFzc2VydAoJZnJhbWVfYnVyeSAtNCAvLyBwcmVNQlI6IHVpbnQ2NAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxMDQKCS8vIHRoaXMudGlja2V0cyhwYXltZW50LnNlbmRlcikudmFsdWUgPSB7IHN0YXJ0OiB0aGlzLnRvdGFsVGlja2V0cy52YWx1ZSwgZW5kOiBuZXdUb3RhbCAtIDEgfQoJZnJhbWVfZGlnIC0xIC8vIHBheW1lbnQ6IHBheQoJZ3R4bnMgU2VuZGVyCglieXRlIDB4NzQ2Zjc0NjE2YzU0Njk2MzZiNjU3NDczIC8vICJ0b3RhbFRpY2tldHMiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJZnJhbWVfZGlnIC0zIC8vIG5ld1RvdGFsOiB1aW50NjQKCWludCAxCgktCglpdG9iCgljb25jYXQKCWJveF9wdXQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTA1CgkvLyBtYnJEZWx0YSA9IHRoaXMuYXBwLmFkZHJlc3MubWluQmFsYW5jZSAtIHByZU1CUgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCWFjY3RfcGFyYW1zX2dldCBBY2N0TWluQmFsYW5jZQoJYXNzZXJ0CglmcmFtZV9kaWcgLTQgLy8gcHJlTUJSOiB1aW50NjQKCS0KCWZyYW1lX2J1cnkgLTUgLy8gbWJyRGVsdGE6IHVpbnQ2NAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxMDcKCS8vIHZlcmlmeVR4bihwYXltZW50LCB7CgkvLyAgICAgICBhbW91bnQ6IHRoaXMudGlja2V0UHJpY2UudmFsdWUgKiBxdWFudGl0eSArIG1ickRlbHRhLAoJLy8gICAgICAgc2VuZGVyOiB0aGlzLnR4bi5zZW5kZXIsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy5hcHAuYWRkcmVzcywKCS8vICAgICB9KQoJLy8gdmVyaWZ5IGFtb3VudAoJZnJhbWVfZGlnIC0xIC8vIHBheW1lbnQ6IHBheQoJZ3R4bnMgQW1vdW50CglieXRlIDB4NzQ2OTYzNmI2NTc0NTA3MjY5NjM2NSAvLyAidGlja2V0UHJpY2UiCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0yIC8vIHF1YW50aXR5OiB1aW50NjQKCSoKCWZyYW1lX2RpZyAtNSAvLyBtYnJEZWx0YTogdWludDY0CgkrCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHNlbmRlcgoJZnJhbWVfZGlnIC0xIC8vIHBheW1lbnQ6IHBheQoJZ3R4bnMgU2VuZGVyCgl0eG4gU2VuZGVyCgk9PQoJYXNzZXJ0CgoJLy8gdmVyaWZ5IHJlY2VpdmVyCglmcmFtZV9kaWcgLTEgLy8gcGF5bWVudDogcGF5CglndHhucyBSZWNlaXZlcgoJZ2xvYmFsIEN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MKCT09Cglhc3NlcnQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTEzCgkvLyB0aGlzLnRvdGFsVGlja2V0cy52YWx1ZSA9IG5ld1RvdGFsCglieXRlIDB4NzQ2Zjc0NjE2YzU0Njk2MzZiNjU3NDczIC8vICJ0b3RhbFRpY2tldHMiCglmcmFtZV9kaWcgLTMgLy8gbmV3VG90YWw6IHVpbnQ2NAoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKZ2V0UmFuZG9tQnl0ZXM6Cglwcm90byAwIDAKCgkvLyBpZjBfY29uZGl0aW9uCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTE4CgkvLyB0aGlzLnJhbmRvbUJ5dGVzLmV4aXN0cwoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDcyNjE2ZTY0NmY2ZDQyNzk3NDY1NzMgLy8gInJhbmRvbUJ5dGVzIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYnogaWYwX2Vsc2UKCgkvLyBpZjBfY29uc2VxdWVudAoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjExOQoJLy8gdGhpcy5yYW5kb21CeXRlcy52YWx1ZSA9IHNoYTI1Nih0aGlzLnJhbmRvbUJ5dGVzLnZhbHVlKSBhcyBieXRlcwoJYnl0ZSAweDcyNjE2ZTY0NmY2ZDQyNzk3NDY1NzMgLy8gInJhbmRvbUJ5dGVzIgoJYnl0ZSAweDcyNjE2ZTY0NmY2ZDQyNzk3NDY1NzMgLy8gInJhbmRvbUJ5dGVzIgoJYXBwX2dsb2JhbF9nZXQKCXNoYTI1NgoJYXBwX2dsb2JhbF9wdXQKCWIgaWYwX2VuZAoKaWYwX2Vsc2U6CgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTIxCgkvLyB0aGlzLnJhbmRvbUJ5dGVzLnZhbHVlID0gc2VuZE1ldGhvZENhbGw8W3VpbnQ2NCwgYnl0ZXNdLCBieXRlcz4oewoJLy8gICAgICAgICBuYW1lOiAnbXVzdF9nZXQnLAoJLy8gICAgICAgICBtZXRob2RBcmdzOiBbdGhpcy5kcmF3Um91bmQudmFsdWUsICcnXSwKCS8vICAgICAgICAgYXBwbGljYXRpb25JRDogQXBwbGljYXRpb24uZnJvbUlEKHRoaXMucmFuZG9tbmVzc09yYWNsZS52YWx1ZSksCgkvLyAgICAgICAgIGZlZTogMCwKCS8vICAgICAgICAgb25Db21wbGV0aW9uOiAnTm9PcCcsCgkvLyAgICAgICB9KQoJYnl0ZSAweDcyNjE2ZTY0NmY2ZDQyNzk3NDY1NzMgLy8gInJhbmRvbUJ5dGVzIgoJaXR4bl9iZWdpbgoJaW50IGFwcGwKCWl0eG5fZmllbGQgVHlwZUVudW0KCW1ldGhvZCAibXVzdF9nZXQodWludDY0LGJ5dGVbXSlieXRlW10iCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxMjMKCS8vIG1ldGhvZEFyZ3M6IFt0aGlzLmRyYXdSb3VuZC52YWx1ZSwgJyddCglieXRlIDB4NjQ3MjYxNzc1MjZmNzU2ZTY0IC8vICJkcmF3Um91bmQiCglhcHBfZ2xvYmFsX2dldAoJaXRvYgoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKCWJ5dGUgMHgwMDAwCglpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxMjQKCS8vIGFwcGxpY2F0aW9uSUQ6IEFwcGxpY2F0aW9uLmZyb21JRCh0aGlzLnJhbmRvbW5lc3NPcmFjbGUudmFsdWUpCglieXRlIDB4NzI2MTZlNjQ2ZjZkNmU2NTczNzM0ZjcyNjE2MzZjNjUgLy8gInJhbmRvbW5lc3NPcmFjbGUiCglhcHBfZ2xvYmFsX2dldAoJaXR4bl9maWVsZCBBcHBsaWNhdGlvbklECgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjEyNQoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTI2CgkvLyBvbkNvbXBsZXRpb246ICdOb09wJwoJaW50IE5vT3AKCWl0eG5fZmllbGQgT25Db21wbGV0aW9uCgoJLy8gU3VibWl0IGlubmVyIHRyYW5zYWN0aW9uCglpdHhuX3N1Ym1pdAoJaXR4biBOdW1Mb2dzCglpbnQgMQoJLQoJaXR4bmFzIExvZ3MKCWV4dHJhY3QgNCAwCglhcHBfZ2xvYmFsX3B1dAoKaWYwX2VuZDoKCXJldHN1YgoKLy8gZHJhdyhhcHBsaWNhdGlvbilib29sCi8vCi8vIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycwphYmlfcm91dGVfZHJhdzoKCWJ5dGUgMHg7IGR1cG4gMyAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBfb3JhY2xlUmVmZXJlbmNlOiBhcHBsaWNhdGlvbgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQXBwbGljYXRpb25zCgoJLy8gZXhlY3V0ZSBkcmF3KGFwcGxpY2F0aW9uKWJvb2wKCWNhbGxzdWIgZHJhdwoJaW50IDEKCXJldHVybgoKZHJhdzoKCXByb3RvIDUgMAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxMzUKCS8vIGFzc2VydCghdGhpcy53aW5uaW5nVGlja2V0LmV4aXN0cykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg3NzY5NmU2ZTY5NmU2NzU0Njk2MzZiNjU3NCAvLyAid2lubmluZ1RpY2tldCIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglzd2FwCglwb3AKCSEKCWFzc2VydAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxMzYKCS8vIHRoaXMuZ2V0UmFuZG9tQnl0ZXMoKQoJY2FsbHN1YiBnZXRSYW5kb21CeXRlcwoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNDAKCS8vIG4gPSB0aGlzLnRvdGFsVGlja2V0cy52YWx1ZQoJYnl0ZSAweDc0NmY3NDYxNmM1NDY5NjM2YjY1NzQ3MyAvLyAidG90YWxUaWNrZXRzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2J1cnkgLTIgLy8gbjogdWludDY0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE0MgoJLy8gb2Zmc2V0ID0gMAoJaW50IDAKCWZyYW1lX2J1cnkgLTQgLy8gb2Zmc2V0OiB1aW50NjQKCmRvX3doaWxlXzA6CgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTQ2CgkvLyB4ID0gZXh0cmFjdF91aW50NjQodGhpcy5yYW5kb21CeXRlcy52YWx1ZSwgb2Zmc2V0KQoJYnl0ZSAweDcyNjE2ZTY0NmY2ZDQyNzk3NDY1NzMgLy8gInJhbmRvbUJ5dGVzIgoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtNCAvLyBvZmZzZXQ6IHVpbnQ2NAoJZXh0cmFjdF91aW50NjQKCWZyYW1lX2J1cnkgLTMgLy8geDogdWludDY0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE0OAoJLy8gb2Zmc2V0ID0gb2Zmc2V0ICsgOAoJZnJhbWVfZGlnIC00IC8vIG9mZnNldDogdWludDY0CglpbnQgOAoJKwoJZnJhbWVfYnVyeSAtNCAvLyBvZmZzZXQ6IHVpbnQ2NAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNTAKCS8vIG1heENvbmRpdGlvbiA9IHggPiBSQU5EX01BWCAtICgoKFJBTkRfTUFYICUgbikgKyAxKSAlIG4pCglmcmFtZV9kaWcgLTMgLy8geDogdWludDY0CglpbnQgMThfNDQ2Xzc0NF8wNzNfNzA5XzU1MV82MTUKCWludCAxOF80NDZfNzQ0XzA3M183MDlfNTUxXzYxNQoJZnJhbWVfZGlnIC0yIC8vIG46IHVpbnQ2NAoJJQoJaW50IDEKCSsKCWZyYW1lX2RpZyAtMiAvLyBuOiB1aW50NjQKCSUKCS0KCT4KCWZyYW1lX2J1cnkgLTUgLy8gbWF4Q29uZGl0aW9uOiBib29sCglmcmFtZV9kaWcgLTUgLy8gbWF4Q29uZGl0aW9uOiBib29sCglkdXAKCWJ6IHNraXBfYW5kMAoJZnJhbWVfZGlnIC00IC8vIG9mZnNldDogdWludDY0CglpbnQgMzIKCTwKCSYmCgpza2lwX2FuZDA6CglibnogZG9fd2hpbGVfMAoKCS8vIGlmMV9jb25kaXRpb24KCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNTMKCS8vIG1heENvbmRpdGlvbgoJZnJhbWVfZGlnIC01IC8vIG1heENvbmRpdGlvbjogYm9vbAoJYnogaWYxX2VuZAoKCS8vIGlmMV9jb25zZXF1ZW50CgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTUzCgkvLyByZXR1cm4gZmFsc2U7CglpbnQgMAoJYnl0ZSAweDAwCglpbnQgMAoJdW5jb3ZlciAyCglzZXRiaXQKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKaWYxX2VuZDoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNTUKCS8vIHRoaXMud2lubmluZ1RpY2tldC52YWx1ZSA9IHggJSBuCglieXRlIDB4Nzc2OTZlNmU2OTZlNjc1NDY5NjM2YjY1NzQgLy8gIndpbm5pbmdUaWNrZXQiCglmcmFtZV9kaWcgLTMgLy8geDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gbjogdWludDY0CgklCglhcHBfZ2xvYmFsX3B1dAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNTYKCS8vIHJldHVybiB0cnVlOwoJaW50IDEKCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0CglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCi8vIGNsYWltKCl2b2lkCi8vCi8vIFNlbmQgdGhlIGFzc2V0IHRvIHRoZSB0aGUgc2VuZGVyIGlmIHRoZXkgaGF2ZSB0aGUgd2lubmluZyB0aWNrZXQKYWJpX3JvdXRlX2NsYWltOgoJYnl0ZSAweCAvLyBwdXNoIGVtcHR5IGJ5dGVzIHRvIGZpbGwgdGhlIHN0YWNrIGZyYW1lIGZvciB0aGlzIHN1YnJvdXRpbmUncyBsb2NhbCB2YXJpYWJsZXMKCgkvLyBleGVjdXRlIGNsYWltKCl2b2lkCgljYWxsc3ViIGNsYWltCglpbnQgMQoJcmV0dXJuCgpjbGFpbToKCXByb3RvIDEgMAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNjEKCS8vIHRpY2tldFJhbmdlID0gdGhpcy50aWNrZXRzKHRoaXMudHhuLnNlbmRlcikudmFsdWUKCXR4biBTZW5kZXIKCWZyYW1lX2J1cnkgLTEgLy8gc3RvcmFnZSBrZXkvL3RpY2tldFJhbmdlCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE2MwoJLy8gYXNzZXJ0KHRpY2tldFJhbmdlLnN0YXJ0IDw9IHRoaXMud2lubmluZ1RpY2tldC52YWx1ZSkKCWZyYW1lX2RpZyAtMSAvLyBzdG9yYWdlIGtleS8vdGlja2V0UmFuZ2UKCWJveF9nZXQKCWFzc2VydAoJZXh0cmFjdCAwIDgKCWJ0b2kKCWJ5dGUgMHg3NzY5NmU2ZTY5NmU2NzU0Njk2MzZiNjU3NCAvLyAid2lubmluZ1RpY2tldCIKCWFwcF9nbG9iYWxfZ2V0Cgk8PQoJYXNzZXJ0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE2NAoJLy8gYXNzZXJ0KHRpY2tldFJhbmdlLmVuZCA+PSB0aGlzLndpbm5pbmdUaWNrZXQudmFsdWUpCglmcmFtZV9kaWcgLTEgLy8gc3RvcmFnZSBrZXkvL3RpY2tldFJhbmdlCglib3hfZ2V0Cglhc3NlcnQKCWV4dHJhY3QgOCA4CglidG9pCglieXRlIDB4Nzc2OTZlNmU2OTZlNjc1NDY5NjM2YjY1NzQgLy8gIndpbm5pbmdUaWNrZXQiCglhcHBfZ2xvYmFsX2dldAoJPj0KCWFzc2VydAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNjYKCS8vIHNlbmRBc3NldFRyYW5zZmVyKHsKCS8vICAgICAgIGFzc2V0UmVjZWl2ZXI6IHRoaXMudHhuLnNlbmRlciwKCS8vICAgICAgIHhmZXJBc3NldDogdGhpcy5hc3NldC52YWx1ZSwKCS8vICAgICAgIGFzc2V0QW1vdW50OiB0aGlzLmFwcC5hZGRyZXNzLmFzc2V0QmFsYW5jZSh0aGlzLmFzc2V0LnZhbHVlKSwKCS8vICAgICAgIGFzc2V0Q2xvc2VUbzogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgZmVlOiAwLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgYXhmZXIKCWl0eG5fZmllbGQgVHlwZUVudW0KCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTY3CgkvLyBhc3NldFJlY2VpdmVyOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxNjgKCS8vIHhmZXJBc3NldDogdGhpcy5hc3NldC52YWx1ZQoJYnl0ZSAweDYxNzM3MzY1NzQgLy8gImFzc2V0IgoJYXBwX2dsb2JhbF9nZXQKCWl0eG5fZmllbGQgWGZlckFzc2V0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE2OQoJLy8gYXNzZXRBbW91bnQ6IHRoaXMuYXBwLmFkZHJlc3MuYXNzZXRCYWxhbmNlKHRoaXMuYXNzZXQudmFsdWUpCglnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwoJYnl0ZSAweDYxNzM3MzY1NzQgLy8gImFzc2V0IgoJYXBwX2dsb2JhbF9nZXQKCWFzc2V0X2hvbGRpbmdfZ2V0IEFzc2V0QmFsYW5jZQoJYXNzZXJ0CglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE3MAoJLy8gYXNzZXRDbG9zZVRvOiB0aGlzLnR4bi5zZW5kZXIKCXR4biBTZW5kZXIKCWl0eG5fZmllbGQgQXNzZXRDbG9zZVRvCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE3MQoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCi8vIGdldFJlZnVuZCgpdm9pZAovLwovLyBBbGxvd3MgcHVyY2hhc2VycyB0byBnZXQgYSByZWZ1bmQgaWYgdGhlIHdpbm5pbmcgdGlja2V0IGhhcyBub3QgYmVlbiBkcmF3bgovLyBhbmQgMTUxMiByb3VuZHMgaGF2ZSBwYXNzZWQgc2luY2UgdGhlIGRyYXcgcm91bmQsIG1lYW5pbmcgdGhlIG9yYWNsZSBubwovLyBsb25nZXIgaGFzIHRoZSBkYXRhIGZvciB0aGUgZHJhdyByb3VuZAphYmlfcm91dGVfZ2V0UmVmdW5kOgoJYnl0ZSAweDsgZHVwIC8vIHB1c2ggZW1wdHkgYnl0ZXMgdG8gZmlsbCB0aGUgc3RhY2sgZnJhbWUgZm9yIHRoaXMgc3Vicm91dGluZSdzIGxvY2FsIHZhcmlhYmxlcwoKCS8vIGV4ZWN1dGUgZ2V0UmVmdW5kKCl2b2lkCgljYWxsc3ViIGdldFJlZnVuZAoJaW50IDEKCXJldHVybgoKZ2V0UmVmdW5kOgoJcHJvdG8gMiAwCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE4MQoJLy8gYXNzZXJ0KCF0aGlzLndpbm5pbmdUaWNrZXQuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDc3Njk2ZTZlNjk2ZTY3NTQ2OTYzNmI2NTc0IC8vICJ3aW5uaW5nVGlja2V0IgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJIQoJYXNzZXJ0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE4MgoJLy8gYXNzZXJ0KGdsb2JhbHMucm91bmQgPiB0aGlzLmRyYXdSb3VuZC52YWx1ZSArIDE1MTIpCglnbG9iYWwgUm91bmQKCWJ5dGUgMHg2NDcyNjE3NzUyNmY3NTZlNjQgLy8gImRyYXdSb3VuZCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMTUxMgoJKwoJPgoJYXNzZXJ0CgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE4NAoJLy8gdGlja2V0UmFuZ2UgPSB0aGlzLnRpY2tldHModGhpcy50eG4uc2VuZGVyKS52YWx1ZQoJdHhuIFNlbmRlcgoJZnJhbWVfYnVyeSAtMSAvLyBzdG9yYWdlIGtleS8vdGlja2V0UmFuZ2UKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTg1CgkvLyB0aWNrZXRDb3VudCA9IHRpY2tldFJhbmdlLmVuZCAtIHRpY2tldFJhbmdlLnN0YXJ0ICsgMQoJZnJhbWVfZGlnIC0xIC8vIHN0b3JhZ2Uga2V5Ly90aWNrZXRSYW5nZQoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDggOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIHN0b3JhZ2Uga2V5Ly90aWNrZXRSYW5nZQoJYm94X2dldAoJYXNzZXJ0CglleHRyYWN0IDAgOAoJYnRvaQoJLQoJaW50IDEKCSsKCWZyYW1lX2J1cnkgLTIgLy8gdGlja2V0Q291bnQ6IHVpbnQ2NAoKCS8vIGV4YW1wbGVzL3JhZmZsZS9yYWZmbGUuYWxnby50czoxODcKCS8vIHRoaXMudGlja2V0cyh0aGlzLnR4bi5zZW5kZXIpLmRlbGV0ZSgpCgl0eG4gU2VuZGVyCglib3hfZGVsCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE4OQoJLy8gc2VuZFBheW1lbnQoewoJLy8gICAgICAgYW1vdW50OiB0aGlzLnRpY2tldFByaWNlLnZhbHVlICogdGlja2V0Q291bnQsCgkvLyAgICAgICByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyLAoJLy8gICAgICAgZmVlOiAwLAoJLy8gICAgIH0pCglpdHhuX2JlZ2luCglpbnQgcGF5CglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE5MAoJLy8gYW1vdW50OiB0aGlzLnRpY2tldFByaWNlLnZhbHVlICogdGlja2V0Q291bnQKCWJ5dGUgMHg3NDY5NjM2YjY1NzQ1MDcyNjk2MzY1IC8vICJ0aWNrZXRQcmljZSIKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTIgLy8gdGlja2V0Q291bnQ6IHVpbnQ2NAoJKgoJaXR4bl9maWVsZCBBbW91bnQKCgkvLyBleGFtcGxlcy9yYWZmbGUvcmFmZmxlLmFsZ28udHM6MTkxCgkvLyByZWNlaXZlcjogdGhpcy50eG4uc2VuZGVyCgl0eG4gU2VuZGVyCglpdHhuX2ZpZWxkIFJlY2VpdmVyCgoJLy8gZXhhbXBsZXMvcmFmZmxlL3JhZmZsZS5hbGdvLnRzOjE5MgoJLy8gZmVlOiAwCglpbnQgMAoJaXR4bl9maWVsZCBGZWUKCgkvLyBTdWJtaXQgaW5uZXIgdHJhbnNhY3Rpb24KCWl0eG5fc3VibWl0CglyZXRzdWIKCmNyZWF0ZV9Ob09wOgoJbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbih1aW50NjQsdWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKY2FsbF9Ob09wOgoJbWV0aG9kICJzZXRBc3NldChhc3NldCl2b2lkIgoJbWV0aG9kICJzdGFydFJhZmZsZShheGZlcix1aW50NjQsdWludDY0KXZvaWQiCgltZXRob2QgImJ1eVRpY2tldHMocGF5LHVpbnQ2NCl2b2lkIgoJbWV0aG9kICJkcmF3KGFwcGxpY2F0aW9uKWJvb2wiCgltZXRob2QgImNsYWltKCl2b2lkIgoJbWV0aG9kICJnZXRSZWZ1bmQoKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfc2V0QXNzZXQgYWJpX3JvdXRlX3N0YXJ0UmFmZmxlIGFiaV9yb3V0ZV9idXlUaWNrZXRzIGFiaV9yb3V0ZV9kcmF3IGFiaV9yb3V0ZV9jbGFpbSBhYmlfcm91dGVfZ2V0UmVmdW5kCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "NFTRaffle",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [
          {
            "name": "ticketPrice",
            "type": "uint64",
            "desc": "The price of a single ticket (uALGO)"
          },
          {
            "name": "randomnessOracle",
            "type": "uint64",
            "desc": "The app ID of the randomness oracle"
          }
        ],
        "desc": "Create the raffle",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setAsset",
        "args": [
          {
            "name": "asset",
            "type": "asset",
            "desc": "The asset to be raffled"
          }
        ],
        "desc": "Set the asset to be raffled",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "startRaffle",
        "args": [
          {
            "name": "axfer",
            "type": "axfer",
            "desc": ""
          },
          {
            "name": "end",
            "type": "uint64",
            "desc": "The round number when the raffle ends"
          },
          {
            "name": "draw",
            "type": "uint64",
            "desc": "The round number when the raffle is drawn"
          }
        ],
        "desc": "Start the raffle",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "buyTickets",
        "args": [
          {
            "name": "payment",
            "type": "pay",
            "desc": "The payment for the tickets"
          },
          {
            "name": "quantity",
            "type": "uint64",
            "desc": ""
          }
        ],
        "desc": "Buy tickets. Note this can only be called once!It would be possible to allow multiple purchases, butfor simplicity, only one purchase is allowed.",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "draw",
        "args": [
          {
            "name": "_oracleReference",
            "type": "application",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "bool",
          "desc": ""
        }
      },
      {
        "name": "claim",
        "args": [],
        "desc": "Send the asset to the the sender if they have the winning ticket",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "getRefund",
        "args": [],
        "desc": "Allows purchasers to get a refund if the winning ticket has not been drawnand 1512 rounds have passed since the draw round, meaning the oracle nolonger has the data for the draw round",
        "returns": {
          "type": "void",
          "desc": ""
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the NftRaffle smart contract.
 */
export type NftRaffle = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(uint64,uint64)void' | 'createApplication', {
      argsObj: {
        /**
         * The price of a single ticket (uALGO)
         */
        ticketPrice: bigint | number
        /**
         * The app ID of the randomness oracle
         */
        randomnessOracle: bigint | number
      }
      argsTuple: [ticketPrice: bigint | number, randomnessOracle: bigint | number]
      returns: void
    }>
    & Record<'setAsset(asset)void' | 'setAsset', {
      argsObj: {
        /**
         * The asset to be raffled
         */
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'startRaffle(axfer,uint64,uint64)void' | 'startRaffle', {
      argsObj: {
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The round number when the raffle ends
         */
        end: bigint | number
        /**
         * The round number when the raffle is drawn
         */
        draw: bigint | number
      }
      argsTuple: [axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>, end: bigint | number, draw: bigint | number]
      returns: void
    }>
    & Record<'buyTickets(pay,uint64)void' | 'buyTickets', {
      argsObj: {
        /**
         * The payment for the tickets
         */
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        quantity: bigint | number
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>, quantity: bigint | number]
      returns: void
    }>
    & Record<'draw(application)bool' | 'draw', {
      argsObj: {
        _oracleReference: number | bigint
      }
      argsTuple: [_oracleReference: number | bigint]
      returns: boolean
    }>
    & Record<'claim()void' | 'claim', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'getRefund()void' | 'getRefund', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      'randomnessOracle'?: IntegerState
      'ticketPrice'?: IntegerState
      'asset'?: IntegerState
      'endRound'?: IntegerState
      'drawRound'?: IntegerState
      'totalTickets'?: IntegerState
      'winningTicket'?: IntegerState
      'randomBytes'?: BinaryState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type NftRaffleSig = keyof NftRaffle['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends NftRaffleSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the NftRaffle smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends NftRaffleSig> = NftRaffle['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the NftRaffle smart contract to the method's return type
 */
export type MethodReturn<TSignature extends NftRaffleSig> = NftRaffle['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type NftRaffleCreateCalls = (typeof NftRaffleCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type NftRaffleCreateCallParams =
  | (TypedCallParams<'createApplication(uint64,uint64)void'> & (OnCompleteNoOp))
/**
 * Defines arguments required for the deploy method.
 */
export type NftRaffleDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: NftRaffleCreateCalls) => NftRaffleCreateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class NftRaffleCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the NFTRaffle smart contract using the createApplication(uint64,uint64)void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication(uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication(uint64,uint64)void' as const,
          methodArgs: Array.isArray(args) ? args : [args.ticketPrice, args.randomnessOracle],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the setAsset(asset)void ABI method
   *
   * Set the asset to be raffled
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static setAsset(args: MethodArgs<'setAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'setAsset(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the startRaffle(axfer,uint64,uint64)void ABI method
   *
   * Start the raffle
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startRaffle(args: MethodArgs<'startRaffle(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'startRaffle(axfer,uint64,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.axfer, args.end, args.draw],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the buyTickets(pay,uint64)void ABI method
   *
   * Buy tickets. Note this can only be called once!It would be possible to allow multiple purchases, butfor simplicity, only one purchase is allowed.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static buyTickets(args: MethodArgs<'buyTickets(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'buyTickets(pay,uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment, args.quantity],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the draw(application)bool ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static draw(args: MethodArgs<'draw(application)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'draw(application)bool' as const,
      methodArgs: Array.isArray(args) ? args : [args._oracleReference],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim()void ABI method
   *
   * Send the asset to the the sender if they have the winning ticket
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claim(args: MethodArgs<'claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the getRefund()void ABI method
   *
   * Allows purchasers to get a refund if the winning ticket has not been drawnand 1512 rounds have passed since the draw round, meaning the oracle nolonger has the data for the draw round
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static getRefund(args: MethodArgs<'getRefund()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'getRefund()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
}

/**
 * A client to make calls to the NFTRaffle smart contract
 */
export class NftRaffleClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `NftRaffleClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof NftRaffle['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the NFTRaffle smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: NftRaffleDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(NftRaffleCallFactory.create)
    return this.appClient.deploy({
      ...params,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the NFTRaffle smart contract using the createApplication(uint64,uint64)void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication(uint64,uint64)void'>, params: AppClientCallCoreParams & AppClientCompilationParams & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'createApplication(uint64,uint64)void'>>> {
        return $this.mapReturnValue(await $this.appClient.create(NftRaffleCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the NFTRaffle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the setAsset(asset)void ABI method.
   *
   * Set the asset to be raffled
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public setAsset(args: MethodArgs<'setAsset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftRaffleCallFactory.setAsset(args, params))
  }

  /**
   * Calls the startRaffle(axfer,uint64,uint64)void ABI method.
   *
   * Start the raffle
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startRaffle(args: MethodArgs<'startRaffle(axfer,uint64,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftRaffleCallFactory.startRaffle(args, params))
  }

  /**
   * Calls the buyTickets(pay,uint64)void ABI method.
   *
   * Buy tickets. Note this can only be called once!It would be possible to allow multiple purchases, butfor simplicity, only one purchase is allowed.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public buyTickets(args: MethodArgs<'buyTickets(pay,uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftRaffleCallFactory.buyTickets(args, params))
  }

  /**
   * Calls the draw(application)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public draw(args: MethodArgs<'draw(application)bool'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftRaffleCallFactory.draw(args, params))
  }

  /**
   * Calls the claim()void ABI method.
   *
   * Send the asset to the the sender if they have the winning ticket
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claim(args: MethodArgs<'claim()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftRaffleCallFactory.claim(args, params))
  }

  /**
   * Calls the getRefund()void ABI method.
   *
   * Allows purchasers to get a refund if the winning ticket has not been drawnand 1512 rounds have passed since the draw round, meaning the oracle nolonger has the data for the draw round
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public getRefund(args: MethodArgs<'getRefund()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(NftRaffleCallFactory.getRefund(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<NftRaffle['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get randomnessOracle() {
        return NftRaffleClient.getIntegerState(state, 'randomnessOracle')
      },
      get ticketPrice() {
        return NftRaffleClient.getIntegerState(state, 'ticketPrice')
      },
      get asset() {
        return NftRaffleClient.getIntegerState(state, 'asset')
      },
      get endRound() {
        return NftRaffleClient.getIntegerState(state, 'endRound')
      },
      get drawRound() {
        return NftRaffleClient.getIntegerState(state, 'drawRound')
      },
      get totalTickets() {
        return NftRaffleClient.getIntegerState(state, 'totalTickets')
      },
      get winningTicket() {
        return NftRaffleClient.getIntegerState(state, 'winningTicket')
      },
      get randomBytes() {
        return NftRaffleClient.getBinaryState(state, 'randomBytes')
      },
    }
  }

  public compose(): NftRaffleComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      setAsset(args: MethodArgs<'setAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.setAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startRaffle(args: MethodArgs<'startRaffle(axfer,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startRaffle(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      buyTickets(args: MethodArgs<'buyTickets(pay,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.buyTickets(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      draw(args: MethodArgs<'draw(application)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.draw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claim(args: MethodArgs<'claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      getRefund(args: MethodArgs<'getRefund()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.getRefund(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as NftRaffleComposer
  }
}
export type NftRaffleComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the setAsset(asset)void ABI method.
   *
   * Set the asset to be raffled
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAsset(args: MethodArgs<'setAsset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, MethodReturn<'setAsset(asset)void'>]>

  /**
   * Calls the startRaffle(axfer,uint64,uint64)void ABI method.
   *
   * Start the raffle
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startRaffle(args: MethodArgs<'startRaffle(axfer,uint64,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, MethodReturn<'startRaffle(axfer,uint64,uint64)void'>]>

  /**
   * Calls the buyTickets(pay,uint64)void ABI method.
   *
   * Buy tickets. Note this can only be called once!It would be possible to allow multiple purchases, butfor simplicity, only one purchase is allowed.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  buyTickets(args: MethodArgs<'buyTickets(pay,uint64)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, MethodReturn<'buyTickets(pay,uint64)void'>]>

  /**
   * Calls the draw(application)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  draw(args: MethodArgs<'draw(application)bool'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, MethodReturn<'draw(application)bool'>]>

  /**
   * Calls the claim()void ABI method.
   *
   * Send the asset to the the sender if they have the winning ticket
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claim(args: MethodArgs<'claim()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, MethodReturn<'claim()void'>]>

  /**
   * Calls the getRefund()void ABI method.
   *
   * Allows purchasers to get a refund if the winning ticket has not been drawnand 1512 rounds have passed since the draw round, meaning the oracle nolonger has the data for the draw round
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getRefund(args: MethodArgs<'getRefund()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, MethodReturn<'getRefund()void'>]>

  /**
   * Makes a clear_state call to an existing instance of the NFTRaffle smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): NftRaffleComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): NftRaffleComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<NftRaffleComposerResults<TReturns>>
}
export type NftRaffleComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}

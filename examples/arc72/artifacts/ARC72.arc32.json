{
  "hints": {
    "arc72_ownerOf(uint256)address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenURI(uint256)byte[256]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_transferFrom(address,address,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_approve(address,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_setApprovalForAll(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc72_tokenByIndex(uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "index": {
          "type": "bytes",
          "key": "index"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ARC72",
    "desc": "",
    "methods": [
      {
        "name": "arc72_ownerOf",
        "desc": "Returns the address of the current owner of the NFT with the given tokenId",
        "readonly": true,
        "args": [
          {
            "name": "tokenId",
            "type": "uint256",
            "desc": "The ID of the NFT"
          }
        ],
        "returns": {
          "type": "address",
          "desc": "The current owner of the NFT"
        }
      },
      {
        "name": "arc72_tokenURI",
        "desc": "Returns a URI pointing to the NFT metadata",
        "readonly": true,
        "args": [
          {
            "name": "tokenId",
            "type": "uint256",
            "desc": "The ID of the NFT"
          }
        ],
        "returns": {
          "type": "byte[256]",
          "desc": "URI to token metadata"
        }
      },
      {
        "name": "arc72_transferFrom",
        "desc": "Transfers ownership of an NFT",
        "args": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "to",
            "type": "address"
          },
          {
            "name": "tokenId",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_approve",
        "desc": "Approve a controller for a single NFT",
        "args": [
          {
            "name": "approved",
            "type": "address",
            "desc": "Approved controller address"
          },
          {
            "name": "tokenId",
            "type": "uint256",
            "desc": "The ID of the NFT"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_setApprovalForAll",
        "desc": "Approve an operator for all NFTs for a user",
        "args": [
          {
            "name": "operator",
            "type": "address",
            "desc": "Approved operator address"
          },
          {
            "name": "approved",
            "type": "bool",
            "desc": "true to give approval, false to revoke"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "to",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc72_totalSupply",
        "desc": "Returns the number of NFTs currently defined by this contract",
        "readonly": true,
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "arc72_tokenByIndex",
        "desc": "Returns the token ID of the token with the given index among all NFTs defined by the contract",
        "readonly": true,
        "args": [
          {
            "name": "index",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
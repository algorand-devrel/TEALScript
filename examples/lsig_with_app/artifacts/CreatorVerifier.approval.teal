#pragma version 9

// This TEAL was generated by TEALScript v0.65.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// allowOptInsFrom(address)void
//
// Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator
abi_route_allowOptInsFrom:
	// creator: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute allowOptInsFrom(address)void
	callsub allowOptInsFrom
	int 1
	return

allowOptInsFrom:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// examples/lsig_with_app/lsig_with_app.algo.ts:41
	// this.allowedCreators([this.txn.sender, creator]).value = true
	txn Sender
	frame_dig -1 // creator: address
	concat
	int 1
	byte 0x00
	int 0
	uncover 2
	setbit
	box_put
	retsub

// disableOptInsFrom(address)void
//
// Disable opt-ins for ASAs from the given creator
abi_route_disableOptInsFrom:
	// creator: address
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute disableOptInsFrom(address)void
	callsub disableOptInsFrom
	int 1
	return

disableOptInsFrom:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 1 0

	// examples/lsig_with_app/lsig_with_app.algo.ts:46
	// this.allowedCreators([this.txn.sender, creator]).value = false
	txn Sender
	frame_dig -1 // creator: address
	concat
	int 0
	byte 0x00
	int 0
	uncover 2
	setbit
	box_put
	retsub

// verifyCreator(asset,axfer)void
//
// // eslint-disable-next-line no-unused-vars
abi_route_verifyCreator:
	// _asaReference: asset
	txna ApplicationArgs 1
	btoi
	txnas Assets

	// optIn: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute verifyCreator(asset,axfer)void
	callsub verifyCreator
	int 1
	return

verifyCreator:
	// Setup the frame for args and return value. Use empty bytes to create space on the stack for local variables if necessary
	proto 2 0

	// examples/lsig_with_app/lsig_with_app.algo.ts:52
	// assert(this.allowedCreators([optIn.sender, optIn.xferAsset.creator]).value)
	frame_dig -1 // optIn: axfer
	gtxns Sender
	frame_dig -1 // optIn: axfer
	gtxns XferAsset
	asset_params_get AssetCreator
	assert
	concat
	box_get
	assert
	int 0
	getbit
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "allowOptInsFrom(address)void"
	method "disableOptInsFrom(address)void"
	method "verifyCreator(axfer,asset)void"
	txna ApplicationArgs 0
	match abi_route_allowOptInsFrom abi_route_disableOptInsFrom abi_route_verifyCreator
	err
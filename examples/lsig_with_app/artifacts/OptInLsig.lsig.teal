#pragma version 9
//#pragma mode logicsig

// This TEAL was generated by TEALScript v0.65.0
// https://github.com/algorandfoundation/TEALScript

// The address of this logic signature is ICK4TVVLKEIYJCWCXBJ2SXMBW5Q7VYKHLLSGBR2FGMCTB53V2SSU3HR5IU

b route_logic

// logic()void
//
// Verify this is an opt in transaction
route_logic:
	// execute logic()void
	callsub logic
	int 1
	return

logic:
	proto 0 0; byte 0x; dupn 1

	// examples/lsig_with_app/lsig_with_app.algo.ts:12
	// verifyAssetTransferTxn(this.txn, {
	//       assetAmount: 0,
	//       assetReceiver: this.txn.sender,
	//       // It's very important to set fee to 0 for delegated logic signatures
	//       // Otherwise the fee can be used to drain the signer's account
	//       fee: 0,
	//       // Also very important to check that the rekey is set to zero address
	//       rekeyTo: globals.zeroAddress,
	//       // Finally we must ensure that this is not a close transaction, which will drain the signer's account of the given asset
	//       assetCloseTo: globals.zeroAddress,
	//     })
	// verify axfer
	txn TypeEnum
	int axfer
	==
	assert

	// verify assetAmount
	txn AssetAmount
	int 0
	==
	assert

	// verify assetReceiver
	txn AssetReceiver
	txn Sender
	==
	assert

	// verify fee
	txn Fee
	int 0
	==
	assert

	// verify rekeyTo
	txn RekeyTo
	global ZeroAddress
	==
	assert

	// verify assetCloseTo
	txn AssetCloseTo
	global ZeroAddress
	==
	assert

	// examples/lsig_with_app/lsig_with_app.algo.ts:24
	// appCall = this.txnGroup[this.txn.groupIndex + 1]
	txn GroupIndex
	int 1
	+
	frame_bury 1 // appCall: txn

	// examples/lsig_with_app/lsig_with_app.algo.ts:27
	// assert(appCall.applicationID === Application.fromID(templateVar<uint64>('APP_ID')))
	frame_dig 1 // appCall: txn
	gtxns ApplicationID
	int TMPL_APP_ID // TMPL_APP_ID
	==
	assert

	// examples/lsig_with_app/lsig_with_app.algo.ts:28
	// assert(appCall.applicationArgs[0] === method('verifyCreator(axfer,asset)void'))
	frame_dig 1 // appCall: txn
	gtxns ApplicationArgs 0
	method "verifyCreator(axfer,asset)void"
	==
	assert
	retsub
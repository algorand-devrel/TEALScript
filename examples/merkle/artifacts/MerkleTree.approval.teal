#pragma version 9

// This TEAL was generated by TEALScript v0.75.2
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_DeleteApplication create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// calcInitRoot(): bytes32
calcInitRoot:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// examples/merkle/merkle.algo.ts:17
	// result = EMPTY_HASH
	// examples/merkle/merkle.algo.ts:4
	// hex('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855')
	byte 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8550000000000000000000000000000000000000000000000000000000000000000
	byte 0x
	dup
	b==
	assert
	extract 0 32
	frame_bury 0 // result: byte[32]

	// examples/merkle/merkle.algo.ts:19
	// i = 0
	int 0
	frame_bury 1 // i: uint64

for_0:
	// examples/merkle/merkle.algo.ts:19
	// i < TREE_DEPTH
	frame_dig 1 // i: uint64
	int 3
	<
	bz for_0_end

	// examples/merkle/merkle.algo.ts:20
	// result = sha256(result + result)
	frame_dig 0 // result: byte[32]
	frame_dig 0 // result: byte[32]
	concat
	sha256
	frame_bury 0 // result: byte[32]

	// examples/merkle/merkle.algo.ts:19
	// i = i + 1
	frame_dig 1 // i: uint64
	int 1
	+
	frame_bury 1 // i: uint64
	b for_0

for_0_end:
	// examples/merkle/merkle.algo.ts:23
	// return result;
	frame_dig 0 // result: byte[32]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// hashConcat(left: bytes32, right: bytes32): bytes32
hashConcat:
	proto 2 1

	// examples/merkle/merkle.algo.ts:27
	// return sha256(left + right);
	frame_dig -1 // left: bytes32
	frame_dig -2 // right: bytes32
	concat
	sha256
	retsub

// isRightSibling(elem: Branch): boolean
isRightSibling:
	proto 1 1

	// examples/merkle/merkle.algo.ts:31
	// return getbyte(elem, 0) === RIGHT_SIBLING_PREFIX;
	frame_dig -1 // elem: Branch
	int 0
	getbyte
	int 170
	==
	retsub

// calcRoot(leaf: bytes32, path: Path): bytes32
calcRoot:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// examples/merkle/merkle.algo.ts:37
	// i = 0
	int 0
	frame_bury 0 // i: uint64

for_1:
	// examples/merkle/merkle.algo.ts:37
	// i < TREE_DEPTH
	frame_dig 0 // i: uint64
	int 3
	<
	bz for_1_end
	frame_dig 0 // i: uint64
	frame_bury 1 // accessor: accessor//0//elem

	// if0_condition
	// examples/merkle/merkle.algo.ts:40
	// this.isRightSibling(elem)
	frame_dig -2 // path: Path
	frame_dig 1 // saved accessor: accessor//0//elem
	int 33
	* // acc * typeLength
	int 33
	extract3
	callsub isRightSibling
	bz if0_else

	// if0_consequent
	// examples/merkle/merkle.algo.ts:41
	// result = this.hashConcat(result, extract3(elem, 1, 32) as bytes32)
	frame_dig -2 // path: Path
	frame_dig 1 // saved accessor: accessor//0//elem
	int 33
	* // acc * typeLength
	int 33
	extract3
	extract 1 32
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	byte 0x
	b==
	assert
	extract 0 32
	frame_dig -1 // leaf: bytes32
	callsub hashConcat
	frame_bury -1 // result: bytes32
	b if0_end

if0_else:
	// examples/merkle/merkle.algo.ts:43
	// result = this.hashConcat(extract3(elem, 1, 32) as bytes32, result)
	frame_dig -1 // leaf: bytes32
	frame_dig -2 // path: Path
	frame_dig 1 // saved accessor: accessor//0//elem
	int 33
	* // acc * typeLength
	int 33
	extract3
	extract 1 32
	byte 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	byte 0x
	b==
	assert
	extract 0 32
	callsub hashConcat
	frame_bury -1 // result: bytes32

if0_end:
	// examples/merkle/merkle.algo.ts:37
	// i = i + 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b for_1

for_1_end:
	// examples/merkle/merkle.algo.ts:47
	// return result;
	frame_dig -1 // leaf: bytes32

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// deleteApplication()void
abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	int 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// examples/merkle/merkle.algo.ts:51
	// verifyAppCallTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==
	assert
	retsub

// createApplication()void
abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	int 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// examples/merkle/merkle.algo.ts:55
	// this.root.value = this.calcInitRoot()
	byte 0x726f6f74 // "root"
	callsub calcInitRoot
	app_global_put
	retsub

// verify(byte[],byte[33][3])void
abi_route_verify:
	// path: byte[33][3]
	txna ApplicationArgs 2
	dup
	len
	int 99
	==
	assert

	// data: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute verify(byte[],byte[33][3])void
	callsub verify
	int 1
	return

// verify(data: bytes, path: Path): void
verify:
	proto 2 0

	// examples/merkle/merkle.algo.ts:59
	// assert(this.root.value === this.calcRoot(sha256(data), path))
	byte 0x726f6f74 // "root"
	app_global_get
	frame_dig -2 // path: Path
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	==
	assert
	retsub

// appendLeaf(byte[],byte[33][3])void
abi_route_appendLeaf:
	// path: byte[33][3]
	txna ApplicationArgs 2
	dup
	len
	int 99
	==
	assert

	// data: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute appendLeaf(byte[],byte[33][3])void
	callsub appendLeaf
	int 1
	return

// appendLeaf(data: bytes, path: Path): void
appendLeaf:
	proto 2 0

	// examples/merkle/merkle.algo.ts:63
	// assert(data !== '')
	frame_dig -1 // data: bytes
	byte 0x // ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:64
	// assert(this.root.value === this.calcRoot(EMPTY_HASH, path))
	byte 0x726f6f74 // "root"
	app_global_get
	frame_dig -2 // path: Path

	// examples/merkle/merkle.algo.ts:4
	// hex('e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855')
	byte 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8550000000000000000000000000000000000000000000000000000000000000000
	byte 0x
	dup
	b==
	assert
	extract 0 32
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:66
	// this.root.value = this.calcRoot(sha256(data), path)
	byte 0x726f6f74 // "root"
	frame_dig -2 // path: Path
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	app_global_put

	// examples/merkle/merkle.algo.ts:68
	// this.size.value = this.size.value + 1
	byte 0x73697a65 // "size"
	dup
	app_global_get
	int 1
	+
	app_global_put
	retsub

// updateLeaf(byte[],byte[],byte[33][3])void
abi_route_updateLeaf:
	// path: byte[33][3]
	txna ApplicationArgs 3
	dup
	len
	int 99
	==
	assert

	// newData: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// oldData: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute updateLeaf(byte[],byte[],byte[33][3])void
	callsub updateLeaf
	int 1
	return

// updateLeaf(oldData: bytes, newData: bytes, path: Path): void
updateLeaf:
	proto 3 0

	// examples/merkle/merkle.algo.ts:72
	// assert(newData !== '')
	frame_dig -2 // newData: bytes
	byte 0x // ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:73
	// assert(this.root.value === this.calcRoot(sha256(oldData), path))
	byte 0x726f6f74 // "root"
	app_global_get
	frame_dig -3 // path: Path
	frame_dig -1 // oldData: bytes
	sha256
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:75
	// this.root.value = this.calcRoot(sha256(newData), path)
	byte 0x726f6f74 // "root"
	frame_dig -3 // path: Path
	frame_dig -2 // newData: bytes
	sha256
	callsub calcRoot
	app_global_put
	retsub

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "verify(byte[],byte[33][3])void"
	method "appendLeaf(byte[],byte[33][3])void"
	method "updateLeaf(byte[],byte[],byte[33][3])void"
	txna ApplicationArgs 0
	match abi_route_verify abi_route_appendLeaf abi_route_updateLeaf
	err

call_DeleteApplication:
	method "deleteApplication()void"
	txna ApplicationArgs 0
	match abi_route_deleteApplication
	err
#pragma version 8
	b main

calcInitRoot:
	proto 3 1

	// examples/merkle/merkle.algo.ts:10
	// result = sha256('')
	byte ""
	sha256
	frame_bury -1 // result: bytes

	// examples/merkle/merkle.algo.ts:12
	// i = 0
	int 0
	frame_bury -2 // i: uint64

for_0:
	frame_dig -2 // i: uint64
	int 3
	<
	bz for_0_end

	// examples/merkle/merkle.algo.ts:13
	// result = sha256(concat(result, result))
	frame_dig -1 // result: bytes
	frame_dig -1 // result: bytes
	concat
	sha256
	frame_bury -1 // result: bytes

	// examples/merkle/merkle.algo.ts:12
	// i = i + 1
	frame_dig -2 // i: uint64
	int 1
	+
	frame_bury -2 // i: uint64
	b for_0

for_0_end:
	// examples/merkle/merkle.algo.ts:16
	// return result;
	frame_dig -1 // result: bytes
	retsub

hashConcat:
	proto 3 1

	// examples/merkle/merkle.algo.ts:20
	// return sha256(concat(left, right));
	frame_dig -1 // left: bytes
	frame_dig -2 // right: bytes
	concat
	sha256
	retsub

isRightSibling:
	proto 2 1

	// examples/merkle/merkle.algo.ts:24
	// return getbyte(sibling, 0) === 170;
	frame_dig -1 // sibling: bytes
	int 0
	getbyte
	int 170
	==
	itob
	retsub

calcRoot:
	proto 6 1

	// examples/merkle/merkle.algo.ts:28
	// result = leaf
	frame_dig -1 // leaf: bytes
	frame_bury -3 // result: bytes

	// examples/merkle/merkle.algo.ts:30
	// i = 0
	int 0
	frame_bury -4 // i: uint64

for_1:
	frame_dig -4 // i: uint64
	int 3
	<
	bz for_1_end

	// examples/merkle/merkle.algo.ts:31
	// elem = path[i]
	frame_dig -2 // path: byte[33][3]
	frame_dig -4 // i: uint64
	int 33
	*
	int 33
	extract3
	frame_bury -5 // elem: byte[33]

	// if0_condition
	// examples/merkle/merkle.algo.ts:33
	// this.isRightSibling(elem)
	byte 0x
	dupn 0
	frame_dig -5 // elem: byte[33]
	callsub isRightSibling
	bz if0_else

	// if0_consequent
	// examples/merkle/merkle.algo.ts:34
	// result = this.hashConcat(result, extract3(elem, 1, 32))
	byte 0x
	dupn 0
	frame_dig -5 // elem: byte[33]
	int 1
	int 32
	extract3
	frame_dig -3 // result: bytes
	callsub hashConcat
	frame_bury -3 // result: bytes
	b if0_end

if0_else:
	// examples/merkle/merkle.algo.ts:36
	// result = this.hashConcat(extract3(elem, 1, 32), result)
	byte 0x
	dupn 0
	frame_dig -3 // result: bytes
	frame_dig -5 // elem: byte[33]
	int 1
	int 32
	extract3
	callsub hashConcat
	frame_bury -3 // result: bytes

if0_end:
	// examples/merkle/merkle.algo.ts:30
	// i = i + 1
	frame_dig -4 // i: uint64
	int 1
	+
	frame_bury -4 // i: uint64
	b for_1

for_1_end:
	// examples/merkle/merkle.algo.ts:40
	// return result;
	frame_dig -3 // result: bytes
	retsub

bare_route_DeleteApplication:
	txn OnCompletion
	int DeleteApplication
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 0
	callsub delete
	int 1
	return

delete:
	proto 1 0

	// examples/merkle/merkle.algo.ts:45
	// assert(this.txn.sender === this.app.creator)
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	assert
	==
	assert
	retsub

bare_route_create:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	==
	&&
	assert
	byte 0x
	dupn 0
	callsub create
	int 1
	return

create:
	proto 1 0

	// examples/merkle/merkle.algo.ts:50
	// this.root.put(this.calcInitRoot())
	byte "root"
	byte 0x
	dupn 2
	callsub calcInitRoot
	app_global_put
	retsub

abi_route_verify:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 0
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	extract 2 0
	callsub verify
	int 1
	return

verify:
	proto 3 0

	// examples/merkle/merkle.algo.ts:54
	// assert(this.root.get() === this.calcRoot(sha256(data), path))
	byte "root"
	app_global_get
	byte 0x
	dupn 3
	frame_dig -2 // path: byte[33][3]
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	==
	assert
	retsub

abi_route_appendLeaf:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 0
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	extract 2 0
	callsub appendLeaf
	int 1
	return

appendLeaf:
	proto 3 0

	// examples/merkle/merkle.algo.ts:58
	// assert(data !== '')
	frame_dig -1 // data: bytes
	byte ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:59
	// assert(this.root.get() === this.calcRoot(sha256(''), path))
	byte "root"
	app_global_get
	byte 0x
	dupn 3
	frame_dig -2 // path: byte[33][3]
	byte ""
	sha256
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:61
	// this.root.put(this.calcRoot(sha256(data), path))
	byte "root"
	byte 0x
	dupn 3
	frame_dig -2 // path: byte[33][3]
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	app_global_put

	// examples/merkle/merkle.algo.ts:63
	// this.size.put(this.size.get() + 1)
	byte "size"
	byte "size"
	app_global_get
	int 1
	+
	app_global_put
	retsub

abi_route_updateLeaft:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	dupn 0
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub updateLeaft
	int 1
	return

updateLeaft:
	proto 4 0

	// examples/merkle/merkle.algo.ts:67
	// assert(newData !== '')
	frame_dig -2 // newData: bytes
	byte ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:68
	// assert(this.root.get() === this.calcRoot(sha256(oldData), path))
	byte "root"
	app_global_get
	byte 0x
	dupn 3
	frame_dig -3 // path: byte[33][3]
	frame_dig -1 // oldData: bytes
	sha256
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:70
	// this.root.put(this.calcRoot(sha256(newData), path))
	byte "root"
	byte 0x
	dupn 3
	frame_dig -3 // path: byte[33][3]
	frame_dig -2 // newData: bytes
	sha256
	callsub calcRoot
	app_global_put
	retsub

main:
	txn NumAppArgs
	bnz route_abi
	txn ApplicationID
	int 0
	==
	bnz bare_route_create
	txn OnCompletion
	int DeleteApplication
	==
	int 1
	match bare_route_DeleteApplication

route_abi:
	method "verify(byte[],byte[33][3])void"
	method "appendLeaf(byte[],byte[33][3])void"
	method "updateLeaft(byte[],byte[],byte[33][3])void"
	txna ApplicationArgs 0
	match abi_route_verify abi_route_appendLeaf abi_route_updateLeaft
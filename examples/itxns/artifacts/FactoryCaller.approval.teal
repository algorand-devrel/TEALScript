#pragma version 8
	b main

bare_route_create:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	==
	&&
	assert

	// no dupn needed
	callsub create
	int 1
	return

create:
	proto 0 0
	retsub

abi_route_mintAndGetAsset:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x; dup
	callsub mintAndGetAsset
	int 1
	return

mintAndGetAsset:
	proto 2 0

	// examples/itxns/itxns.algo.ts:34
	// sendAppCall({
	itxn_begin
	int appl
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:35
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion

	// examples/itxns/itxns.algo.ts:36
	// fee: 0
	int 0
	itxn_field Fee

	// examples/itxns/itxns.algo.ts:37
	// clearStateProgram: this.app.clearStateProgram
	txna Applications 0
	app_params_get AppClearStateProgram
	assert
	itxn_field ClearStateProgram

	// examples/itxns/itxns.algo.ts:38
	// approvalProgram: NFTFactory
	byte b64 CCACAAFCAIgxGSISMRgiEhBEiAACI0OKAACJMRkiEjEYIhMQRDYaAlcCADYaAVcCAIgAAiNDigIAsYEDshCL/7Imi/6yJSOyIiKyIyKyAbO0PBaABBUffHVMULCJMRkiEjEYIhMQRDYaAhfAHDYaARfAMIgAAiNDigIAsYEEshCL/rIUI7ISi/+yESKyAbOJMRtAAAcxGCISQP9sgATSAkxzgARIIWZwNhoAjgL/av+sAA==
	itxn_field ApprovalProgram
	itxn_submit

	// examples/itxns/itxns.algo.ts:41
	// factoryApp = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury -1 // factoryApp: application

	// examples/itxns/itxns.algo.ts:43
	// sendPayment({
	itxn_begin
	int pay
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:44
	// amount: 200_000
	int 200_000
	itxn_field Amount

	// examples/itxns/itxns.algo.ts:45
	// fee: 0
	int 0
	itxn_field Fee

	// examples/itxns/itxns.algo.ts:46
	// receiver: factoryApp.address
	frame_dig -1 // factoryApp: application
	app_params_get AppAddress
	assert
	itxn_field Receiver
	itxn_submit

	// examples/itxns/itxns.algo.ts:49
	// createdAsset = sendMethodCall<[string, string], Asset>({
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "createNFT(string,string)uint64"
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:50
	// applicationID: factoryApp
	frame_dig -1 // factoryApp: application
	itxn_field ApplicationID

	// examples/itxns/itxns.algo.ts:52
	// methodArgs: ['My NFT', 'MNFT']
	byte "My NFT"
	itxn_field ApplicationArgs
	byte "MNFT"
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:53
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion

	// examples/itxns/itxns.algo.ts:54
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit
	itxn NumLogs
	int 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury -2 // createdAsset: asset

	// examples/itxns/itxns.algo.ts:57
	// sendAssetTransfer({
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:58
	// assetReceiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field AssetReceiver

	// examples/itxns/itxns.algo.ts:59
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// examples/itxns/itxns.algo.ts:60
	// xferAsset: createdAsset
	frame_dig -2 // createdAsset: asset
	itxn_field XferAsset

	// examples/itxns/itxns.algo.ts:61
	// fee: 0
	int 0
	itxn_field Fee
	itxn_submit

	// examples/itxns/itxns.algo.ts:64
	// sendMethodCall<[Asset, Account], void>({
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "transferNFT(asset,account)void"
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:65
	// applicationID: factoryApp
	frame_dig -1 // factoryApp: application
	itxn_field ApplicationID

	// examples/itxns/itxns.algo.ts:67
	// methodArgs: [createdAsset, this.app.address]
	frame_dig -2 // createdAsset: asset
	itxn_field Assets
	int 0
	itob
	itxn_field ApplicationArgs
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field Accounts
	int 1
	itob
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:68
	// fee: 0
	int 0
	itxn_field Fee

	// examples/itxns/itxns.algo.ts:69
	// onCompletion: 'NoOp'
	int NoOp
	itxn_field OnCompletion
	itxn_submit

	// examples/itxns/itxns.algo.ts:72
	// return createdAsset;
	frame_dig -2 // createdAsset: asset
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

main:
	txn NumAppArgs
	bnz route_abi
	txn ApplicationID
	int 0
	==
	bnz bare_route_create

route_abi:
	method "mintAndGetAsset()uint64"
	txna ApplicationArgs 0
	match abi_route_mintAndGetAsset
	err
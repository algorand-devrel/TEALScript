{
  "hints": {
    "startUpload(string,uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "upload(string,uint64,uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setStatus(string,uint8)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "currentIndex": {
          "type": "uint64",
          "key": "currentIndex"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDkKaW50IDE="
  },
  "contract": {
    "name": "BigBox",
    "desc": "",
    "methods": [
      {
        "name": "startUpload",
        "args": [
          {
            "name": "dataIdentifier",
            "type": "string",
            "desc": "The unique identifier for the data"
          },
          {
            "name": "numBoxes",
            "type": "uint64",
            "desc": "The number of boxes that the data will take up"
          },
          {
            "name": "endBoxSize",
            "type": "uint64",
            "desc": "The size of the last box"
          },
          {
            "name": "mbrPayment",
            "type": "pay",
            "desc": "Payment from the uploader to cover the box MBR"
          }
        ],
        "desc": "Allocate boxes to begin data upload process",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "upload",
        "args": [
          {
            "name": "dataIdentifier",
            "type": "string",
            "desc": "The unique identifier for the data"
          },
          {
            "name": "boxIndex",
            "type": "uint64",
            "desc": "The index of the box to upload the given chunk of data to"
          },
          {
            "name": "offset",
            "type": "uint64",
            "desc": "The offset within the box to start writing the data"
          },
          {
            "name": "data",
            "type": "byte[]",
            "desc": "The data to write"
          }
        ],
        "desc": "Upload data to a specific offset in a box",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "setStatus",
        "args": [
          {
            "name": "dataIdentifier",
            "type": "string",
            "desc": "The unique identifier for the data"
          },
          {
            "name": "status",
            "type": "uint8",
            "desc": "The new status for the data"
          }
        ],
        "desc": "Set the status of the data",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}
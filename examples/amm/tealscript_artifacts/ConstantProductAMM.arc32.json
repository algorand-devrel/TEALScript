{
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "set_governor(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bootstrap(pay,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "mint(axfer,axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "burn(axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "swap(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "governor": {
          "type": "bytes",
          "key": "g"
        },
        "assetA": {
          "type": "uint64",
          "key": "a"
        },
        "assetB": {
          "type": "uint64",
          "key": "b"
        },
        "poolToken": {
          "type": "uint64",
          "key": "p"
        },
        "ratio": {
          "type": "uint64",
          "key": "r"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "ConstantProductAMM",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "set_governor",
        "args": [
          {
            "name": "governor",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bootstrap",
        "args": [
          {
            "name": "seed",
            "type": "pay"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "mint",
        "args": [
          {
            "name": "aXfer",
            "type": "axfer"
          },
          {
            "name": "bXfer",
            "type": "axfer"
          },
          {
            "name": "poolAsset",
            "type": "uint64"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "burn",
        "args": [
          {
            "name": "poolXfer",
            "type": "axfer"
          },
          {
            "name": "poolAsset",
            "type": "uint64"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "swap",
        "args": [
          {
            "name": "swapXfer",
            "type": "axfer"
          },
          {
            "name": "aAsset",
            "type": "uint64"
          },
          {
            "name": "bAsset",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
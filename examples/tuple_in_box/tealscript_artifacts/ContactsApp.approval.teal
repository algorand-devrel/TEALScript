#pragma version 8
	b main

bare_route_create:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	==
	&&
	assert
	callsub create
	int 1
	return

create:
	proto 0 0
	retsub

abi_route_setMyContact:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub setMyContact
	int 1
	return

setMyContact:
	proto 3 0

	// examples/tuple_in_box/app.algo.ts:15
	// contact: Contact = { name: name, company: company }
	byte 0x
	dup
	store 0 // tuple head
	store 1 // tuple tail
	byte 0x0004
	store 2 // head offset
	load 0 // tuple head
	load 2 // head offset
	concat
	store 0 // tuple head
	frame_dig -1 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	len
	load 2 // head offset
	btoi
	+
	itob
	extract 6 2
	store 2 // head offset
	load 1 // tuple tail
	swap
	concat
	store 1 // tuple tail
	load 0 // tuple head
	load 2 // head offset
	concat
	store 0 // tuple head
	frame_dig -2 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	len
	load 2 // head offset
	btoi
	+
	itob
	extract 6 2
	store 2 // head offset
	load 1 // tuple tail
	swap
	concat
	store 1 // tuple tail
	load 0 // tuple head
	load 1 // tuple tail
	concat
	frame_bury -3 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:17
	// this.myContact.put(contact)
	byte "myContact"
	frame_dig -3 // contact: Contact
	app_global_put

	// examples/tuple_in_box/app.algo.ts:18
	// this.contacts.put(this.txn.sender, contact)
	txn Sender
	dup
	box_del
	pop
	frame_dig -3 // contact: Contact
	box_put
	retsub

abi_route_addContact:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub addContact
	int 1
	return

addContact:
	proto 4 0

	// examples/tuple_in_box/app.algo.ts:22
	// contact: Contact = { name: name, company: company }
	byte 0x
	dup
	store 0 // tuple head
	store 1 // tuple tail
	byte 0x0004
	store 2 // head offset
	load 0 // tuple head
	load 2 // head offset
	concat
	store 0 // tuple head
	frame_dig -1 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	len
	load 2 // head offset
	btoi
	+
	itob
	extract 6 2
	store 2 // head offset
	load 1 // tuple tail
	swap
	concat
	store 1 // tuple tail
	load 0 // tuple head
	load 2 // head offset
	concat
	store 0 // tuple head
	frame_dig -2 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	len
	load 2 // head offset
	btoi
	+
	itob
	extract 6 2
	store 2 // head offset
	load 1 // tuple tail
	swap
	concat
	store 1 // tuple tail
	load 0 // tuple head
	load 1 // tuple tail
	concat
	frame_bury -4 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:23
	// this.contacts.put(address, contact)
	frame_dig -3 // address: account
	dup
	box_del
	pop
	frame_dig -4 // contact: Contact
	box_put
	retsub

abi_route_updateContactField:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 3
	btoi
	txnas Accounts
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub updateContactField
	int 1
	return

updateContactField:
	proto 3 0

	// if0_condition
	// examples/tuple_in_box/app.algo.ts:27
	// field === 'name'
	frame_dig -1 // field: bytes
	byte "name"
	==
	bz if0_elseif1_condition

	// if0_consequent
	// examples/tuple_in_box/app.algo.ts:28
	// this.contacts.get(address).name = value
	// examples/tuple_in_box/app.algo.ts:1
	// this.contacts.get(address)
	frame_dig -3 // address: account
	box_get
	assert
	dup
	store 3 // full tuple
	int 0
	swap
	dupn 2
	uncover 3
	int 2
	extract3
	btoi // start of dynamic array
	dup
	cover 2 // duplicate start for later
	int 2
	extract3 // extract length of array
	btoi
	int 1
	* // get array length
	int 2
	+ // add two for length
	extract3
	store 4 // old tuple element
	load 4 // old tuple element
	len // length of old element
	store 5 // old element length
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	store 6 // new tuple element
	load 3 // full tuple
	load 3 // full tuple
	int 0 // head offset
	extract_uint16 // extract dynamic array offset of element
	int 0
	swap
	extract3 // extract portion of tuple before element
	load 6 // new tuple element
	concat
	load 3 // full tuple
	load 3 // full tuple
	int 0 // head offset
	extract_uint16 // extract dynamic array offset of element
	load 5 // old element length
	+
	load 3 // full tuple
	len
	substring3
	concat
	store 3 // full tuple
	load 6 // new tuple element
	len // length of new element
	load 5 // old element length
	<
	bnz swapped_difference_0
	load 6 // new tuple element
	len // length of new element
	load 5 // old element length
	int 1
	store 7 // subtract head difference
	b get_difference_0

swapped_difference_0:
	load 5 // old element length
	load 6 // new tuple element
	len // length of new element
	int 0
	store 7 // subtract head difference

get_difference_0:
	- // get length difference
	dup // duplicate length difference
	load 3 // full tuple
	int 2 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 7 // subtract head difference
	bz subtract_head_difference_0_0
	+ // add difference to offset
	b end_calc_new_head_0_0

subtract_head_difference_0_0:
	swap
	- // subtract difference from offet

end_calc_new_head_0_0:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 3 // full tuple
	swap
	replace 2 // replace dynamic array offset
	store 3 // full tuple
	load 3 // full tuple
	frame_dig -3 // address: account
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_elseif1_condition:
	// examples/tuple_in_box/app.algo.ts:29
	// field === 'company'
	frame_dig -1 // field: bytes
	byte "company"
	==
	bz if0_else

	// if0_elseif1_consequent
	// examples/tuple_in_box/app.algo.ts:30
	// this.contacts.get(address).company = value
	// examples/tuple_in_box/app.algo.ts:1
	// this.contacts.get(address)
	frame_dig -3 // address: account
	box_get
	assert
	dup
	store 3 // full tuple
	int 2
	swap
	dupn 2
	uncover 3
	int 2
	extract3
	btoi // start of dynamic array
	dup
	cover 2 // duplicate start for later
	int 2
	extract3 // extract length of array
	btoi
	int 1
	* // get array length
	int 2
	+ // add two for length
	extract3
	store 4 // old tuple element
	load 4 // old tuple element
	len // length of old element
	store 5 // old element length
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	store 6 // new tuple element
	load 3 // full tuple
	load 3 // full tuple
	int 2 // head offset
	extract_uint16 // extract dynamic array offset of element
	int 0
	swap
	extract3 // extract portion of tuple before element
	load 6 // new tuple element
	concat
	load 3 // full tuple
	load 3 // full tuple
	int 2 // head offset
	extract_uint16 // extract dynamic array offset of element
	load 5 // old element length
	+
	load 3 // full tuple
	len
	substring3
	concat
	store 3 // full tuple
	load 6 // new tuple element
	len // length of new element
	load 5 // old element length
	<
	bnz swapped_difference_1
	load 6 // new tuple element
	len // length of new element
	load 5 // old element length
	int 1
	store 7 // subtract head difference
	b get_difference_1

swapped_difference_1:
	load 5 // old element length
	load 6 // new tuple element
	len // length of new element
	int 0
	store 7 // subtract head difference

get_difference_1:
	- // get length difference
	load 3 // full tuple
	frame_dig -3 // address: account
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	// examples/tuple_in_box/app.algo.ts:31
	// err()
	err

if0_end:
	retsub

abi_route_verifyContactName:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 2
	btoi
	txnas Accounts
	txna ApplicationArgs 1
	extract 2 0
	callsub verifyContactName
	int 1
	return

verifyContactName:
	proto 2 0

	// examples/tuple_in_box/app.algo.ts:35
	// assert(this.contacts.get(address).name === name)
	frame_dig -2 // address: account
	box_get
	assert
	frame_dig -2 // address: account
	box_get
	assert
	dup
	store 3 // full tuple
	int 0
	swap
	dupn 2
	uncover 3
	int 2
	extract3
	btoi // start of dynamic array
	dup
	cover 2 // duplicate start for later
	int 2
	extract3 // extract length of array
	btoi
	int 1
	* // get array length
	int 2
	+ // add two for length
	extract3
	extract 2 0
	frame_dig -1 // name: bytes
	==
	assert
	retsub

main:
	txn NumAppArgs
	bnz route_abi
	txn ApplicationID
	int 0
	==
	bnz bare_route_create

route_abi:
	method "setMyContact(string,string)void"
	method "addContact(string,string,account)void"
	method "updateContactField(string,string,account)void"
	method "verifyContactName(string,account)void"
	txna ApplicationArgs 0
	match abi_route_setMyContact abi_route_addContact abi_route_updateContactField abi_route_verifyContactName
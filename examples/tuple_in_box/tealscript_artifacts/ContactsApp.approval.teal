#pragma version 8
	b main

update_dynamic_tuple_element:
	proto 3 1
	load 3 // full tuple
	load 3 // full tuple
	frame_dig -1 // head offset
	extract_uint16 // extract dynamic array offset of element
	int 0
	swap
	extract3 // extract portion of tuple before element
	frame_dig -2 // new tuple element
	concat
	load 3 // full tuple
	load 3 // full tuple
	frame_dig -1 // head offset
	extract_uint16 // extract dynamic array offset of element
	frame_dig -3 // old element length
	+
	load 3 // full tuple
	len
	substring3
	concat
	store 3 // full tuple
	frame_dig -2 // new tuple element
	len // length of new element
	frame_dig -3 // old element length
	<
	bnz swapped_difference
	frame_dig -2 // new tuple element
	len // length of new element
	frame_dig -3 // old element length
	int 1
	store 7 // subtract head difference
	b get_difference

swapped_difference:
	frame_dig -3 // old element length
	frame_dig -2 // new tuple element
	len // length of new element
	int 0
	store 7 // subtract head difference

get_difference:
	- // get length difference
	retsub

update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 3 // full tuple
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 7 // subtract head difference
	bz subtract_head_difference
	+ // add difference to offset
	b end_calc_new_head

subtract_head_difference:
	swap
	- // subtract difference from offet

end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 3 // full tuple
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 3 // full tuple
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

abi_route_setMyContact:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub setMyContact
	int 1
	return

setMyContact:
	proto 3 0

	// examples/tuple_in_box/app.algo.ts:12
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -3 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:14
	// this.myContact.put(contact)
	byte "myContact"
	frame_dig -3 // contact: Contact
	app_global_put

	// examples/tuple_in_box/app.algo.ts:15
	// this.contacts.put(this.txn.sender, contact)
	txn Sender
	dup
	box_del
	pop
	frame_dig -3 // contact: Contact
	box_put
	retsub

abi_route_addContact:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub addContact
	int 1
	return

addContact:
	proto 4 0

	// examples/tuple_in_box/app.algo.ts:19
	// contact: Contact = { name: name, company: company }
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // name: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	frame_dig -2 // company: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -4 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:20
	// this.contacts.put(address, contact)
	frame_dig -3 // address: address
	dup
	box_del
	pop
	frame_dig -4 // contact: Contact
	box_put
	retsub

abi_route_updateContactField:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 3
	txna ApplicationArgs 2
	extract 2 0
	txna ApplicationArgs 1
	extract 2 0
	callsub updateContactField
	int 1
	return

updateContactField:
	proto 3 0

	// if0_condition
	// examples/tuple_in_box/app.algo.ts:24
	// field === 'name'
	frame_dig -1 // field: bytes
	byte "name"
	==
	bz if0_elseif1_condition

	// if0_consequent
	// examples/tuple_in_box/app.algo.ts:25
	// this.contacts.get(address).name = value
	// examples/tuple_in_box/app.algo.ts:1
	// this.contacts.get(address)
	frame_dig -3 // address: address
	box_get
	assert
	dup
	store 3 // full tuple
	int 0
	swap
	dupn 2
	uncover 3
	int 2
	extract3
	btoi // start of dynamic array
	dup
	cover 2 // duplicate start for later
	int 2
	extract3 // extract length of array
	btoi
	int 1
	* // get array length
	int 2
	+ // add two for length
	extract3
	len // length of old element
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	int 0
	callsub update_dynamic_tuple_element
	dup // dup length difference
	int 2
	callsub update_dynamic_head
	pop // pop length difference
	load 3 // full tuple
	frame_dig -3 // address: address
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_elseif1_condition:
	// examples/tuple_in_box/app.algo.ts:26
	// field === 'company'
	frame_dig -1 // field: bytes
	byte "company"
	==
	bz if0_else

	// if0_elseif1_consequent
	// examples/tuple_in_box/app.algo.ts:27
	// this.contacts.get(address).company = value
	// examples/tuple_in_box/app.algo.ts:1
	// this.contacts.get(address)
	frame_dig -3 // address: address
	box_get
	assert
	dup
	store 3 // full tuple
	int 2
	swap
	dupn 2
	uncover 3
	int 2
	extract3
	btoi // start of dynamic array
	dup
	cover 2 // duplicate start for later
	int 2
	extract3 // extract length of array
	btoi
	int 1
	* // get array length
	int 2
	+ // add two for length
	extract3
	len // length of old element
	frame_dig -2 // value: bytes
	dup
	len
	itob
	extract 6 2
	swap
	concat
	int 2
	callsub update_dynamic_tuple_element
	pop // pop length difference
	load 3 // full tuple
	frame_dig -3 // address: address
	dup
	box_del
	pop
	swap
	box_put
	b if0_end

if0_else:
	err // 'Invalid field'

if0_end:
	retsub

abi_route_verifyContactName:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	txna ApplicationArgs 2
	txna ApplicationArgs 1
	extract 2 0
	callsub verifyContactName
	int 1
	return

verifyContactName:
	proto 2 0

	// examples/tuple_in_box/app.algo.ts:32
	// assert(this.contacts.get(address).name === name)
	frame_dig -2 // address: address
	box_get
	assert
	frame_dig -2 // address: address
	box_get
	assert
	dup
	store 3 // full tuple
	int 0
	swap
	dupn 2
	uncover 3
	int 2
	extract3
	btoi // start of dynamic array
	dup
	cover 2 // duplicate start for later
	int 2
	extract3 // extract length of array
	btoi
	int 1
	* // get array length
	int 2
	+ // add two for length
	extract3
	extract 2 0
	frame_dig -1 // name: bytes
	==
	assert
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "setMyContact(string,string)void"
	method "addContact(string,string,address)void"
	method "updateContactField(string,string,address)void"
	method "verifyContactName(string,address)void"
	txna ApplicationArgs 0
	match abi_route_setMyContact abi_route_addContact abi_route_updateContactField abi_route_verifyContactName
{
  "hints": {
    "createApplication(address,address)void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "arc58_changeAdmin(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_pluginChangeAdmin(uint64,address,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_getAdmin()address": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_verifyAuthAddr()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_rekeyTo(address,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_rekeyToPlugin(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_rekeyToNamedPlugin(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_addPlugin(uint64,address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_removePlugin(uint64,address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "arc58_removeNamedPlugin(string)void": {
      "call_config": {
        "no_op": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "admin": {
          "type": "bytes",
          "key": "a"
        },
        "controlledAddress": {
          "type": "bytes",
          "key": "c"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AbstractedAccount",
    "desc": "",
    "methods": [
      {
        "name": "createApplication",
        "desc": "Create an abstracted account application.\nThis is not part of ARC58 and implementation specific.",
        "args": [
          {
            "name": "controlledAddress",
            "type": "address",
            "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used"
          },
          {
            "name": "admin",
            "type": "address",
            "desc": "The admin for this app"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_changeAdmin",
        "desc": "Attempt to change the admin for this app. Some implementations MAY not support this.",
        "args": [
          {
            "name": "newAdmin",
            "type": "address",
            "desc": "The new admin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_pluginChangeAdmin",
        "desc": "Attempt to change the admin via plugin.",
        "args": [
          {
            "name": "plugin",
            "type": "uint64",
            "desc": "The app calling the plugin"
          },
          {
            "name": "allowedCaller",
            "type": "address",
            "desc": "The address that triggered the plugin"
          },
          {
            "name": "newAdmin",
            "type": "address",
            "desc": "The new admin"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_getAdmin",
        "desc": "Get the admin of this app. This method SHOULD always be used rather than reading directly from state\nbecause different implementations may have different ways of determining the admin.",
        "args": [],
        "returns": {
          "type": "address"
        }
      },
      {
        "name": "arc58_verifyAuthAddr",
        "desc": "Verify the abstracted account is rekeyed to this app",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_rekeyTo",
        "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.",
        "args": [
          {
            "name": "addr",
            "type": "address",
            "desc": "The address to rekey to"
          },
          {
            "name": "flash",
            "type": "bool",
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_rekeyToPlugin",
        "desc": "Temporarily rekey to an approved plugin app address",
        "args": [
          {
            "name": "plugin",
            "type": "uint64",
            "desc": "The app to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_rekeyToNamedPlugin",
        "desc": "Temporarily rekey to a named plugin app address",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The name of the plugin to rekey to"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_addPlugin",
        "desc": "Add an app to the list of approved plugins",
        "args": [
          {
            "name": "app",
            "type": "uint64",
            "desc": "The app to add"
          },
          {
            "name": "allowedCaller",
            "type": "address",
            "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
          },
          {
            "name": "lastValidRound",
            "type": "uint64",
            "desc": "The round when the permission expires"
          },
          {
            "name": "cooldown",
            "type": "uint64",
            "desc": "The number of rounds that must pass before the plugin can be called again"
          },
          {
            "name": "adminPrivileges",
            "type": "bool",
            "desc": "Whether the plugin has permissions to change the admin account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_removePlugin",
        "desc": "Remove an app from the list of approved plugins",
        "args": [
          {
            "name": "app",
            "type": "uint64",
            "desc": "The app to remove"
          },
          {
            "name": "allowedCaller",
            "type": "address"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_addNamedPlugin",
        "desc": "Add a named plugin",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The plugin name"
          },
          {
            "name": "app",
            "type": "uint64",
            "desc": "The plugin app"
          },
          {
            "name": "allowedCaller",
            "type": "address",
            "desc": "The address of that's allowed to call the app\nor the global zero address for all addresses"
          },
          {
            "name": "lastValidRound",
            "type": "uint64",
            "desc": "The round when the permission expires"
          },
          {
            "name": "cooldown",
            "type": "uint64",
            "desc": "The number of rounds that must pass before the plugin can be called again"
          },
          {
            "name": "adminPrivileges",
            "type": "bool",
            "desc": "Whether the plugin has permissions to change the admin account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "arc58_removeNamedPlugin",
        "desc": "Remove a named plugin",
        "args": [
          {
            "name": "name",
            "type": "string",
            "desc": "The plugin name"
          }
        ],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
#pragma version 10

// This TEAL was generated by TEALScript v0.92.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// invert(p: bytes): bytes
invert:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 2

	// examples/algoplonk-basic/basic_verifier.algo.ts:93
	// x = btobigint(extract3(p, 0, 48))
	frame_dig -1 // p: bytes
	extract 0 48
	frame_bury 0 // x: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:94
	// y = btobigint(extract3(p, 48, 0))
	frame_dig -1 // p: bytes
	extract 48 0
	frame_bury 1 // y: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:95
	// neg_y = P_MOD - y
	byte 0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaab
	frame_dig 1 // y: bigint
	b-
	frame_bury 2 // neg_y: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:96
	// return rawBytes(x) + rawBytes(btobigint(bzero(48)) | neg_y);
	frame_dig 0 // x: bigint
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_dig 2 // neg_y: bigint
	b|
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// curvemod(x: bytes): biguint
curvemod:
	proto 1 1

	// examples/algoplonk-basic/basic_verifier.algo.ts:106
	// return btobigint(x) % R_MOD;
	frame_dig -1 // x: bytes
	byte 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	b%
	retsub

// fs(p: bytes): bytes
fs:
	proto 1 1

	// *if0_condition
	// examples/algoplonk-basic/basic_verifier.algo.ts:119
	// p === (bzero(96) as bytes)
	frame_dig -1 // p: bytes
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	==
	bz *if0_end

	// *if0_consequent
	// examples/algoplonk-basic/basic_verifier.algo.ts:120
	// return setbit(p, 0, true);
	frame_dig -1 // p: bytes
	int 0
	int 1
	setbit
	retsub

*if0_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:122
	// return p;
	frame_dig -1 // p: bytes
	retsub

// expmod(base: biguint, exponent: biguint, modulus: biguint): biguint
expmod:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// examples/algoplonk-basic/basic_verifier.algo.ts:138
	// result = <biguint>1
	byte 0x01
	frame_bury 0 // result: bigint

*while_0:

*while_0_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:139
	// exponent > 0
	frame_dig -2 // exponent: biguint
	byte 0x00
	b>
	bz *while_0_end

	// *if1_condition
	// examples/algoplonk-basic/basic_verifier.algo.ts:140
	// exponent % 2 === 1
	frame_dig -2 // exponent: biguint
	byte 0x02
	b%
	byte 0x01
	b==
	bz *if1_end

	// *if1_consequent
	// examples/algoplonk-basic/basic_verifier.algo.ts:141
	// result = (result * base) % modulus
	frame_dig 0 // result: bigint
	frame_dig -1 // base: biguint
	b*
	frame_dig -3 // modulus: biguint
	b%
	frame_bury 0 // result: bigint

*if1_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:144
	// exponent = exponent / 2
	frame_dig -2 // exponent: biguint
	byte 0x02
	b/
	frame_bury -2 // exponent: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:146
	// base = (base * base) % modulus
	frame_dig -1 // base: biguint
	frame_dig -1 // base: biguint
	b*
	frame_dig -3 // modulus: biguint
	b%
	frame_bury -1 // base: biguint
	b *while_0

*while_0_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:148
	// return result;
	frame_dig 0 // result: bigint

	// set the subroutine return value
	frame_bury 0
	retsub

// verify(byte[32][35],byte[32][2])bool
*abi_route_verify:
	// The ABI return prefix
	byte 0x151f7c75

	// publicInputs: byte[32][2]
	txna ApplicationArgs 2
	dup
	len
	int 64
	==

	// argument 0 (publicInputs) for verify must be a byte[32][2]
	assert

	// proof: byte[32][35]
	txna ApplicationArgs 1
	dup
	len
	int 1120
	==

	// argument 1 (proof) for verify must be a byte[32][35]
	assert

	// execute verify(byte[32][35],byte[32][2])bool
	callsub verify
	byte 0x00
	int 0
	uncover 2
	setbit
	concat
	log
	int 1
	return

// verify(proof: StaticArray<bytes32, 35>, publicInputs: StaticArray<bytes32, 2>): boolean
verify:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 94

	// examples/algoplonk-basic/basic_verifier.algo.ts:181
	// q = R_MOD
	byte 0x73eda753299d7d483339d80809a1d80553bda402fffe5bfeffffffff00000001
	frame_bury 0 // q: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:184
	// VK_NB_PUBLIC_INPUTS: biguint = 2
	byte 0x02
	frame_bury 1 // VK_NB_PUBLIC_INPUTS: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:185
	// VK_DOMAIN_SIZE: biguint = 8
	byte 0x08
	frame_bury 2 // VK_DOMAIN_SIZE: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:186
	// VK_INV_DOMAIN_SIZE: biguint = 45881390778235416669516772944662720107979233437961683094778201362446258536449
	byte 0x656ff268c469cd9f2cd29d07086d9d04a945ef829ffe907f1fffffff20000001
	frame_bury 3 // VK_INV_DOMAIN_SIZE: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:187
	// VK_OMEGA: biguint = 23674694431658770659612952115660802947967373701506253797663184111817857449850
	byte 0x345766f603fa66e78c0625cd70d77ce2b38b21c28713b7007228fd3397743f7a
	frame_bury 4 // VK_OMEGA: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:189
	// VK_QL = hex(
	//       '10713fd94433520edf68824a133e0bea4d12a26167604bb153fb8f2167d9fcb81fab5f3b80f9bdd2e4788f9daf8d30ac08a797f6f70b8b9008032b7616555f3390aff3ee8df33a02b95262c73081de226e1460971be65302095d5651d1e9b2de'
	//     )
	byte 0x10713fd94433520edf68824a133e0bea4d12a26167604bb153fb8f2167d9fcb81fab5f3b80f9bdd2e4788f9daf8d30ac08a797f6f70b8b9008032b7616555f3390aff3ee8df33a02b95262c73081de226e1460971be65302095d5651d1e9b2de
	frame_bury 5 // VK_QL: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:193
	// VK_QR = hex(
	//       '0c533a2bbb069ee54afde6ae8850761203d2fba9b65969e7fb81b945160125e2d1f2ab20ebbdf0a114b313b66ced354f0bdec437edf48274889d74a18af6c42555870c62a075d122af341e1f84c77747254fd05e9242813bb9499a9f3d862934'
	//     )
	byte 0x0c533a2bbb069ee54afde6ae8850761203d2fba9b65969e7fb81b945160125e2d1f2ab20ebbdf0a114b313b66ced354f0bdec437edf48274889d74a18af6c42555870c62a075d122af341e1f84c77747254fd05e9242813bb9499a9f3d862934
	frame_bury 6 // VK_QR: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:197
	// VK_QO = hex(
	//       '1154a1f3ede233572946ecb83254d7916eaf2339bbc7110a63e649d8a9c3439b889f94502bf591626ad0ba0f3eb7b19a135dc41b0a33449a0bc0ab4d468c00903f4e214fe48162aab811faaa4246f011bc55423ad13ad0b25ae103e10530395b'
	//     )
	byte 0x1154a1f3ede233572946ecb83254d7916eaf2339bbc7110a63e649d8a9c3439b889f94502bf591626ad0ba0f3eb7b19a135dc41b0a33449a0bc0ab4d468c00903f4e214fe48162aab811faaa4246f011bc55423ad13ad0b25ae103e10530395b
	frame_bury 7 // VK_QO: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:201
	// VK_QM = hex(
	//       '125f526b6b83faf0c0fe36ea278f6d62bfa767b059f4ac2f0ef3cba86999343ccac6b5e491e865000e7ded7dab271fce0fad77b55928de160418392b02029485a7ec5d53c8f3f5e93cb42aceac7ed7fe3e2459272208d45792a865b29f41a433'
	//     )
	byte 0x125f526b6b83faf0c0fe36ea278f6d62bfa767b059f4ac2f0ef3cba86999343ccac6b5e491e865000e7ded7dab271fce0fad77b55928de160418392b02029485a7ec5d53c8f3f5e93cb42aceac7ed7fe3e2459272208d45792a865b29f41a433
	frame_bury 8 // VK_QM: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:205
	// VK_QK = hex(
	//       '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
	//     )
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_bury 9 // VK_QK: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:209
	// VK_S1 = hex(
	//       '17843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e9'
	//     )
	byte 0x17843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e9
	frame_bury 10 // VK_S1: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:213
	// VK_S2 = hex(
	//       '01bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e44'
	//     )
	byte 0x01bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e44
	frame_bury 11 // VK_S2: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:217
	// VK_S3 = hex(
	//       '1452d0f60241ecb67515ceff72123fe4738ed7b3dfafa71b07a5f68ad7a91424eb413e0b1d698304883e531dcaa0c69506ca24eb4a2662b3165f05224d563a8b707146774a0388b3efdde964da93f6959a3bce9cf4d187d923329822a9c236e8'
	//     )
	byte 0x1452d0f60241ecb67515ceff72123fe4738ed7b3dfafa71b07a5f68ad7a91424eb413e0b1d698304883e531dcaa0c69506ca24eb4a2662b3165f05224d563a8b707146774a0388b3efdde964da93f6959a3bce9cf4d187d923329822a9c236e8
	frame_bury 12 // VK_S3: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:221
	// VK_COSET_SHIFT: biguint = 7
	byte 0x07
	frame_bury 13 // VK_COSET_SHIFT: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:239
	// VK_QL_fs = hex(
	//       '10713fd94433520edf68824a133e0bea4d12a26167604bb153fb8f2167d9fcb81fab5f3b80f9bdd2e4788f9daf8d30ac08a797f6f70b8b9008032b7616555f3390aff3ee8df33a02b95262c73081de226e1460971be65302095d5651d1e9b2de'
	//     )
	byte 0x10713fd94433520edf68824a133e0bea4d12a26167604bb153fb8f2167d9fcb81fab5f3b80f9bdd2e4788f9daf8d30ac08a797f6f70b8b9008032b7616555f3390aff3ee8df33a02b95262c73081de226e1460971be65302095d5651d1e9b2de
	frame_bury 14 // VK_QL_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:243
	// VK_QR_fs = hex(
	//       '0c533a2bbb069ee54afde6ae8850761203d2fba9b65969e7fb81b945160125e2d1f2ab20ebbdf0a114b313b66ced354f0bdec437edf48274889d74a18af6c42555870c62a075d122af341e1f84c77747254fd05e9242813bb9499a9f3d862934'
	//     )
	byte 0x0c533a2bbb069ee54afde6ae8850761203d2fba9b65969e7fb81b945160125e2d1f2ab20ebbdf0a114b313b66ced354f0bdec437edf48274889d74a18af6c42555870c62a075d122af341e1f84c77747254fd05e9242813bb9499a9f3d862934
	frame_bury 15 // VK_QR_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:247
	// VK_QO_fs = hex(
	//       '1154a1f3ede233572946ecb83254d7916eaf2339bbc7110a63e649d8a9c3439b889f94502bf591626ad0ba0f3eb7b19a135dc41b0a33449a0bc0ab4d468c00903f4e214fe48162aab811faaa4246f011bc55423ad13ad0b25ae103e10530395b'
	//     )
	byte 0x1154a1f3ede233572946ecb83254d7916eaf2339bbc7110a63e649d8a9c3439b889f94502bf591626ad0ba0f3eb7b19a135dc41b0a33449a0bc0ab4d468c00903f4e214fe48162aab811faaa4246f011bc55423ad13ad0b25ae103e10530395b
	frame_bury 16 // VK_QO_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:251
	// VK_QM_fs = hex(
	//       '125f526b6b83faf0c0fe36ea278f6d62bfa767b059f4ac2f0ef3cba86999343ccac6b5e491e865000e7ded7dab271fce0fad77b55928de160418392b02029485a7ec5d53c8f3f5e93cb42aceac7ed7fe3e2459272208d45792a865b29f41a433'
	//     )
	byte 0x125f526b6b83faf0c0fe36ea278f6d62bfa767b059f4ac2f0ef3cba86999343ccac6b5e491e865000e7ded7dab271fce0fad77b55928de160418392b02029485a7ec5d53c8f3f5e93cb42aceac7ed7fe3e2459272208d45792a865b29f41a433
	frame_bury 17 // VK_QM_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:255
	// VK_QK_fs = hex(
	//       '400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000'
	//     )
	byte 0x400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_bury 18 // VK_QK_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:259
	// VK_S1_fs = hex(
	//       '17843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e9'
	//     )
	byte 0x17843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e9
	frame_bury 19 // VK_S1_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:263
	// VK_S2_fs = hex(
	//       '01bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e44'
	//     )
	byte 0x01bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e44
	frame_bury 20 // VK_S2_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:267
	// VK_S3_fs = hex(
	//       '1452d0f60241ecb67515ceff72123fe4738ed7b3dfafa71b07a5f68ad7a91424eb413e0b1d698304883e531dcaa0c69506ca24eb4a2662b3165f05224d563a8b707146774a0388b3efdde964da93f6959a3bce9cf4d187d923329822a9c236e8'
	//     )
	byte 0x1452d0f60241ecb67515ceff72123fe4738ed7b3dfafa71b07a5f68ad7a91424eb413e0b1d698304883e531dcaa0c69506ca24eb4a2662b3165f05224d563a8b707146774a0388b3efdde964da93f6959a3bce9cf4d187d923329822a9c236e8
	frame_bury 21 // VK_S3_fs: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:293
	// L_COM = proof[0] + proof[1] + proof[2]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 0 32
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 32 32
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 64 32
	concat
	frame_bury 22 // L_COM: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:294
	// R_COM = proof[3] + proof[4] + proof[5]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 96 32
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 128 32
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 160 32
	concat
	frame_bury 23 // R_COM: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:295
	// O_COM = proof[6] + proof[7] + proof[8]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 192 32
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	extract 224 32
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 256
	int 32
	extract3
	concat
	frame_bury 24 // O_COM: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:298
	// H0 = proof[9] + proof[10] + proof[11]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 288
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 320
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 352
	int 32
	extract3
	concat
	frame_bury 25 // H0: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:299
	// H1 = proof[12] + proof[13] + proof[14]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 384
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 416
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 448
	int 32
	extract3
	concat
	frame_bury 26 // H1: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:300
	// H2 = proof[15] + proof[16] + proof[17]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 480
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 512
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 544
	int 32
	extract3
	concat
	frame_bury 27 // H2: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:303
	// L_AT_Z = proof[18]
	// examples/algoplonk-basic/basic_verifier.algo.ts:304
	// R_AT_Z = proof[19]
	// examples/algoplonk-basic/basic_verifier.algo.ts:305
	// O_AT_Z = proof[20]
	// examples/algoplonk-basic/basic_verifier.algo.ts:307
	// S1_AT_Z = proof[21]
	// examples/algoplonk-basic/basic_verifier.algo.ts:308
	// S2_AT_Z = proof[22]
	// examples/algoplonk-basic/basic_verifier.algo.ts:338
	// GRAND_PRODUCT = proof[23] + proof[24] + proof[25]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 736
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 768
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 800
	int 32
	extract3
	concat
	frame_bury 28 // GRAND_PRODUCT: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:339
	// GRAND_PRODUCT_AT_Z_OMEGA = clone(proof[26])
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 832
	int 32
	extract3
	frame_bury 29 // GRAND_PRODUCT_AT_Z_OMEGA: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:340
	// QUOTIENT_POLY_AT_Z = clone(proof[27])
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 864
	int 32
	extract3
	frame_bury 30 // QUOTIENT_POLY_AT_Z: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:341
	// LINEAR_POLY_AT_Z = clone(proof[28])
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 896
	int 32
	extract3
	frame_bury 31 // LINEAR_POLY_AT_Z: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:344
	// BATCH_OPENING_AT_Z = proof[29] + proof[30] + proof[31]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 928
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 960
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 992
	int 32
	extract3
	concat
	frame_bury 32 // BATCH_OPENING_AT_Z: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:345
	// OPENING_AT_Z_OMEGA = proof[32] + proof[33] + proof[34]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 1024
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 1056
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 1088
	int 32
	extract3
	concat
	frame_bury 33 // OPENING_AT_Z_OMEGA: byte[]

	// *if2_condition
	// examples/algoplonk-basic/basic_verifier.algo.ts:349
	// btobigint(L_AT_Z) >= q ||
	//       btobigint(R_AT_Z) >= q ||
	//       btobigint(O_AT_Z) >= q ||
	//       btobigint(S1_AT_Z) >= q ||
	//       btobigint(S2_AT_Z) >= q ||
	//       btobigint(GRAND_PRODUCT_AT_Z_OMEGA) >= q ||
	//       btobigint(QUOTIENT_POLY_AT_Z) >= q ||
	//       btobigint(LINEAR_POLY_AT_Z) >= q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	frame_dig 0 // q: bigint
	b>=
	dup
	bnz *skip_or0
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or0:
	dup
	bnz *skip_or1
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 640
	int 32
	extract3
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or1:
	dup
	bnz *skip_or2
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 672
	int 32
	extract3
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or2:
	dup
	bnz *skip_or3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 704
	int 32
	extract3
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or3:
	dup
	bnz *skip_or4
	frame_dig 29 // GRAND_PRODUCT_AT_Z_OMEGA: byte[32]
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or4:
	dup
	bnz *skip_or5
	frame_dig 30 // QUOTIENT_POLY_AT_Z: byte[32]
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or5:
	dup
	bnz *skip_or6
	frame_dig 31 // LINEAR_POLY_AT_Z: byte[32]
	frame_dig 0 // q: bigint
	b>=
	||

*skip_or6:
	bz *if2_end

	// *if2_consequent
	// examples/algoplonk-basic/basic_verifier.algo.ts:358
	// return false;
	int 0
	b *verify*return

*if2_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:361
	// for (let i = 0; i < publicInputs.length; i += 1)
	int 0
	frame_bury 34 // i: uint64

*for_0:
	// examples/algoplonk-basic/basic_verifier.algo.ts:361
	// i < publicInputs.length
	frame_dig 34 // i: uint64
	int 2
	<
	bz *for_0_end

	// *if3_condition
	// examples/algoplonk-basic/basic_verifier.algo.ts:362
	// btobigint(publicInputs[i]) >= q
	frame_dig -2 // publicInputs: StaticArray<bytes32, 2>
	frame_dig 34 // i: uint64
	int 32
	* // acc * typeLength
	int 32
	extract3
	frame_dig 0 // q: bigint
	b>=
	bz *if3_end

	// *if3_consequent
	// examples/algoplonk-basic/basic_verifier.algo.ts:363
	// return false;
	int 0
	b *verify*return

*if3_end:

*for_0_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:361
	// i += 1
	frame_dig 34 // i: uint64
	int 1
	+
	frame_bury 34 // i: uint64
	b *for_0

*for_0_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:394
	// publicInputBytes = ''
	byte 0x // ""
	frame_bury 35 // publicInputBytes: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:396
	// for (let i = 0; i < publicInputs.length; i += 1)
	int 0
	frame_bury 36 // i: uint64

*for_1:
	// examples/algoplonk-basic/basic_verifier.algo.ts:396
	// i < publicInputs.length
	frame_dig 36 // i: uint64
	int 2
	<
	bz *for_1_end

	// examples/algoplonk-basic/basic_verifier.algo.ts:397
	// publicInputBytes += publicInputs[i]
	frame_dig 35 // publicInputBytes: byte[]
	frame_dig -2 // publicInputs: StaticArray<bytes32, 2>
	frame_dig 36 // i: uint64
	int 32
	* // acc * typeLength
	int 32
	extract3
	concat
	frame_bury 35 // publicInputBytes: byte[]

*for_1_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:396
	// i += 1
	frame_dig 36 // i: uint64
	int 1
	+
	frame_bury 36 // i: uint64
	b *for_1

*for_1_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:400
	// gammaPre = sha256(
	//       'gamma' +
	//         VK_S1_fs +
	//         VK_S2_fs +
	//         VK_S3_fs +
	//         VK_QL_fs +
	//         VK_QR_fs +
	//         VK_QM_fs +
	//         VK_QO_fs +
	//         VK_QK_fs +
	//         publicInputBytes +
	//         this.fs(L_COM) +
	//         this.fs(R_COM) +
	//         this.fs(O_COM)
	//     )
	byte 0x67616d6d6117843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e901bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e441452d0f60241ecb67515ceff72123fe4738ed7b3dfafa71b07a5f68ad7a91424eb413e0b1d698304883e531dcaa0c69506ca24eb4a2662b3165f05224d563a8b707146774a0388b3efdde964da93f6959a3bce9cf4d187d923329822a9c236e810713fd94433520edf68824a133e0bea4d12a26167604bb153fb8f2167d9fcb81fab5f3b80f9bdd2e4788f9daf8d30ac08a797f6f70b8b9008032b7616555f3390aff3ee8df33a02b95262c73081de226e1460971be65302095d5651d1e9b2de0c533a2bbb069ee54afde6ae8850761203d2fba9b65969e7fb81b945160125e2d1f2ab20ebbdf0a114b313b66ced354f0bdec437edf48274889d74a18af6c42555870c62a075d122af341e1f84c77747254fd05e9242813bb9499a9f3d862934125f526b6b83faf0c0fe36ea278f6d62bfa767b059f4ac2f0ef3cba86999343ccac6b5e491e865000e7ded7dab271fce0fad77b55928de160418392b02029485a7ec5d53c8f3f5e93cb42aceac7ed7fe3e2459272208d45792a865b29f41a4331154a1f3ede233572946ecb83254d7916eaf2339bbc7110a63e649d8a9c3439b889f94502bf591626ad0ba0f3eb7b19a135dc41b0a33449a0bc0ab4d468c00903f4e214fe48162aab811faaa4246f011bc55423ad13ad0b25ae103e10530395b400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_dig 35 // publicInputBytes: byte[]
	concat
	frame_dig 22 // L_COM: byte[]
	callsub fs
	concat
	frame_dig 23 // R_COM: byte[]
	callsub fs
	concat
	frame_dig 24 // O_COM: byte[]
	callsub fs
	concat
	sha256
	frame_bury 37 // gammaPre: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:416
	// betaPre = sha256('beta' + gammaPre)
	byte 0x62657461 // "beta"
	frame_dig 37 // gammaPre: byte[32]
	concat
	sha256
	frame_bury 38 // betaPre: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:417
	// alphaPre = sha256('alpha' + betaPre + this.fs(GRAND_PRODUCT))
	byte 0x616c706861 // "alpha"
	frame_dig 38 // betaPre: byte[32]
	concat
	frame_dig 28 // GRAND_PRODUCT: byte[]
	callsub fs
	concat
	sha256
	frame_bury 39 // alphaPre: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:418
	// zetaPre = sha256('zeta' + alphaPre + this.fs(H0) + this.fs(H1) + this.fs(H2))
	byte 0x7a657461 // "zeta"
	frame_dig 39 // alphaPre: byte[32]
	concat
	frame_dig 25 // H0: byte[]
	callsub fs
	concat
	frame_dig 26 // H1: byte[]
	callsub fs
	concat
	frame_dig 27 // H2: byte[]
	callsub fs
	concat
	sha256
	frame_bury 40 // zetaPre: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:420
	// gamma = this.curvemod(gammaPre as bytes)
	frame_dig 37 // gammaPre: byte[32]
	callsub curvemod
	frame_bury 41 // gamma: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:421
	// beta = this.curvemod(betaPre as bytes)
	frame_dig 38 // betaPre: byte[32]
	callsub curvemod
	frame_bury 42 // beta: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:422
	// alpha = this.curvemod(alphaPre as bytes)
	frame_dig 39 // alphaPre: byte[32]
	callsub curvemod
	frame_bury 43 // alpha: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:423
	// zeta = this.curvemod(zetaPre as bytes)
	frame_dig 40 // zetaPre: byte[32]
	callsub curvemod
	frame_bury 44 // zeta: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:442
	// Zz = (this.expmod(zeta, VK_DOMAIN_SIZE, q) + q - 1) % q
	frame_dig 0 // q: bigint
	byte 0x08 // VK_DOMAIN_SIZE: biguint
	frame_dig 44 // zeta: bigint
	callsub expmod
	frame_dig 0 // q: bigint
	b+
	byte 0x01
	b-
	frame_dig 0 // q: bigint
	b%
	frame_bury 45 // Zz: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:445
	// zn = (Zz * VK_INV_DOMAIN_SIZE) % q
	frame_dig 45 // Zz: bigint
	byte 0x656ff268c469cd9f2cd29d07086d9d04a945ef829ffe907f1fffffff20000001 // VK_INV_DOMAIN_SIZE: biguint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 46 // zn: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:448
	// w_: biguint = 1
	byte 0x01
	frame_bury 47 // w_: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:449
	// batch: uint256[] = []
	byte 0x
	frame_bury 48 // batch: uint256[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:450
	// for (let i: biguint = 0; i < VK_NB_PUBLIC_INPUTS; i += 1)
	byte 0x00
	frame_bury 49 // i: biguint

*for_2:
	// examples/algoplonk-basic/basic_verifier.algo.ts:450
	// i < VK_NB_PUBLIC_INPUTS
	frame_dig 49 // i: biguint
	byte 0x02 // VK_NB_PUBLIC_INPUTS: biguint
	b<
	bz *for_2_end

	// examples/algoplonk-basic/basic_verifier.algo.ts:451
	// x = (zeta + q - w_) % q
	frame_dig 44 // zeta: bigint
	frame_dig 0 // q: bigint
	b+
	frame_dig 47 // w_: biguint
	b-
	frame_dig 0 // q: bigint
	b%
	frame_bury 50 // x: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:452
	// batch.push(x)
	frame_dig 48 // batch: uint256[]
	frame_dig 50 // x: bigint
	concat
	frame_bury 48 // batch: uint256[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:453
	// w_ = (w_ * VK_OMEGA) % q
	frame_dig 47 // w_: biguint
	byte 0x345766f603fa66e78c0625cd70d77ce2b38b21c28713b7007228fd3397743f7a // VK_OMEGA: biguint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 47 // w_: biguint

*for_2_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:450
	// i += 1
	frame_dig 49 // i: biguint
	byte 0x01
	b+
	frame_bury 49 // i: biguint
	b *for_2

*for_2_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:477
	// temp: uint256[] = []
	byte 0x
	frame_bury 51 // temp: uint256[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:478
	// prev: uint256 = 1
	byte 0x0000000000000000000000000000000000000000000000000000000000000001
	frame_bury 52 // prev: uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:479
	// temp.push(prev)
	frame_dig 51 // temp: uint256[]
	byte 0x0000000000000000000000000000000000000000000000000000000000000001 // prev: uint256
	concat
	frame_bury 51 // temp: uint256[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:481
	// for (let i = 0; i < batch.length; i += 1)
	int 0
	frame_bury 53 // i: uint64

*for_3:
	// examples/algoplonk-basic/basic_verifier.algo.ts:481
	// i < batch.length
	frame_dig 53 // i: uint64
	frame_dig 48 // batch: uint256[]
	len
	int 32
	/
	<
	bz *for_3_end

	// examples/algoplonk-basic/basic_verifier.algo.ts:482
	// x = batch[i]
	frame_dig 48 // batch: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 53 // i: uint64
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_bury 54 // x: uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:483
	// y = (x * prev) % q
	frame_dig 54 // x: uint256
	byte 0x0000000000000000000000000000000000000000000000000000000000000001 // prev: uint256
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 55 // y: unsafe uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:484
	// temp.push(y)
	frame_dig 51 // temp: uint256[]
	frame_dig 55 // y: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// y overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	frame_bury 51 // temp: uint256[]

*for_3_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:481
	// i += 1
	frame_dig 53 // i: uint64
	int 1
	+
	frame_bury 53 // i: uint64
	b *for_3

*for_3_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:487
	// inv = this.expmod(prev as biguint, q - 2, q) as uint256
	frame_dig 0 // q: bigint
	frame_dig 0 // q: bigint
	byte 0x02
	b-
	byte 0x0000000000000000000000000000000000000000000000000000000000000001 // prev: uint256
	callsub expmod
	frame_bury 56 // inv: unsafe uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:488
	// j = VK_NB_PUBLIC_INPUTS
	byte 0x02 // VK_NB_PUBLIC_INPUTS: biguint
	frame_bury 57 // j: bigint

*while_1:

*while_1_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:489
	// j > 0
	frame_dig 57 // j: bigint
	byte 0x00
	b>
	bz *while_1_end

	// examples/algoplonk-basic/basic_verifier.algo.ts:490
	// tmp = batch[j - 1]
	frame_dig 48 // batch: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 57 // j: bigint
	byte 0x01
	b-
	btoi
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_bury 58 // tmp: uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:491
	// cur = (inv * temp[j - 1]) % q
	frame_dig 56 // inv: unsafe uint256
	frame_dig 51 // temp: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 57 // j: bigint
	byte 0x01
	b-
	btoi
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 59 // cur: unsafe uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:492
	// batch[j - 1] = cur
	frame_dig 48 // batch: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 57 // j: bigint
	byte 0x01
	b-
	btoi
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	frame_dig 59 // cur: unsafe uint256
	dup
	bitlen
	int 256
	<=

	// cur overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	replace3
	frame_bury 48 // batch: uint256[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:493
	// inv = (inv * tmp) % q
	frame_dig 56 // inv: unsafe uint256
	frame_dig 58 // tmp: uint256
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 56 // inv: unsafe uint256

	// examples/algoplonk-basic/basic_verifier.algo.ts:494
	// j -= 1
	frame_dig 57 // j: bigint
	byte 0x01
	b-
	frame_bury 57 // j: bigint
	b *while_1

*while_1_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:514
	// w_ = 1
	int 1
	frame_bury 47 // w_: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:517
	// for (let i: biguint = 0; i < VK_NB_PUBLIC_INPUTS; i += 1)
	byte 0x00
	frame_bury 60 // i: biguint

*for_4:
	// examples/algoplonk-basic/basic_verifier.algo.ts:517
	// i < VK_NB_PUBLIC_INPUTS
	frame_dig 60 // i: biguint
	byte 0x02 // VK_NB_PUBLIC_INPUTS: biguint
	b<
	bz *for_4_end

	// examples/algoplonk-basic/basic_verifier.algo.ts:518
	// batch[i] = ((w_ * ((batch[i] * zn) % q)) % q) as uint256
	frame_dig 48 // batch: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 60 // i: biguint
	btoi
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	frame_dig 47 // w_: biguint
	frame_dig 48 // batch: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 60 // i: biguint
	btoi
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig 46 // zn: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	b*
	frame_dig 0 // q: bigint
	b%
	dup
	bitlen
	int 256
	<=

	// ((w_ * ((batch[i] * zn) % q)) % q) as uint256 overflowed 256 bits
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	replace3
	frame_bury 48 // batch: uint256[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:519
	// w_ = (w_ * VK_OMEGA) % q
	frame_dig 47 // w_: biguint
	byte 0x345766f603fa66e78c0625cd70d77ce2b38b21c28713b7007228fd3397743f7a // VK_OMEGA: biguint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 47 // w_: biguint

*for_4_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:517
	// i += 1
	frame_dig 60 // i: biguint
	byte 0x01
	b+
	frame_bury 60 // i: biguint
	b *for_4

*for_4_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:522
	// tmp: biguint = 0
	byte 0x00
	frame_bury 61 // tmp: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:523
	// PI: biguint = 0
	byte 0x00
	frame_bury 62 // PI: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:526
	// for (let i: biguint = 0; i < VK_NB_PUBLIC_INPUTS; i += 1)
	byte 0x00
	frame_bury 63 // i: biguint

*for_5:
	// examples/algoplonk-basic/basic_verifier.algo.ts:526
	// i < VK_NB_PUBLIC_INPUTS
	frame_dig 63 // i: biguint
	byte 0x02 // VK_NB_PUBLIC_INPUTS: biguint
	b<
	bz *for_5_end

	// examples/algoplonk-basic/basic_verifier.algo.ts:527
	// tmp = (batch[i] * btobigint(publicInputs[i])) % q
	frame_dig 48 // batch: uint256[]
	store 255 // full array
	int 0 // initial offset
	frame_dig 63 // i: biguint
	btoi
	int 32
	* // acc * typeLength
	+
	load 255 // full array
	swap
	int 32
	extract3
	frame_dig -2 // publicInputs: StaticArray<bytes32, 2>
	frame_dig 63 // i: biguint
	int 32
	* // acc * typeLength
	int 32
	extract3
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 61 // tmp: biguint

	// examples/algoplonk-basic/basic_verifier.algo.ts:528
	// PI = (PI + tmp) % q
	frame_dig 62 // PI: biguint
	frame_dig 61 // tmp: biguint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 62 // PI: biguint

*for_5_continue:
	// examples/algoplonk-basic/basic_verifier.algo.ts:526
	// i += 1
	frame_dig 63 // i: biguint
	byte 0x01
	b+
	frame_bury 63 // i: biguint
	b *for_5

*for_5_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:541
	// res = (zeta + q - 1) % q
	frame_dig 44 // zeta: bigint
	frame_dig 0 // q: bigint
	b+
	byte 0x01
	b-
	frame_dig 0 // q: bigint
	b%
	frame_bury 64 // res: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:542
	// res = this.expmod(res, q - 2, q)
	frame_dig 0 // q: bigint
	frame_dig 0 // q: bigint
	byte 0x02
	b-
	frame_dig 64 // res: bigint
	callsub expmod
	frame_bury 64 // res: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:543
	// res = (res * zn) % q
	frame_dig 64 // res: bigint
	frame_dig 46 // zn: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 64 // res: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:544
	// res = (res * alpha) % q
	frame_dig 64 // res: bigint
	frame_dig 43 // alpha: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 64 // res: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:545
	// res = (res * alpha) % q
	frame_dig 64 // res: bigint
	frame_dig 43 // alpha: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 64 // res: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:546
	// alpha2Lagrange = res
	frame_dig 64 // res: bigint
	frame_bury 65 // alpha2Lagrange: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:572
	// s1 = (btobigint(S1_AT_Z) * beta) % q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 672
	int 32
	extract3
	frame_dig 42 // beta: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:573
	// s1 = (s1 + gamma + btobigint(L_AT_Z)) % q
	frame_dig 66 // s1: bigint
	frame_dig 41 // gamma: bigint
	b+
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:575
	// s2 = (btobigint(S2_AT_Z) * beta) % q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 704
	int 32
	extract3
	frame_dig 42 // beta: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 67 // s2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:576
	// s2 = (s2 + gamma + btobigint(R_AT_Z)) % q
	frame_dig 67 // s2: bigint
	frame_dig 41 // gamma: bigint
	b+
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 67 // s2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:578
	// o = (btobigint(O_AT_Z) + gamma) % q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 640
	int 32
	extract3
	frame_dig 41 // gamma: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 68 // o: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:580
	// s1 = (s1 * s2) % q
	frame_dig 66 // s1: bigint
	frame_dig 67 // s2: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:581
	// s1 = (s1 * o) % q
	frame_dig 66 // s1: bigint
	frame_dig 68 // o: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:582
	// s1 = (s1 * alpha) % q
	frame_dig 66 // s1: bigint
	frame_dig 43 // alpha: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:583
	// s1 = (s1 * btobigint(GRAND_PRODUCT_AT_Z_OMEGA)) % q
	frame_dig 66 // s1: bigint
	frame_dig 29 // GRAND_PRODUCT_AT_Z_OMEGA: byte[32]
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:585
	// quot = (btobigint(LINEAR_POLY_AT_Z) + PI + s1 + q - alpha2Lagrange) % q
	frame_dig 31 // LINEAR_POLY_AT_Z: byte[32]
	frame_dig 62 // PI: biguint
	b+
	frame_dig 66 // s1: bigint
	b+
	frame_dig 0 // q: bigint
	b+
	frame_dig 65 // alpha2Lagrange: bigint
	b-
	frame_dig 0 // q: bigint
	b%
	frame_bury 69 // quot: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:587
	// s2 = (btobigint(QUOTIENT_POLY_AT_Z) * Zz) % q
	frame_dig 30 // QUOTIENT_POLY_AT_Z: byte[32]
	frame_dig 45 // Zz: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 67 // s2: bigint

	// *if4_condition
	// examples/algoplonk-basic/basic_verifier.algo.ts:589
	// quot !== s2
	frame_dig 69 // quot: bigint
	frame_dig 67 // s2: bigint
	b!=
	bz *if4_end

	// *if4_consequent
	// examples/algoplonk-basic/basic_verifier.algo.ts:590
	// return false;
	int 0
	b *verify*return

*if4_end:
	// examples/algoplonk-basic/basic_verifier.algo.ts:605
	// n2 = VK_DOMAIN_SIZE + 2
	byte 0x08 // VK_DOMAIN_SIZE: biguint
	byte 0x02
	b+
	frame_bury 70 // n2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:606
	// zn2 = this.expmod(zeta, n2, q)
	frame_dig 0 // q: bigint
	frame_dig 70 // n2: bigint
	frame_dig 44 // zeta: bigint
	callsub expmod
	frame_bury 71 // zn2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:607
	// foldedH = ecScalarMul('BLS12_381g1', H2, rawBytes(zn2))
	frame_dig 27 // H2: byte[]
	frame_dig 71 // zn2: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 72 // foldedH: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:608
	// foldedH = ecAdd('BLS12_381g1', foldedH, H1)
	frame_dig 72 // foldedH: byte[]
	frame_dig 26 // H1: byte[]
	ec_add BLS12_381g1
	frame_bury 72 // foldedH: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:609
	// foldedH = ecScalarMul('BLS12_381g1', foldedH, rawBytes(zn2))
	frame_dig 72 // foldedH: byte[]
	frame_dig 71 // zn2: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 72 // foldedH: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:610
	// foldedH = ecAdd('BLS12_381g1', foldedH, H0)
	frame_dig 72 // foldedH: byte[]
	frame_dig 25 // H0: byte[]
	ec_add BLS12_381g1
	frame_bury 72 // foldedH: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:639
	// u = (btobigint(GRAND_PRODUCT_AT_Z_OMEGA) * beta) % q
	frame_dig 29 // GRAND_PRODUCT_AT_Z_OMEGA: byte[32]
	frame_dig 42 // beta: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 73 // u: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:640
	// v = (btobigint(S1_AT_Z) * beta) % q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 672
	int 32
	extract3
	frame_dig 42 // beta: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 74 // v: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:641
	// v = (v + btobigint(L_AT_Z) + gamma) % q
	frame_dig 74 // v: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	b+
	frame_dig 41 // gamma: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 74 // v: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:642
	// w = (btobigint(S2_AT_Z) * beta) % q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 704
	int 32
	extract3
	frame_dig 42 // beta: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 75 // w: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:643
	// w = (w + btobigint(R_AT_Z) + gamma) % q
	frame_dig 75 // w: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	b+
	frame_dig 41 // gamma: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 75 // w: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:645
	// s1 = (u * v) % q
	frame_dig 73 // u: bigint
	frame_dig 74 // v: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:646
	// s1 = (s1 * w) % q
	frame_dig 66 // s1: bigint
	frame_dig 75 // w: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:647
	// s1 = (s1 * alpha) % q
	frame_dig 66 // s1: bigint
	frame_dig 43 // alpha: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 66 // s1: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:649
	// cosetSquare = (VK_COSET_SHIFT * VK_COSET_SHIFT) % q
	byte 0x07 // VK_COSET_SHIFT: biguint
	dup
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 76 // cosetSquare: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:650
	// betazeta = (beta * zeta) % q
	frame_dig 42 // beta: bigint
	frame_dig 44 // zeta: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 77 // betazeta: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:651
	// u = (betazeta + btobigint(L_AT_Z) + gamma) % q
	frame_dig 77 // betazeta: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	b+
	frame_dig 41 // gamma: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 73 // u: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:653
	// v = (betazeta * VK_COSET_SHIFT) % q
	frame_dig 77 // betazeta: bigint
	byte 0x07 // VK_COSET_SHIFT: biguint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 74 // v: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:654
	// v = (v + btobigint(R_AT_Z) + gamma) % q
	frame_dig 74 // v: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	b+
	frame_dig 41 // gamma: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 74 // v: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:656
	// w = (betazeta * cosetSquare) % q
	frame_dig 77 // betazeta: bigint
	frame_dig 76 // cosetSquare: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 75 // w: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:657
	// w = (w + btobigint(O_AT_Z) + gamma) % q
	frame_dig 75 // w: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 640
	int 32
	extract3
	b+
	frame_dig 41 // gamma: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 75 // w: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:659
	// s2 = (u * v) % q
	frame_dig 73 // u: bigint
	frame_dig 74 // v: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 67 // s2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:660
	// s2 = q - ((s2 * w) % q)
	frame_dig 0 // q: bigint
	frame_dig 67 // s2: bigint
	frame_dig 75 // w: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	b-
	frame_bury 67 // s2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:661
	// s2 = (s2 * alpha + alpha2Lagrange) % q
	frame_dig 67 // s2: bigint
	frame_dig 43 // alpha: bigint
	b*
	frame_dig 65 // alpha2Lagrange: bigint
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 67 // s2: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:683
	// linPolyCom = ecScalarMul('BLS12_381g1', VK_QL, L_AT_Z as bytes)
	byte 0x10713fd94433520edf68824a133e0bea4d12a26167604bb153fb8f2167d9fcb81fab5f3b80f9bdd2e4788f9daf8d30ac08a797f6f70b8b9008032b7616555f3390aff3ee8df33a02b95262c73081de226e1460971be65302095d5651d1e9b2de // VK_QL: byte[]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	ec_scalar_mul BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:685
	// addTerm = ecScalarMul('BLS12_381g1', VK_QR, R_AT_Z as bytes)
	byte 0x0c533a2bbb069ee54afde6ae8850761203d2fba9b65969e7fb81b945160125e2d1f2ab20ebbdf0a114b313b66ced354f0bdec437edf48274889d74a18af6c42555870c62a075d122af341e1f84c77747254fd05e9242813bb9499a9f3d862934 // VK_QR: byte[]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:686
	// linPolyCom = ecAdd('BLS12_381g1', linPolyCom, addTerm)
	frame_dig 78 // linPolyCom: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:688
	// addTerm = ecScalarMul('BLS12_381g1', VK_QO, O_AT_Z as bytes)
	byte 0x1154a1f3ede233572946ecb83254d7916eaf2339bbc7110a63e649d8a9c3439b889f94502bf591626ad0ba0f3eb7b19a135dc41b0a33449a0bc0ab4d468c00903f4e214fe48162aab811faaa4246f011bc55423ad13ad0b25ae103e10530395b // VK_QO: byte[]
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 640
	int 32
	extract3
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:689
	// linPolyCom = ecAdd('BLS12_381g1', linPolyCom, addTerm)
	frame_dig 78 // linPolyCom: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:691
	// ab = (btobigint(L_AT_Z) * btobigint(R_AT_Z)) % q
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 80 // ab: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:692
	// addTerm = ecScalarMul('BLS12_381g1', VK_QM, rawBytes(ab))
	byte 0x125f526b6b83faf0c0fe36ea278f6d62bfa767b059f4ac2f0ef3cba86999343ccac6b5e491e865000e7ded7dab271fce0fad77b55928de160418392b02029485a7ec5d53c8f3f5e93cb42aceac7ed7fe3e2459272208d45792a865b29f41a433 // VK_QM: byte[]
	frame_dig 80 // ab: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:693
	// linPolyCom = ecAdd('BLS12_381g1', linPolyCom, addTerm)
	frame_dig 78 // linPolyCom: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:694
	// linPolyCom = ecAdd('BLS12_381g1', linPolyCom, VK_QK)
	frame_dig 78 // linPolyCom: byte[]
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // VK_QK: byte[]
	ec_add BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:696
	// addTerm = ecScalarMul('BLS12_381g1', VK_S3, rawBytes(s1))
	byte 0x1452d0f60241ecb67515ceff72123fe4738ed7b3dfafa71b07a5f68ad7a91424eb413e0b1d698304883e531dcaa0c69506ca24eb4a2662b3165f05224d563a8b707146774a0388b3efdde964da93f6959a3bce9cf4d187d923329822a9c236e8 // VK_S3: byte[]
	frame_dig 66 // s1: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:697
	// linPolyCom = ecAdd('BLS12_381g1', linPolyCom, addTerm)
	frame_dig 78 // linPolyCom: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:699
	// addTerm = ecScalarMul('BLS12_381g1', GRAND_PRODUCT, rawBytes(s2))
	frame_dig 28 // GRAND_PRODUCT: byte[]
	frame_dig 67 // s2: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:700
	// linPolyCom = ecAdd('BLS12_381g1', linPolyCom, addTerm)
	frame_dig 78 // linPolyCom: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 78 // linPolyCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:713
	// rPre = sha256(
	//       'gamma' +
	//         rawBytes(zeta) +
	//         foldedH +
	//         linPolyCom +
	//         this.fs(L_COM) +
	//         this.fs(R_COM) +
	//         this.fs(O_COM) +
	//         VK_S1_fs +
	//         VK_S2_fs +
	//         QUOTIENT_POLY_AT_Z +
	//         LINEAR_POLY_AT_Z +
	//         L_AT_Z +
	//         R_AT_Z +
	//         O_AT_Z +
	//         S1_AT_Z +
	//         S2_AT_Z +
	//         GRAND_PRODUCT_AT_Z_OMEGA
	//     )
	byte 0x67616d6d61 // "gamma"
	frame_dig 44 // zeta: bigint
	concat
	frame_dig 72 // foldedH: byte[]
	concat
	frame_dig 78 // linPolyCom: byte[]
	concat
	frame_dig 22 // L_COM: byte[]
	callsub fs
	concat
	frame_dig 23 // R_COM: byte[]
	callsub fs
	concat
	frame_dig 24 // O_COM: byte[]
	callsub fs
	concat
	byte 0x17843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e9 // VK_S1_fs: byte[]
	concat
	byte 0x01bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e44 // VK_S2_fs: byte[]
	concat
	frame_dig 30 // QUOTIENT_POLY_AT_Z: byte[32]
	concat
	frame_dig 31 // LINEAR_POLY_AT_Z: byte[32]
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 640
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 672
	int 32
	extract3
	concat
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 704
	int 32
	extract3
	concat
	frame_dig 29 // GRAND_PRODUCT_AT_Z_OMEGA: byte[32]
	concat
	sha256
	frame_bury 81 // rPre: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:732
	// r = this.curvemod(rPre as bytes)
	frame_dig 81 // rPre: byte[32]
	callsub curvemod
	frame_bury 82 // r: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:733
	// rAcc = r
	frame_dig 82 // r: bigint
	frame_bury 83 // rAcc: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:770
	// digest = foldedH
	frame_dig 72 // foldedH: byte[]
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:771
	// addTerm = ecScalarMul('BLS12_381g1', linPolyCom, rawBytes(rAcc))
	frame_dig 78 // linPolyCom: byte[]
	frame_dig 83 // rAcc: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:772
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:773
	// claims = (btobigint(QUOTIENT_POLY_AT_Z) + btobigint(LINEAR_POLY_AT_Z) * rAcc) % q
	frame_dig 30 // QUOTIENT_POLY_AT_Z: byte[32]
	frame_dig 31 // LINEAR_POLY_AT_Z: byte[32]
	frame_dig 83 // rAcc: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:775
	// rAcc = (rAcc * r) % q
	frame_dig 83 // rAcc: bigint
	frame_dig 82 // r: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 83 // rAcc: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:776
	// addTerm = ecScalarMul('BLS12_381g1', L_COM, rawBytes(rAcc))
	frame_dig 22 // L_COM: byte[]
	frame_dig 83 // rAcc: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:777
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:778
	// claims = (claims + btobigint(L_AT_Z) * rAcc) % q
	frame_dig 85 // claims: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 576
	int 32
	extract3
	frame_dig 83 // rAcc: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:780
	// rAcc = (rAcc * r) % q
	frame_dig 83 // rAcc: bigint
	frame_dig 82 // r: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 83 // rAcc: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:781
	// addTerm = ecScalarMul('BLS12_381g1', R_COM, rawBytes(rAcc))
	frame_dig 23 // R_COM: byte[]
	frame_dig 83 // rAcc: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:782
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:783
	// claims = (claims + btobigint(R_AT_Z) * rAcc) % q
	frame_dig 85 // claims: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 608
	int 32
	extract3
	frame_dig 83 // rAcc: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:785
	// rAcc = (rAcc * r) % q
	frame_dig 83 // rAcc: bigint
	frame_dig 82 // r: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 83 // rAcc: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:786
	// addTerm = ecScalarMul('BLS12_381g1', O_COM, rawBytes(rAcc))
	frame_dig 24 // O_COM: byte[]
	frame_dig 83 // rAcc: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:787
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:788
	// claims = (claims + btobigint(O_AT_Z) * rAcc) % q
	frame_dig 85 // claims: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 640
	int 32
	extract3
	frame_dig 83 // rAcc: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:790
	// rAcc = (rAcc * r) % q
	frame_dig 83 // rAcc: bigint
	frame_dig 82 // r: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 83 // rAcc: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:791
	// addTerm = ecScalarMul('BLS12_381g1', VK_S1, rawBytes(rAcc))
	byte 0x17843c5e6efe68cfd49fc36e71a463d925ba95539e60a5fc08fa45df81806f368d51e703e7e564fa65253af6b8f8eafb1059292de9b05227c77e2f2ab05a461db144ef40d4f42781d403921242e8ea26d67eb8d9df4c2920d48845f027cc28e9 // VK_S1: byte[]
	frame_dig 83 // rAcc: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:792
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:793
	// claims = (claims + btobigint(S1_AT_Z) * rAcc) % q
	frame_dig 85 // claims: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 672
	int 32
	extract3
	frame_dig 83 // rAcc: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:795
	// rAcc = (rAcc * r) % q
	frame_dig 83 // rAcc: bigint
	frame_dig 82 // r: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 83 // rAcc: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:796
	// addTerm = ecScalarMul('BLS12_381g1', VK_S2, rawBytes(rAcc))
	byte 0x01bcd4b305191c5f7c870f3b82b4f0b0cdc261b9c083bb77bf4a2ab81e7a8af1f558688d57aeedfb1b77f18f2ccd2d5b0e4fb14b661ff53851213e8c00620d2745247052252bebb12c34bf0d13fca3046be9f23803642fa21c0c2e96f4687e44 // VK_S2: byte[]
	frame_dig 83 // rAcc: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:797
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:798
	// claims = (claims + btobigint(S2_AT_Z) * rAcc) % q
	frame_dig 85 // claims: bigint
	frame_dig -1 // proof: StaticArray<bytes32, 35>
	int 704
	int 32
	extract3
	frame_dig 83 // rAcc: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:831
	// rPre2 = sha256(
	//       digest + BATCH_OPENING_AT_Z + this.fs(GRAND_PRODUCT) + OPENING_AT_Z_OMEGA + rawBytes(zeta) + rawBytes(r)
	//     )
	frame_dig 84 // digest: byte[]
	frame_dig 32 // BATCH_OPENING_AT_Z: byte[]
	concat
	frame_dig 28 // GRAND_PRODUCT: byte[]
	callsub fs
	concat
	frame_dig 33 // OPENING_AT_Z_OMEGA: byte[]
	concat
	frame_dig 44 // zeta: bigint
	concat
	frame_dig 82 // r: bigint
	concat
	sha256
	frame_bury 86 // rPre2: byte[32]

	// examples/algoplonk-basic/basic_verifier.algo.ts:834
	// r = this.curvemod(rPre2 as bytes)
	frame_dig 86 // rPre2: byte[32]
	callsub curvemod
	frame_bury 82 // r: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:836
	// quotient = BATCH_OPENING_AT_Z
	frame_dig 32 // BATCH_OPENING_AT_Z: byte[]
	frame_bury 87 // quotient: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:837
	// addTerm = ecScalarMul('BLS12_381g1', OPENING_AT_Z_OMEGA, rawBytes(r))
	frame_dig 33 // OPENING_AT_Z_OMEGA: byte[]
	frame_dig 82 // r: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:838
	// quotient = ecAdd('BLS12_381g1', quotient, addTerm)
	frame_dig 87 // quotient: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 87 // quotient: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:840
	// addTerm = ecScalarMul('BLS12_381g1', GRAND_PRODUCT, rawBytes(r))
	frame_dig 28 // GRAND_PRODUCT: byte[]
	frame_dig 82 // r: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:841
	// digest = ecAdd('BLS12_381g1', digest, addTerm)
	frame_dig 84 // digest: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:843
	// claims = (claims + btobigint(GRAND_PRODUCT_AT_Z_OMEGA) * r) % q
	frame_dig 85 // claims: bigint
	frame_dig 29 // GRAND_PRODUCT_AT_Z_OMEGA: byte[32]
	frame_dig 82 // r: bigint
	b*
	b+
	frame_dig 0 // q: bigint
	b%
	frame_bury 85 // claims: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:845
	// G1_SRS = rawBytes(G1_SRS_X) + rawBytes(G1_SRS_Y)
	byte 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1
	frame_bury 88 // G1_SRS: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:846
	// claimsCom = ecScalarMul('BLS12_381g1', G1_SRS as bytes, rawBytes(claims))
	byte 0x17f1d3a73197d7942695638c4fa9ac0fc3688c4f9774b905a14e3a3f171bac586c55e83ff97a1aeffb3af00adb22c6bb08b3f481e3aaa0f1a09e30ed741d8ae4fcf5e095d5d00af600db18cb2c04b3edd03cc744a2888ae40caa232946c5e7e1 // G1_SRS: byte[]
	frame_dig 85 // claims: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 89 // claimsCom: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:848
	// digest = ecAdd('BLS12_381g1', digest, this.invert(claimsCom))
	frame_dig 84 // digest: byte[]
	frame_dig 89 // claimsCom: byte[]
	callsub invert
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:850
	// pointsQuotient = ecScalarMul('BLS12_381g1', BATCH_OPENING_AT_Z, rawBytes(zeta))
	frame_dig 32 // BATCH_OPENING_AT_Z: byte[]
	frame_dig 44 // zeta: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 90 // pointsQuotient: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:852
	// zetaOmega = (zeta * VK_OMEGA) % q
	frame_dig 44 // zeta: bigint
	byte 0x345766f603fa66e78c0625cd70d77ce2b38b21c28713b7007228fd3397743f7a // VK_OMEGA: biguint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 91 // zetaOmega: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:853
	// r = (r * zetaOmega) % q
	frame_dig 82 // r: bigint
	frame_dig 91 // zetaOmega: bigint
	b*
	frame_dig 0 // q: bigint
	b%
	frame_bury 82 // r: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:854
	// addTerm = ecScalarMul('BLS12_381g1', OPENING_AT_Z_OMEGA, rawBytes(r))
	frame_dig 33 // OPENING_AT_Z_OMEGA: byte[]
	frame_dig 82 // r: bigint
	ec_scalar_mul BLS12_381g1
	frame_bury 79 // addTerm: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:855
	// pointsQuotient = ecAdd('BLS12_381g1', pointsQuotient, addTerm)
	frame_dig 90 // pointsQuotient: byte[]
	frame_dig 79 // addTerm: byte[]
	ec_add BLS12_381g1
	frame_bury 90 // pointsQuotient: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:857
	// digest = ecAdd('BLS12_381g1', digest, pointsQuotient)
	frame_dig 84 // digest: byte[]
	frame_dig 90 // pointsQuotient: byte[]
	ec_add BLS12_381g1
	frame_bury 84 // digest: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:858
	// quotient = this.invert(quotient)
	frame_dig 87 // quotient: byte[]
	callsub invert
	frame_bury 87 // quotient: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:870
	// bzero48 = btobigint(bzero(48))
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_bury 92 // bzero48: bigint

	// examples/algoplonk-basic/basic_verifier.algo.ts:872
	// g2 =
	//       rawBytes(bzero48 | G2_SRS_0_X_1) +
	//       rawBytes(bzero48 | G2_SRS_0_X_0) +
	//       rawBytes(bzero48 | G2_SRS_0_Y_1) +
	//       rawBytes(bzero48 | G2_SRS_0_Y_0) +
	//       rawBytes(bzero48 | G2_SRS_1_X_1) +
	//       rawBytes(bzero48 | G2_SRS_1_X_0) +
	//       rawBytes(bzero48 | G2_SRS_1_Y_1) +
	//       rawBytes(bzero48 | G2_SRS_1_Y_0)
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x024aa2b2f08f0a91260805272dc51051c6e47ad4fa403b02b4510b647ae3d1770bac0326a805bbefd48056c8c121bdb8
	b|
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x13e02b6052719f607dacd3a088274f65596bd0d09920b61ab5da61bbdc7f5049334cf11213945d57e5ac7d055d042b7e
	b|
	concat
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x0ce5d527727d6e118cc9cdc6da2e351aadfd9baa8cbdd3a76d429a695160d12c923ac9cc3baca289e193548608b82801
	b|
	concat
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x0606c4a02ea734cc32acd2b02bc28b99cb3e287e85a763af267492ab572e99ab3f370d275cec1da1aaa9075ff05f79be
	b|
	concat
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x1224556839c0c3b5bf3f3bad9727dfc5c3326539883a6b798bef5302776ede7b939374a236e96658b269c3f4a2ea859e
	b|
	concat
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x078b94342f7d47a92f8618d0cf60cd3f8c77279ffafb2f0d71e4be074979f1b2f536007e9dcd236abaabcac376993079
	b|
	concat
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x15a2f6fdb3ea48618119f9597b66cce5ef1e6a828a742d2c112d33e579c2041bccd570feb9bfde732d53f05b0b3aaea3
	b|
	concat
	byte 0x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // bzero48: bigint
	byte 0x15e9fa1ec9bd5bf2a31df2927762eb7829d205b3d35ab504aa428885dbb3c9965294ffda424a758a4401b7792929a5dd
	b|
	concat
	frame_bury 93 // g2: byte[]

	// examples/algoplonk-basic/basic_verifier.algo.ts:882
	// check = ecPairingCheck('BLS12_381g1', digest + quotient, g2)
	frame_dig 84 // digest: byte[]
	frame_dig 87 // quotient: byte[]
	concat
	frame_dig 93 // g2: byte[]
	ec_pairing_check BLS12_381g1
	frame_bury 94 // check: bool

	// examples/algoplonk-basic/basic_verifier.algo.ts:883
	// return check;
	frame_dig 94 // check: bool

*verify*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 94
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "verify(byte[32][35],byte[32][2])bool"
	txna ApplicationArgs 0
	match *abi_route_verify

	// this contract does not implement the given ABI method for call NoOp
	err
#pragma version 9

// This TEAL was generated by TEALScript v0.69.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// incrementCounter(uint64)void
incrementCounter:
	proto 1 0

	// examples/simple/simple.algo.ts:7
	// this.counter.value = this.counter.value + i
	byte 0x636f756e746572 // "counter"
	dup
	app_global_get
	frame_dig -1 // i: uint64
	+
	app_global_put
	retsub

abi_route_incr:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute incr(uint64)void
	callsub incr
	int 1
	return

// incr(uint64)void
incr:
	proto 1 0

	// examples/simple/simple.algo.ts:11
	// this.incrementCounter(i)
	frame_dig -1 // i: uint64
	callsub incrementCounter
	retsub

abi_route_decr:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute decr(uint64)void
	callsub decr
	int 1
	return

// decr(uint64)void
decr:
	proto 1 0

	// examples/simple/simple.algo.ts:15
	// this.counter.value = this.counter.value - i
	byte 0x636f756e746572 // "counter"
	dup
	app_global_get
	frame_dig -1 // i: uint64
	-
	app_global_put
	retsub

abi_route_add:
	// The ABI return prefix
	byte 0x151f7c75

	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute add(uint256,uint256)uint256
	callsub add
	concat
	log
	int 1
	return

// add(uint256,uint256)uint256
add:
	proto 2 1

	// examples/simple/simple.algo.ts:19
	// return a + b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b+
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	retsub

abi_route_sub:
	// The ABI return prefix
	byte 0x151f7c75

	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	int 32
	==
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	int 32
	==
	assert

	// execute sub(uint256,uint256)uint256
	callsub sub
	concat
	log
	int 1
	return

// sub(uint256,uint256)uint256
sub:
	proto 2 1

	// examples/simple/simple.algo.ts:23
	// return a - b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b-
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "incr(uint64)void"
	method "decr(uint64)void"
	method "add(uint256,uint256)uint256"
	method "sub(uint256,uint256)uint256"
	txna ApplicationArgs 0
	match abi_route_incr abi_route_decr abi_route_add abi_route_sub
	err
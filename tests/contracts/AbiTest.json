{"hints":{},"schema":{"local":{"declared":{"lRef":{"type":"bytes","key":"lRef"},"lMap":{"type":"bytes","key":"lMap"}},"reserved":{}},"global":{"declared":{"gRef":{"type":"bytes","key":"gRef"},"gMap":{"type":"bytes","key":"gMap"}},"reserved":{}}},"state":{"global":{"num_byte_slices":2,"num_uints":0},"local":{"num_byte_slices":2,"num_uints":0}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDgKCWIgbWFpbgoKYmFyZV9yb3V0ZV9jcmVhdGU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJPT0KCSYmCglhc3NlcnQKCWNhbGxzdWIgY3JlYXRlCglpbnQgMQoJcmV0dXJuCgpjcmVhdGU6Cglwcm90byAwIDAKCXJldHN1YgoKYmFyZV9yb3V0ZV9PcHRJbjoKCXR4biBPbkNvbXBsZXRpb24KCWludCBPcHRJbgoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWNhbGxzdWIgb3B0SW4KCWludCAxCglyZXR1cm4KCm9wdEluOgoJcHJvdG8gMCAwCglyZXRzdWIKCmFiaV9yb3V0ZV9zdGF0aWNBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzdGF0aWNBcnJheQoJaW50IDEKCXJldHVybgoKc3RhdGljQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzUKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCgljb25jYXQKCWludCAzMwoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNwoJLy8gcmV0dXJuIGFbMV07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfcmV0dXJuU3RhdGljQXJyYXk6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgcmV0dXJuU3RhdGljQXJyYXkKCWludCAxCglyZXR1cm4KCnJldHVyblN0YXRpY0FycmF5OgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjQxCgkvLyBhOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWludCAyMgoJaXRvYgoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NDMKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3RhdGljQXJyYXlBcmc6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWNhbGxzdWIgc3RhdGljQXJyYXlBcmcKCWludCAxCglyZXR1cm4KCnN0YXRpY0FycmF5QXJnOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjQ3CgkvLyByZXR1cm4gYVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9ub25MaXRlcmFsU3RhdGljQXJyYXlFbGVtZW50czoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwbiAzCgljYWxsc3ViIG5vbkxpdGVyYWxTdGF0aWNBcnJheUVsZW1lbnRzCglpbnQgMQoJcmV0dXJuCgpub25MaXRlcmFsU3RhdGljQXJyYXlFbGVtZW50czoKCXByb3RvIDQgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo1MQoJLy8gbjEgPSAxMQoJaW50IDExCglmcmFtZV9idXJ5IC0xIC8vIG4xOiB1aW50NjQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NTIKCS8vIG4yID0gMjIKCWludCAyMgoJZnJhbWVfYnVyeSAtMiAvLyBuMjogdWludDY0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjUzCgkvLyBuMyA9IDMzCglpbnQgMzMKCWZyYW1lX2J1cnkgLTMgLy8gbjM6IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo1NAoJLy8gYTogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFtuMSwgbjIsIG4zXQoJZnJhbWVfZGlnIC0xIC8vIG4xOiB1aW50NjQKCWl0b2IKCWZyYW1lX2RpZyAtMiAvLyBuMjogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBuMzogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gYTogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjU2CgkvLyByZXR1cm4gYVsxXTsKCWZyYW1lX2RpZyAtNCAvLyBhOiB1aW50NjRbM10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9taXhlZFN0YXRpY0FycmF5RWxlbWVudHM6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cG4gMwoJY2FsbHN1YiBtaXhlZFN0YXRpY0FycmF5RWxlbWVudHMKCWludCAxCglyZXR1cm4KCm1peGVkU3RhdGljQXJyYXlFbGVtZW50czoKCXByb3RvIDQgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo2MAoJLy8gbjEgPSAzCglpbnQgMwoJZnJhbWVfYnVyeSAtMSAvLyBuMTogdWludDY0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjYxCgkvLyBuMiA9IDQKCWludCA0CglmcmFtZV9idXJ5IC0yIC8vIG4yOiB1aW50NjQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NjIKCS8vIG4zID0gNQoJaW50IDUKCWZyYW1lX2J1cnkgLTMgLy8gbjM6IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo2MwoJLy8gYTogU3RhdGljQXJyYXk8dWludDY0LCA5PiA9IFswLCAxLCAyLCBuMSwgbjIsIG4zLCA2LCA3LCA4XQoJaW50IDAKCWl0b2IKCWludCAxCglpdG9iCgljb25jYXQKCWludCAyCglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBuMTogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMiAvLyBuMjogdWludDY0CglpdG9iCgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBuMzogdWludDY0CglpdG9iCgljb25jYXQKCWludCA2CglpdG9iCgljb25jYXQKCWludCA3CglpdG9iCgljb25jYXQKCWludCA4CglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gYTogdWludDY0WzldCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjY1CgkvLyByZXR1cm4gYVsxXSArIGFbNF0gKyBhWzddOwoJZnJhbWVfZGlnIC00IC8vIGE6IHVpbnQ2NFs5XQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2RpZyAtNCAvLyBhOiB1aW50NjRbOV0KCWludCA0CglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCgkrCglmcmFtZV9kaWcgLTQgLy8gYTogdWludDY0WzldCglpbnQgNwoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJKwoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfbm9uTGl0ZXJhbFN0YXRpY0FycmF5QWNjZXNzOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgbm9uTGl0ZXJhbFN0YXRpY0FycmF5QWNjZXNzCglpbnQgMQoJcmV0dXJuCgpub25MaXRlcmFsU3RhdGljQXJyYXlBY2Nlc3M6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NjkKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCgljb25jYXQKCWludCAzMwoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo3MAoJLy8gbiA9IDIKCWludCAyCglmcmFtZV9idXJ5IC0yIC8vIG46IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo3MgoJLy8gcmV0dXJuIGFbbl07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglmcmFtZV9kaWcgLTIgLy8gbjogdWludDY0CglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zZXRTdGF0aWNBcnJheUVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgc2V0U3RhdGljQXJyYXlFbGVtZW50CglpbnQgMQoJcmV0dXJuCgpzZXRTdGF0aWNBcnJheUVsZW1lbnQ6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NzYKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCgljb25jYXQKCWludCAzMwoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo3OAoJLy8gYVsxXSA9IDIyMgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMjIyCglpdG9iCglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6ODAKCS8vIHJldHVybiBhWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3N0YXRpY0FycmF5SW5TdG9yYWdlUmVmOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgc3RhdGljQXJyYXlJblN0b3JhZ2VSZWYKCWludCAxCglyZXR1cm4KCnN0YXRpY0FycmF5SW5TdG9yYWdlUmVmOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjg0CgkvLyBhOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWludCAyMgoJaXRvYgoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6ODYKCS8vIHRoaXMuZ1JlZi5wdXQoYSkKCWJ5dGUgImdSZWYiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo4NwoJLy8gdGhpcy5sUmVmLnB1dCh0aGlzLnR4bi5zZW5kZXIsIGEpCgl0eG4gU2VuZGVyCglieXRlICJsUmVmIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYXBwX2xvY2FsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo4OAoJLy8gdGhpcy5iUmVmLnB1dChhKQoJYnl0ZSAiYlJlZiIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6OTAKCS8vIHJldDogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFsKCWJ5dGUgImdSZWYiCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCXR4biBTZW5kZXIKCWJ5dGUgImxSZWYiCglhcHBfbG9jYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJY29uY2F0CglieXRlICJiUmVmIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0yIC8vIHJldDogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjk2CgkvLyByZXR1cm4gcmV0OwoJZnJhbWVfZGlnIC0yIC8vIHJldDogdWludDY0WzNdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZVJlZjoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwCgljYWxsc3ViIHVwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlUmVmCglpbnQgMQoJcmV0dXJuCgp1cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZVJlZjoKCXByb3RvIDIgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDAKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCgljb25jYXQKCWludCAzMwoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDIKCS8vIHRoaXMuZ1JlZi5wdXQoYSkKCWJ5dGUgImdSZWYiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDMKCS8vIHRoaXMubFJlZi5wdXQodGhpcy50eG4uc2VuZGVyLCBhKQoJdHhuIFNlbmRlcgoJYnl0ZSAibFJlZiIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTA0CgkvLyB0aGlzLmJSZWYucHV0KGEpCglieXRlICJiUmVmIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYm94X3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDYKCS8vIHRoaXMuZ1JlZi5nZXQoKVsxXSA9IDExMQoJYnl0ZSAiZ1JlZiIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxMTEKCWl0b2IKCXJlcGxhY2UzCglieXRlICJnUmVmIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTA3CgkvLyB0aGlzLmxSZWYuZ2V0KHRoaXMudHhuLnNlbmRlcilbMV0gPSAyMjIKCXR4biBTZW5kZXIKCWJ5dGUgImxSZWYiCglhcHBfbG9jYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyMjIKCWl0b2IKCXJlcGxhY2UzCgl0eG4gU2VuZGVyCglieXRlICJsUmVmIgoJdW5jb3ZlciAyCglhcHBfbG9jYWxfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjEwOAoJLy8gdGhpcy5iUmVmLmdldCgpWzFdID0gMzMzCglieXRlICJiUmVmIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAzMzMKCWl0b2IKCXJlcGxhY2UzCglieXRlICJiUmVmIgoJc3dhcAoJYm94X3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMTAKCS8vIHJldDogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFsKCWJ5dGUgImdSZWYiCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCXR4biBTZW5kZXIKCWJ5dGUgImxSZWYiCglhcHBfbG9jYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJY29uY2F0CglieXRlICJiUmVmIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0yIC8vIHJldDogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjExNgoJLy8gcmV0dXJuIHJldDsKCWZyYW1lX2RpZyAtMiAvLyByZXQ6IHVpbnQ2NFszXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3RhdGljQXJyYXlJblN0b3JhZ2VNYXA6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cAoJY2FsbHN1YiBzdGF0aWNBcnJheUluU3RvcmFnZU1hcAoJaW50IDEKCXJldHVybgoKc3RhdGljQXJyYXlJblN0b3JhZ2VNYXA6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTIwCgkvLyBhOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWludCAyMgoJaXRvYgoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTIyCgkvLyB0aGlzLmdNYXAucHV0KCdnTWFwJywgYSkKCWJ5dGUgImdNYXAiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMjMKCS8vIHRoaXMubE1hcC5wdXQodGhpcy50eG4uc2VuZGVyLCAnbE1hcCcsIGEpCgl0eG4gU2VuZGVyCglieXRlICJsTWFwIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYXBwX2xvY2FsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMjQKCS8vIHRoaXMuYk1hcC5wdXQoJ2JNYXAnLCBhKQoJYnl0ZSAiYk1hcCIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTI2CgkvLyByZXQ6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbCglieXRlICJnTWFwIgoJYXBwX2dsb2JhbF9nZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCgl0eG4gU2VuZGVyCglieXRlICJsTWFwIgoJYXBwX2xvY2FsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJYnl0ZSAiYk1hcCIKCWJveF9nZXQKCWFzc2VydAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyByZXQ6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMzIKCS8vIHJldHVybiByZXQ7CglmcmFtZV9kaWcgLTIgLy8gcmV0OiB1aW50NjRbM10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlTWFwOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgdXBkYXRlU3RhdGljQXJyYXlJblN0b3JhZ2VNYXAKCWludCAxCglyZXR1cm4KCnVwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlTWFwOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjEzNgoJLy8gYTogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFsxMSwgMjIsIDMzXQoJaW50IDExCglpdG9iCglpbnQgMjIKCWl0b2IKCWNvbmNhdAoJaW50IDMzCglpdG9iCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjEzOAoJLy8gdGhpcy5nTWFwLnB1dCgnZ01hcCcsIGEpCglieXRlICJnTWFwIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYXBwX2dsb2JhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTM5CgkvLyB0aGlzLmxNYXAucHV0KHRoaXMudHhuLnNlbmRlciwgJ2xNYXAnLCBhKQoJdHhuIFNlbmRlcgoJYnl0ZSAibE1hcCIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTQwCgkvLyB0aGlzLmJNYXAucHV0KCdiTWFwJywgYSkKCWJ5dGUgImJNYXAiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglib3hfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE0MgoJLy8gdGhpcy5nTWFwLmdldCgnZ01hcCcpWzFdID0gMTExMQoJYnl0ZSAiZ01hcCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxMTExCglpdG9iCglyZXBsYWNlMwoJYnl0ZSAiZ01hcCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE0MwoJLy8gdGhpcy5sTWFwLmdldCh0aGlzLnR4bi5zZW5kZXIsICdsTWFwJylbMV0gPSAyMjIyCgl0eG4gU2VuZGVyCglieXRlICJsTWFwIgoJYXBwX2xvY2FsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMjIyMgoJaXRvYgoJcmVwbGFjZTMKCXR4biBTZW5kZXIKCWJ5dGUgImxNYXAiCgl1bmNvdmVyIDIKCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTQ0CgkvLyB0aGlzLmJNYXAuZ2V0KCdiTWFwJylbMV0gPSAzMzMzCglieXRlICJiTWFwIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAzMzMzCglpdG9iCglyZXBsYWNlMwoJYnl0ZSAiYk1hcCIKCXN3YXAKCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTQ2CgkvLyByZXQ6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbCglieXRlICJnTWFwIgoJYXBwX2dsb2JhbF9nZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCgl0eG4gU2VuZGVyCglieXRlICJsTWFwIgoJYXBwX2xvY2FsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJYnl0ZSAiYk1hcCIKCWJveF9nZXQKCWFzc2VydAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyByZXQ6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNTIKCS8vIHJldHVybiByZXQ7CglmcmFtZV9kaWcgLTIgLy8gcmV0OiB1aW50NjRbM10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX25lc3RlZFN0YXRpY0FycmF5OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIG5lc3RlZFN0YXRpY0FycmF5CglpbnQgMQoJcmV0dXJuCgpuZXN0ZWRTdGF0aWNBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNTYKCS8vIGE6IFN0YXRpY0FycmF5PFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4sIDM+ID0gW1sxMSwgMjIsIDMzXSwgWzQ0LCA1NSwgNjZdLCBbNzcsIDg4LCA5OV1dCglpbnQgMTEKCWl0b2IKCWludCAyMgoJaXRvYgoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJaW50IDQ0CglpdG9iCglpbnQgNTUKCWl0b2IKCWNvbmNhdAoJaW50IDY2CglpdG9iCgljb25jYXQKCWNvbmNhdAoJaW50IDc3CglpdG9iCglpbnQgODgKCWl0b2IKCWNvbmNhdAoJaW50IDk5CglpdG9iCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM11bM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTU4CgkvLyByZXR1cm4gYVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM11bM10KCWludCAxCglpbnQgMjQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVOZXN0ZWRTdGF0aWNBcnJheUVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdXBkYXRlTmVzdGVkU3RhdGljQXJyYXlFbGVtZW50CglpbnQgMQoJcmV0dXJuCgp1cGRhdGVOZXN0ZWRTdGF0aWNBcnJheUVsZW1lbnQ6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTYyCgkvLyBhOiBTdGF0aWNBcnJheTxTdGF0aWNBcnJheTx1aW50NjQsIDM+LCAzPiA9IFtbMTEsIDIyLCAzM10sIFs0NCwgNTUsIDY2XSwgWzc3LCA4OCwgOTldXQoJaW50IDExCglpdG9iCglpbnQgMjIKCWl0b2IKCWNvbmNhdAoJaW50IDMzCglpdG9iCgljb25jYXQKCWludCA0NAoJaXRvYgoJaW50IDU1CglpdG9iCgljb25jYXQKCWludCA2NgoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWludCA3NwoJaXRvYgoJaW50IDg4CglpdG9iCgljb25jYXQKCWludCA5OQoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0WzNdWzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE2NAoJLy8gYVsxXVsxXSA9IDU1NQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXVszXQoJaW50IDEKCWludCAyNCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgNTU1CglpdG9iCglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM11bM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTY2CgkvLyByZXR1cm4gYVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM11bM10KCWludCAxCglpbnQgMjQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVOZXN0ZWRTdGF0aWNBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiB1cGRhdGVOZXN0ZWRTdGF0aWNBcnJheQoJaW50IDEKCXJldHVybgoKdXBkYXRlTmVzdGVkU3RhdGljQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTcwCgkvLyBhOiBTdGF0aWNBcnJheTxTdGF0aWNBcnJheTx1aW50NjQsIDM+LCAzPiA9IFtbMTEsIDIyLCAzM10sIFs0NCwgNTUsIDY2XSwgWzc3LCA4OCwgOTldXQoJaW50IDExCglpdG9iCglpbnQgMjIKCWl0b2IKCWNvbmNhdAoJaW50IDMzCglpdG9iCgljb25jYXQKCWludCA0NAoJaXRvYgoJaW50IDU1CglpdG9iCgljb25jYXQKCWludCA2NgoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWludCA3NwoJaXRvYgoJaW50IDg4CglpdG9iCgljb25jYXQKCWludCA5OQoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0WzNdWzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE3MgoJLy8gYVsxXSA9IFs0NDQsIDU1NSwgNjY2XQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXVszXQoJaW50IDEKCWludCAyNCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDQ0NAoJaXRvYgoJaW50IDU1NQoJaXRvYgoJY29uY2F0CglpbnQgNjY2CglpdG9iCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXVszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNzQKCS8vIHJldHVybiBhWzFdWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXVszXQoJaW50IDEKCWludCAyNCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3RocmVlRGltZW5zaW9uYWxVaW50MTZBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiB0aHJlZURpbWVuc2lvbmFsVWludDE2QXJyYXkKCWludCAxCglyZXR1cm4KCnRocmVlRGltZW5zaW9uYWxVaW50MTZBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNzgKCS8vIGE6IFN0YXRpY0FycmF5PFN0YXRpY0FycmF5PFN0YXRpY0FycmF5PHVpbnQxNiwgMj4sIDI+LCAyPiA9IFsKCWludCAxMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0Cgljb25jYXQKCWludCA1NQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2NgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDc3CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDg4CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0Cgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbMl1bMl1bMl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTgyCgkvLyBhWzFdWzFdID0gWzc3NywgODg4XQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNlsyXVsyXVsyXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMQoJaW50IDQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCSsKCWludCA3NzcKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgODg4CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbMl1bMl1bMl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTg0CgkvLyByZXR1cm4gYVsxXVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbMl1bMl1bMl0KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDEKCWludCA0IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgMQoJaW50IDIgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCSsKCWludCAyCglleHRyYWN0MwoJYnl0ZSAweEZGRkYKCWImCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zaW1wbGVUdXBsZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzaW1wbGVUdXBsZQoJaW50IDEKCXJldHVybgoKc2ltcGxlVHVwbGU6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTg4CgkvLyBhOiBbdWludDY0LCB1aW50MTYsIHVpbnQ2NCwgdWludDE2XSA9IFsxMSwgMjIsIDMzLCA0NF0KCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NCx1aW50MTZdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE5MAoJLy8gcmV0dXJuIGFbM107CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ2NCx1aW50MTYsdWludDY0LHVpbnQxNl0KCWludCAxOAoJaW50IDIKCWV4dHJhY3QzCglieXRlIDB4RkZGRgoJYiYKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FycmF5SW5UdXBsZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBhcnJheUluVHVwbGUKCWludCAxCglyZXR1cm4KCmFycmF5SW5UdXBsZToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxOTQKCS8vIGE6IFt1aW50NjQsIHVpbnQxNiwgU3RhdGljQXJyYXk8dWludDY0LCAyPiwgdWludDE2XSA9IFsKCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWludCA0NAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWludCA1NQoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDY0LHVpbnQxNix1aW50NjRbMl0sdWludDE2XQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxOTgKCS8vIHJldHVybiBhWzJdWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NFsyXSx1aW50MTZdCglpbnQgMTAKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV90dXBsZUluQXJyYXk6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdHVwbGVJbkFycmF5CglpbnQgMQoJcmV0dXJuCgp0dXBsZUluQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjAyCgkvLyBhOiBTdGF0aWNBcnJheTxbdWludDY0LCB1aW50MTZdLCAyPiA9IFsKCWludCAxMQoJaXRvYgoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWludCA0NAoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50NjQsdWludDE2XVsyXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMDYKCS8vIHJldHVybiBhWzFdWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50NjQsdWludDE2XVsyXQoJaW50IDEKCWludCAxMCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCSsKCWludCAyCglleHRyYWN0MwoJYnl0ZSAweEZGRkYKCWImCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV90dXBsZUluVHVwbGU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdHVwbGVJblR1cGxlCglpbnQgMQoJcmV0dXJuCgp0dXBsZUluVHVwbGU6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjEwCgkvLyBhOiBbdWludDE2LCB1aW50MTYsIFt1aW50NjQsIHVpbnQxNl0sIFt1aW50MTYsIHVpbnQ2NF1dID0gWwoJaW50IDExCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWludCA0NAoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJY29uY2F0CglpbnQgNTUKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgNjYKCWl0b2IKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50MTYsdWludDE2LFt1aW50NjQsdWludDE2XSxbdWludDE2LHVpbnQ2NF1dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIxNAoJLy8gcmV0dXJuIGFbM11bMV07CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQxNix1aW50MTYsW3VpbnQ2NCx1aW50MTZdLFt1aW50MTYsdWludDY0XV0KCWludCAxNAoJaW50IDIKCSsKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc2hvcnRUeXBlTm90YXRpb246Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgc2hvcnRUeXBlTm90YXRpb24KCWludCAxCglyZXR1cm4KCnNob3J0VHlwZU5vdGF0aW9uOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIxOAoJLy8gYTogW3VpbnQxNjwyPiwgdWludDY0PDI+LCB1aW50MTY8Mj5dID0gWwoJaW50IDExCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWludCA0NAoJaXRvYgoJY29uY2F0Cgljb25jYXQKCWludCA1NQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2NgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50MTZbMl0sdWludDY0WzJdLHVpbnQxNlsyXV0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjIyCgkvLyByZXR1cm4gYVsyXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDE2WzJdLHVpbnQ2NFsyXSx1aW50MTZbMl1dCglpbnQgMjAKCWludCAxCglpbnQgMiAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDIKCWV4dHJhY3QzCglieXRlIDB4RkZGRgoJYiYKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2Rpc2d1c3Rpbmc6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgZGlzZ3VzdGluZwoJaW50IDEKCXJldHVybgoKZGlzZ3VzdGluZzoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMjYKCS8vIGE6IFN0YXRpY0FycmF5PFt1aW50MTY8Mj4sIHVpbnQ2NCwgW3VpbnQxNiwgdWludDY0XSwgU3RhdGljQXJyYXk8dWludDY0PDI+LCAyPl0sIDI+ID0gWwoJaW50IDExCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDU1CglpdG9iCgljb25jYXQKCWNvbmNhdAoJaW50IDY2CglpdG9iCglpbnQgNzcKCWl0b2IKCWNvbmNhdAoJaW50IDg4CglpdG9iCglpbnQgOTkKCWl0b2IKCWNvbmNhdAoJY29uY2F0Cgljb25jYXQKCWludCAxMTEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMjIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMzCglpdG9iCgljb25jYXQKCWludCA0NDQKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgNTU1CglpdG9iCgljb25jYXQKCWNvbmNhdAoJaW50IDY2NgoJaXRvYgoJaW50IDc3NwoJaXRvYgoJY29uY2F0CglpbnQgODg4CglpdG9iCglpbnQgOTk5CglpdG9iCgljb25jYXQKCWNvbmNhdAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogW3VpbnQxNlsyXSx1aW50NjQsW3VpbnQxNix1aW50NjRdLHVpbnQ2NFsyXVsyXV1bMl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjMxCgkvLyBhWzFdWzNdWzFdID0gWzg4ODgsIDk5OTldCglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQxNlsyXSx1aW50NjQsW3VpbnQxNix1aW50NjRdLHVpbnQ2NFsyXVsyXV1bMl0KCWludCAxCglpbnQgNTQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyMgoJKwoJaW50IDEKCWludCAxNiAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDg4ODgKCWl0b2IKCWludCA5OTk5CglpdG9iCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50MTZbMl0sdWludDY0LFt1aW50MTYsdWludDY0XSx1aW50NjRbMl1bMl1dWzJdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIzMgoJLy8gcmV0dXJuIGFbMV1bM11bMV1bMF07CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQxNlsyXSx1aW50NjQsW3VpbnQxNix1aW50NjRdLHVpbnQ2NFsyXVsyXV1bMl0KCWludCAxCglpbnQgNTQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyMgoJKwoJaW50IDEKCWludCAxNiAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDAKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3JldHVyblR1cGxlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIHJldHVyblR1cGxlCglpbnQgMQoJcmV0dXJuCgpyZXR1cm5UdXBsZToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMzYKCS8vIGE6IFt1aW50NjQsIHVpbnQxNiwgdWludDY0XSA9IFsxMSwgMjIsIDMzXQoJaW50IDExCglpdG9iCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NF0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjM3CgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDY0LHVpbnQxNix1aW50NjRdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV90dXBsZUFyZzoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJY2FsbHN1YiB0dXBsZUFyZwoJaW50IDEKCXJldHVybgoKdHVwbGVBcmc6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjQxCgkvLyByZXR1cm4gYVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDY0LHVpbnQxNix1aW50NjRdCglpbnQgOAoJaW50IDIKCWV4dHJhY3QzCglieXRlIDB4RkZGRgoJYiYKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2R5bmFtaWNBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBkeW5hbWljQXJyYXkKCWludCAxCglyZXR1cm4KCmR5bmFtaWNBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNDUKCS8vIGE6IHVpbnQ2NFtdID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWludCAyMgoJaXRvYgoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNDcKCS8vIHJldHVybiBhWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFtdCglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9yZXR1cm5EeW5hbWljQXJyYXk6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgcmV0dXJuRHluYW1pY0FycmF5CglpbnQgMQoJcmV0dXJuCgpyZXR1cm5EeW5hbWljQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjUxCgkvLyBhOiB1aW50NjRbXSA9IFsxMSwgMjIsIDMzXQoJaW50IDExCglpdG9iCglpbnQgMjIKCWl0b2IKCWNvbmNhdAoJaW50IDMzCglpdG9iCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjUyCgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfZHluYW1pY0FycmF5QXJnOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCgljYWxsc3ViIGR5bmFtaWNBcnJheUFyZwoJaW50IDEKCXJldHVybgoKZHluYW1pY0FycmF5QXJnOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI1NgoJLy8gcmV0dXJuIGFbMV07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZUR5bmFtaWNBcnJheUVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdXBkYXRlRHluYW1pY0FycmF5RWxlbWVudAoJaW50IDEKCXJldHVybgoKdXBkYXRlRHluYW1pY0FycmF5RWxlbWVudDoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNjAKCS8vIGE6IHVpbnQ2NFtdID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWludCAyMgoJaXRvYgoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNjIKCS8vIGFbMV0gPSAyMjIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWludCAyMjIKCWl0b2IKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFtdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI2NAoJLy8gcmV0dXJuIGFbMV07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2R5bmFtaWNUdXBsZUFycmF5OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIGR5bmFtaWNUdXBsZUFycmF5CglpbnQgMQoJcmV0dXJuCgpkeW5hbWljVHVwbGVBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNjgKCS8vIGE6IFt1aW50MTYsIHVpbnQ2NF1bXSA9IFtbMTEsIDIyXSwgWzMzLCA0NF1dCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMjIKCWl0b2IKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDQ0CglpdG9iCgljb25jYXQKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDE2LHVpbnQ2NF1bXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNzAKCS8vIHJldHVybiBhWzFdWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50MTYsdWludDY0XVtdCglpbnQgMQoJaW50IDEwIC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCWludCAyCgkrCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3JldHVyblR1cGxlV2l0aER5YW1pY0FycmF5OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIHJldHVyblR1cGxlV2l0aER5YW1pY0FycmF5CglpbnQgMQoJcmV0dXJuCgpyZXR1cm5UdXBsZVdpdGhEeWFtaWNBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNzQKCS8vIGE6IFt1aW50NjQsIHVpbnQxNiwgdWludDY0W10sIHVpbnQxNltdXSA9IFsxLCAyLCBbMywgNF0sIFs1LCA2XV0KCWludCAxCglpdG9iCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWludCA0CglpdG9iCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJaW50IDUKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgNgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NFtdLHVpbnQxNltdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNzYKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NFtdLHVpbnQxNltdXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfcmV0dXJuRHluYW1pY0FycmF5RnJvbVR1cGxlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIHJldHVybkR5bmFtaWNBcnJheUZyb21UdXBsZQoJaW50IDEKCXJldHVybgoKcmV0dXJuRHluYW1pY0FycmF5RnJvbVR1cGxlOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI4MAoJLy8gYTogW3VpbnQ4LCB1aW50MTYsIHVpbnQ4W10sIHVpbnQxNltdLCB1aW50OFtdXSA9IFsxLCAyLCBbMywgNF0sIFs1LCA2XSwgWzcsIDhdXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgNAoJaXRvYgoJZXh0cmFjdCA3IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglpbnQgNQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWludCA3CglpdG9iCglleHRyYWN0IDcgMAoJaW50IDgKCWl0b2IKCWV4dHJhY3QgNyAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDgsdWludDE2LHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjgyCgkvLyByZXR1cm4gYVs0XTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDgsdWludDE2LHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWludCA3CglpbnQgMgoJZXh0cmFjdDMKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZUR5bmFtaWNBcnJheUluVHVwbGU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdXBkYXRlRHluYW1pY0FycmF5SW5UdXBsZQoJaW50IDEKCXJldHVybgoKdXBkYXRlRHluYW1pY0FycmF5SW5UdXBsZToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyODYKCS8vIGE6IFt1aW50OCwgdWludDE2W10sIHVpbnQ4W10sIHVpbnQxNltdLCB1aW50OFtdXSA9IFs5LCBbOF0sIFs3XSwgWzZdLCBbNV1dCglpbnQgOQoJaXRvYgoJZXh0cmFjdCA3IDAKCWludCA4CglpdG9iCglleHRyYWN0IDYgMAoJYnl0ZSAweDAwMDEKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglpbnQgNwoJaXRvYgoJZXh0cmFjdCA3IDAKCWJ5dGUgMHgwMDAxCglzd2FwCgljb25jYXQKCWNvbmNhdAoJaW50IDYKCWl0b2IKCWV4dHJhY3QgNiAwCglieXRlIDB4MDAwMQoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWludCA1CglpdG9iCglleHRyYWN0IDcgMAoJYnl0ZSAweDAwMDEKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI4OAoJLy8gYVswXSA9IDk5IGFzIHVpbnQ4CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWludCAwCglpbnQgOTkKCWl0b2IKCWV4dHJhY3QgNyAwCglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDgsdWludDE2W10sdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyODkKCS8vIGFbMV0gPSBbMTAsIDExXQoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCglpbnQgMQoJaW50IDEwCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDExCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDgsdWludDE2W10sdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyOTAKCS8vIGFbMl0gPSBbMTIsIDEzXQoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCglpbnQgMwoJaW50IDEyCglpdG9iCglleHRyYWN0IDcgMAoJaW50IDEzCglpdG9iCglleHRyYWN0IDcgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDgsdWludDE2W10sdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyOTEKCS8vIGFbM10gPSBbMTQsIDE1XQoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCglpbnQgNQoJaW50IDE0CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDE1CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDgsdWludDE2W10sdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyOTIKCS8vIGFbNF0gPSBbMTYsIDE3XQoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCglpbnQgNwoJaW50IDE2CglpdG9iCglleHRyYWN0IDcgMAoJaW50IDE3CglpdG9iCglleHRyYWN0IDcgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDgsdWludDE2W10sdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyOTQKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9ub25MaXRlcmFsRHluYW1pY0VsZW1lbnRJblR1cGxlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgbm9uTGl0ZXJhbER5bmFtaWNFbGVtZW50SW5UdXBsZQoJaW50IDEKCXJldHVybgoKbm9uTGl0ZXJhbER5bmFtaWNFbGVtZW50SW5UdXBsZToKCXByb3RvIDIgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyOTgKCS8vIGU6IHVpbnQxNltdID0gWzUsIDZdCglpbnQgNQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGU6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI5OQoJLy8gYTogW3VpbnQ4LCB1aW50MTYsIHVpbnQ4W10sIHVpbnQxNltdLCB1aW50OFtdXSA9IFsxLCAyLCBbMywgNF0sIGUsIFs3LCA4XV0KCWludCAxCglpdG9iCglleHRyYWN0IDcgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDcgMAoJaW50IDQKCWl0b2IKCWV4dHJhY3QgNyAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIGU6IHVpbnQxNltdCgljb25jYXQKCWludCA3CglpdG9iCglleHRyYWN0IDcgMAoJaW50IDgKCWl0b2IKCWV4dHJhY3QgNyAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyBhOiBbdWludDgsdWludDE2LHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzAxCgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMiAvLyBhOiBbdWludDgsdWludDE2LHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FycmF5UHVzaDoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBhcnJheVB1c2gKCWludCAxCglyZXR1cm4KCmFycmF5UHVzaDoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMDUKCS8vIGE6IHVpbnQxNltdID0gWzEsIDJdCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMwNwoJLy8gYS5wdXNoKDMgYXMgdWludDE2KQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglkdXAKCWludCAwCglleHRyYWN0X3VpbnQxNgoJaW50IDEKCSsKCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCglleHRyYWN0IDIgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMDkKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9hcnJheVBvcDoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBhcnJheVBvcAoJaW50IDEKCXJldHVybgoKYXJyYXlQb3A6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzEzCgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzE1CgkvLyBhLnBvcCgpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWR1cAoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWV4dHJhY3QgMiAwCgljb25jYXQKCWR1cAoJbGVuCglpbnQgMgoJLQoJaW50IDAKCXN3YXAKCWV4dHJhY3QzCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMxNwoJLy8gcmV0dXJuIGE7CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FycmF5UG9wVmFsdWU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cAoJY2FsbHN1YiBhcnJheVBvcFZhbHVlCglpbnQgMQoJcmV0dXJuCgphcnJheVBvcFZhbHVlOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMyMQoJLy8gYTogdWludDE2W10gPSBbMSwgMiwgM10KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMwoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMyMwoJLy8gdiA9IGEucG9wKCkhCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWR1cAoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWV4dHJhY3QgMiAwCgljb25jYXQKCWR1cAoJbGVuCglpbnQgMgoJLQoJaW50IDAKCXN3YXAKCWV4dHJhY3QzCglkdXAKCWxlbgoJaW50IDIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJY292ZXIgMgoJZXh0cmFjdDMKCXN3YXAKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCWZyYW1lX2J1cnkgLTIgLy8gdjogdWludDE2CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMyNQoJLy8gcmV0dXJuIHY7CglmcmFtZV9kaWcgLTIgLy8gdjogdWludDE2CglieXRlIDB4RkZGRgoJYiYKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FycmF5U3BsaWNlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIGFycmF5U3BsaWNlCglpbnQgMQoJcmV0dXJuCgphcnJheVNwbGljZToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMjkKCS8vIGE6IHVpbnQ2NFtdID0gWzEsIDIsIDNdCglpbnQgMQoJaXRvYgoJaW50IDIKCWl0b2IKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMzEKCS8vIGEuc3BsaWNlKDEsIDEpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWludCAwCglleHRyYWN0X3VpbnQxNgoJaW50IDEKCS0KCWl0b2IKCWV4dHJhY3QgNiAyCglpbnQgMQoJaW50IDgKCSoKCWludCAyCgkrCglzdG9yZSAxMiAvLyBzcGxpY2Ugc3RhcnQKCWludCAxCglpbnQgOAoJKgoJaW50IDgKCSsKCXN0b3JlIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFtdCglpbnQgMgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJZHVwCglsZW4KCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0Cglsb2FkIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJKwoJaW50IDgKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFtdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMzMwoJLy8gcmV0dXJuIGE7CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FycmF5U3BsaWNlVmFsdWU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cG4gMwoJY2FsbHN1YiBhcnJheVNwbGljZVZhbHVlCglpbnQgMQoJcmV0dXJuCgphcnJheVNwbGljZVZhbHVlOgoJcHJvdG8gNCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMzNwoJLy8gYTogdWludDE2W10gPSBbMSwgMiwgMywgNCwgNSwgNiwgNywgOCwgOSwgMTBdCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDQKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCA1CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgNgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDcKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCA4CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgOQoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDEwCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwYQoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMzOQoJLy8gaSA9IDEKCWludCAxCglmcmFtZV9idXJ5IC0yIC8vIGk6IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNDAKCS8vIGwgPSA3CglpbnQgNwoJZnJhbWVfYnVyeSAtMyAvLyBsOiB1aW50NjQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzQxCgkvLyB2ID0gYS5zcGxpY2UoaSwgbCkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDAKCWV4dHJhY3RfdWludDE2CglmcmFtZV9kaWcgLTMgLy8gbDogdWludDY0CgktCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfZGlnIC0yIC8vIGk6IHVpbnQ2NAoJaW50IDIKCSoKCWludCAyCgkrCglzdG9yZSAxMiAvLyBzcGxpY2Ugc3RhcnQKCWZyYW1lX2RpZyAtMyAvLyBsOiB1aW50NjQKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAyCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglkdXAKCWxlbgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCgkrCglpbnQgMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2RpZyAtMyAvLyBsOiB1aW50NjQKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0Cglsb2FkIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJaW50IDIKCS0KCWV4dHJhY3QzCgljb25jYXQKCXN3YXAKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCWZyYW1lX2J1cnkgLTQgLy8gdjogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzQzCgkvLyByZXR1cm4gdjsKCWZyYW1lX2RpZyAtNCAvLyB2OiB1aW50MTZbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfZHluYW1pY0FycmF5RWxlbWVudHM6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cAoJY2FsbHN1YiBkeW5hbWljQXJyYXlFbGVtZW50cwoJaW50IDEKCXJldHVybgoKZHluYW1pY0FycmF5RWxlbWVudHM6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzQ3CgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzQ4CgkvLyBuZXdBOiB1aW50MTZbXSA9IFthWzBdLCBhWzFdLCBhWzJdXQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMAoJaW50IDIgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJaW50IDIKCWV4dHJhY3QzCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAxCglpbnQgMiAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCglpbnQgMgoJZXh0cmFjdDMKCWNvbmNhdAoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMgoJaW50IDIgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJaW50IDIKCWV4dHJhY3QzCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTIgLy8gbmV3QTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzUwCgkvLyByZXR1cm4gbmV3QTsKCWZyYW1lX2RpZyAtMiAvLyBuZXdBOiB1aW50MTZbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3BsaWNlTGFzdEVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgc3BsaWNlTGFzdEVsZW1lbnQKCWludCAxCglyZXR1cm4KCnNwbGljZUxhc3RFbGVtZW50OgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM1NAoJLy8gYTogdWludDE2W10gPSBbMSwgMiwgM10KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMwoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM1NgoJLy8gYS5zcGxpY2UoMiwgMSkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCWludCAyCglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEyIC8vIHNwbGljZSBzdGFydAoJaW50IDEKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAyCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglkdXAKCWxlbgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCgkrCglpbnQgMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzU4CgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3BsaWNlTGFzdEVsZW1lbnRWYWx1ZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwCgljYWxsc3ViIHNwbGljZUxhc3RFbGVtZW50VmFsdWUKCWludCAxCglyZXR1cm4KCnNwbGljZUxhc3RFbGVtZW50VmFsdWU6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzYyCgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzY0CgkvLyB2ID0gYS5zcGxpY2UoMiwgMSkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCWludCAyCglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEyIC8vIHNwbGljZSBzdGFydAoJaW50IDEKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAyCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglkdXAKCWxlbgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCgkrCglpbnQgMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWludCAxCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJbG9hZCAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCWludCAyCgktCglleHRyYWN0MwoJY29uY2F0Cglzd2FwCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCglmcmFtZV9idXJ5IC0yIC8vIHY6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM2NgoJLy8gcmV0dXJuIHY7CglmcmFtZV9kaWcgLTIgLy8gdjogdWludDE2W10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3NwbGljZUZpcnN0RWxlbWVudDoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzcGxpY2VGaXJzdEVsZW1lbnQKCWludCAxCglyZXR1cm4KCnNwbGljZUZpcnN0RWxlbWVudDoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNzAKCS8vIGE6IHVpbnQxNltdID0gWzEsIDIsIDNdCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNzIKCS8vIGEuc3BsaWNlKDAsIDEpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAwCglleHRyYWN0X3VpbnQxNgoJaW50IDEKCS0KCWl0b2IKCWV4dHJhY3QgNiAyCglpbnQgMAoJaW50IDIKCSoKCWludCAyCgkrCglzdG9yZSAxMiAvLyBzcGxpY2Ugc3RhcnQKCWludCAxCglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJZHVwCglsZW4KCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0Cglsb2FkIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJKwoJaW50IDIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM3NAoJLy8gcmV0dXJuIGE7CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3NwbGljZUZpcnN0RWxlbWVudFZhbHVlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgc3BsaWNlRmlyc3RFbGVtZW50VmFsdWUKCWludCAxCglyZXR1cm4KCnNwbGljZUZpcnN0RWxlbWVudFZhbHVlOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM3OAoJLy8gYTogdWludDE2W10gPSBbMSwgMiwgM10KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMwoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM4MAoJLy8gdiA9IGEuc3BsaWNlKDAsIDEpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAwCglleHRyYWN0X3VpbnQxNgoJaW50IDEKCS0KCWl0b2IKCWV4dHJhY3QgNiAyCglpbnQgMAoJaW50IDIKCSoKCWludCAyCgkrCglzdG9yZSAxMiAvLyBzcGxpY2Ugc3RhcnQKCWludCAxCglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCXN1YnN0cmluZzMKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJZHVwCglsZW4KCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0Cglsb2FkIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJKwoJaW50IDIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJY29uY2F0CglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglpbnQgMgoJLQoJZXh0cmFjdDMKCWNvbmNhdAoJc3dhcAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoJZnJhbWVfYnVyeSAtMiAvLyB2OiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozODIKCS8vIHJldHVybiB2OwoJZnJhbWVfZGlnIC0yIC8vIHY6IHVpbnQxNltdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zdHJpbmdSZXR1cm46Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWNhbGxzdWIgc3RyaW5nUmV0dXJuCglpbnQgMQoJcmV0dXJuCgpzdHJpbmdSZXR1cm46Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mzg2CgkvLyByZXR1cm4gJ0hlbGxvIFdvcmxkISc7CglieXRlICJIZWxsbyBXb3JsZCEiCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3RyaW5nQXJnOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoJY2FsbHN1YiBzdHJpbmdBcmcKCWludCAxCglyZXR1cm4KCnN0cmluZ0FyZzoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozOTAKCS8vIGFzc2VydChzID09PSAnSGVsbG8gV29ybGQhJykKCWZyYW1lX2RpZyAtMSAvLyBzOiBieXRlcwoJYnl0ZSAiSGVsbG8gV29ybGQhIgoJPT0KCWFzc2VydAoJcmV0c3ViCgphYmlfcm91dGVfc3RyaW5nSW5UdXBsZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzdHJpbmdJblR1cGxlCglpbnQgMQoJcmV0dXJuCgpzdHJpbmdJblR1cGxlOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM5NAoJLy8gYTogW3VpbnQxNiwgdWludDhbXSwgc3RyaW5nLCB1aW50OFtdXSA9IFsxLCBbMl0sICdIZWxsbyBXb3JsZCEnLCBbM11dCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDcgMAoJYnl0ZSAweDAwMDEKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglieXRlICJIZWxsbyBXb3JsZCEiCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDcgMAoJYnl0ZSAweDAwMDEKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50MTYsdWludDhbXSxzdHJpbmcsdWludDhbXV0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mzk2CgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDE2LHVpbnQ4W10sc3RyaW5nLHVpbnQ4W11dCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCm1haW46Cgl0eG4gTnVtQXBwQXJncwoJYm56IHJvdXRlX2FiaQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgk9PQoJYm56IGJhcmVfcm91dGVfY3JlYXRlCgl0eG4gT25Db21wbGV0aW9uCglpbnQgT3B0SW4KCT09CglpbnQgMQoJbWF0Y2ggYmFyZV9yb3V0ZV9PcHRJbgoKcm91dGVfYWJpOgoJbWV0aG9kICJzdGF0aWNBcnJheSgpdWludDY0IgoJbWV0aG9kICJyZXR1cm5TdGF0aWNBcnJheSgpdWludDY0WzNdIgoJbWV0aG9kICJzdGF0aWNBcnJheUFyZyh1aW50NjRbM10pdWludDY0IgoJbWV0aG9kICJub25MaXRlcmFsU3RhdGljQXJyYXlFbGVtZW50cygpdWludDY0IgoJbWV0aG9kICJtaXhlZFN0YXRpY0FycmF5RWxlbWVudHMoKXVpbnQ2NCIKCW1ldGhvZCAibm9uTGl0ZXJhbFN0YXRpY0FycmF5QWNjZXNzKCl1aW50NjQiCgltZXRob2QgInNldFN0YXRpY0FycmF5RWxlbWVudCgpdWludDY0IgoJbWV0aG9kICJzdGF0aWNBcnJheUluU3RvcmFnZVJlZigpdWludDY0WzNdIgoJbWV0aG9kICJ1cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZVJlZigpdWludDY0WzNdIgoJbWV0aG9kICJzdGF0aWNBcnJheUluU3RvcmFnZU1hcCgpdWludDY0WzNdIgoJbWV0aG9kICJ1cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZU1hcCgpdWludDY0WzNdIgoJbWV0aG9kICJuZXN0ZWRTdGF0aWNBcnJheSgpdWludDY0IgoJbWV0aG9kICJ1cGRhdGVOZXN0ZWRTdGF0aWNBcnJheUVsZW1lbnQoKXVpbnQ2NCIKCW1ldGhvZCAidXBkYXRlTmVzdGVkU3RhdGljQXJyYXkoKXVpbnQ2NCIKCW1ldGhvZCAidGhyZWVEaW1lbnNpb25hbFVpbnQxNkFycmF5KCl1aW50MTYiCgltZXRob2QgInNpbXBsZVR1cGxlKCl1aW50MTYiCgltZXRob2QgImFycmF5SW5UdXBsZSgpdWludDY0IgoJbWV0aG9kICJ0dXBsZUluQXJyYXkoKXVpbnQxNiIKCW1ldGhvZCAidHVwbGVJblR1cGxlKCl1aW50NjQiCgltZXRob2QgInNob3J0VHlwZU5vdGF0aW9uKCl1aW50MTYiCgltZXRob2QgImRpc2d1c3RpbmcoKXVpbnQ2NCIKCW1ldGhvZCAicmV0dXJuVHVwbGUoKSh1aW50NjQsdWludDE2LHVpbnQ2NCkiCgltZXRob2QgInR1cGxlQXJnKCh1aW50NjQsdWludDE2LHVpbnQ2NCkpdWludDE2IgoJbWV0aG9kICJkeW5hbWljQXJyYXkoKXVpbnQ2NCIKCW1ldGhvZCAicmV0dXJuRHluYW1pY0FycmF5KCl1aW50NjRbXSIKCW1ldGhvZCAiZHluYW1pY0FycmF5QXJnKHVpbnQ2NFtdKXVpbnQ2NCIKCW1ldGhvZCAidXBkYXRlRHluYW1pY0FycmF5RWxlbWVudCgpdWludDY0IgoJbWV0aG9kICJkeW5hbWljVHVwbGVBcnJheSgpdWludDY0IgoJbWV0aG9kICJyZXR1cm5UdXBsZVdpdGhEeWFtaWNBcnJheSgpKHVpbnQ2NCx1aW50MTYsdWludDY0W10sdWludDE2W10pIgoJbWV0aG9kICJyZXR1cm5EeW5hbWljQXJyYXlGcm9tVHVwbGUoKXVpbnQ4W10iCgltZXRob2QgInVwZGF0ZUR5bmFtaWNBcnJheUluVHVwbGUoKSh1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W10pIgoJbWV0aG9kICJub25MaXRlcmFsRHluYW1pY0VsZW1lbnRJblR1cGxlKCkodWludDgsdWludDE2LHVpbnQ4W10sdWludDE2W10sdWludDhbXSkiCgltZXRob2QgImFycmF5UHVzaCgpdWludDE2W10iCgltZXRob2QgImFycmF5UG9wKCl1aW50MTZbXSIKCW1ldGhvZCAiYXJyYXlQb3BWYWx1ZSgpdWludDE2IgoJbWV0aG9kICJhcnJheVNwbGljZSgpdWludDY0W10iCgltZXRob2QgImFycmF5U3BsaWNlVmFsdWUoKXVpbnQxNltdIgoJbWV0aG9kICJkeW5hbWljQXJyYXlFbGVtZW50cygpdWludDE2W10iCgltZXRob2QgInNwbGljZUxhc3RFbGVtZW50KCl1aW50MTZbXSIKCW1ldGhvZCAic3BsaWNlTGFzdEVsZW1lbnRWYWx1ZSgpdWludDE2W10iCgltZXRob2QgInNwbGljZUZpcnN0RWxlbWVudCgpdWludDE2W10iCgltZXRob2QgInNwbGljZUZpcnN0RWxlbWVudFZhbHVlKCl1aW50MTZbXSIKCW1ldGhvZCAic3RyaW5nUmV0dXJuKClzdHJpbmciCgltZXRob2QgInN0cmluZ0FyZyhzdHJpbmcpdm9pZCIKCW1ldGhvZCAic3RyaW5nSW5UdXBsZSgpKHVpbnQxNix1aW50OFtdLHN0cmluZyx1aW50OFtdKSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoIGFiaV9yb3V0ZV9zdGF0aWNBcnJheSBhYmlfcm91dGVfcmV0dXJuU3RhdGljQXJyYXkgYWJpX3JvdXRlX3N0YXRpY0FycmF5QXJnIGFiaV9yb3V0ZV9ub25MaXRlcmFsU3RhdGljQXJyYXlFbGVtZW50cyBhYmlfcm91dGVfbWl4ZWRTdGF0aWNBcnJheUVsZW1lbnRzIGFiaV9yb3V0ZV9ub25MaXRlcmFsU3RhdGljQXJyYXlBY2Nlc3MgYWJpX3JvdXRlX3NldFN0YXRpY0FycmF5RWxlbWVudCBhYmlfcm91dGVfc3RhdGljQXJyYXlJblN0b3JhZ2VSZWYgYWJpX3JvdXRlX3VwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlUmVmIGFiaV9yb3V0ZV9zdGF0aWNBcnJheUluU3RvcmFnZU1hcCBhYmlfcm91dGVfdXBkYXRlU3RhdGljQXJyYXlJblN0b3JhZ2VNYXAgYWJpX3JvdXRlX25lc3RlZFN0YXRpY0FycmF5IGFiaV9yb3V0ZV91cGRhdGVOZXN0ZWRTdGF0aWNBcnJheUVsZW1lbnQgYWJpX3JvdXRlX3VwZGF0ZU5lc3RlZFN0YXRpY0FycmF5IGFiaV9yb3V0ZV90aHJlZURpbWVuc2lvbmFsVWludDE2QXJyYXkgYWJpX3JvdXRlX3NpbXBsZVR1cGxlIGFiaV9yb3V0ZV9hcnJheUluVHVwbGUgYWJpX3JvdXRlX3R1cGxlSW5BcnJheSBhYmlfcm91dGVfdHVwbGVJblR1cGxlIGFiaV9yb3V0ZV9zaG9ydFR5cGVOb3RhdGlvbiBhYmlfcm91dGVfZGlzZ3VzdGluZyBhYmlfcm91dGVfcmV0dXJuVHVwbGUgYWJpX3JvdXRlX3R1cGxlQXJnIGFiaV9yb3V0ZV9keW5hbWljQXJyYXkgYWJpX3JvdXRlX3JldHVybkR5bmFtaWNBcnJheSBhYmlfcm91dGVfZHluYW1pY0FycmF5QXJnIGFiaV9yb3V0ZV91cGRhdGVEeW5hbWljQXJyYXlFbGVtZW50IGFiaV9yb3V0ZV9keW5hbWljVHVwbGVBcnJheSBhYmlfcm91dGVfcmV0dXJuVHVwbGVXaXRoRHlhbWljQXJyYXkgYWJpX3JvdXRlX3JldHVybkR5bmFtaWNBcnJheUZyb21UdXBsZSBhYmlfcm91dGVfdXBkYXRlRHluYW1pY0FycmF5SW5UdXBsZSBhYmlfcm91dGVfbm9uTGl0ZXJhbER5bmFtaWNFbGVtZW50SW5UdXBsZSBhYmlfcm91dGVfYXJyYXlQdXNoIGFiaV9yb3V0ZV9hcnJheVBvcCBhYmlfcm91dGVfYXJyYXlQb3BWYWx1ZSBhYmlfcm91dGVfYXJyYXlTcGxpY2UgYWJpX3JvdXRlX2FycmF5U3BsaWNlVmFsdWUgYWJpX3JvdXRlX2R5bmFtaWNBcnJheUVsZW1lbnRzIGFiaV9yb3V0ZV9zcGxpY2VMYXN0RWxlbWVudCBhYmlfcm91dGVfc3BsaWNlTGFzdEVsZW1lbnRWYWx1ZSBhYmlfcm91dGVfc3BsaWNlRmlyc3RFbGVtZW50IGFiaV9yb3V0ZV9zcGxpY2VGaXJzdEVsZW1lbnRWYWx1ZSBhYmlfcm91dGVfc3RyaW5nUmV0dXJuIGFiaV9yb3V0ZV9zdHJpbmdBcmcgYWJpX3JvdXRlX3N0cmluZ0luVHVwbGU=","clear":"I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"},"contract":{"name":"AbiTest","desc":"","methods":[{"name":"staticArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnStaticArray","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"staticArrayArg","args":[{"name":"a","type":"uint64[3]","desc":""}],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"nonLiteralStaticArrayElements","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"mixedStaticArrayElements","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"nonLiteralStaticArrayAccess","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"setStaticArrayElement","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"staticArrayInStorageRef","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"updateStaticArrayInStorageRef","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"staticArrayInStorageMap","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"updateStaticArrayInStorageMap","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"nestedStaticArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"updateNestedStaticArrayElement","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"updateNestedStaticArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"threeDimensionalUint16Array","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"simpleTuple","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"arrayInTuple","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"tupleInArray","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"tupleInTuple","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"shortTypeNotation","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"disgusting","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnTuple","args":[],"desc":"","returns":{"type":"(uint64,uint16,uint64)","desc":""}},{"name":"tupleArg","args":[{"name":"a","type":"(uint64,uint16,uint64)","desc":""}],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"dynamicArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnDynamicArray","args":[],"desc":"","returns":{"type":"uint64[]","desc":""}},{"name":"dynamicArrayArg","args":[{"name":"a","type":"uint64[]","desc":""}],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"updateDynamicArrayElement","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"dynamicTupleArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnTupleWithDyamicArray","args":[],"desc":"","returns":{"type":"(uint64,uint16,uint64[],uint16[])","desc":""}},{"name":"returnDynamicArrayFromTuple","args":[],"desc":"","returns":{"type":"uint8[]","desc":""}},{"name":"updateDynamicArrayInTuple","args":[],"desc":"","returns":{"type":"(uint8,uint16[],uint8[],uint16[],uint8[])","desc":""}},{"name":"nonLiteralDynamicElementInTuple","args":[],"desc":"","returns":{"type":"(uint8,uint16,uint8[],uint16[],uint8[])","desc":""}},{"name":"arrayPush","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"arrayPop","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"arrayPopValue","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"arraySplice","args":[],"desc":"","returns":{"type":"uint64[]","desc":""}},{"name":"arraySpliceValue","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"dynamicArrayElements","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceLastElement","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceLastElementValue","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceFirstElement","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceFirstElementValue","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"stringReturn","args":[],"desc":"","returns":{"type":"string","desc":""}},{"name":"stringArg","args":[{"name":"s","type":"string","desc":""}],"desc":"","returns":{"type":"void","desc":""}},{"name":"stringInTuple","args":[],"desc":"","returns":{"type":"(uint16,uint8[],string,uint8[])","desc":""}}]}}
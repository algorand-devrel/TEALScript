{"hints":{},"schema":{"local":{"declared":{"lRef":{"type":"bytes","key":"lRef"},"lMap":{"type":"bytes","key":"lMap"}},"reserved":{}},"global":{"declared":{"gRef":{"type":"bytes","key":"gRef"},"gMap":{"type":"bytes","key":"gMap"}},"reserved":{}}},"state":{"global":{"num_byte_slices":2,"num_uints":0},"local":{"num_byte_slices":2,"num_uints":0}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDgKCWIgbWFpbgoKYmFyZV9yb3V0ZV9jcmVhdGU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJPT0KCSYmCglhc3NlcnQKCWNhbGxzdWIgY3JlYXRlCglpbnQgMQoJcmV0dXJuCgpjcmVhdGU6Cglwcm90byAwIDAKCXJldHN1YgoKYmFyZV9yb3V0ZV9PcHRJbjoKCXR4biBPbkNvbXBsZXRpb24KCWludCBPcHRJbgoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWNhbGxzdWIgb3B0SW4KCWludCAxCglyZXR1cm4KCm9wdEluOgoJcHJvdG8gMCAwCglyZXRzdWIKCmFiaV9yb3V0ZV9zdGF0aWNBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzdGF0aWNBcnJheQoJaW50IDEKCXJldHVybgoKc3RhdGljQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzUKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNwoJLy8gcmV0dXJuIGFbMV07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfcmV0dXJuU3RhdGljQXJyYXk6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgcmV0dXJuU3RhdGljQXJyYXkKCWludCAxCglyZXR1cm4KCnJldHVyblN0YXRpY0FycmF5OgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjQxCgkvLyBhOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NDMKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3RhdGljQXJyYXlBcmc6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWNhbGxzdWIgc3RhdGljQXJyYXlBcmcKCWludCAxCglyZXR1cm4KCnN0YXRpY0FycmF5QXJnOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjQ3CgkvLyByZXR1cm4gYVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9ub25MaXRlcmFsU3RhdGljQXJyYXlFbGVtZW50czoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwbiAzCgljYWxsc3ViIG5vbkxpdGVyYWxTdGF0aWNBcnJheUVsZW1lbnRzCglpbnQgMQoJcmV0dXJuCgpub25MaXRlcmFsU3RhdGljQXJyYXlFbGVtZW50czoKCXByb3RvIDQgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo1MQoJLy8gbjEgPSAxMQoJaW50IDExCglmcmFtZV9idXJ5IC0xIC8vIG4xOiB1aW50NjQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NTIKCS8vIG4yID0gMjIKCWludCAyMgoJZnJhbWVfYnVyeSAtMiAvLyBuMjogdWludDY0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjUzCgkvLyBuMyA9IDMzCglpbnQgMzMKCWZyYW1lX2J1cnkgLTMgLy8gbjM6IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo1NAoJLy8gYTogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFtuMSwgbjIsIG4zXQoJZnJhbWVfZGlnIC0xIC8vIG4xOiB1aW50NjQKCWl0b2IKCWV4dHJhY3QgMCAwCglmcmFtZV9kaWcgLTIgLy8gbjI6IHVpbnQ2NAoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG4zOiB1aW50NjQKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gYTogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjU2CgkvLyByZXR1cm4gYVsxXTsKCWZyYW1lX2RpZyAtNCAvLyBhOiB1aW50NjRbM10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9taXhlZFN0YXRpY0FycmF5RWxlbWVudHM6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cG4gMwoJY2FsbHN1YiBtaXhlZFN0YXRpY0FycmF5RWxlbWVudHMKCWludCAxCglyZXR1cm4KCm1peGVkU3RhdGljQXJyYXlFbGVtZW50czoKCXByb3RvIDQgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo2MAoJLy8gbjEgPSAzCglpbnQgMwoJZnJhbWVfYnVyeSAtMSAvLyBuMTogdWludDY0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjYxCgkvLyBuMiA9IDQKCWludCA0CglmcmFtZV9idXJ5IC0yIC8vIG4yOiB1aW50NjQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NjIKCS8vIG4zID0gNQoJaW50IDUKCWZyYW1lX2J1cnkgLTMgLy8gbjM6IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo2MwoJLy8gYTogU3RhdGljQXJyYXk8dWludDY0LCA5PiA9IFswLCAxLCAyLCBuMSwgbjIsIG4zLCA2LCA3LCA4XQoJaW50IDAKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBuMTogdWludDY0CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9kaWcgLTIgLy8gbjI6IHVpbnQ2NAoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIG4zOiB1aW50NjQKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCA2CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgNwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDgKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWZyYW1lX2J1cnkgLTQgLy8gYTogdWludDY0WzldCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjY1CgkvLyByZXR1cm4gYVsxXSArIGFbNF0gKyBhWzddOwoJZnJhbWVfZGlnIC00IC8vIGE6IHVpbnQ2NFs5XQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWZyYW1lX2RpZyAtNCAvLyBhOiB1aW50NjRbOV0KCWludCA0CglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCgkrCglmcmFtZV9kaWcgLTQgLy8gYTogdWludDY0WzldCglpbnQgNwoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJKwoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfbm9uTGl0ZXJhbFN0YXRpY0FycmF5QWNjZXNzOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgbm9uTGl0ZXJhbFN0YXRpY0FycmF5QWNjZXNzCglpbnQgMQoJcmV0dXJuCgpub25MaXRlcmFsU3RhdGljQXJyYXlBY2Nlc3M6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NjkKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo3MAoJLy8gbiA9IDIKCWludCAyCglmcmFtZV9idXJ5IC0yIC8vIG46IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo3MgoJLy8gcmV0dXJuIGFbbl07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglmcmFtZV9kaWcgLTIgLy8gbjogdWludDY0CglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zZXRTdGF0aWNBcnJheUVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgc2V0U3RhdGljQXJyYXlFbGVtZW50CglpbnQgMQoJcmV0dXJuCgpzZXRTdGF0aWNBcnJheUVsZW1lbnQ6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6NzYKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo3OAoJLy8gYVsxXSA9IDIyMgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMjIyCglpdG9iCglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6ODAKCS8vIHJldHVybiBhWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3N0YXRpY0FycmF5SW5TdG9yYWdlUmVmOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgc3RhdGljQXJyYXlJblN0b3JhZ2VSZWYKCWludCAxCglyZXR1cm4KCnN0YXRpY0FycmF5SW5TdG9yYWdlUmVmOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjg0CgkvLyBhOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6ODYKCS8vIHRoaXMuZ1JlZi5wdXQoYSkKCWJ5dGUgImdSZWYiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo4NwoJLy8gdGhpcy5sUmVmLnB1dCh0aGlzLnR4bi5zZW5kZXIsIGEpCgl0eG4gU2VuZGVyCglieXRlICJsUmVmIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYXBwX2xvY2FsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czo4OAoJLy8gdGhpcy5iUmVmLnB1dChhKQoJYnl0ZSAiYlJlZiIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6OTAKCS8vIHJldDogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFsKCWJ5dGUgImdSZWYiCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgMCAwCgl0eG4gU2VuZGVyCglieXRlICJsUmVmIgoJYXBwX2xvY2FsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWJ5dGUgImJSZWYiCglib3hfZ2V0Cglhc3NlcnQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0yIC8vIHJldDogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjk2CgkvLyByZXR1cm4gcmV0OwoJZnJhbWVfZGlnIC0yIC8vIHJldDogdWludDY0WzNdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZVJlZjoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwCgljYWxsc3ViIHVwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlUmVmCglpbnQgMQoJcmV0dXJuCgp1cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZVJlZjoKCXByb3RvIDIgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDAKCS8vIGE6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDIKCS8vIHRoaXMuZ1JlZi5wdXQoYSkKCWJ5dGUgImdSZWYiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDMKCS8vIHRoaXMubFJlZi5wdXQodGhpcy50eG4uc2VuZGVyLCBhKQoJdHhuIFNlbmRlcgoJYnl0ZSAibFJlZiIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTA0CgkvLyB0aGlzLmJSZWYucHV0KGEpCglieXRlICJiUmVmIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYm94X3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMDYKCS8vIHRoaXMuZ1JlZi5nZXQoKVsxXSA9IDExMQoJYnl0ZSAiZ1JlZiIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxMTEKCWl0b2IKCXJlcGxhY2UzCglieXRlICJnUmVmIgoJc3dhcAoJYXBwX2dsb2JhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTA3CgkvLyB0aGlzLmxSZWYuZ2V0KHRoaXMudHhuLnNlbmRlcilbMV0gPSAyMjIKCXR4biBTZW5kZXIKCWJ5dGUgImxSZWYiCglhcHBfbG9jYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyMjIKCWl0b2IKCXJlcGxhY2UzCgl0eG4gU2VuZGVyCglieXRlICJsUmVmIgoJdW5jb3ZlciAyCglhcHBfbG9jYWxfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjEwOAoJLy8gdGhpcy5iUmVmLmdldCgpWzFdID0gMzMzCglieXRlICJiUmVmIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAzMzMKCWl0b2IKCXJlcGxhY2UzCglieXRlICJiUmVmIgoJc3dhcAoJYm94X3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMTAKCS8vIHJldDogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFsKCWJ5dGUgImdSZWYiCglhcHBfZ2xvYmFsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgMCAwCgl0eG4gU2VuZGVyCglieXRlICJsUmVmIgoJYXBwX2xvY2FsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWJ5dGUgImJSZWYiCglib3hfZ2V0Cglhc3NlcnQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0yIC8vIHJldDogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjExNgoJLy8gcmV0dXJuIHJldDsKCWZyYW1lX2RpZyAtMiAvLyByZXQ6IHVpbnQ2NFszXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3RhdGljQXJyYXlJblN0b3JhZ2VNYXA6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cAoJY2FsbHN1YiBzdGF0aWNBcnJheUluU3RvcmFnZU1hcAoJaW50IDEKCXJldHVybgoKc3RhdGljQXJyYXlJblN0b3JhZ2VNYXA6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTIwCgkvLyBhOiBTdGF0aWNBcnJheTx1aW50NjQsIDM+ID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTIyCgkvLyB0aGlzLmdNYXAucHV0KCdnTWFwJywgYSkKCWJ5dGUgImdNYXAiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMjMKCS8vIHRoaXMubE1hcC5wdXQodGhpcy50eG4uc2VuZGVyLCAnbE1hcCcsIGEpCgl0eG4gU2VuZGVyCglieXRlICJsTWFwIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYXBwX2xvY2FsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMjQKCS8vIHRoaXMuYk1hcC5wdXQoJ2JNYXAnLCBhKQoJYnl0ZSAiYk1hcCIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTI2CgkvLyByZXQ6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbCglieXRlICJnTWFwIgoJYXBwX2dsb2JhbF9nZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglleHRyYWN0IDAgMAoJdHhuIFNlbmRlcgoJYnl0ZSAibE1hcCIKCWFwcF9sb2NhbF9nZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglieXRlICJiTWFwIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyByZXQ6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxMzIKCS8vIHJldHVybiByZXQ7CglmcmFtZV9kaWcgLTIgLy8gcmV0OiB1aW50NjRbM10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlTWFwOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgdXBkYXRlU3RhdGljQXJyYXlJblN0b3JhZ2VNYXAKCWludCAxCglyZXR1cm4KCnVwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlTWFwOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjEzNgoJLy8gYTogU3RhdGljQXJyYXk8dWludDY0LCAzPiA9IFsxMSwgMjIsIDMzXQoJaW50IDExCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0WzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjEzOAoJLy8gdGhpcy5nTWFwLnB1dCgnZ01hcCcsIGEpCglieXRlICJnTWFwIgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXQoJYXBwX2dsb2JhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTM5CgkvLyB0aGlzLmxNYXAucHV0KHRoaXMudHhuLnNlbmRlciwgJ2xNYXAnLCBhKQoJdHhuIFNlbmRlcgoJYnl0ZSAibE1hcCIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM10KCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTQwCgkvLyB0aGlzLmJNYXAucHV0KCdiTWFwJywgYSkKCWJ5dGUgImJNYXAiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0WzNdCglib3hfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE0MgoJLy8gdGhpcy5nTWFwLmdldCgnZ01hcCcpWzFdID0gMTExMQoJYnl0ZSAiZ01hcCIKCWFwcF9nbG9iYWxfZ2V0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxMTExCglpdG9iCglyZXBsYWNlMwoJYnl0ZSAiZ01hcCIKCXN3YXAKCWFwcF9nbG9iYWxfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE0MwoJLy8gdGhpcy5sTWFwLmdldCh0aGlzLnR4bi5zZW5kZXIsICdsTWFwJylbMV0gPSAyMjIyCgl0eG4gU2VuZGVyCglieXRlICJsTWFwIgoJYXBwX2xvY2FsX2dldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMjIyMgoJaXRvYgoJcmVwbGFjZTMKCXR4biBTZW5kZXIKCWJ5dGUgImxNYXAiCgl1bmNvdmVyIDIKCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTQ0CgkvLyB0aGlzLmJNYXAuZ2V0KCdiTWFwJylbMV0gPSAzMzMzCglieXRlICJiTWFwIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAzMzMzCglpdG9iCglyZXBsYWNlMwoJYnl0ZSAiYk1hcCIKCXN3YXAKCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTQ2CgkvLyByZXQ6IFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4gPSBbCglieXRlICJnTWFwIgoJYXBwX2dsb2JhbF9nZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglleHRyYWN0IDAgMAoJdHhuIFNlbmRlcgoJYnl0ZSAibE1hcCIKCWFwcF9sb2NhbF9nZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglieXRlICJiTWFwIgoJYm94X2dldAoJYXNzZXJ0CglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyByZXQ6IHVpbnQ2NFszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNTIKCS8vIHJldHVybiByZXQ7CglmcmFtZV9kaWcgLTIgLy8gcmV0OiB1aW50NjRbM10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX25lc3RlZFN0YXRpY0FycmF5OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIG5lc3RlZFN0YXRpY0FycmF5CglpbnQgMQoJcmV0dXJuCgpuZXN0ZWRTdGF0aWNBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNTYKCS8vIGE6IFN0YXRpY0FycmF5PFN0YXRpY0FycmF5PHVpbnQ2NCwgMz4sIDM+ID0gW1sxMSwgMjIsIDMzXSwgWzQ0LCA1NSwgNjZdLCBbNzcsIDg4LCA5OV1dCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDAgMAoJaW50IDU1CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgNjYKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWNvbmNhdAoJaW50IDc3CglpdG9iCglleHRyYWN0IDAgMAoJaW50IDg4CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgOTkKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM11bM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTU4CgkvLyByZXR1cm4gYVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM11bM10KCWludCAxCglpbnQgMjQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVOZXN0ZWRTdGF0aWNBcnJheUVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdXBkYXRlTmVzdGVkU3RhdGljQXJyYXlFbGVtZW50CglpbnQgMQoJcmV0dXJuCgp1cGRhdGVOZXN0ZWRTdGF0aWNBcnJheUVsZW1lbnQ6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTYyCgkvLyBhOiBTdGF0aWNBcnJheTxTdGF0aWNBcnJheTx1aW50NjQsIDM+LCAzPiA9IFtbMTEsIDIyLCAzM10sIFs0NCwgNTUsIDY2XSwgWzc3LCA4OCwgOTldXQoJaW50IDExCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCA0NAoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA1NQoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDY2CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWludCA3NwoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA4OAoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDk5CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0WzNdWzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE2NAoJLy8gYVsxXVsxXSA9IDU1NQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXVszXQoJaW50IDEKCWludCAyNCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgNTU1CglpdG9iCglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbM11bM10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTY2CgkvLyByZXR1cm4gYVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbM11bM10KCWludCAxCglpbnQgMjQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV91cGRhdGVOZXN0ZWRTdGF0aWNBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiB1cGRhdGVOZXN0ZWRTdGF0aWNBcnJheQoJaW50IDEKCXJldHVybgoKdXBkYXRlTmVzdGVkU3RhdGljQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTcwCgkvLyBhOiBTdGF0aWNBcnJheTxTdGF0aWNBcnJheTx1aW50NjQsIDM+LCAzPiA9IFtbMTEsIDIyLCAzM10sIFs0NCwgNTUsIDY2XSwgWzc3LCA4OCwgOTldXQoJaW50IDExCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCA0NAoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA1NQoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDY2CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWludCA3NwoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA4OAoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDk5CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0WzNdWzNdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE3MgoJLy8gYVsxXSA9IFs0NDQsIDU1NSwgNjY2XQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXVszXQoJaW50IDEKCWludCAyNCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDQ0NAoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA1NTUKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCA2NjYKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFszXVszXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNzQKCS8vIHJldHVybiBhWzFdWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFszXVszXQoJaW50IDEKCWludCAyNCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3RocmVlRGltZW5zaW9uYWxVaW50MTZBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiB0aHJlZURpbWVuc2lvbmFsVWludDE2QXJyYXkKCWludCAxCglyZXR1cm4KCnRocmVlRGltZW5zaW9uYWxVaW50MTZBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoxNzgKCS8vIGE6IFN0YXRpY0FycmF5PFN0YXRpY0FycmF5PFN0YXRpY0FycmF5PHVpbnQxNiwgMj4sIDI+LCAyPiA9IFsKCWludCAxMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0Cgljb25jYXQKCWludCA1NQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2NgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDc3CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDg4CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0Cgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbMl1bMl1bMl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTgyCgkvLyBhWzFdWzFdID0gWzc3NywgODg4XQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNlsyXVsyXVsyXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMQoJaW50IDQgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCSsKCWludCA3NzcKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgODg4CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbMl1bMl1bMl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTg0CgkvLyByZXR1cm4gYVsxXVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbMl1bMl1bMl0KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDEKCWludCA0IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgMQoJaW50IDIgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCSsKCWludCAyCglleHRyYWN0MwoJYnl0ZSAweEZGRkYKCWImCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zaW1wbGVUdXBsZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzaW1wbGVUdXBsZQoJaW50IDEKCXJldHVybgoKc2ltcGxlVHVwbGU6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTg4CgkvLyBhOiBbdWludDY0LCB1aW50MTYsIHVpbnQ2NCwgdWludDE2XSA9IFsxMSwgMjIsIDMzLCA0NF0KCWludCAxMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgNDQKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogW3VpbnQ2NCx1aW50MTYsdWludDY0LHVpbnQxNl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MTkwCgkvLyByZXR1cm4gYVszXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDY0LHVpbnQxNix1aW50NjQsdWludDE2XQoJaW50IDE4CglpbnQgMgoJZXh0cmFjdDMKCWJ5dGUgMHhGRkZGCgliJgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfYXJyYXlJblR1cGxlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIGFycmF5SW5UdXBsZQoJaW50IDEKCXJldHVybgoKYXJyYXlJblR1cGxlOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE5NAoJLy8gYTogW3VpbnQ2NCwgdWludDE2LCBTdGF0aWNBcnJheTx1aW50NjQsIDI+LCB1aW50MTZdID0gWwoJaW50IDExCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgNDQKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWNvbmNhdAoJaW50IDU1CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NFsyXSx1aW50MTZdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjE5OAoJLy8gcmV0dXJuIGFbMl1bMV07CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ2NCx1aW50MTYsdWludDY0WzJdLHVpbnQxNl0KCWludCAxMAoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3R1cGxlSW5BcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiB0dXBsZUluQXJyYXkKCWludCAxCglyZXR1cm4KCnR1cGxlSW5BcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMDIKCS8vIGE6IFN0YXRpY0FycmF5PFt1aW50NjQsIHVpbnQxNl0sIDI+ID0gWwoJaW50IDExCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgNDQKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDY0LHVpbnQxNl1bMl0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjA2CgkvLyByZXR1cm4gYVsxXVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDY0LHVpbnQxNl1bMl0KCWludCAxCglpbnQgMTAgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCA4CgkrCglpbnQgMgoJZXh0cmFjdDMKCWJ5dGUgMHhGRkZGCgliJgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfdHVwbGVJblR1cGxlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIHR1cGxlSW5UdXBsZQoJaW50IDEKCXJldHVybgoKdHVwbGVJblR1cGxlOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIxMAoJLy8gYTogW3VpbnQxNiwgdWludDE2LCBbdWludDY0LCB1aW50MTZdLCBbdWludDE2LCB1aW50NjRdXSA9IFsKCWludCAxMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0Cgljb25jYXQKCWludCA1NQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2NgoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50MTYsdWludDE2LFt1aW50NjQsdWludDE2XSxbdWludDE2LHVpbnQ2NF1dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIxNAoJLy8gcmV0dXJuIGFbM11bMV07CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQxNix1aW50MTYsW3VpbnQ2NCx1aW50MTZdLFt1aW50MTYsdWludDY0XV0KCWludCAxNAoJaW50IDIKCSsKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc2hvcnRUeXBlTm90YXRpb246Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgc2hvcnRUeXBlTm90YXRpb24KCWludCAxCglyZXR1cm4KCnNob3J0VHlwZU5vdGF0aW9uOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIxOAoJLy8gYTogW3VpbnQxNjwyPiwgdWludDY0PDI+LCB1aW50MTY8Mj5dID0gWwoJaW50IDExCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgNDQKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWNvbmNhdAoJaW50IDU1CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDY2CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogW3VpbnQxNlsyXSx1aW50NjRbMl0sdWludDE2WzJdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMjIKCS8vIHJldHVybiBhWzJdWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50MTZbMl0sdWludDY0WzJdLHVpbnQxNlsyXV0KCWludCAyMAoJaW50IDEKCWludCAyIC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgMgoJZXh0cmFjdDMKCWJ5dGUgMHhGRkZGCgliJgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfZGlzZ3VzdGluZzoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBkaXNndXN0aW5nCglpbnQgMQoJcmV0dXJuCgpkaXNndXN0aW5nOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjIyNgoJLy8gYTogU3RhdGljQXJyYXk8W3VpbnQxNjwyPiwgdWludDY0LCBbdWludDE2LCB1aW50NjRdLCBTdGF0aWNBcnJheTx1aW50NjQ8Mj4sIDI+XSwgMj4gPSBbCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDQ0CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDU1CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWludCA2NgoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA3NwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJaW50IDg4CglpdG9iCglleHRyYWN0IDAgMAoJaW50IDk5CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWNvbmNhdAoJaW50IDExMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyMjIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzMzMKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCA0NDQKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgNTU1CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0Cgljb25jYXQKCWludCA2NjYKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgNzc3CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgODg4CglpdG9iCglleHRyYWN0IDAgMAoJaW50IDk5OQoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJY29uY2F0Cgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDE2WzJdLHVpbnQ2NCxbdWludDE2LHVpbnQ2NF0sdWludDY0WzJdWzJdXVsyXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMzEKCS8vIGFbMV1bM11bMV0gPSBbODg4OCwgOTk5OV0KCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDE2WzJdLHVpbnQ2NCxbdWludDE2LHVpbnQ2NF0sdWludDY0WzJdWzJdXVsyXQoJaW50IDEKCWludCA1NCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDIyCgkrCglpbnQgMQoJaW50IDE2IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CgkrCglpbnQgODg4OAoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCA5OTk5CglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglyZXBsYWNlMwoJZnJhbWVfYnVyeSAtMSAvLyBhOiBbdWludDE2WzJdLHVpbnQ2NCxbdWludDE2LHVpbnQ2NF0sdWludDY0WzJdWzJdXVsyXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyMzIKCS8vIHJldHVybiBhWzFdWzNdWzFdWzBdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50MTZbMl0sdWludDY0LFt1aW50MTYsdWludDY0XSx1aW50NjRbMl1bMl1dWzJdCglpbnQgMQoJaW50IDU0IC8vIGVsZW1lbnQgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMjIKCSsKCWludCAxCglpbnQgMTYgLy8gZWxlbWVudCBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCSsKCWludCAwCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJKwoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9yZXR1cm5UdXBsZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiByZXR1cm5UdXBsZQoJaW50IDEKCXJldHVybgoKcmV0dXJuVHVwbGU6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjM2CgkvLyBhOiBbdWludDY0LCB1aW50MTYsIHVpbnQ2NF0gPSBbMTEsIDIyLCAzM10KCWludCAxMQoJaXRvYgoJZXh0cmFjdCAwIDAKCWludCAyMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50NjQsdWludDE2LHVpbnQ2NF0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjM3CgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDY0LHVpbnQxNix1aW50NjRdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV90dXBsZUFyZzoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJY2FsbHN1YiB0dXBsZUFyZwoJaW50IDEKCXJldHVybgoKdHVwbGVBcmc6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjQxCgkvLyByZXR1cm4gYVsxXTsKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDY0LHVpbnQxNix1aW50NjRdCglpbnQgOAoJaW50IDIKCWV4dHJhY3QzCglieXRlIDB4RkZGRgoJYiYKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2R5bmFtaWNBcnJheToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBkeW5hbWljQXJyYXkKCWludCAxCglyZXR1cm4KCmR5bmFtaWNBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNDUKCS8vIGE6IHVpbnQ2NFtdID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNDcKCS8vIHJldHVybiBhWzFdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFtdCglpbnQgMQoJaW50IDggLy8gZWxlbWVudCBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDgKCWV4dHJhY3QzCglidG9pCglpdG9iCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9yZXR1cm5EeW5hbWljQXJyYXk6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgcmV0dXJuRHluYW1pY0FycmF5CglpbnQgMQoJcmV0dXJuCgpyZXR1cm5EeW5hbWljQXJyYXk6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjUxCgkvLyBhOiB1aW50NjRbXSA9IFsxMSwgMjIsIDMzXQoJaW50IDExCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIyCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglpbnQgMzMKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjUyCgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfZHluYW1pY0FycmF5QXJnOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCgljYWxsc3ViIGR5bmFtaWNBcnJheUFyZwoJaW50IDEKCXJldHVybgoKZHluYW1pY0FycmF5QXJnOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI1NgoJLy8gcmV0dXJuIGFbMV07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3VwZGF0ZUR5bmFtaWNBcnJheUVsZW1lbnQ6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgdXBkYXRlRHluYW1pY0FycmF5RWxlbWVudAoJaW50IDEKCXJldHVybgoKdXBkYXRlRHluYW1pY0FycmF5RWxlbWVudDoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNjAKCS8vIGE6IHVpbnQ2NFtdID0gWzExLCAyMiwgMzNdCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50NjRbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNjIKCS8vIGFbMV0gPSAyMjIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJaW50IDEKCWludCA4IC8vIGVsZW1lbnQgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyMjIKCWl0b2IKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFtdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI2NAoJLy8gcmV0dXJuIGFbMV07CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWludCAxCglpbnQgOCAvLyBlbGVtZW50IGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgOAoJZXh0cmFjdDMKCWJ0b2kKCWl0b2IKCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2R5bmFtaWNUdXBsZUFycmF5OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIGR5bmFtaWNUdXBsZUFycmF5CglpbnQgMQoJcmV0dXJuCgpkeW5hbWljVHVwbGVBcnJheToKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyNjgKCS8vIGE6IFt1aW50MTYsIHVpbnQ2NF1bXSA9IFtbMTEsIDIyXSwgWzMzLCA0NF1dCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMjIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA0NAoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50MTYsdWludDY0XVtdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI3MAoJLy8gcmV0dXJuIGFbMV1bMV07CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQxNix1aW50NjRdW10KCWludCAxCglpbnQgMTAgLy8gZWxlbWVudCBsZW5ndGgKCWludCAyCgkrIC8vIGFkZCB0d28gZm9yIGxlbmd0aAoJKiAvLyBlbGVtZW50IG9mZnNldAoJaW50IDIKCSsKCWludCA4CglleHRyYWN0MwoJYnRvaQoJaXRvYgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfcmV0dXJuVHVwbGVXaXRoRHlhbWljQXJyYXk6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgcmV0dXJuVHVwbGVXaXRoRHlhbWljQXJyYXkKCWludCAxCglyZXR1cm4KCnJldHVyblR1cGxlV2l0aER5YW1pY0FycmF5OgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI3NAoJLy8gYTogW3VpbnQ2NCwgdWludDE2LCB1aW50NjRbXSwgdWludDE2W11dID0gWzEsIDIsIFszLCA0XSwgWzUsIDZdXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgMCAwCglpbnQgNAoJaXRvYgoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglpbnQgNQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCA2CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogW3VpbnQ2NCx1aW50MTYsdWludDY0W10sdWludDE2W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI3NgoJLy8gcmV0dXJuIGE7CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ2NCx1aW50MTYsdWludDY0W10sdWludDE2W11dCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9yZXR1cm5EeW5hbWljQXJyYXlGcm9tVHVwbGU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgcmV0dXJuRHluYW1pY0FycmF5RnJvbVR1cGxlCglpbnQgMQoJcmV0dXJuCgpyZXR1cm5EeW5hbWljQXJyYXlGcm9tVHVwbGU6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MjgwCgkvLyBhOiBbdWludDgsIHVpbnQxNiwgdWludDhbXSwgdWludDE2W10sIHVpbnQ4W11dID0gWzEsIDIsIFszLCA0XSwgWzUsIDZdLCBbNywgOF1dCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA3IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA3IDAKCWludCA0CglpdG9iCglleHRyYWN0IDcgMAoJY29uY2F0CglieXRlIDB4MDAwMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWludCA1CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDYKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJaW50IDcKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgOAoJaXRvYgoJZXh0cmFjdCA3IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTYsdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czoyODIKCS8vIHJldHVybiBhWzRdOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50OCx1aW50MTYsdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoJaW50IDcKCWludCAyCglleHRyYWN0MwoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfdXBkYXRlRHluYW1pY0FycmF5SW5UdXBsZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiB1cGRhdGVEeW5hbWljQXJyYXlJblR1cGxlCglpbnQgMQoJcmV0dXJuCgp1cGRhdGVEeW5hbWljQXJyYXlJblR1cGxlOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI4NgoJLy8gYTogW3VpbnQ4LCB1aW50MTZbXSwgdWludDhbXSwgdWludDE2W10sIHVpbnQ4W11dID0gWzksIFs4XSwgWzddLCBbNl0sIFs1XV0KCWludCA5CglpdG9iCglleHRyYWN0IDcgMAoJaW50IDgKCWl0b2IKCWV4dHJhY3QgNiAwCglieXRlIDB4MDAwMQoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWludCA3CglpdG9iCglleHRyYWN0IDcgMAoJYnl0ZSAweDAwMDEKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglpbnQgNgoJaXRvYgoJZXh0cmFjdCA2IDAKCWJ5dGUgMHgwMDAxCglzd2FwCgljb25jYXQKCWNvbmNhdAoJaW50IDUKCWl0b2IKCWV4dHJhY3QgNyAwCglieXRlIDB4MDAwMQoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mjg4CgkvLyBhWzBdID0gOTkgYXMgdWludDgKCWZyYW1lX2RpZyAtMSAvLyBhOiBbdWludDgsdWludDE2W10sdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoJaW50IDAKCWludCA5OQoJaXRvYgoJZXh0cmFjdCA3IDAKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI4OQoJLy8gYVsxXSA9IFsxMCwgMTFdCglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWludCAxCglpbnQgMTAKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMTEKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI5MAoJLy8gYVsyXSA9IFsxMiwgMTNdCglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWludCAzCglpbnQgMTIKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgMTMKCWl0b2IKCWV4dHJhY3QgNyAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI5MQoJLy8gYVszXSA9IFsxNCwgMTVdCglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWludCA1CglpbnQgMTQKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMTUKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI5MgoJLy8gYVs0XSA9IFsxNiwgMTddCglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWludCA3CglpbnQgMTYKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgMTcKCWl0b2IKCWV4dHJhY3QgNyAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCXJlcGxhY2UzCglmcmFtZV9idXJ5IC0xIC8vIGE6IFt1aW50OCx1aW50MTZbXSx1aW50OFtdLHVpbnQxNltdLHVpbnQ4W11dCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI5NAoJLy8gcmV0dXJuIGE7CglmcmFtZV9kaWcgLTEgLy8gYTogW3VpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXV0KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX25vbkxpdGVyYWxEeW5hbWljRWxlbWVudEluVHVwbGU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cAoJY2FsbHN1YiBub25MaXRlcmFsRHluYW1pY0VsZW1lbnRJblR1cGxlCglpbnQgMQoJcmV0dXJuCgpub25MaXRlcmFsRHluYW1pY0VsZW1lbnRJblR1cGxlOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjI5OAoJLy8gZTogdWludDE2W10gPSBbNSwgNl0KCWludCA1CglpdG9iCglleHRyYWN0IDYgMAoJaW50IDYKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gZTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mjk5CgkvLyBhOiBbdWludDgsIHVpbnQxNiwgdWludDhbXSwgdWludDE2W10sIHVpbnQ4W11dID0gWzEsIDIsIFszLCA0XSwgZSwgWzcsIDhdXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgNAoJaXRvYgoJZXh0cmFjdCA3IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9kaWcgLTEgLy8gZTogdWludDE2W10KCWNvbmNhdAoJaW50IDcKCWl0b2IKCWV4dHJhY3QgNyAwCglpbnQgOAoJaXRvYgoJZXh0cmFjdCA3IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0CglmcmFtZV9idXJ5IC0yIC8vIGE6IFt1aW50OCx1aW50MTYsdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMDEKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0yIC8vIGE6IFt1aW50OCx1aW50MTYsdWludDhbXSx1aW50MTZbXSx1aW50OFtdXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfYXJyYXlQdXNoOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIGFycmF5UHVzaAoJaW50IDEKCXJldHVybgoKYXJyYXlQdXNoOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMwNQoJLy8gYTogdWludDE2W10gPSBbMSwgMl0KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAyCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzA3CgkvLyBhLnB1c2goMyBhcyB1aW50MTYpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWR1cAoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJKwoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWV4dHJhY3QgMiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMwOQoJLy8gcmV0dXJuIGE7CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX2FycmF5UG9wOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIGFycmF5UG9wCglpbnQgMQoJcmV0dXJuCgphcnJheVBvcDoKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMTMKCS8vIGE6IHVpbnQxNltdID0gWzEsIDIsIDNdCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozMTUKCS8vIGEucG9wKCkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJZHVwCglpbnQgMAoJZXh0cmFjdF91aW50MTYKCWludCAxCgktCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJZXh0cmFjdCAyIDAKCWNvbmNhdAoJZHVwCglsZW4KCWludCAyCgktCglpbnQgMAoJc3dhcAoJZXh0cmFjdDMKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzE3CgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfYXJyYXlQb3BWYWx1ZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwCgljYWxsc3ViIGFycmF5UG9wVmFsdWUKCWludCAxCglyZXR1cm4KCmFycmF5UG9wVmFsdWU6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzIxCgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzIzCgkvLyB2ID0gYS5wb3AoKSEKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJZHVwCglpbnQgMAoJZXh0cmFjdF91aW50MTYKCWludCAxCgktCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJZXh0cmFjdCAyIDAKCWNvbmNhdAoJZHVwCglsZW4KCWludCAyCgktCglpbnQgMAoJc3dhcAoJZXh0cmFjdDMKCWR1cAoJbGVuCglpbnQgMgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCgljb3ZlciAyCglleHRyYWN0MwoJc3dhcAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoJZnJhbWVfYnVyeSAtMiAvLyB2OiB1aW50MTYKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzI1CgkvLyByZXR1cm4gdjsKCWZyYW1lX2RpZyAtMiAvLyB2OiB1aW50MTYKCWJ5dGUgMHhGRkZGCgliJgoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfYXJyYXlTcGxpY2U6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWNhbGxzdWIgYXJyYXlTcGxpY2UKCWludCAxCglyZXR1cm4KCmFycmF5U3BsaWNlOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMyOQoJLy8gYTogdWludDY0W10gPSBbMSwgMiwgM10KCWludCAxCglpdG9iCglleHRyYWN0IDAgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgMCAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDAgMAoJY29uY2F0CglieXRlIDB4MDAwMwoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQ2NFtdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjMzMQoJLy8gYS5zcGxpY2UoMSwgMSkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCWludCAxCglpbnQgOAoJKgoJaW50IDIKCSsKCXN0b3JlIDEyIC8vIHNwbGljZSBzdGFydAoJaW50IDEKCWludCA4CgkqCglpbnQgOAoJKwoJc3RvcmUgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0W10KCWludCAyCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NFtdCglkdXAKCWxlbgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCgkrCglpbnQgOAoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDY0W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzMzCgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjRbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfYXJyYXlTcGxpY2VWYWx1ZToKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwbiAzCgljYWxsc3ViIGFycmF5U3BsaWNlVmFsdWUKCWludCAxCglyZXR1cm4KCmFycmF5U3BsaWNlVmFsdWU6Cglwcm90byA0IDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzM3CgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMF0KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgNAoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDUKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCA2CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgNwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDgKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCA5CglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMTAKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDBhCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzM5CgkvLyBpID0gMQoJaW50IDEKCWZyYW1lX2J1cnkgLTIgLy8gaTogdWludDY0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM0MAoJLy8gbCA9IDcKCWludCA3CglmcmFtZV9idXJ5IC0zIC8vIGw6IHVpbnQ2NAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNDEKCS8vIHYgPSBhLnNwbGljZShpLCBsKQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMAoJZXh0cmFjdF91aW50MTYKCWZyYW1lX2RpZyAtMyAvLyBsOiB1aW50NjQKCS0KCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9kaWcgLTIgLy8gaTogdWludDY0CglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEyIC8vIHNwbGljZSBzdGFydAoJZnJhbWVfZGlnIC0zIC8vIGw6IHVpbnQ2NAoJaW50IDIKCSoKCWludCAyCgkrCglzdG9yZSAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDIKCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0CglzdWJzdHJpbmczCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWR1cAoJbGVuCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJbG9hZCAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCSsKCWludCAyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfZGlnIC0zIC8vIGw6IHVpbnQ2NAoJaXRvYgoJZXh0cmFjdCA2IDIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglpbnQgMgoJLQoJZXh0cmFjdDMKCWNvbmNhdAoJc3dhcAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoJZnJhbWVfYnVyeSAtNCAvLyB2OiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNDMKCS8vIHJldHVybiB2OwoJZnJhbWVfZGlnIC00IC8vIHY6IHVpbnQxNltdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9keW5hbWljQXJyYXlFbGVtZW50czoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJZHVwCgljYWxsc3ViIGR5bmFtaWNBcnJheUVsZW1lbnRzCglpbnQgMQoJcmV0dXJuCgpkeW5hbWljQXJyYXlFbGVtZW50czoKCXByb3RvIDIgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNDcKCS8vIGE6IHVpbnQxNltdID0gWzEsIDIsIDNdCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNDgKCS8vIG5ld0E6IHVpbnQxNltdID0gW2FbMF0sIGFbMV0sIGFbMl1dCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAwCglpbnQgMiAvLyBlbGVtZW50IGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMgoJZXh0cmFjdDMKCWV4dHJhY3QgMCAwCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAxCglpbnQgMiAvLyBlbGVtZW50IGxlbmd0aAoJaW50IDIKCSsgLy8gYWRkIHR3byBmb3IgbGVuZ3RoCgkqIC8vIGVsZW1lbnQgb2Zmc2V0CglpbnQgMgoJZXh0cmFjdDMKCWV4dHJhY3QgMCAwCgljb25jYXQKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDIKCWludCAyIC8vIGVsZW1lbnQgbGVuZ3RoCglpbnQgMgoJKyAvLyBhZGQgdHdvIGZvciBsZW5ndGgKCSogLy8gZWxlbWVudCBvZmZzZXQKCWludCAyCglleHRyYWN0MwoJZXh0cmFjdCAwIDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMiAvLyBuZXdBOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNTAKCS8vIHJldHVybiBuZXdBOwoJZnJhbWVfZGlnIC0yIC8vIG5ld0E6IHVpbnQxNltdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zcGxpY2VMYXN0RWxlbWVudDoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJYnl0ZSAweAoJY2FsbHN1YiBzcGxpY2VMYXN0RWxlbWVudAoJaW50IDEKCXJldHVybgoKc3BsaWNlTGFzdEVsZW1lbnQ6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzU0CgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzU2CgkvLyBhLnNwbGljZSgyLCAxKQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMAoJZXh0cmFjdF91aW50MTYKCWludCAxCgktCglpdG9iCglleHRyYWN0IDYgMgoJaW50IDIKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTIgLy8gc3BsaWNlIHN0YXJ0CglpbnQgMQoJaW50IDIKCSoKCWludCAyCgkrCglzdG9yZSAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDIKCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0CglzdWJzdHJpbmczCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWR1cAoJbGVuCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJbG9hZCAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCSsKCWludCAyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNTgKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zcGxpY2VMYXN0RWxlbWVudFZhbHVlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CglkdXAKCWNhbGxzdWIgc3BsaWNlTGFzdEVsZW1lbnRWYWx1ZQoJaW50IDEKCXJldHVybgoKc3BsaWNlTGFzdEVsZW1lbnRWYWx1ZToKCXByb3RvIDIgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNjIKCS8vIGE6IHVpbnQxNltdID0gWzEsIDIsIDNdCglpbnQgMQoJaXRvYgoJZXh0cmFjdCA2IDAKCWludCAyCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglpbnQgMwoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJYnl0ZSAweDAwMDMKCXN3YXAKCWNvbmNhdAoJZnJhbWVfYnVyeSAtMSAvLyBhOiB1aW50MTZbXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozNjQKCS8vIHYgPSBhLnNwbGljZSgyLCAxKQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglpbnQgMAoJZXh0cmFjdF91aW50MTYKCWludCAxCgktCglpdG9iCglleHRyYWN0IDYgMgoJaW50IDIKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTIgLy8gc3BsaWNlIHN0YXJ0CglpbnQgMQoJaW50IDIKCSoKCWludCAyCgkrCglzdG9yZSAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDIKCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0CglzdWJzdHJpbmczCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWR1cAoJbGVuCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJbG9hZCAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCSsKCWludCAyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWNvbmNhdAoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAyCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWxvYWQgMTIgLy8gc3BsaWNlIHN0YXJ0Cglsb2FkIDEzIC8vIHNwbGljZSBieXRlIGxlbmd0aAoJaW50IDIKCS0KCWV4dHJhY3QzCgljb25jYXQKCXN3YXAKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCWZyYW1lX2J1cnkgLTIgLy8gdjogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzY2CgkvLyByZXR1cm4gdjsKCWZyYW1lX2RpZyAtMiAvLyB2OiB1aW50MTZbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3BsaWNlRmlyc3RFbGVtZW50OgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIHNwbGljZUZpcnN0RWxlbWVudAoJaW50IDEKCXJldHVybgoKc3BsaWNlRmlyc3RFbGVtZW50OgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM3MAoJLy8gYTogdWludDE2W10gPSBbMSwgMiwgM10KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWludCAzCglpdG9iCglleHRyYWN0IDYgMAoJY29uY2F0CglieXRlIDB4MDAwMwoJc3dhcAoJY29uY2F0CglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM3MgoJLy8gYS5zcGxpY2UoMCwgMSkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCWludCAwCglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEyIC8vIHNwbGljZSBzdGFydAoJaW50IDEKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAyCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglkdXAKCWxlbgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCgkrCglpbnQgMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mzc0CgkvLyByZXR1cm4gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJYnl0ZSAweDE1MWY3Yzc1Cglzd2FwCgljb25jYXQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfc3BsaWNlRmlyc3RFbGVtZW50VmFsdWU6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCWJ5dGUgMHgKCWR1cAoJY2FsbHN1YiBzcGxpY2VGaXJzdEVsZW1lbnRWYWx1ZQoJaW50IDEKCXJldHVybgoKc3BsaWNlRmlyc3RFbGVtZW50VmFsdWU6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mzc4CgkvLyBhOiB1aW50MTZbXSA9IFsxLCAyLCAzXQoJaW50IDEKCWl0b2IKCWV4dHJhY3QgNiAwCglpbnQgMgoJaXRvYgoJZXh0cmFjdCA2IDAKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNiAwCgljb25jYXQKCWJ5dGUgMHgwMDAzCglzd2FwCgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogdWludDE2W10KCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6MzgwCgkvLyB2ID0gYS5zcGxpY2UoMCwgMSkKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTZbXQoJaW50IDAKCWV4dHJhY3RfdWludDE2CglpbnQgMQoJLQoJaXRvYgoJZXh0cmFjdCA2IDIKCWludCAwCglpbnQgMgoJKgoJaW50IDIKCSsKCXN0b3JlIDEyIC8vIHNwbGljZSBzdGFydAoJaW50IDEKCWludCAyCgkqCglpbnQgMgoJKwoJc3RvcmUgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2W10KCWludCAyCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJc3Vic3RyaW5nMwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglkdXAKCWxlbgoJbG9hZCAxMiAvLyBzcGxpY2Ugc3RhcnQKCWxvYWQgMTMgLy8gc3BsaWNlIGJ5dGUgbGVuZ3RoCgkrCglpbnQgMgoJLQoJc3dhcAoJc3Vic3RyaW5nMwoJY29uY2F0Cgljb25jYXQKCWludCAxCglpdG9iCglleHRyYWN0IDYgMgoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQxNltdCglsb2FkIDEyIC8vIHNwbGljZSBzdGFydAoJbG9hZCAxMyAvLyBzcGxpY2UgYnl0ZSBsZW5ndGgKCWludCAyCgktCglleHRyYWN0MwoJY29uY2F0Cglzd2FwCglmcmFtZV9idXJ5IC0xIC8vIGE6IHVpbnQxNltdCglmcmFtZV9idXJ5IC0yIC8vIHY6IHVpbnQxNltdCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM4MgoJLy8gcmV0dXJuIHY7CglmcmFtZV9kaWcgLTIgLy8gdjogdWludDE2W10KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKYWJpX3JvdXRlX3N0cmluZ1JldHVybjoKCXR4biBPbkNvbXBsZXRpb24KCWludCBOb09wCgk9PQoJdHhuIEFwcGxpY2F0aW9uSUQKCWludCAwCgkhPQoJJiYKCWFzc2VydAoJY2FsbHN1YiBzdHJpbmdSZXR1cm4KCWludCAxCglyZXR1cm4KCnN0cmluZ1JldHVybjoKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozODYKCS8vIHJldHVybiAnSGVsbG8gV29ybGQhJzsKCWJ5dGUgIkhlbGxvIFdvcmxkISIKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0CglieXRlIDB4MTUxZjdjNzUKCXN3YXAKCWNvbmNhdAoJbG9nCglyZXRzdWIKCmFiaV9yb3V0ZV9zdHJpbmdBcmc6Cgl0eG4gT25Db21wbGV0aW9uCglpbnQgTm9PcAoJPT0KCXR4biBBcHBsaWNhdGlvbklECglpbnQgMAoJIT0KCSYmCglhc3NlcnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgljYWxsc3ViIHN0cmluZ0FyZwoJaW50IDEKCXJldHVybgoKc3RyaW5nQXJnOgoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2FiaS5hbGdvLnRzOjM5MAoJLy8gYXNzZXJ0KHMgPT09ICdIZWxsbyBXb3JsZCEnKQoJZnJhbWVfZGlnIC0xIC8vIHM6IGJ5dGVzCglieXRlICJIZWxsbyBXb3JsZCEiCgk9PQoJYXNzZXJ0CglyZXRzdWIKCmFiaV9yb3V0ZV9zdHJpbmdJblR1cGxlOgoJdHhuIE9uQ29tcGxldGlvbgoJaW50IE5vT3AKCT09Cgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCSE9CgkmJgoJYXNzZXJ0CglieXRlIDB4CgljYWxsc3ViIHN0cmluZ0luVHVwbGUKCWludCAxCglyZXR1cm4KCnN0cmluZ0luVHVwbGU6Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYWJpLmFsZ28udHM6Mzk0CgkvLyBhOiBbdWludDE2LCB1aW50OFtdLCBzdHJpbmcsIHVpbnQ4W11dID0gWzEsIFsyXSwgJ0hlbGxvIFdvcmxkIScsIFszXV0KCWludCAxCglpdG9iCglleHRyYWN0IDYgMAoJaW50IDIKCWl0b2IKCWV4dHJhY3QgNyAwCglieXRlIDB4MDAwMQoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWJ5dGUgIkhlbGxvIFdvcmxkISIKCWNvbmNhdAoJaW50IDMKCWl0b2IKCWV4dHJhY3QgNyAwCglieXRlIDB4MDAwMQoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWZyYW1lX2J1cnkgLTEgLy8gYTogW3VpbnQxNix1aW50OFtdLHN0cmluZyx1aW50OFtdXQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hYmkuYWxnby50czozOTYKCS8vIHJldHVybiBhOwoJZnJhbWVfZGlnIC0xIC8vIGE6IFt1aW50MTYsdWludDhbXSxzdHJpbmcsdWludDhbXV0KCWJ5dGUgMHgxNTFmN2M3NQoJc3dhcAoJY29uY2F0Cglsb2cKCXJldHN1YgoKbWFpbjoKCXR4biBOdW1BcHBBcmdzCglibnogcm91dGVfYWJpCgl0eG4gQXBwbGljYXRpb25JRAoJaW50IDAKCT09CglibnogYmFyZV9yb3V0ZV9jcmVhdGUKCXR4biBPbkNvbXBsZXRpb24KCWludCBPcHRJbgoJPT0KCWludCAxCgltYXRjaCBiYXJlX3JvdXRlX09wdEluCgpyb3V0ZV9hYmk6CgltZXRob2QgInN0YXRpY0FycmF5KCl1aW50NjQiCgltZXRob2QgInJldHVyblN0YXRpY0FycmF5KCl1aW50NjRbM10iCgltZXRob2QgInN0YXRpY0FycmF5QXJnKHVpbnQ2NFszXSl1aW50NjQiCgltZXRob2QgIm5vbkxpdGVyYWxTdGF0aWNBcnJheUVsZW1lbnRzKCl1aW50NjQiCgltZXRob2QgIm1peGVkU3RhdGljQXJyYXlFbGVtZW50cygpdWludDY0IgoJbWV0aG9kICJub25MaXRlcmFsU3RhdGljQXJyYXlBY2Nlc3MoKXVpbnQ2NCIKCW1ldGhvZCAic2V0U3RhdGljQXJyYXlFbGVtZW50KCl1aW50NjQiCgltZXRob2QgInN0YXRpY0FycmF5SW5TdG9yYWdlUmVmKCl1aW50NjRbM10iCgltZXRob2QgInVwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlUmVmKCl1aW50NjRbM10iCgltZXRob2QgInN0YXRpY0FycmF5SW5TdG9yYWdlTWFwKCl1aW50NjRbM10iCgltZXRob2QgInVwZGF0ZVN0YXRpY0FycmF5SW5TdG9yYWdlTWFwKCl1aW50NjRbM10iCgltZXRob2QgIm5lc3RlZFN0YXRpY0FycmF5KCl1aW50NjQiCgltZXRob2QgInVwZGF0ZU5lc3RlZFN0YXRpY0FycmF5RWxlbWVudCgpdWludDY0IgoJbWV0aG9kICJ1cGRhdGVOZXN0ZWRTdGF0aWNBcnJheSgpdWludDY0IgoJbWV0aG9kICJ0aHJlZURpbWVuc2lvbmFsVWludDE2QXJyYXkoKXVpbnQxNiIKCW1ldGhvZCAic2ltcGxlVHVwbGUoKXVpbnQxNiIKCW1ldGhvZCAiYXJyYXlJblR1cGxlKCl1aW50NjQiCgltZXRob2QgInR1cGxlSW5BcnJheSgpdWludDE2IgoJbWV0aG9kICJ0dXBsZUluVHVwbGUoKXVpbnQ2NCIKCW1ldGhvZCAic2hvcnRUeXBlTm90YXRpb24oKXVpbnQxNiIKCW1ldGhvZCAiZGlzZ3VzdGluZygpdWludDY0IgoJbWV0aG9kICJyZXR1cm5UdXBsZSgpKHVpbnQ2NCx1aW50MTYsdWludDY0KSIKCW1ldGhvZCAidHVwbGVBcmcoKHVpbnQ2NCx1aW50MTYsdWludDY0KSl1aW50MTYiCgltZXRob2QgImR5bmFtaWNBcnJheSgpdWludDY0IgoJbWV0aG9kICJyZXR1cm5EeW5hbWljQXJyYXkoKXVpbnQ2NFtdIgoJbWV0aG9kICJkeW5hbWljQXJyYXlBcmcodWludDY0W10pdWludDY0IgoJbWV0aG9kICJ1cGRhdGVEeW5hbWljQXJyYXlFbGVtZW50KCl1aW50NjQiCgltZXRob2QgImR5bmFtaWNUdXBsZUFycmF5KCl1aW50NjQiCgltZXRob2QgInJldHVyblR1cGxlV2l0aER5YW1pY0FycmF5KCkodWludDY0LHVpbnQxNix1aW50NjRbXSx1aW50MTZbXSkiCgltZXRob2QgInJldHVybkR5bmFtaWNBcnJheUZyb21UdXBsZSgpdWludDhbXSIKCW1ldGhvZCAidXBkYXRlRHluYW1pY0FycmF5SW5UdXBsZSgpKHVpbnQ4LHVpbnQxNltdLHVpbnQ4W10sdWludDE2W10sdWludDhbXSkiCgltZXRob2QgIm5vbkxpdGVyYWxEeW5hbWljRWxlbWVudEluVHVwbGUoKSh1aW50OCx1aW50MTYsdWludDhbXSx1aW50MTZbXSx1aW50OFtdKSIKCW1ldGhvZCAiYXJyYXlQdXNoKCl1aW50MTZbXSIKCW1ldGhvZCAiYXJyYXlQb3AoKXVpbnQxNltdIgoJbWV0aG9kICJhcnJheVBvcFZhbHVlKCl1aW50MTYiCgltZXRob2QgImFycmF5U3BsaWNlKCl1aW50NjRbXSIKCW1ldGhvZCAiYXJyYXlTcGxpY2VWYWx1ZSgpdWludDE2W10iCgltZXRob2QgImR5bmFtaWNBcnJheUVsZW1lbnRzKCl1aW50MTZbXSIKCW1ldGhvZCAic3BsaWNlTGFzdEVsZW1lbnQoKXVpbnQxNltdIgoJbWV0aG9kICJzcGxpY2VMYXN0RWxlbWVudFZhbHVlKCl1aW50MTZbXSIKCW1ldGhvZCAic3BsaWNlRmlyc3RFbGVtZW50KCl1aW50MTZbXSIKCW1ldGhvZCAic3BsaWNlRmlyc3RFbGVtZW50VmFsdWUoKXVpbnQxNltdIgoJbWV0aG9kICJzdHJpbmdSZXR1cm4oKXN0cmluZyIKCW1ldGhvZCAic3RyaW5nQXJnKHN0cmluZyl2b2lkIgoJbWV0aG9kICJzdHJpbmdJblR1cGxlKCkodWludDE2LHVpbnQ4W10sc3RyaW5nLHVpbnQ4W10pIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3N0YXRpY0FycmF5IGFiaV9yb3V0ZV9yZXR1cm5TdGF0aWNBcnJheSBhYmlfcm91dGVfc3RhdGljQXJyYXlBcmcgYWJpX3JvdXRlX25vbkxpdGVyYWxTdGF0aWNBcnJheUVsZW1lbnRzIGFiaV9yb3V0ZV9taXhlZFN0YXRpY0FycmF5RWxlbWVudHMgYWJpX3JvdXRlX25vbkxpdGVyYWxTdGF0aWNBcnJheUFjY2VzcyBhYmlfcm91dGVfc2V0U3RhdGljQXJyYXlFbGVtZW50IGFiaV9yb3V0ZV9zdGF0aWNBcnJheUluU3RvcmFnZVJlZiBhYmlfcm91dGVfdXBkYXRlU3RhdGljQXJyYXlJblN0b3JhZ2VSZWYgYWJpX3JvdXRlX3N0YXRpY0FycmF5SW5TdG9yYWdlTWFwIGFiaV9yb3V0ZV91cGRhdGVTdGF0aWNBcnJheUluU3RvcmFnZU1hcCBhYmlfcm91dGVfbmVzdGVkU3RhdGljQXJyYXkgYWJpX3JvdXRlX3VwZGF0ZU5lc3RlZFN0YXRpY0FycmF5RWxlbWVudCBhYmlfcm91dGVfdXBkYXRlTmVzdGVkU3RhdGljQXJyYXkgYWJpX3JvdXRlX3RocmVlRGltZW5zaW9uYWxVaW50MTZBcnJheSBhYmlfcm91dGVfc2ltcGxlVHVwbGUgYWJpX3JvdXRlX2FycmF5SW5UdXBsZSBhYmlfcm91dGVfdHVwbGVJbkFycmF5IGFiaV9yb3V0ZV90dXBsZUluVHVwbGUgYWJpX3JvdXRlX3Nob3J0VHlwZU5vdGF0aW9uIGFiaV9yb3V0ZV9kaXNndXN0aW5nIGFiaV9yb3V0ZV9yZXR1cm5UdXBsZSBhYmlfcm91dGVfdHVwbGVBcmcgYWJpX3JvdXRlX2R5bmFtaWNBcnJheSBhYmlfcm91dGVfcmV0dXJuRHluYW1pY0FycmF5IGFiaV9yb3V0ZV9keW5hbWljQXJyYXlBcmcgYWJpX3JvdXRlX3VwZGF0ZUR5bmFtaWNBcnJheUVsZW1lbnQgYWJpX3JvdXRlX2R5bmFtaWNUdXBsZUFycmF5IGFiaV9yb3V0ZV9yZXR1cm5UdXBsZVdpdGhEeWFtaWNBcnJheSBhYmlfcm91dGVfcmV0dXJuRHluYW1pY0FycmF5RnJvbVR1cGxlIGFiaV9yb3V0ZV91cGRhdGVEeW5hbWljQXJyYXlJblR1cGxlIGFiaV9yb3V0ZV9ub25MaXRlcmFsRHluYW1pY0VsZW1lbnRJblR1cGxlIGFiaV9yb3V0ZV9hcnJheVB1c2ggYWJpX3JvdXRlX2FycmF5UG9wIGFiaV9yb3V0ZV9hcnJheVBvcFZhbHVlIGFiaV9yb3V0ZV9hcnJheVNwbGljZSBhYmlfcm91dGVfYXJyYXlTcGxpY2VWYWx1ZSBhYmlfcm91dGVfZHluYW1pY0FycmF5RWxlbWVudHMgYWJpX3JvdXRlX3NwbGljZUxhc3RFbGVtZW50IGFiaV9yb3V0ZV9zcGxpY2VMYXN0RWxlbWVudFZhbHVlIGFiaV9yb3V0ZV9zcGxpY2VGaXJzdEVsZW1lbnQgYWJpX3JvdXRlX3NwbGljZUZpcnN0RWxlbWVudFZhbHVlIGFiaV9yb3V0ZV9zdHJpbmdSZXR1cm4gYWJpX3JvdXRlX3N0cmluZ0FyZyBhYmlfcm91dGVfc3RyaW5nSW5UdXBsZQ==","clear":"I3ByYWdtYSB2ZXJzaW9uIDgKaW50IDEKcmV0dXJu"},"contract":{"name":"AbiTest","desc":"","methods":[{"name":"staticArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnStaticArray","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"staticArrayArg","args":[{"name":"a","type":"uint64[3]","desc":""}],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"nonLiteralStaticArrayElements","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"mixedStaticArrayElements","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"nonLiteralStaticArrayAccess","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"setStaticArrayElement","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"staticArrayInStorageRef","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"updateStaticArrayInStorageRef","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"staticArrayInStorageMap","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"updateStaticArrayInStorageMap","args":[],"desc":"","returns":{"type":"uint64[3]","desc":""}},{"name":"nestedStaticArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"updateNestedStaticArrayElement","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"updateNestedStaticArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"threeDimensionalUint16Array","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"simpleTuple","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"arrayInTuple","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"tupleInArray","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"tupleInTuple","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"shortTypeNotation","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"disgusting","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnTuple","args":[],"desc":"","returns":{"type":"(uint64,uint16,uint64)","desc":""}},{"name":"tupleArg","args":[{"name":"a","type":"(uint64,uint16,uint64)","desc":""}],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"dynamicArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnDynamicArray","args":[],"desc":"","returns":{"type":"uint64[]","desc":""}},{"name":"dynamicArrayArg","args":[{"name":"a","type":"uint64[]","desc":""}],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"updateDynamicArrayElement","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"dynamicTupleArray","args":[],"desc":"","returns":{"type":"uint64","desc":""}},{"name":"returnTupleWithDyamicArray","args":[],"desc":"","returns":{"type":"(uint64,uint16,uint64[],uint16[])","desc":""}},{"name":"returnDynamicArrayFromTuple","args":[],"desc":"","returns":{"type":"uint8[]","desc":""}},{"name":"updateDynamicArrayInTuple","args":[],"desc":"","returns":{"type":"(uint8,uint16[],uint8[],uint16[],uint8[])","desc":""}},{"name":"nonLiteralDynamicElementInTuple","args":[],"desc":"","returns":{"type":"(uint8,uint16,uint8[],uint16[],uint8[])","desc":""}},{"name":"arrayPush","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"arrayPop","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"arrayPopValue","args":[],"desc":"","returns":{"type":"uint16","desc":""}},{"name":"arraySplice","args":[],"desc":"","returns":{"type":"uint64[]","desc":""}},{"name":"arraySpliceValue","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"dynamicArrayElements","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceLastElement","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceLastElementValue","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceFirstElement","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"spliceFirstElementValue","args":[],"desc":"","returns":{"type":"uint16[]","desc":""}},{"name":"stringReturn","args":[],"desc":"","returns":{"type":"string","desc":""}},{"name":"stringArg","args":[{"name":"s","type":"string","desc":""}],"desc":"","returns":{"type":"void","desc":""}},{"name":"stringInTuple","args":[],"desc":"","returns":{"type":"(uint16,uint8[],string,uint8[])","desc":""}}]}}
#pragma version 11

// This TEAL was generated by TEALScript v0.101.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// voterOpcodes()void
*abi_route_voterOpcodes:
	// execute voterOpcodes()void
	callsub voterOpcodes
	int 1
	return

// voterOpcodes(): void
voterOpcodes:
	proto 0 0

	// tests/contracts/avm11.algo.ts:7
	// assert(this.txn.sender.voterBalance)
	txn Sender
	voter_params_get VoterBalance
	assert
	retsub

// incentiveGlobals()void
*abi_route_incentiveGlobals:
	// execute incentiveGlobals()void
	callsub incentiveGlobals
	int 1
	return

// incentiveGlobals(): void
incentiveGlobals:
	proto 0 0

	// tests/contracts/avm11.algo.ts:12
	// assert(globals.payoutsEnabled)
	global PayoutsEnabled
	assert

	// tests/contracts/avm11.algo.ts:13
	// assert(globals.payoutsGoOnlineFee)
	global PayoutsGoOnlineFee
	assert

	// tests/contracts/avm11.algo.ts:14
	// assert(globals.payoutsPercent)
	global PayoutsPercent
	assert

	// tests/contracts/avm11.algo.ts:15
	// assert(globals.payoutsMinBalance)
	global PayoutsMinBalance
	assert

	// tests/contracts/avm11.algo.ts:16
	// assert(globals.payoutsMaxBalance)
	global PayoutsMaxBalance
	assert
	retsub

// onlineStakeOp()void
*abi_route_onlineStakeOp:
	// execute onlineStakeOp()void
	callsub onlineStakeOp
	int 1
	return

// onlineStakeOp(): void
onlineStakeOp:
	proto 0 0

	// tests/contracts/avm11.algo.ts:20
	// assert(onlineStake())
	online_stake
	assert
	retsub

// accountParams()void
*abi_route_accountParams:
	// execute accountParams()void
	callsub accountParams
	int 1
	return

// accountParams(): void
accountParams:
	proto 0 0

	// tests/contracts/avm11.algo.ts:24
	// assert(this.txn.sender.incentiveEligible)
	txn Sender
	acct_params_get AcctIncentiveEligible
	pop
	assert

	// tests/contracts/avm11.algo.ts:25
	// assert(this.txn.sender.lastHeartbeat)
	txn Sender
	acct_params_get AcctLastHeartbeat
	pop
	assert

	// tests/contracts/avm11.algo.ts:26
	// assert(this.txn.sender.lastProposed)
	txn Sender
	acct_params_get AcctLastProposed
	pop
	assert
	retsub

// blockParams()void
*abi_route_blockParams:
	// execute blockParams()void
	callsub blockParams
	int 1
	return

// blockParams(): void
blockParams:
	proto 0 0

	// tests/contracts/avm11.algo.ts:30
	// log(blocks[globals.round - 1].proposer)
	global Round
	int 1
	-
	block BlkProposer
	log

	// tests/contracts/avm11.algo.ts:31
	// assert(blocks[globals.round - 1].feesCollected)
	global Round
	int 1
	-
	block BlkFeesCollected
	assert

	// tests/contracts/avm11.algo.ts:32
	// assert(blocks[globals.round - 1].bonus)
	global Round
	int 1
	-
	block BlkBonus
	assert

	// tests/contracts/avm11.algo.ts:33
	// log(blocks[globals.round - 1].branch)
	global Round
	int 1
	-
	block BlkBranch
	log

	// tests/contracts/avm11.algo.ts:34
	// log(blocks[globals.round - 1].feeSink)
	global Round
	int 1
	-
	block BlkFeeSink
	log

	// tests/contracts/avm11.algo.ts:35
	// log(blocks[globals.round - 1].protocol)
	global Round
	int 1
	-
	block BlkProtocol
	log

	// tests/contracts/avm11.algo.ts:36
	// assert(blocks[globals.round - 1].txnCounter)
	global Round
	int 1
	-
	block BlkTxnCounter
	assert

	// tests/contracts/avm11.algo.ts:37
	// assert(blocks[globals.round - 1].proposerPayout)
	global Round
	int 1
	-
	block BlkProposerPayout
	assert
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	method "voterOpcodes()void"
	method "incentiveGlobals()void"
	method "onlineStakeOp()void"
	method "accountParams()void"
	method "blockParams()void"
	txna ApplicationArgs 0
	match *abi_route_voterOpcodes *abi_route_incentiveGlobals *abi_route_onlineStakeOp *abi_route_accountParams *abi_route_blockParams

	// this contract does not implement the given ABI method for call NoOp
	err
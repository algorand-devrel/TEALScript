#pragma version 9

// This TEAL was generated by TEALScript v0.67.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

abi_route_singleIf:
	// The ABI return prefix
	byte 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute singleIf(bool)string
	callsub singleIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// singleIf(bool)string
singleIf:
	proto 1 1

	// if0_condition
	// tests/contracts/if.algo.ts:7
	// arg0
	frame_dig -1 // arg0: boolean
	bz if0_end

	// if0_consequent
	// tests/contracts/if.algo.ts:8
	// return 'if';
	byte 0x6966 // "if"
	retsub

if0_end:
	// tests/contracts/if.algo.ts:11
	// return 'end';
	byte 0x656e64 // "end"
	retsub

abi_route_ifElse:
	// The ABI return prefix
	byte 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute ifElse(bool)string
	callsub ifElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// ifElse(bool)string
ifElse:
	proto 1 1

	// if1_condition
	// tests/contracts/if.algo.ts:15
	// arg0
	frame_dig -1 // arg0: boolean
	bz if1_else

	// if1_consequent
	// tests/contracts/if.algo.ts:16
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if1_end

if1_else:
	// tests/contracts/if.algo.ts:18
	// return 'else';
	byte 0x656c7365 // "else"
	retsub

if1_end:
	retsub

abi_route_ifElseIf:
	// The ABI return prefix
	byte 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute ifElseIf(bool,bool)string
	callsub ifElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// ifElseIf(bool,bool)string
ifElseIf:
	proto 2 1

	// if2_condition
	// tests/contracts/if.algo.ts:23
	// arg0
	frame_dig -1 // arg0: boolean
	bz if2_elseif1_condition

	// if2_consequent
	// tests/contracts/if.algo.ts:24
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if2_end

if2_elseif1_condition:
	// tests/contracts/if.algo.ts:25
	// arg1
	frame_dig -2 // arg1: boolean
	bz if2_end

	// if2_elseif1_consequent
	// tests/contracts/if.algo.ts:26
	// return 'else if';
	byte 0x656c7365206966 // "else if"
	retsub

if2_end:
	// tests/contracts/if.algo.ts:29
	// return 'end';
	byte 0x656e64 // "end"
	retsub

abi_route_ifElseIfElse:
	// The ABI return prefix
	byte 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute ifElseIfElse(bool,bool)string
	callsub ifElseIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// ifElseIfElse(bool,bool)string
ifElseIfElse:
	proto 2 1

	// if3_condition
	// tests/contracts/if.algo.ts:33
	// arg0
	frame_dig -1 // arg0: boolean
	bz if3_elseif1_condition

	// if3_consequent
	// tests/contracts/if.algo.ts:34
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if3_end

if3_elseif1_condition:
	// tests/contracts/if.algo.ts:35
	// arg1
	frame_dig -2 // arg1: boolean
	bz if3_else

	// if3_elseif1_consequent
	// tests/contracts/if.algo.ts:36
	// return 'else if';
	byte 0x656c7365206966 // "else if"
	retsub
	b if3_end

if3_else:
	// tests/contracts/if.algo.ts:38
	// return 'else';
	byte 0x656c7365 // "else"
	retsub

if3_end:
	retsub

abi_route_ifElseIfElseIf:
	// The ABI return prefix
	byte 0x151f7c75

	// arg2: bool
	txna ApplicationArgs 3
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute ifElseIfElseIf(bool,bool,bool)string
	callsub ifElseIfElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// ifElseIfElseIf(bool,bool,bool)string
ifElseIfElseIf:
	proto 3 1

	// if4_condition
	// tests/contracts/if.algo.ts:43
	// arg0
	frame_dig -1 // arg0: boolean
	bz if4_elseif1_condition

	// if4_consequent
	// tests/contracts/if.algo.ts:44
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if4_end

if4_elseif1_condition:
	// tests/contracts/if.algo.ts:45
	// arg1
	frame_dig -2 // arg1: boolean
	bz if4_elseif2_condition

	// if4_elseif1_consequent
	// tests/contracts/if.algo.ts:46
	// return 'else if 1';
	byte 0x656c73652069662031 // "else if 1"
	retsub
	b if4_end

if4_elseif2_condition:
	// tests/contracts/if.algo.ts:47
	// arg2
	frame_dig -3 // arg2: boolean
	bz if4_end

	// if4_elseif2_consequent
	// tests/contracts/if.algo.ts:48
	// return 'else if 2';
	byte 0x656c73652069662032 // "else if 2"
	retsub

if4_end:
	// tests/contracts/if.algo.ts:51
	// return 'end';
	byte 0x656e64 // "end"
	retsub

abi_route_ifElseIfElseIfElse:
	// The ABI return prefix
	byte 0x151f7c75

	// arg2: bool
	txna ApplicationArgs 3
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute ifElseIfElseIfElse(bool,bool,bool)string
	callsub ifElseIfElseIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// ifElseIfElseIfElse(bool,bool,bool)string
ifElseIfElseIfElse:
	proto 3 1

	// if5_condition
	// tests/contracts/if.algo.ts:55
	// arg0
	frame_dig -1 // arg0: boolean
	bz if5_elseif1_condition

	// if5_consequent
	// tests/contracts/if.algo.ts:56
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if5_end

if5_elseif1_condition:
	// tests/contracts/if.algo.ts:57
	// arg1
	frame_dig -2 // arg1: boolean
	bz if5_elseif2_condition

	// if5_elseif1_consequent
	// tests/contracts/if.algo.ts:58
	// return 'else if 1';
	byte 0x656c73652069662031 // "else if 1"
	retsub
	b if5_end

if5_elseif2_condition:
	// tests/contracts/if.algo.ts:59
	// arg2
	frame_dig -3 // arg2: boolean
	bz if5_else

	// if5_elseif2_consequent
	// tests/contracts/if.algo.ts:60
	// return 'else if 2';
	byte 0x656c73652069662032 // "else if 2"
	retsub
	b if5_end

if5_else:
	// tests/contracts/if.algo.ts:62
	// return 'else';
	byte 0x656c7365 // "else"
	retsub

if5_end:
	retsub

abi_route_nestedIf:
	// The ABI return prefix
	byte 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute nestedIf(bool,bool)string
	callsub nestedIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// nestedIf(bool,bool)string
nestedIf:
	proto 2 1

	// if6_condition
	// tests/contracts/if.algo.ts:67
	// arg0
	frame_dig -1 // arg0: boolean
	bz if6_else

	// if6_consequent
	// if7_condition
	// tests/contracts/if.algo.ts:68
	// arg1
	frame_dig -2 // arg1: boolean
	bz if7_end

	// if7_consequent
	// tests/contracts/if.algo.ts:69
	// return 'nested if';
	byte 0x6e6573746564206966 // "nested if"
	retsub

if7_end:
	// tests/contracts/if.algo.ts:71
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if6_end

if6_else:
	// tests/contracts/if.algo.ts:73
	// return 'else';
	byte 0x656c7365 // "else"
	retsub

if6_end:
	retsub

abi_route_bracketlessIfElse:
	// The ABI return prefix
	byte 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute bracketlessIfElse(bool)string
	callsub bracketlessIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// bracketlessIfElse(bool)string
bracketlessIfElse:
	proto 1 1

	// if8_condition
	// tests/contracts/if.algo.ts:78
	// arg0
	frame_dig -1 // arg0: boolean
	bz if8_else

	// if8_consequent
	// tests/contracts/if.algo.ts:78
	// return 'if';
	byte 0x6966 // "if"
	retsub
	b if8_end

if8_else:
	// tests/contracts/if.algo.ts:79
	// return 'else';
	byte 0x656c7365 // "else"
	retsub

if8_end:
	retsub

abi_route_nestedTernary:
	// The ABI return prefix
	byte 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute nestedTernary(bool,bool)uint64
	callsub nestedTernary
	itob
	concat
	log
	int 1
	return

// nestedTernary(bool,bool)uint64
nestedTernary:
	proto 2 1

	// tests/contracts/if.algo.ts:84
	// return arg0 ? 1 : arg1 ? 2 : 3;
	frame_dig -1 // arg0: boolean
	bz ternary0_false
	int 1
	b ternary0_end

ternary0_false:
	frame_dig -2 // arg1: boolean
	bz ternary1_false
	int 2
	b ternary1_end

ternary1_false:
	int 3

ternary1_end:

ternary0_end:
	retsub

abi_route_stringIf:
	// The ABI return prefix
	byte 0x151f7c75

	// arg0: string
	txna ApplicationArgs 1
	extract 2 0

	// execute stringIf(string)uint64
	callsub stringIf
	itob
	concat
	log
	int 1
	return

// stringIf(string)uint64
stringIf:
	proto 1 1

	// if9_condition
	// tests/contracts/if.algo.ts:88
	// arg0
	frame_dig -1 // arg0: string
	byte 0x
	b!=
	bz if9_end

	// if9_consequent
	// tests/contracts/if.algo.ts:89
	// return 1;
	int 1
	retsub

if9_end:
	// tests/contracts/if.algo.ts:92
	// return 2;
	int 2
	retsub

abi_route_stringTernary:
	// The ABI return prefix
	byte 0x151f7c75

	// arg0: string
	txna ApplicationArgs 1
	extract 2 0

	// execute stringTernary(string)uint64
	callsub stringTernary
	itob
	concat
	log
	int 1
	return

// stringTernary(string)uint64
stringTernary:
	proto 1 1

	// tests/contracts/if.algo.ts:96
	// return arg0 ? 1 : 2;
	frame_dig -1 // arg0: string
	byte 0x
	b!=
	bz ternary2_false
	int 1
	b ternary2_end

ternary2_false:
	int 2

ternary2_end:
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "singleIf(bool)string"
	method "ifElse(bool)string"
	method "ifElseIf(bool,bool)string"
	method "ifElseIfElse(bool,bool)string"
	method "ifElseIfElseIf(bool,bool,bool)string"
	method "ifElseIfElseIfElse(bool,bool,bool)string"
	method "nestedIf(bool,bool)string"
	method "bracketlessIfElse(bool)string"
	method "nestedTernary(bool,bool)uint64"
	method "stringIf(string)uint64"
	method "stringTernary(string)uint64"
	txna ApplicationArgs 0
	match abi_route_singleIf abi_route_ifElse abi_route_ifElseIf abi_route_ifElseIfElse abi_route_ifElseIfElseIf abi_route_ifElseIfElseIfElse abi_route_nestedIf abi_route_bracketlessIfElse abi_route_nestedTernary abi_route_stringIf abi_route_stringTernary
	err
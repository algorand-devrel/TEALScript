#pragma version 10

// This TEAL was generated by TEALScript v0.78.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// maxPools()void
abi_route_maxPools:
	// execute maxPools()void
	callsub maxPools
	int 1
	return

// maxPools(): void
maxPools:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/abi.algo.ts:1300
	// uint16Var: uint16 = 256
	int 256
	frame_bury 0 // uint16Var: uint16

	// tests/contracts/abi.algo.ts:1301
	// assert(uint16Var === UINT16_CONST)
	int 256 // uint16Var: uint16
	int 256
	==
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "maxPools()void"
	txna ApplicationArgs 0
	match abi_route_maxPools
	err
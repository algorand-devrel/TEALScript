#pragma version 9

// This TEAL was generated by TEALScript v0.52.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

setArrayValue:
	proto 2 2

	// tests/contracts/abi.algo.ts:1069
	// a[1] = 5
	frame_dig -1 // a: uint64[]
	store 0 // full array
	load 0 // full array
	int 8
	byte 0x0000000000000005
	replace3
	frame_bury -1 // a: uint64[]

	// tests/contracts/abi.algo.ts:1072
	// b[1] = 6
	frame_dig -2 // b: uint64[]
	store 0 // full array
	load 0 // full array
	int 8
	byte 0x0000000000000006
	replace3
	frame_bury -2 // b: uint64[]
	frame_dig -2 // b
	frame_dig -1 // a
	retsub

// arrayArgRef()(uint64[],uint64[])
abi_route_arrayArgRef:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute arrayArgRef()(uint64[],uint64[])
	callsub arrayArgRef
	int 1
	return

arrayArgRef:
	proto 1 0

	// tests/contracts/abi.algo.ts:1076
	// a: uint64[] = [1, 2]
	byte 0x00000000000000010000000000000002
	frame_bury -1 // a: uint64[]

	// tests/contracts/abi.algo.ts:1077
	// this.storageArray.value = [3, 4]
	byte 0x73746f726167654172726179 // "storageArray"
	byte 0x000200000000000000030000000000000004
	app_global_put

	// tests/contracts/abi.algo.ts:1079
	// this.setArrayValue(a, this.storageArray.value)
	byte 0x73746f726167654172726179 // "storageArray"
	app_global_get
	extract 2 0
	frame_dig -1 // a: uint64[]
	callsub setArrayValue
	frame_bury -1 // a: uint64[]
	byte 0x73746f726167654172726179 // "storageArray"
	swap
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	app_global_put

	// tests/contracts/abi.algo.ts:1080
	// return [a, this.storageArray.value];
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0004 // initial head offset
	frame_dig -1 // a: uint64[]
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	byte 0x73746f726167654172726179 // "storageArray"
	app_global_get
	extract 2 0
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "arrayArgRef()(uint64[],uint64[])"
	txna ApplicationArgs 0
	match abi_route_arrayArgRef
	err

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub
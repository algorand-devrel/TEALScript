#pragma version 10

// This TEAL was generated by TEALScript v0.90.4
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// arrayInTuple()uint64
*abi_route_arrayInTuple:
	// The ABI return prefix
	byte 0x151f7c75

	// execute arrayInTuple()uint64
	callsub arrayInTuple
	itob
	concat
	log
	int 1
	return

// arrayInTuple(): uint64
arrayInTuple:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/abi.algo.ts:265
	// a: [uint64, uint16, StaticArray<uint64, 2>, uint16] = [11, 22, [33, 44], 55]
	byte 0x000000000000000b00160000000000000021000000000000002c0037
	frame_bury 0 // a: [uint64, uint16, StaticArray<uint64, 2>, uint16]

	// tests/contracts/abi.algo.ts:267
	// return a[2][1];
	frame_dig 0 // a: [uint64, uint16, StaticArray<uint64, 2>, uint16]
	extract 18 8
	btoi

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "arrayInTuple()uint64"
	txna ApplicationArgs 0
	match *abi_route_arrayInTuple
	err
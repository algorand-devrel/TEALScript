{
  "name": "StorageTest",
  "desc": "",
  "methods": [
    {
      "name": "prefix",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalKeyPut",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalKeyGet",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalKeyDelete",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalKeyExists",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localKeyPut",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localKeyGet",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localKeyDelete",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localKeyExists",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyPut",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyGet",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyDelete",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyExists",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalMapPut",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalMapGet",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalMapDelete",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "globalMapExists",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localMapPut",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localMapGet",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localMapDelete",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "localMapExists",
      "args": [
        {
          "name": "a",
          "type": "address"
        }
      ],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapPut",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapGet",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapDelete",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapExists",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyCreate",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapCreate",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyLength",
      "args": [],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapLength",
      "args": [],
      "returns": {
        "type": "uint64"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyReplace",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapReplace",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxKeyExtract",
      "args": [],
      "returns": {
        "type": "string"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxMapExtract",
      "args": [],
      "returns": {
        "type": "string"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "isOptedIn",
      "args": [],
      "returns": {
        "type": "bool"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "exGlobal",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "exLocal",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "accessStaticValueInLargeBox",
      "args": [],
      "returns": {
        "type": "uint16"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "dynamicAccessStaticValueInLargeBox",
      "args": [
        {
          "name": "i",
          "type": "uint64"
        }
      ],
      "returns": {
        "type": "uint16"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxResize",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "boxSplice",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "exStateExists",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "createApplication",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [
          "NoOp"
        ],
        "call": []
      }
    }
  ],
  "arcs": [
    4,
    56
  ],
  "structs": {},
  "state": {
    "schema": {
      "global": {
        "bytes": 3,
        "ints": 0
      },
      "local": {
        "bytes": 3,
        "ints": 0
      }
    },
    "keys": {
      "global": {
        "globalKey": {
          "key": "Zm9v",
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        }
      },
      "local": {
        "localKey": {
          "key": "Zm9v",
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        }
      },
      "box": {
        "largeStaticArrayInBox": {
          "key": "bGFyZ2VTdGF0aWNBcnJheUluQm94",
          "keyType": "AVMBytes",
          "valueType": "uint16[4000]"
        },
        "boxKey": {
          "key": "Zm9v",
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        }
      }
    },
    "maps": {
      "global": {
        "globalMap": {
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        },
        "globalMapWithPrefix": {
          "keyType": "AVMBytes",
          "valueType": "AVMBytes",
          "prefix": "f"
        }
      },
      "local": {
        "localMap": {
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        },
        "localMapWithPrefix": {
          "keyType": "AVMBytes",
          "valueType": "AVMBytes",
          "prefix": "f"
        }
      },
      "box": {
        "boxMap": {
          "keyType": "AVMBytes",
          "valueType": "AVMBytes"
        },
        "boxMapWithPrefix": {
          "keyType": "AVMBytes",
          "valueType": "AVMBytes",
          "prefix": "f"
        }
      }
    }
  },
  "bareActions": {
    "create": [],
    "call": []
  },
  "sourceInfo": {
    "approval": {
      "sourceInfo": [
        {
          "pc": [
            86
          ],
          "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?"
        },
        {
          "pc": [
            225
          ],
          "errorMessage": "argument 0 (a) for localKeyPut must be a address"
        },
        {
          "pc": [
            257
          ],
          "errorMessage": "argument 0 (a) for localKeyGet must be a address"
        },
        {
          "pc": [
            291
          ],
          "errorMessage": "argument 0 (a) for localKeyDelete must be a address"
        },
        {
          "pc": [
            318
          ],
          "errorMessage": "argument 0 (a) for localKeyExists must be a address"
        },
        {
          "pc": [
            379
          ],
          "errorMessage": "box value does not exist: this.boxKey.value"
        },
        {
          "pc": [
            513
          ],
          "errorMessage": "argument 0 (a) for localMapPut must be a address"
        },
        {
          "pc": [
            545
          ],
          "errorMessage": "argument 0 (a) for localMapGet must be a address"
        },
        {
          "pc": [
            579
          ],
          "errorMessage": "argument 0 (a) for localMapDelete must be a address"
        },
        {
          "pc": [
            606
          ],
          "errorMessage": "argument 0 (a) for localMapExists must be a address"
        },
        {
          "pc": [
            667
          ],
          "errorMessage": "box value does not exist: this.boxMap('foo').value"
        },
        {
          "pc": [
            775
          ],
          "errorMessage": "box value does not exist: this.boxKey.size"
        },
        {
          "pc": [
            801
          ],
          "errorMessage": "box value does not exist: this.boxMap('bar').size"
        },
        {
          "pc": [
            971
          ],
          "errorMessage": "global state value does not exist: this.app.globalState('foo')"
        },
        {
          "pc": [
            994
          ],
          "errorMessage": "local state value does not exist: this.app.localState(this.txn.sender, 'foo')"
        },
        {
          "pc": [
            1012
          ],
          "errorMessage": "accessStaticValueInLargeBox return value overflowed 16 bits"
        },
        {
          "pc": [
            1133
          ],
          "errorMessage": "dynamicAccessStaticValueInLargeBox return value overflowed 16 bits"
        },
        {
          "pc": [
            1363
          ],
          "errorMessage": "this contract does not implement the given ABI method for create NoOp"
        },
        {
          "pc": [
            1697
          ],
          "errorMessage": "this contract does not implement the given ABI method for call NoOp"
        }
      ],
      "pcOffsetMethod": "none"
    },
    "clear": {
      "sourceInfo": [],
      "pcOffsetMethod": "none"
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "byteCode": {
    "approval": "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",
    "clear": "Cg=="
  },
  "compilerInfo": {
    "compiler": "algod",
    "compilerVersion": {
      "major": 3,
      "minor": 26,
      "patch": 0,
      "commitHash": "0d10b244"
    }
  }
}
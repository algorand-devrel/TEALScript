{
  "hints": {
    "txnTypeEnum()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "txnGroupLength()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "asserts(bool,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnFromArg(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnFromTxnGroup()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnCondition()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnIncludedIn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnNotIncludedIn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "submitPendingGroup()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "methodWithTxnArgs()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "shift()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fromBytes()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fromUint64()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bzeroFunction()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "events()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "letOptimization(uint64[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "staticContractProperties()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "numberToString()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "methodOnParens()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stringSubstring()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "idProperty()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "scratchSlot()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ecdsa()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnTypes()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stringPlusEquals()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "importedProgram()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "callPrivateDefinedLater()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "interalPublicMethod(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "callInternalPublicMethod()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "appLoadScratch()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "uintNWithUnderscore()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opUp()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "returnValueOnAssignment()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "returnArrayValueOnAssignment()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "returnStorageValueOnAssignment()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "returnOperatorAssignmentValue()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "returnArrayValueOnOperatorAssignment()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "returnArrayInStorageValueOnOperatorAssignment()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "consts()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assertWithMessage()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "opcodeAliases()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "vrfVerifyOp()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ecMath()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "gitxn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSetBytes()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "getSetUint64()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "blockOp()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "b64()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "json()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bitlenOp()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "computedConst()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "multiComputedConst()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "readSchema()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "comparisonOr()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "txnArgsMethod(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "callTxnArgsMethod()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "staticValueLen(uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "staticTypeLen()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "dynamicScratchSlot()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "incrementScratchSlot()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "incrementDynamicScratchSlot()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fromAddress()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "earlyReturn(uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetMethodArgs()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "multipleProgramPages()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assertComment()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "throwErrorMessage()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "gKey": {
          "type": "uint64",
          "key": "gKey"
        },
        "storageArray": {
          "type": "bytes",
          "key": "storageArray"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "GeneralTest",
    "desc": "",
    "methods": [
      {
        "name": "txnTypeEnum",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "txnGroupLength",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "asserts",
        "args": [
          {
            "name": "arg1",
            "type": "bool"
          },
          {
            "name": "arg2",
            "type": "bool"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyTxnFromArg",
        "args": [
          {
            "name": "somePay",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyTxnFromTxnGroup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyTxnCondition",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyTxnIncludedIn",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyTxnNotIncludedIn",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "submitPendingGroup",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "methodWithTxnArgs",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "shift",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fromBytes",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fromUint64",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bzeroFunction",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "events",
        "args": [],
        "returns": {
          "type": "void"
        },
        "events": [
          {
            "name": "myEvent",
            "args": [
              {
                "name": "app",
                "type": "uint64",
                "desc": "Some app"
              },
              {
                "name": "num",
                "type": "uint64",
                "desc": "Some number"
              }
            ],
            "desc": "This is my event\nIt has some args"
          }
        ]
      },
      {
        "name": "letOptimization",
        "args": [
          {
            "name": "a",
            "type": "uint64[]"
          }
        ],
        "returns": {
          "type": "uint64[]"
        }
      },
      {
        "name": "staticContractProperties",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "numberToString",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "methodOnParens",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stringSubstring",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "idProperty",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "scratchSlot",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "ecdsa",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "verifyTxnTypes",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "stringPlusEquals",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "importedProgram",
        "args": [],
        "returns": {
          "type": "byte[]"
        }
      },
      {
        "name": "callPrivateDefinedLater",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "interalPublicMethod",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "callInternalPublicMethod",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "appLoadScratch",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "uintNWithUnderscore",
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "opUp",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "returnValueOnAssignment",
        "args": [],
        "returns": {
          "type": "string"
        }
      },
      {
        "name": "returnArrayValueOnAssignment",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "returnStorageValueOnAssignment",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "returnOperatorAssignmentValue",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "returnArrayValueOnOperatorAssignment",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "returnArrayInStorageValueOnOperatorAssignment",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "consts",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assertWithMessage",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "opcodeAliases",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "vrfVerifyOp",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "ecMath",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "gitxn",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getSetBytes",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "getSetUint64",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "blockOp",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "b64",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "json",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bitlenOp",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "computedConst",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "multiComputedConst",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "readSchema",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "comparisonOr",
        "args": [],
        "returns": {
          "type": "bool"
        }
      },
      {
        "name": "txnArgsMethod",
        "args": [
          {
            "name": "_pay1",
            "type": "pay"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "callTxnArgsMethod",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "staticValueLen",
        "args": [
          {
            "name": "x",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "staticTypeLen",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "dynamicScratchSlot",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "incrementScratchSlot",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "incrementDynamicScratchSlot",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "fromAddress",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "earlyReturn",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "assetMethodArgs",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "multipleProgramPages",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assertComment",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "throwErrorMessage",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "events": [
      {
        "name": "myEvent",
        "args": [
          {
            "name": "app",
            "type": "uint64",
            "desc": "Some app"
          },
          {
            "name": "num",
            "type": "uint64",
            "desc": "Some number"
          }
        ],
        "desc": "This is my event\nIt has some args"
      }
    ]
  }
}
{
  "hints": {
    "txnTypeEnum()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "txnGroupLength()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "asserts(bool,bool)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnFromArg(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnFromTxnGroup()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnCondition()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnIncludedIn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnNotIncludedIn()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "submitPendingGroup()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "methodWithTxnArgs()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "shift()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fromBytes()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "fromID()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bzeroFunction()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "events()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "letOptimization(uint64[])uint64[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "staticContractProperties()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "numberToString()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "methodOnParens()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stringSubstring()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "idProperty()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "scratchSlot()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ecdsa()(uint256,uint256)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "verifyTxnTypes()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "stringPlusEquals()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "importedProgram()byte[]": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "callPrivateDefinedLater()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "GeneralTest",
    "desc": "",
    "methods": [
      {
        "name": "txnTypeEnum",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "txnGroupLength",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "asserts",
        "args": [
          {
            "name": "arg1",
            "type": "bool",
            "desc": ""
          },
          {
            "name": "arg2",
            "type": "bool",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifyTxnFromArg",
        "args": [
          {
            "name": "somePay",
            "type": "pay",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifyTxnFromTxnGroup",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifyTxnCondition",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifyTxnIncludedIn",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "verifyTxnNotIncludedIn",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "submitPendingGroup",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "methodWithTxnArgs",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "shift",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "fromBytes",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "fromID",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "bzeroFunction",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "events",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "letOptimization",
        "args": [
          {
            "name": "a",
            "type": "uint64[]",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "uint64[]",
          "desc": ""
        }
      },
      {
        "name": "staticContractProperties",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "numberToString",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "methodOnParens",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "stringSubstring",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "idProperty",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "scratchSlot",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "ecdsa",
        "args": [],
        "desc": "",
        "returns": {
          "type": "(uint256,uint256)",
          "desc": ""
        }
      },
      {
        "name": "verifyTxnTypes",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "stringPlusEquals",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "importedProgram",
        "args": [],
        "desc": "",
        "returns": {
          "type": "byte[]",
          "desc": ""
        }
      },
      {
        "name": "callPrivateDefinedLater",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}
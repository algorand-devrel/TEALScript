{
  "name": "ARC56Test",
  "desc": "",
  "methods": [
    {
      "name": "foo",
      "args": [
        {
          "name": "inputs",
          "type": "((uint64,uint64),(uint64,uint64))",
          "struct": "Inputs"
        }
      ],
      "returns": {
        "type": "(uint64,uint64)",
        "struct": "Outputs"
      },
      "actions": {
        "create": [],
        "call": [
          "NoOp"
        ]
      }
    },
    {
      "name": "optInToApplication",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [],
        "call": [
          "OptIn"
        ]
      }
    },
    {
      "name": "createApplication",
      "args": [],
      "returns": {
        "type": "void"
      },
      "actions": {
        "create": [
          "NoOp"
        ],
        "call": []
      }
    }
  ],
  "arcs": [
    4,
    56
  ],
  "structs": {
    "{ foo: uint16; bar: uint16 }": [
      {
        "name": "foo",
        "type": "uint16"
      },
      {
        "name": "bar",
        "type": "uint16"
      }
    ],
    "Outputs": [
      {
        "name": "sum",
        "type": "uint64"
      },
      {
        "name": "difference",
        "type": "uint64"
      }
    ],
    "Inputs": [
      {
        "name": "add",
        "type": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ]
      },
      {
        "name": "subtract",
        "type": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ]
      }
    ]
  },
  "state": {
    "schema": {
      "global": {
        "bytes": 37,
        "ints": 1
      },
      "local": {
        "bytes": 13,
        "ints": 1
      }
    },
    "keys": {
      "global": {
        "globalKey": {
          "key": "Z2xvYmFsS2V5",
          "keyType": "bytes",
          "valueType": "uint64"
        }
      },
      "local": {
        "localKey": {
          "key": "bG9jYWxLZXk=",
          "keyType": "bytes",
          "valueType": "uint64"
        }
      },
      "box": {
        "boxKey": {
          "key": "Ym94S2V5",
          "keyType": "bytes",
          "valueType": "string"
        }
      }
    },
    "maps": {
      "global": {
        "globalMap": {
          "keyType": "string",
          "valueType": "{ foo: uint16; bar: uint16 }",
          "prefix": "p"
        }
      },
      "local": {
        "localMap": {
          "keyType": "bytes",
          "valueType": "string",
          "prefix": "p"
        }
      },
      "box": {
        "boxMap": {
          "keyType": "Inputs",
          "valueType": "Outputs",
          "prefix": "p"
        }
      }
    }
  },
  "bareActions": {
    "create": [],
    "call": []
  },
  "sourceInfo": {
    "approval": [
      {
        "teal": 1,
        "source": 6,
        "disassembledTeal": 0
      },
      {
        "teal": 2,
        "source": 6,
        "disassembledTeal": 1
      },
      {
        "teal": 3,
        "source": 6,
        "disassembledTeal": 2
      },
      {
        "teal": 11,
        "source": 6,
        "disassembledTeal": 3
      },
      {
        "teal": 18,
        "source": 6,
        "disassembledTeal": 4
      },
      {
        "teal": 19,
        "source": 6,
        "disassembledTeal": 5
      },
      {
        "teal": 20,
        "source": 6,
        "disassembledTeal": 6
      },
      {
        "teal": 21,
        "source": 6,
        "disassembledTeal": 7
      },
      {
        "teal": 22,
        "source": 6,
        "disassembledTeal": 8
      },
      {
        "teal": 23,
        "source": 6,
        "disassembledTeal": 9
      },
      {
        "teal": 24,
        "source": 6,
        "disassembledTeal": 10
      },
      {
        "teal": 28,
        "source": 6,
        "errorMessage": "The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?",
        "disassembledTeal": 12
      },
      {
        "teal": 33,
        "source": 23,
        "disassembledTeal": 14
      },
      {
        "teal": 36,
        "source": 23,
        "disassembledTeal": 15
      },
      {
        "teal": 37,
        "source": 23,
        "disassembledTeal": 16
      },
      {
        "teal": 38,
        "source": 23,
        "disassembledTeal": 17
      },
      {
        "teal": 39,
        "source": 23,
        "disassembledTeal": 18
      },
      {
        "teal": 40,
        "source": 23,
        "disassembledTeal": 19
      },
      {
        "teal": 43,
        "source": 23,
        "errorMessage": "argument 0 (inputs) for foo must be a ((uint64,uint64),(uint64,uint64))",
        "disassembledTeal": 20
      },
      {
        "teal": 46,
        "source": 23,
        "disassembledTeal": 21
      },
      {
        "teal": 47,
        "source": 23,
        "disassembledTeal": 22
      },
      {
        "teal": 48,
        "source": 23,
        "disassembledTeal": 23
      },
      {
        "teal": 49,
        "source": 23,
        "disassembledTeal": 24
      },
      {
        "teal": 50,
        "source": 23,
        "disassembledTeal": 25
      },
      {
        "teal": 54,
        "source": 23,
        "disassembledTeal": 27
      },
      {
        "teal": 59,
        "source": 24,
        "disassembledTeal": 28
      },
      {
        "teal": 60,
        "source": 24,
        "disassembledTeal": 29
      },
      {
        "teal": 61,
        "source": 24,
        "disassembledTeal": 30
      },
      {
        "teal": 62,
        "source": 24,
        "disassembledTeal": 31
      },
      {
        "teal": 63,
        "source": 24,
        "disassembledTeal": 32
      },
      {
        "teal": 64,
        "source": 24,
        "disassembledTeal": 33
      },
      {
        "teal": 65,
        "source": 24,
        "disassembledTeal": 34
      },
      {
        "teal": 66,
        "source": 24,
        "disassembledTeal": 35
      },
      {
        "teal": 70,
        "source": 24,
        "errorMessage": "subtract.a must be greater than subtract.b",
        "disassembledTeal": 36
      },
      {
        "teal": 75,
        "source": 26,
        "disassembledTeal": 38
      },
      {
        "teal": 76,
        "source": 26,
        "disassembledTeal": 39
      },
      {
        "teal": 77,
        "source": 26,
        "disassembledTeal": 40
      },
      {
        "teal": 81,
        "source": 27,
        "disassembledTeal": 41
      },
      {
        "teal": 82,
        "source": 27,
        "disassembledTeal": 42
      },
      {
        "teal": 83,
        "source": 27,
        "disassembledTeal": 43
      },
      {
        "teal": 90,
        "source": 30,
        "disassembledTeal": 44
      },
      {
        "teal": 91,
        "source": 30,
        "disassembledTeal": 45
      },
      {
        "teal": 92,
        "source": 30,
        "disassembledTeal": 46
      },
      {
        "teal": 93,
        "source": 30,
        "disassembledTeal": 47
      },
      {
        "teal": 94,
        "source": 30,
        "disassembledTeal": 48
      },
      {
        "teal": 95,
        "source": 30,
        "disassembledTeal": 49
      },
      {
        "teal": 96,
        "source": 30,
        "disassembledTeal": 50
      },
      {
        "teal": 97,
        "source": 30,
        "disassembledTeal": 51
      },
      {
        "teal": 98,
        "source": 31,
        "disassembledTeal": 52
      },
      {
        "teal": 99,
        "source": 31,
        "disassembledTeal": 53
      },
      {
        "teal": 100,
        "source": 31,
        "disassembledTeal": 54
      },
      {
        "teal": 101,
        "source": 31,
        "disassembledTeal": 55
      },
      {
        "teal": 102,
        "source": 31,
        "disassembledTeal": 56
      },
      {
        "teal": 103,
        "source": 31,
        "disassembledTeal": 57
      },
      {
        "teal": 104,
        "source": 31,
        "disassembledTeal": 58
      },
      {
        "teal": 105,
        "source": 31,
        "disassembledTeal": 59
      },
      {
        "teal": 106,
        "source": 31,
        "disassembledTeal": 60
      },
      {
        "teal": 107,
        "source": 23,
        "disassembledTeal": 61
      },
      {
        "teal": 112,
        "source": 35,
        "disassembledTeal": 63
      },
      {
        "teal": 113,
        "source": 35,
        "disassembledTeal": 64
      },
      {
        "teal": 114,
        "source": 35,
        "disassembledTeal": 65
      },
      {
        "teal": 118,
        "source": 35,
        "disassembledTeal": 67
      },
      {
        "teal": 122,
        "source": 36,
        "disassembledTeal": 68
      },
      {
        "teal": 123,
        "source": 36,
        "disassembledTeal": 69
      },
      {
        "teal": 124,
        "source": 36,
        "disassembledTeal": 70
      },
      {
        "teal": 125,
        "source": 36,
        "disassembledTeal": 71
      },
      {
        "teal": 129,
        "source": 37,
        "disassembledTeal": 72
      },
      {
        "teal": 130,
        "source": 37,
        "disassembledTeal": 73
      },
      {
        "teal": 131,
        "source": 37,
        "disassembledTeal": 74
      },
      {
        "teal": 132,
        "source": 37,
        "disassembledTeal": 75
      },
      {
        "teal": 136,
        "source": 38,
        "disassembledTeal": 76
      },
      {
        "teal": 137,
        "source": 38,
        "disassembledTeal": 77
      },
      {
        "teal": 138,
        "source": 38,
        "disassembledTeal": 78
      },
      {
        "teal": 139,
        "source": 38,
        "disassembledTeal": 79
      },
      {
        "teal": 140,
        "source": 38,
        "disassembledTeal": 80
      },
      {
        "teal": 141,
        "source": 38,
        "disassembledTeal": 81
      },
      {
        "teal": 145,
        "source": 39,
        "disassembledTeal": 82
      },
      {
        "teal": 146,
        "source": 39,
        "disassembledTeal": 83
      },
      {
        "teal": 147,
        "source": 39,
        "disassembledTeal": 84
      },
      {
        "teal": 148,
        "source": 35,
        "disassembledTeal": 85
      },
      {
        "teal": 151,
        "source": 6,
        "disassembledTeal": 87
      },
      {
        "teal": 152,
        "source": 6,
        "disassembledTeal": 88
      },
      {
        "teal": 155,
        "source": 6,
        "disassembledTeal": 90
      },
      {
        "teal": 156,
        "source": 6,
        "disassembledTeal": 91
      },
      {
        "teal": 157,
        "source": 6,
        "disassembledTeal": 92
      },
      {
        "teal": 160,
        "source": 6,
        "errorMessage": "this contract does not implement the given ABI method for create NoOp",
        "disassembledTeal": 93
      },
      {
        "teal": 163,
        "source": 6,
        "disassembledTeal": 95
      },
      {
        "teal": 164,
        "source": 6,
        "disassembledTeal": 96
      },
      {
        "teal": 165,
        "source": 6,
        "disassembledTeal": 97
      },
      {
        "teal": 168,
        "source": 6,
        "errorMessage": "this contract does not implement the given ABI method for call NoOp",
        "disassembledTeal": 98
      },
      {
        "teal": 171,
        "source": 6,
        "disassembledTeal": 100
      },
      {
        "teal": 172,
        "source": 6,
        "disassembledTeal": 101
      },
      {
        "teal": 173,
        "source": 6,
        "disassembledTeal": 102
      },
      {
        "teal": 176,
        "source": 6,
        "errorMessage": "this contract does not implement the given ABI method for call OptIn",
        "disassembledTeal": 103
      }
    ],
    "clear": []
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayBUTVBMX3NvbWVOdW1iZXIgMSA2IDMyCmJ5dGVjYmxvY2sgMHg3MDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDMgMHgwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMSAweDYyNmY3ODRiNjU3OSAweDY3NmM2ZjYyNjE2YzRiNjU3OSAweDZjNmY2MzYxNmM0YjY1NzkgMHg3MDAwMDM2NjZmNmYgMHgwMDAzNjI2MTcyIDB4MDAwMzYyNjE3YSAweDE1MWY3Yzc1IDB4MDAwZDAwMjUgMHg3MDY2NmY2ZiAweGI4NDQ3YjM2IDB4Mzk2ZDU1MGUgMHgwMWEzYTNmZgoKLy8gVGhpcyBURUFMIHdhcyBnZW5lcmF0ZWQgYnkgVEVBTFNjcmlwdCB2MC4xMDIuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyBsaW5lcyBvZiBURUFMIGFyZSB1c2VkIHRvIGluaXRpYWxpemUgdGVtcGxhdGUgdmFyaWFibGVzIGluIHNjcmF0Y2ggc2xvdHMKaW50YyAwIC8vIFRNUExfc29tZU51bWJlcgoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKmNhbGxfT3B0SW4gKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGZvbygoKHVpbnQ2NCx1aW50NjQpLCh1aW50NjQsdWludDY0KSkpKHVpbnQ2NCx1aW50NjQpCiphYmlfcm91dGVfZm9vOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBpbnB1dHM6ICgodWludDY0LHVpbnQ2NCksKHVpbnQ2NCx1aW50NjQpKQoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludCAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChpbnB1dHMpIGZvciBmb28gbXVzdCBiZSBhICgodWludDY0LHVpbnQ2NCksKHVpbnQ2NCx1aW50NjQpKQoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBmb28oKCh1aW50NjQsdWludDY0KSwodWludDY0LHVpbnQ2NCkpKSh1aW50NjQsdWludDY0KQoJY2FsbHN1YiBmb28KCWNvbmNhdAoJbG9nCglpbnQgMQoJcmV0dXJuCgovLyBmb28oaW5wdXRzOiBJbnB1dHMpOiBPdXRwdXRzCmZvbzoKCXByb3RvIDEgMQoKCS8vICppZjBfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvYXJjNTYuYWxnby50czoyNAoJLy8gaW5wdXRzLnN1YnRyYWN0LmEgPCBpbnB1dHMuc3VidHJhY3QuYgoJZnJhbWVfZGlnIC0xIC8vIGlucHV0czogSW5wdXRzCglleHRyYWN0IDE2IDgKCWJ0b2kKCWZyYW1lX2RpZyAtMSAvLyBpbnB1dHM6IElucHV0cwoJZXh0cmFjdCAyNCA4CglidG9pCgk8CglieiAqaWYwX2VuZAoKCS8vICppZjBfY29uc2VxdWVudAoJLy8gc3VidHJhY3QuYSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBzdWJ0cmFjdC5iCgllcnIKCippZjBfZW5kOgoJLy8gdGVzdHMvY29udHJhY3RzL2FyYzU2LmFsZ28udHM6MjYKCS8vIHRoaXMuZ2xvYmFsS2V5LnZhbHVlID0gdGhpcy5zb21lTnVtYmVyCglieXRlIDB4Njc2YzZmNjI2MTZjNGI2NTc5IC8vICJnbG9iYWxLZXkiCglpbnRjIDAgLy8gVE1QTF9zb21lTnVtYmVyCglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hcmM1Ni5hbGdvLnRzOjI3CgkvLyB0aGlzLmdsb2JhbE1hcCgnZm9vJykudmFsdWUgPSB7IGZvbzogMTMsIGJhcjogMzcgfQoJYnl0ZSAweDcwMDAwMzY2NmY2ZgoJYnl0ZSAweDAwMGQwMDI1CglhcHBfZ2xvYmFsX3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hcmM1Ni5hbGdvLnRzOjI5CgkvLyByZXR1cm4gewoJLy8gICAgICAgc3VtOiBpbnB1dHMuYWRkLmEgKyBpbnB1dHMuYWRkLmIsCgkvLyAgICAgICBkaWZmZXJlbmNlOiBpbnB1dHMuc3VidHJhY3QuYSAtIGlucHV0cy5zdWJ0cmFjdC5iLAoJLy8gICAgIH07CglmcmFtZV9kaWcgLTEgLy8gaW5wdXRzOiBJbnB1dHMKCWV4dHJhY3QgMCA4CglidG9pCglmcmFtZV9kaWcgLTEgLy8gaW5wdXRzOiBJbnB1dHMKCWV4dHJhY3QgOCA4CglidG9pCgkrCglpdG9iCglmcmFtZV9kaWcgLTEgLy8gaW5wdXRzOiBJbnB1dHMKCWV4dHJhY3QgMTYgOAoJYnRvaQoJZnJhbWVfZGlnIC0xIC8vIGlucHV0czogSW5wdXRzCglleHRyYWN0IDI0IDgKCWJ0b2kKCS0KCWl0b2IKCWNvbmNhdAoJcmV0c3ViCgovLyBvcHRJblRvQXBwbGljYXRpb24oKXZvaWQKKmFiaV9yb3V0ZV9vcHRJblRvQXBwbGljYXRpb246CgkvLyBleGVjdXRlIG9wdEluVG9BcHBsaWNhdGlvbigpdm9pZAoJY2FsbHN1YiBvcHRJblRvQXBwbGljYXRpb24KCWludCAxCglyZXR1cm4KCi8vIG9wdEluVG9BcHBsaWNhdGlvbigpOiB2b2lkCm9wdEluVG9BcHBsaWNhdGlvbjoKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hcmM1Ni5hbGdvLnRzOjM2CgkvLyB0aGlzLmxvY2FsS2V5KHRoaXMudHhuLnNlbmRlcikudmFsdWUgPSB0aGlzLnNvbWVOdW1iZXIKCXR4biBTZW5kZXIKCWJ5dGUgMHg2YzZmNjM2MTZjNGI2NTc5IC8vICJsb2NhbEtleSIKCWludGMgMCAvLyBUTVBMX3NvbWVOdW1iZXIKCWFwcF9sb2NhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvYXJjNTYuYWxnby50czozNwoJLy8gdGhpcy5sb2NhbE1hcCh0aGlzLnR4bi5zZW5kZXIsICdmb28nKS52YWx1ZSA9ICdiYXInCgl0eG4gU2VuZGVyCglieXRlIDB4NzA2NjZmNmYKCWJ5dGUgMHgwMDAzNjI2MTcyCglhcHBfbG9jYWxfcHV0CgoJLy8gdGVzdHMvY29udHJhY3RzL2FyYzU2LmFsZ28udHM6MzgKCS8vIHRoaXMuYm94S2V5LnZhbHVlID0gJ2JheicKCWJ5dGUgMHg2MjZmNzg0YjY1NzkgLy8gImJveEtleSIKCWR1cAoJYm94X2RlbAoJcG9wCglieXRlIDB4MDAwMzYyNjE3YQoJYm94X3B1dAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9hcmM1Ni5hbGdvLnRzOjM5CgkvLyB0aGlzLmJveE1hcCh7IGFkZDogeyBhOiAxLCBiOiAyIH0sIHN1YnRyYWN0OiB7IGE6IDQsIGI6IDMgfSB9KS52YWx1ZSA9IHsgc3VtOiAzLCBkaWZmZXJlbmNlOiAxIH0KCWJ5dGUgMHg3MDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAwMDAwMDAyMDAwMDAwMDAwMDAwMDAwNDAwMDAwMDAwMDAwMDAwMDMKCWJ5dGUgMHgwMDAwMDAwMDAwMDAwMDAzMDAwMDAwMDAwMDAwMDAwMQoJYm94X3B1dAoJcmV0c3ViCgoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50IDEKCXJldHVybgoKKmNyZWF0ZV9Ob09wOgoJYnl0ZSAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglieXRlIDB4Mzk2ZDU1MGUgLy8gbWV0aG9kICJmb28oKCh1aW50NjQsdWludDY0KSwodWludDY0LHVpbnQ2NCkpKSh1aW50NjQsdWludDY0KSIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfZm9vCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJyCgoqY2FsbF9PcHRJbjoKCWJ5dGUgMHgwMWEzYTNmZiAvLyBtZXRob2QgIm9wdEluVG9BcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfb3B0SW5Ub0FwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgT3B0SW4KCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "templateVariables": {
    "someNumber": {
      "type": "uint64"
    }
  },
  "scratchVariables": {
    "someNumber": {
      "type": "uint64",
      "slot": 200
    },
    "someScratch": {
      "type": "string",
      "slot": 77
    }
  },
  "compilerInfo": {
    "compiler": "algod",
    "compilerVersion": {
      "major": 3,
      "minor": 25,
      "patch": 0,
      "commitHash": "9855f57c"
    }
  }
}
#pragma version 9

// This TEAL was generated by TEALScript v0.68.3
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

abi_route_returnDynamicArrayFromTuple:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnDynamicArrayFromTuple()uint8[]
	callsub returnDynamicArrayFromTuple
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// returnDynamicArrayFromTuple()uint8[]
returnDynamicArrayFromTuple:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/abi.algo.ts:398
	// a: [uint<8>, uint16, uint<8>[], uint16[], uint<8>[]] = [1, 2, [3, 4], [5, 6], [7, 8]]
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0009 // initial head offset
	byte 0x01
	callsub process_static_tuple_element
	byte 0x0002
	callsub process_static_tuple_element
	byte 0x00020304
	callsub process_dynamic_tuple_element
	byte 0x000200050006
	callsub process_dynamic_tuple_element
	byte 0x00020708
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // a: [uint<8>, uint16, uint<8>[], uint16[], uint<8>[]]

	// tests/contracts/abi.algo.ts:400
	// return a[4];
	frame_dig 0 // a: [uint<8>, uint16, uint<8>[], uint16[], uint<8>[]]
	store 255 // full array
	int 7
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	int 1 // get type length
	* // multiply by type length
	int 2
	+ // add two for length
	extract3
	extract 2 0

	// set the subroutine return value
	frame_bury 0
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "returnDynamicArrayFromTuple()uint8[]"
	txna ApplicationArgs 0
	match abi_route_returnDynamicArrayFromTuple
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub
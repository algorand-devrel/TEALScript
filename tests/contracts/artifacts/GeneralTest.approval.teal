#pragma version 9

// This TEAL was generated by TEALScript v0.76.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

// txnTypeEnum()void
abi_route_txnTypeEnum:
	// execute txnTypeEnum()void
	callsub txnTypeEnum
	int 1
	return

// txnTypeEnum(): void
txnTypeEnum:
	proto 0 0

	// tests/contracts/general.algo.ts:37
	// assert(this.txnGroup[0].typeEnum === TransactionType.ApplicationCall)
	int 0
	gtxns TypeEnum
	int appl
	==
	assert
	retsub

// txnGroupLength()void
abi_route_txnGroupLength:
	// execute txnGroupLength()void
	callsub txnGroupLength
	int 1
	return

// txnGroupLength(): void
txnGroupLength:
	proto 0 0

	// tests/contracts/general.algo.ts:41
	// assert(this.txnGroup.length === 1)
	global GroupSize
	int 1
	==
	assert
	retsub

// asserts(bool,bool)void
abi_route_asserts:
	// arg2: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg1: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute asserts(bool,bool)void
	callsub asserts
	int 1
	return

// asserts(arg1: boolean, arg2: boolean): void
asserts:
	proto 2 0

	// tests/contracts/general.algo.ts:45
	// assert(arg1, arg2, arg1 === arg2)
	frame_dig -1 // arg1: boolean
	assert
	frame_dig -2 // arg2: boolean
	assert
	frame_dig -1 // arg1: boolean
	frame_dig -2 // arg2: boolean
	==
	assert
	retsub

// verifyTxnFromArg(pay)void
abi_route_verifyTxnFromArg:
	// somePay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute verifyTxnFromArg(pay)void
	callsub verifyTxnFromArg
	int 1
	return

// verifyTxnFromArg(somePay: PayTxn): void
verifyTxnFromArg:
	proto 1 0

	// tests/contracts/general.algo.ts:49
	// verifyTxn(somePay, { receiver: this.app.address, amount: 100_000 })
	// verify receiver
	frame_dig -1 // somePay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // somePay: PayTxn
	gtxns Amount
	int 100_000
	==
	assert
	retsub

// verifyTxnFromTxnGroup()void
abi_route_verifyTxnFromTxnGroup:
	// execute verifyTxnFromTxnGroup()void
	callsub verifyTxnFromTxnGroup
	int 1
	return

// verifyTxnFromTxnGroup(): void
verifyTxnFromTxnGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:53
	// verifyTxn(this.txnGroup[0], { sender: this.txn.sender })
	// verify sender
	int 0
	gtxns Sender
	txn Sender
	==
	assert
	retsub

// verifyTxnCondition()void
abi_route_verifyTxnCondition:
	// execute verifyTxnCondition()void
	callsub verifyTxnCondition
	int 1
	return

// verifyTxnCondition(): void
verifyTxnCondition:
	proto 0 0

	// tests/contracts/general.algo.ts:57
	// verifyTxn(this.txn, {
	//       applicationID: { greaterThan: 1 },
	//     })
	// verify applicationID
	txn ApplicationID
	int 1
	>
	assert
	retsub

// verifyTxnIncludedIn()void
abi_route_verifyTxnIncludedIn:
	// execute verifyTxnIncludedIn()void
	callsub verifyTxnIncludedIn
	int 1
	return

// verifyTxnIncludedIn(): void
verifyTxnIncludedIn:
	proto 0 0

	// tests/contracts/general.algo.ts:63
	// verifyTxn(this.txn, {
	//       sender: { includedIn: [this.txn.sender] },
	//     })
	// verify sender
	txn Sender
	txn Sender
	==
	assert
	retsub

// verifyTxnNotIncludedIn()void
abi_route_verifyTxnNotIncludedIn:
	// execute verifyTxnNotIncludedIn()void
	callsub verifyTxnNotIncludedIn
	int 1
	return

// verifyTxnNotIncludedIn(): void
verifyTxnNotIncludedIn:
	proto 0 0

	// tests/contracts/general.algo.ts:69
	// verifyTxn(this.txn, {
	//       sender: { notIncludedIn: [globals.zeroAddress] },
	//     })
	// verify sender
	txn Sender
	global ZeroAddress
	!=
	assert
	retsub

// submitPendingGroup()void
abi_route_submitPendingGroup:
	// execute submitPendingGroup()void
	callsub submitPendingGroup
	int 1
	return

// submitPendingGroup(): void
submitPendingGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:75
	// this.pendingGroup.addPayment({ amount: 100_000, receiver: this.app.address })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:75
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:75
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:76
	// this.pendingGroup.addAssetCreation({ configAssetTotal: 1 })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:76
	// configAssetTotal: 1
	int 1
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:77
	// this.pendingGroup.submit()
	itxn_submit
	retsub

// methodWithTxnArgs()void
abi_route_methodWithTxnArgs:
	// execute methodWithTxnArgs()void
	callsub methodWithTxnArgs
	int 1
	return

// methodWithTxnArgs(): void
methodWithTxnArgs:
	proto 0 0

	// tests/contracts/general.algo.ts:81
	// sendMethodCall<[InnerPayment, InnerMethodCall<[uint64], void>], void>({
	//       name: 'foo',
	//       methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: Application.fromID(1337),
	//           methodArgs: [1],
	//         },
	//       ],
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:84
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:84
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "bar(uint64)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:87
	// applicationID: Application.fromID(1337)
	int 1337
	itxn_field ApplicationID

	// tests/contracts/general.algo.ts:88
	// methodArgs: [1]
	byte 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "foo(pay,appl)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:83
	// methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: Application.fromID(1337),
	//           methodArgs: [1],
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// shift()void
abi_route_shift:
	// execute shift()void
	callsub shift
	int 1
	return

// shift(): void
shift:
	proto 0 0

	// tests/contracts/general.algo.ts:95
	// assert(1 << 2 === 4)
	int 1
	int 2
	shl
	int 4
	==
	assert

	// tests/contracts/general.algo.ts:96
	// assert(4 >> 1 === 2)
	int 4
	int 1
	shr
	int 2
	==
	assert
	retsub

// fromBytes()void
abi_route_fromBytes:
	// execute fromBytes()void
	callsub fromBytes
	int 1
	return

// fromBytes(): void
fromBytes:
	proto 0 0

	// tests/contracts/general.algo.ts:100
	// assert(Address.fromBytes('abc').minBalance)
	byte 0x616263 // "abc"
	acct_params_get AcctMinBalance
	pop
	assert
	retsub

// fromID()void
abi_route_fromID:
	// execute fromID()void
	callsub fromID
	int 1
	return

// fromID(): void
fromID:
	proto 0 0

	// tests/contracts/general.algo.ts:104
	// log(Application.fromID(123).creator)
	int 123
	app_params_get AppCreator
	pop
	log

	// tests/contracts/general.algo.ts:105
	// log(Asset.fromID(123).creator)
	int 123
	asset_params_get AssetCreator
	pop
	log
	retsub

// bzeroFunction()void
abi_route_bzeroFunction:
	// execute bzeroFunction()void
	callsub bzeroFunction
	int 1
	return

// bzeroFunction(): void
bzeroFunction:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 3

	// tests/contracts/general.algo.ts:110
	// x: bytes = bzero(2)
	int 2
	bzero
	frame_bury 0 // x: bytes

	// tests/contracts/general.algo.ts:111
	// y: bytes = bzero(n)
	int 1
	bzero
	frame_bury 1 // y: bytes

	// tests/contracts/general.algo.ts:112
	// z: [uint64, uint<8>] = bzero<[uint64, uint<8>]>()
	byte 0x000000000000000000
	frame_bury 2 // z: [uint64, uint<8>]

	// tests/contracts/general.algo.ts:113
	// assert(len(x + y + z) === 12)
	frame_dig 0 // x: bytes
	frame_dig 1 // y: bytes
	concat
	byte 0x000000000000000000 // z: [uint64, uint<8>]
	concat
	len
	int 12
	==
	assert
	retsub

// events()void
abi_route_events:
	// execute events()void
	callsub events
	int 1
	return

// events(): void
events:
	proto 0 0

	// tests/contracts/general.algo.ts:128
	// this.myEvent.log({ app: this.app, num: 1 })
	byte 0x87528196 // myEvent(uint64,uint64)
	txna Applications 0
	itob
	byte 0x0000000000000001
	concat
	concat
	log
	retsub

// letOptimization(uint64[])uint64[]
abi_route_letOptimization:
	// The ABI return prefix
	byte 0x151f7c75

	// a: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute letOptimization(uint64[])uint64[]
	callsub letOptimization
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// letOptimization(a: uint64[]): uint64[]
letOptimization:
	proto 1 1

	// tests/contracts/general.algo.ts:132
	// assert(a[0])
	frame_dig -1 // a: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	assert

	// tests/contracts/general.algo.ts:134
	// b = [1, 2, 3]
	byte 0x000000000000000100000000000000020000000000000003
	frame_bury -1 // b: uint64[]

	// tests/contracts/general.algo.ts:136
	// return b;
	frame_dig -1 // a: uint64[]
	retsub

// staticContractProperties()void
abi_route_staticContractProperties:
	// execute staticContractProperties()void
	callsub staticContractProperties
	int 1
	return

// staticContractProperties(): void
staticContractProperties:
	proto 0 0

	// tests/contracts/general.algo.ts:140
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: DummyContract.approvalProgram(),
	//       clearStateProgram: DummyContract.clearProgram(),
	//       localNumByteSlice: DummyContract.schema.local.numByteSlice,
	//       localNumUint: DummyContract.schema.local.numUint,
	//       globalNumByteSlice: DummyContract.schema.global.numByteSlice,
	//       globalNumUint: DummyContract.schema.global.numUint,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:141
	// onCompletion: OnCompletion.NoOp
	int 0 // NoOp
	itxn_field OnCompletion

	// tests/contracts/general.algo.ts:142
	// approvalProgram: DummyContract.approvalProgram()
	byte b64 CTEYFIEGCzEZCI0MAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAIEBQ4AEuER7NjYaAI4B//AA
	itxn_field ApprovalProgram

	// tests/contracts/general.algo.ts:143
	// clearStateProgram: DummyContract.clearProgram()
	byte b64 CQ==
	itxn_field ClearStateProgram

	// tests/contracts/general.algo.ts:144
	// localNumByteSlice: DummyContract.schema.local.numByteSlice
	int 0
	itxn_field LocalNumByteSlice

	// tests/contracts/general.algo.ts:145
	// localNumUint: DummyContract.schema.local.numUint
	int 0
	itxn_field LocalNumUint

	// tests/contracts/general.algo.ts:146
	// globalNumByteSlice: DummyContract.schema.global.numByteSlice
	int 0
	itxn_field GlobalNumByteSlice

	// tests/contracts/general.algo.ts:147
	// globalNumUint: DummyContract.schema.global.numUint
	int 0
	itxn_field GlobalNumUint

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// numberToString()void
abi_route_numberToString:
	// execute numberToString()void
	callsub numberToString
	int 1
	return

// numberToString(): void
numberToString:
	proto 0 0

	// tests/contracts/general.algo.ts:154
	// assert(n.toString() === s)
	int 1
	callsub itoa
	byte "1"
	==
	assert
	retsub

// methodOnParens()void
abi_route_methodOnParens:
	// execute methodOnParens()void
	callsub methodOnParens
	int 1
	return

// methodOnParens(): void
methodOnParens:
	proto 0 0

	// tests/contracts/general.algo.ts:158
	// assert((1 + 2).toString() === '3')
	int 3
	callsub itoa
	byte 0x33 // "3"
	==
	assert
	retsub

// stringSubstring()void
abi_route_stringSubstring:
	// execute stringSubstring()void
	callsub stringSubstring
	int 1
	return

// stringSubstring(): void
stringSubstring:
	proto 0 0

	// tests/contracts/general.algo.ts:163
	// assert(s.substring(1, 3) === 'bc')
	byte "abcdef"
	substring 1 3
	byte 0x6263 // "bc"
	==
	assert
	retsub

// idProperty()void
abi_route_idProperty:
	// execute idProperty()void
	callsub idProperty
	int 1
	return

// idProperty(): void
idProperty:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// tests/contracts/general.algo.ts:167
	// app = Application.zeroIndex
	int 0
	frame_bury 0 // app: application

	// tests/contracts/general.algo.ts:168
	// assert(Application.fromID(app.id) === app)
	int 0 // app: application
	dup
	==
	assert

	// tests/contracts/general.algo.ts:170
	// asa = Asset.zeroIndex
	int 0
	frame_bury 1 // asa: asset

	// tests/contracts/general.algo.ts:171
	// assert(Asset.fromID(asa.id) === asa)
	int 0 // asa: asset
	dup
	==
	assert
	retsub

// scratchSlot()void
abi_route_scratchSlot:
	// execute scratchSlot()void
	callsub scratchSlot
	int 1
	return

// scratchSlot(): void
scratchSlot:
	proto 0 0

	// tests/contracts/general.algo.ts:175
	// this.scratch.value = 1337
	int 1337
	store 0

	// tests/contracts/general.algo.ts:176
	// assert(this.scratch.value === 1337)
	load 0
	int 1337
	==
	assert
	retsub

// ecdsa()(uint256,uint256)
abi_route_ecdsa:
	// The ABI return prefix
	byte 0x151f7c75

	// execute ecdsa()(uint256,uint256)
	callsub ecdsa
	concat
	log
	int 1
	return

// ecdsa(): [uint256, uint256]
ecdsa:
	proto 0 1

	// tests/contracts/general.algo.ts:180
	// ecdsa_verify('Secp256k1', '' as bytes32, 1, 2, 3, 4)
	byte 0x0000000000000000000000000000000000000000000000000000000000000000 // ""
	byte 0x01
	byte 0x02
	byte 0x03
	byte 0x04
	ecdsa_verify Secp256k1

	// tests/contracts/general.algo.ts:181
	// ecdsa_pk_decompress('Secp256k1', '' as StaticArray<byte, 33>)
	byte 0x000000000000000000000000000000000000000000000000000000000000000000 // ""
	ecdsa_pk_decompress Secp256k1
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	concat

	// tests/contracts/general.algo.ts:182
	// return ecdsa_pk_recover('Secp256k1', '' as bytes32, 1, 2, 3);
	byte 0x0000000000000000000000000000000000000000000000000000000000000000 // ""
	int 1
	byte 0x0000000000000000000000000000000000000000000000000000000000000002
	byte 0x0000000000000000000000000000000000000000000000000000000000000003
	ecdsa_pk_recover Secp256k1
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	concat
	retsub

// verifyTxnTypes()void
abi_route_verifyTxnTypes:
	// execute verifyTxnTypes()void
	callsub verifyTxnTypes
	int 1
	return

// verifyTxnTypes(): void
verifyTxnTypes:
	proto 0 0

	// tests/contracts/general.algo.ts:186
	// verifyPayTxn(this.txnGroup[0], {
	//       amount: { greaterThan: 0 },
	//     })
	// verify pay
	int 0
	gtxns TypeEnum
	int pay
	==
	assert

	// verify amount
	int 0
	gtxns Amount
	int 0
	>
	assert

	// tests/contracts/general.algo.ts:190
	// verifyAppCallTxn(this.txnGroup[0], {
	//       applicationID: Application.fromID(0),
	//       applicationArgs: {
	//         0: 'foo',
	//         1: {
	//           includedIn: ['bar', 'baz'],
	//         },
	//       },
	//     })
	// verify appl
	int 0
	gtxns TypeEnum
	int appl
	==
	assert

	// verify applicationID
	int 0
	gtxns ApplicationID
	int 0
	==
	assert

	// verify applicationArgs
	// verify applicationArgs 0
	int 0
	gtxns ApplicationArgs 0
	byte 0x666f6f // "foo"
	==
	assert

	// verify applicationArgs 1
	int 0
	gtxns ApplicationArgs 1
	byte 0x626172 // "bar"
	==
	int 0
	gtxns ApplicationArgs 1
	byte 0x62617a // "baz"
	==
	||
	assert

	// tests/contracts/general.algo.ts:200
	// verifyAssetTransferTxn(this.txnGroup[0], {
	//       assetReceiver: this.app.address,
	//     })
	// verify axfer
	int 0
	gtxns TypeEnum
	int axfer
	==
	assert

	// verify assetReceiver
	int 0
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// tests/contracts/general.algo.ts:204
	// verifyAssetConfigTxn(this.txnGroup[0], {
	//       configAsset: Asset.fromID(0),
	//     })
	// verify acfg
	int 0
	gtxns TypeEnum
	int acfg
	==
	assert

	// verify configAsset
	int 0
	gtxns ConfigAsset
	int 0
	==
	assert

	// tests/contracts/general.algo.ts:208
	// verifyKeyRegTxn(this.txnGroup[0], {
	//       voteFirst: 1337,
	//     })
	// verify keyreg
	int 0
	gtxns TypeEnum
	int keyreg
	==
	assert

	// verify voteFirst
	int 0
	gtxns VoteFirst
	int 1337
	==
	assert
	retsub

// stringPlusEquals()void
abi_route_stringPlusEquals:
	// execute stringPlusEquals()void
	callsub stringPlusEquals
	int 1
	return

// stringPlusEquals(): void
stringPlusEquals:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/general.algo.ts:214
	// s = 'foo'
	byte 0x666f6f // "foo"
	frame_bury 0 // s: byte[]

	// tests/contracts/general.algo.ts:215
	// s += 'bar'
	frame_dig 0 // s: byte[]
	byte 0x626172 // "bar"
	concat
	frame_bury 0 // s: byte[]

	// tests/contracts/general.algo.ts:216
	// assert(s === 'foobar')
	frame_dig 0 // s: byte[]
	byte 0x666f6f626172 // "foobar"
	==
	assert
	retsub

// importedProgram()byte[]
abi_route_importedProgram:
	// The ABI return prefix
	byte 0x151f7c75

	// execute importedProgram()byte[]
	callsub importedProgram
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// importedProgram(): bytes
importedProgram:
	proto 0 1

	// tests/contracts/general.algo.ts:220
	// return IfTest.approvalProgram();
	byte b64 CSAEAQACICYJBBUffHUCaWYEZWxzZQNlbmQAA2ZvbwdlbHNlIGlmCWVsc2UgaWYgMQllbHNlIGlmIDIxGBSBBgsxGQiNDALIAAAAAAAAAAAAAAK6AAAAAAAAAAAAAAAoNhoBSRUiEkQjU4gADEkVFlcGAkxQULAiQ4oBAYv/QQACKYkriSg2GgFJFSISRCNTiAAMSRUWVwYCTFBQsCJDigEBi/9BAAUpiUIAAiqJiSg2GgJJFSISRCNTNhoBSRUiEkQjU4gADEkVFlcGAkxQULAiQ4oCAYv/QQAFKYlCAAiL/kEAAycGiSuJKDYaAkkVIhJEI1M2GgFJFSISRCNTiAAMSRUWVwYCTFBQsCJDigIBi/9BAAUpiUIADYv+QQAGJwaJQgACKomJKDYaA0kVIhJEI1M2GgJJFSISRCNTNhoBSRUiEkQjU4gADEkVFlcGAkxQULAiQ4oDAYv/QQAFKYlCABOL/kEABicHiUIACIv9QQADJwiJK4koNhoDSRUiEkQjUzYaAkkVIhJEI1M2GgFJFSISRCNTiAAMSRUWVwYCTFBQsCJDigMBi/9BAAUpiUIAGIv+QQAGJweJQgANi/1BAAYnCIlCAAIqiYkoNhoCSRUiEkQjUzYaAUkVIhJEI1OIAAxJFRZXBgJMUFCwIkOKAgGL/0EAFov+QQAMgAluZXN0ZWQgaWaJKYlCAAIqiYkoNhoBSRUiEkQjU4gADEkVFlcGAkxQULAiQ4oBAYv/QQAFKYlCAAIqiYkoNhoCSRUiEkQjUzYaAUkVIhJEI1OIAAUWULAiQ4oCAYv/QQAEIkIAC4v+QQAEJEIAAoEDiSg2GgFXAgCIAAUWULAiQ4oBAYv/JwSpQQACIokkiSg2GgFXAgCIAAUWULAiQ4oBAYv/JwSpQQAEIkIAASSJNhoBSRUkEkQXiAACIkOKAQCL/ycEqUEAAycFsIk2GgJJFSQSRBc2GgFJFSQSRBeIAAIiQ4oCAIv/i/4OQQADJwWwiTYaAkkVJRJENhoBSRUlEkSIAAIiQ4oCAIv/i/6mQQADJwWwiSJDgAS4RHs2NhoAjgH/8QCABENuwcKABBx6DV6ABF4Pts+ABF4cbFCABFjQupKABF0vTwKABIRXKdmABI/nbKiABBo8eHiABHS8yGiABEIS+QWABJXdrr+ABDFHuGaABEKJf2E2GgCODvzE/Or9FP1P/Y793v4y/nf+of7W/vT/FP8x/1cA
	retsub

// callPrivateDefinedLater()void
abi_route_callPrivateDefinedLater:
	// execute callPrivateDefinedLater()void
	callsub callPrivateDefinedLater
	int 1
	return

// callPrivateDefinedLater(): void
callPrivateDefinedLater:
	proto 0 0

	// tests/contracts/general.algo.ts:224
	// log(this.privateMethod('hello'))
	byte 0x68656c6c6f // "hello"
	callsub privateMethod
	log
	retsub

// privateMethod(msg: string): string
privateMethod:
	proto 1 1

	// tests/contracts/general.algo.ts:228
	// return msg;
	frame_dig -1 // msg: string
	retsub

// interalPublicMethod(uint64,uint64)uint64
abi_route_interalPublicMethod:
	// The ABI return prefix
	byte 0x151f7c75

	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute interalPublicMethod(uint64,uint64)uint64
	callsub interalPublicMethod
	itob
	concat
	log
	int 1
	return

// interalPublicMethod(a: uint64, b: uint64): uint64
interalPublicMethod:
	proto 2 1

	// tests/contracts/general.algo.ts:232
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	retsub

// callInternalPublicMethod()void
abi_route_callInternalPublicMethod:
	// execute callInternalPublicMethod()void
	callsub callInternalPublicMethod
	int 1
	return

// callInternalPublicMethod(): void
callInternalPublicMethod:
	proto 0 0

	// tests/contracts/general.algo.ts:236
	// assert(this.interalPublicMethod(1, 2) === 3)
	int 2
	int 1
	callsub interalPublicMethod
	int 3
	==
	assert
	retsub

// appLoadScratch()void
abi_route_appLoadScratch:
	// execute appLoadScratch()void
	callsub appLoadScratch
	int 1
	return

// appLoadScratch(): void
appLoadScratch:
	proto 0 0

	// tests/contracts/general.algo.ts:240
	// log(this.txnGroup[1].loadScratch(2) as bytes)
	gload 1 2
	log
	retsub

// uintNWithUnderscore()uint256
abi_route_uintNWithUnderscore:
	// The ABI return prefix
	byte 0x151f7c75

	// execute uintNWithUnderscore()uint256
	callsub uintNWithUnderscore
	dup
	bitlen
	int 256
	<=
	assert
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	int 32
	-
	swap
	substring3
	concat
	log
	int 1
	return

// uintNWithUnderscore(): uint256
uintNWithUnderscore:
	proto 0 1

	// tests/contracts/general.algo.ts:244
	// return <uint256>123_456;
	byte 0x000000000000000000000000000000000000000000000000000000000001e240
	retsub

// opUp()void
abi_route_opUp:
	// execute opUp()void
	callsub opUp
	int 1
	return

// opUp(): void
opUp:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/general.algo.ts:248
	// increaseOpcodeBudget()
	itxn_begin
	int appl
	itxn_field TypeEnum
	int 0
	itxn_field Fee
	byte b64 CoEB // #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	int DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:249
	// i = 1
	int 1
	frame_bury 0 // i: uint64

for_0:
	// tests/contracts/general.algo.ts:249
	// i < 75
	frame_dig 0 // i: uint64
	int 75
	<
	bz for_0_end

	// tests/contracts/general.algo.ts:250
	// assert(i)
	frame_dig 0 // i: uint64
	assert

	// tests/contracts/general.algo.ts:249
	// i += 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b for_0

for_0_end:
	retsub

// returnValueOnAssignment()string
abi_route_returnValueOnAssignment:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnValueOnAssignment()string
	callsub returnValueOnAssignment
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	int 1
	return

// returnValueOnAssignment(): string
returnValueOnAssignment:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/general.algo.ts:255
	// message = 'hi'
	byte 0x6869 // "hi"
	frame_bury 0 // message: byte[]

	// if0_condition
	// tests/contracts/general.algo.ts:257
	// this.txn.sender === this.app.address
	txn Sender
	global CurrentApplicationAddress
	==
	bz if0_end

	// if0_consequent
	// tests/contracts/general.algo.ts:258
	// message = 'in block'
	byte 0x696e20626c6f636b // "in block"
	frame_bury 0 // message: byte[]

if0_end:
	// tests/contracts/general.algo.ts:261
	// return (message = 'bye');
	byte 0x627965 // "bye"
	dup
	frame_bury 0 // message: byte[]

	// set the subroutine return value
	frame_bury 0
	retsub

// returnArrayValueOnAssignment()uint64
abi_route_returnArrayValueOnAssignment:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnArrayValueOnAssignment()uint64
	callsub returnArrayValueOnAssignment
	itob
	concat
	log
	int 1
	return

// returnArrayValueOnAssignment(): uint64
returnArrayValueOnAssignment:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/general.algo.ts:265
	// a: StaticArray<uint64, 3> = [1, 2, 3]
	byte 0x000000000000000100000000000000020000000000000003
	frame_bury 0 // a: StaticArray<uint64, 3>

	// tests/contracts/general.algo.ts:267
	// return (a[0] = 4);
	frame_dig 0 // a: StaticArray<uint64, 3>
	int 0
	int 4
	dup
	store 245 // assignment value
	itob
	replace3
	frame_bury 0 // a: StaticArray<uint64, 3>
	load 245 // assignment value

	// set the subroutine return value
	frame_bury 0
	retsub

// returnStorageValueOnAssignment()uint64
abi_route_returnStorageValueOnAssignment:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnStorageValueOnAssignment()uint64
	callsub returnStorageValueOnAssignment
	itob
	concat
	log
	int 1
	return

// returnStorageValueOnAssignment(): uint64
returnStorageValueOnAssignment:
	proto 0 1

	// tests/contracts/general.algo.ts:271
	// this.gKey.value = 1
	byte 0x674b6579 // "gKey"
	int 1
	app_global_put

	// tests/contracts/general.algo.ts:273
	// return (this.gKey.value = 2);
	byte 0x674b6579 // "gKey"
	int 2
	dup
	store 245 // assignment value
	app_global_put
	load 245 // assignment value
	retsub

// returnOperatorAssignmentValue()uint64
abi_route_returnOperatorAssignmentValue:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnOperatorAssignmentValue()uint64
	callsub returnOperatorAssignmentValue
	itob
	concat
	log
	int 1
	return

// returnOperatorAssignmentValue(): uint64
returnOperatorAssignmentValue:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/general.algo.ts:277
	// a = 1
	int 1
	frame_bury 0 // a: uint64

	// tests/contracts/general.algo.ts:279
	// return (a += 2);
	frame_dig 0 // a: uint64
	int 2
	+
	dup
	store 245 // assignment value
	frame_bury 0 // a: uint64
	load 245 // assignment value

	// set the subroutine return value
	frame_bury 0
	retsub

// returnArrayValueOnOperatorAssignment()uint64
abi_route_returnArrayValueOnOperatorAssignment:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnArrayValueOnOperatorAssignment()uint64
	callsub returnArrayValueOnOperatorAssignment
	itob
	concat
	log
	int 1
	return

// returnArrayValueOnOperatorAssignment(): uint64
returnArrayValueOnOperatorAssignment:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/general.algo.ts:283
	// a: StaticArray<uint64, 3> = [1, 2, 3]
	byte 0x000000000000000100000000000000020000000000000003
	frame_bury 0 // a: StaticArray<uint64, 3>

	// tests/contracts/general.algo.ts:285
	// return (a[0] += 4);
	frame_dig 0 // a: StaticArray<uint64, 3>
	int 0
	frame_dig 0 // a: StaticArray<uint64, 3>
	extract 0 8
	btoi
	int 4
	+
	dup
	store 245 // assignment value
	itob
	replace3
	frame_bury 0 // a: StaticArray<uint64, 3>
	load 245 // assignment value

	// set the subroutine return value
	frame_bury 0
	retsub

// returnArrayInStorageValueOnOperatorAssignment()uint64
abi_route_returnArrayInStorageValueOnOperatorAssignment:
	// The ABI return prefix
	byte 0x151f7c75

	// execute returnArrayInStorageValueOnOperatorAssignment()uint64
	callsub returnArrayInStorageValueOnOperatorAssignment
	itob
	concat
	log
	int 1
	return

// returnArrayInStorageValueOnOperatorAssignment(): uint64
returnArrayInStorageValueOnOperatorAssignment:
	proto 0 1

	// tests/contracts/general.algo.ts:289
	// this.storageArray.value = [1, 2, 3]
	byte 0x73746f726167654172726179 // "storageArray"
	byte 0x000000000000000100000000000000020000000000000003
	app_global_put

	// tests/contracts/general.algo.ts:291
	// return (this.storageArray.value[0] += 4);
	byte 0x73746f726167654172726179 // "storageArray"
	app_global_get
	int 0
	byte 0x73746f726167654172726179 // "storageArray"
	app_global_get
	extract 0 8
	btoi
	int 4
	+
	dup
	store 245 // assignment value
	itob
	replace3
	byte 0x73746f726167654172726179 // "storageArray"
	swap
	app_global_put
	load 245 // assignment value
	retsub

// consts()void
abi_route_consts:
	// execute consts()void
	callsub consts
	int 1
	return

// consts(): void
consts:
	proto 0 0

	// tests/contracts/general.algo.ts:295
	// assert(STRING_CONST === 'foo')
	byte "foo"
	byte 0x666f6f // "foo"
	==
	assert

	// tests/contracts/general.algo.ts:296
	// assert(NUM_CONST === 123)
	int 123
	dup
	==
	assert

	// tests/contracts/general.algo.ts:297
	// assert(NESTED_CONST === 123)
	int 123
	dup
	==
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "txnTypeEnum()void"
	method "txnGroupLength()void"
	method "asserts(bool,bool)void"
	method "verifyTxnFromArg(pay)void"
	method "verifyTxnFromTxnGroup()void"
	method "verifyTxnCondition()void"
	method "verifyTxnIncludedIn()void"
	method "verifyTxnNotIncludedIn()void"
	method "submitPendingGroup()void"
	method "methodWithTxnArgs()void"
	method "shift()void"
	method "fromBytes()void"
	method "fromID()void"
	method "bzeroFunction()void"
	method "events()void"
	method "letOptimization(uint64[])uint64[]"
	method "staticContractProperties()void"
	method "numberToString()void"
	method "methodOnParens()void"
	method "stringSubstring()void"
	method "idProperty()void"
	method "scratchSlot()void"
	method "ecdsa()(uint256,uint256)"
	method "verifyTxnTypes()void"
	method "stringPlusEquals()void"
	method "importedProgram()byte[]"
	method "callPrivateDefinedLater()void"
	method "interalPublicMethod(uint64,uint64)uint64"
	method "callInternalPublicMethod()void"
	method "appLoadScratch()void"
	method "uintNWithUnderscore()uint256"
	method "opUp()void"
	method "returnValueOnAssignment()string"
	method "returnArrayValueOnAssignment()uint64"
	method "returnStorageValueOnAssignment()uint64"
	method "returnOperatorAssignmentValue()uint64"
	method "returnArrayValueOnOperatorAssignment()uint64"
	method "returnArrayInStorageValueOnOperatorAssignment()uint64"
	method "consts()void"
	txna ApplicationArgs 0
	match abi_route_txnTypeEnum abi_route_txnGroupLength abi_route_asserts abi_route_verifyTxnFromArg abi_route_verifyTxnFromTxnGroup abi_route_verifyTxnCondition abi_route_verifyTxnIncludedIn abi_route_verifyTxnNotIncludedIn abi_route_submitPendingGroup abi_route_methodWithTxnArgs abi_route_shift abi_route_fromBytes abi_route_fromID abi_route_bzeroFunction abi_route_events abi_route_letOptimization abi_route_staticContractProperties abi_route_numberToString abi_route_methodOnParens abi_route_stringSubstring abi_route_idProperty abi_route_scratchSlot abi_route_ecdsa abi_route_verifyTxnTypes abi_route_stringPlusEquals abi_route_importedProgram abi_route_callPrivateDefinedLater abi_route_interalPublicMethod abi_route_callInternalPublicMethod abi_route_appLoadScratch abi_route_uintNWithUnderscore abi_route_opUp abi_route_returnValueOnAssignment abi_route_returnArrayValueOnAssignment abi_route_returnStorageValueOnAssignment abi_route_returnOperatorAssignmentValue abi_route_returnArrayValueOnOperatorAssignment abi_route_returnArrayInStorageValueOnOperatorAssignment abi_route_consts
	err

intToAscii:
	proto 1 1
	byte 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	int 1
	extract3
	retsub
	

itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	int 0
	==
	bz itoa_if_end
	byte 0x151f7c75000130
	log
	retsub

itoa_if_end:
	frame_dig -1 // i: uint64
	int 10
	/
	int 0
	>
	bz itoa_ternary_false
	frame_dig -1 // i: uint64
	int 10
	/
	callsub itoa
	b itoa_ternary_end

itoa_ternary_false:
	byte 0x // ""

itoa_ternary_end:
	frame_dig -1 // i: uint64
	int 10
	%
	callsub intToAscii
	concat
	retsub
#pragma version 9

// This TEAL was generated by TEALScript v0.44.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// txnTypeEnum()void
abi_route_txnTypeEnum:
	// execute txnTypeEnum()void
	callsub txnTypeEnum
	int 1
	return

txnTypeEnum:
	proto 0 0

	// tests/contracts/general.algo.ts:6
	// assert(this.txnGroup[0].typeEnum === TransactionType.Payment)
	int 0
	gtxns TypeEnum
	int pay
	==
	assert
	retsub

// txnGroupLength()uint64
abi_route_txnGroupLength:
	// execute txnGroupLength()uint64
	callsub txnGroupLength
	int 1
	return

txnGroupLength:
	proto 0 0

	// tests/contracts/general.algo.ts:10
	// return this.txnGroup.length;
	global GroupSize
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// asserts(bool,bool)void
abi_route_asserts:
	// arg2: bool
	txna ApplicationArgs 2
	int 0
	getbit

	// arg1: bool
	txna ApplicationArgs 1
	int 0
	getbit

	// execute asserts(bool,bool)void
	callsub asserts
	int 1
	return

asserts:
	proto 2 0

	// tests/contracts/general.algo.ts:14
	// assert(arg1, arg2, arg1 === arg2)
	frame_dig -1 // arg1: bool
	assert
	frame_dig -2 // arg2: bool
	assert
	frame_dig -1 // arg1: bool
	frame_dig -2 // arg2: bool
	==
	assert
	retsub

// verifyTxnFromArg(pay)void
abi_route_verifyTxnFromArg:
	// somePay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute verifyTxnFromArg(pay)void
	callsub verifyTxnFromArg
	int 1
	return

verifyTxnFromArg:
	proto 1 0

	// tests/contracts/general.algo.ts:18
	// verifyTxn(somePay, { receiver: this.app.address, amount: 100_000 })
	// verify receiver
	frame_dig -1 // somePay: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 100_000
	==
	assert
	retsub

// verifyTxnFromTxnGroup()void
abi_route_verifyTxnFromTxnGroup:
	// execute verifyTxnFromTxnGroup()void
	callsub verifyTxnFromTxnGroup
	int 1
	return

verifyTxnFromTxnGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:22
	// verifyTxn(this.txnGroup[0 + 1], { receiver: this.app.address, amount: 100_000 })
	int 0
	int 1
	+
	store 8 // verifyTxn index

	// verify receiver
	load 8 // verifyTxn index
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	load 8 // verifyTxn index
	gtxns Amount
	int 100_000
	==
	assert
	retsub

// verifyTxnCondition(pay)void
abi_route_verifyTxnCondition:
	// somePay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute verifyTxnCondition(pay)void
	callsub verifyTxnCondition
	int 1
	return

verifyTxnCondition:
	proto 1 0

	// tests/contracts/general.algo.ts:26
	// verifyTxn(somePay, {
	//       receiver: this.app.address,
	//       amount: { greaterThan: 1, lessThanEqualTo: 10, not: 5 },
	//     })
	// verify receiver
	frame_dig -1 // somePay: pay
	gtxns Receiver
	txna Applications 0
	app_params_get AppAddress
	assert
	==
	assert

	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 1
	>
	assert
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 10
	<=
	assert
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 5
	!=
	assert
	retsub

// verifyTxnIncludedIn(pay)void
abi_route_verifyTxnIncludedIn:
	// somePay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute verifyTxnIncludedIn(pay)void
	callsub verifyTxnIncludedIn
	int 1
	return

verifyTxnIncludedIn:
	proto 1 0

	// tests/contracts/general.algo.ts:33
	// verifyTxn(somePay, {
	//       amount: { includedIn: [1, 2, 3] },
	//     })
	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 1
	==
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 2
	==
	||
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 3
	==
	||
	assert
	retsub

// verifyTxnNotIncludedIn(pay)void
abi_route_verifyTxnNotIncludedIn:
	// somePay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute verifyTxnNotIncludedIn(pay)void
	callsub verifyTxnNotIncludedIn
	int 1
	return

verifyTxnNotIncludedIn:
	proto 1 0

	// tests/contracts/general.algo.ts:39
	// verifyTxn(somePay, {
	//       amount: { notIncludedIn: [1, 2, 3] },
	//     })
	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 1
	!=
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 2
	!=
	||
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 3
	!=
	||
	assert
	retsub

// submitPendingGroup()void
abi_route_submitPendingGroup:
	// execute submitPendingGroup()void
	callsub submitPendingGroup
	int 1
	return

submitPendingGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:45
	// this.pendingGroup.addPayment({ amount: 100_000, receiver: this.app.address })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:45
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:45
	// receiver: this.app.address
	txna Applications 0
	app_params_get AppAddress
	assert
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:46
	// this.pendingGroup.addAssetCreation({ configAssetTotal: 1 })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:46
	// configAssetTotal: 1
	int 1
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:47
	// this.pendingGroup.submit()
	itxn_submit
	retsub

// methodWithTxnArgs()void
abi_route_methodWithTxnArgs:
	// execute methodWithTxnArgs()void
	callsub methodWithTxnArgs
	int 1
	return

methodWithTxnArgs:
	proto 0 0

	// tests/contracts/general.algo.ts:51
	// sendMethodCall<[InnerPayment, InnerMethodCall<[uint64], void>], void>({
	//       name: 'foo',
	//       methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: Application.fromID(1337),
	//           methodArgs: [1],
	//         }],
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:54
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:54
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "bar(uint64)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:57
	// applicationID: Application.fromID(1337)
	int 1337
	itxn_field ApplicationID

	// tests/contracts/general.algo.ts:58
	// methodArgs: [1]
	int 1
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "foo(pay,appl)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:53
	// methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: Application.fromID(1337),
	//           methodArgs: [1],
	//         }]
	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// nestedTernary(bool,bool)uint64
abi_route_nestedTernary:
	// y: bool
	txna ApplicationArgs 2
	int 0
	getbit

	// x: bool
	txna ApplicationArgs 1
	int 0
	getbit

	// execute nestedTernary(bool,bool)uint64
	callsub nestedTernary
	int 1
	return

nestedTernary:
	proto 2 0

	// tests/contracts/general.algo.ts:65
	// return x ? 1 : y ? 2 : 3;
	frame_dig -1 // x: bool
	bz ternary0_false
	int 1
	b ternary0_end

ternary0_false:
	frame_dig -2 // y: bool
	bz ternary1_false
	int 2
	b ternary1_end

ternary1_false:
	int 3

ternary1_end:

ternary0_end:
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// shift()void
abi_route_shift:
	// execute shift()void
	callsub shift
	int 1
	return

shift:
	proto 0 0

	// tests/contracts/general.algo.ts:69
	// assert(1 << 2)
	int 1
	int 2
	shl
	assert

	// tests/contracts/general.algo.ts:70
	// assert(3 >> 4)
	int 3
	int 4
	shr
	assert
	retsub

// fromBytes()void
abi_route_fromBytes:
	// execute fromBytes()void
	callsub fromBytes
	int 1
	return

fromBytes:
	proto 0 0

	// tests/contracts/general.algo.ts:74
	// assert(Address.fromBytes('abc').minBalance)
	byte "abc"
	acct_params_get AcctMinBalance
	assert
	assert
	retsub

// fromID()void
abi_route_fromID:
	// execute fromID()void
	callsub fromID
	int 1
	return

fromID:
	proto 0 0

	// tests/contracts/general.algo.ts:78
	// log(Application.fromID(123).creator)
	int 123
	app_params_get AppCreator
	assert
	log

	// tests/contracts/general.algo.ts:79
	// log(Asset.fromID(123).creator)
	int 123
	asset_params_get AssetCreator
	assert
	log
	retsub

// tmpl()void
abi_route_tmpl:
	// execute tmpl()void
	callsub tmpl
	int 1
	return

tmpl:
	proto 0 0

	// tests/contracts/general.algo.ts:83
	// log(templateVar<bytes>('FOO'))
	byte TMPL_FOO // TMPL_FOO
	log

	// tests/contracts/general.algo.ts:84
	// assert(templateVar<uint64>('BAR'))
	int TMPL_BAR // TMPL_BAR
	assert
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "txnTypeEnum()void"
	method "txnGroupLength()uint64"
	method "asserts(bool,bool)void"
	method "verifyTxnFromArg(pay)void"
	method "verifyTxnFromTxnGroup()void"
	method "verifyTxnCondition(pay)void"
	method "verifyTxnIncludedIn(pay)void"
	method "verifyTxnNotIncludedIn(pay)void"
	method "submitPendingGroup()void"
	method "methodWithTxnArgs()void"
	method "nestedTernary(bool,bool)uint64"
	method "shift()void"
	method "fromBytes()void"
	method "fromID()void"
	method "tmpl()void"
	txna ApplicationArgs 0
	match abi_route_txnTypeEnum abi_route_txnGroupLength abi_route_asserts abi_route_verifyTxnFromArg abi_route_verifyTxnFromTxnGroup abi_route_verifyTxnCondition abi_route_verifyTxnIncludedIn abi_route_verifyTxnNotIncludedIn abi_route_submitPendingGroup abi_route_methodWithTxnArgs abi_route_nestedTernary abi_route_shift abi_route_fromBytes abi_route_fromID abi_route_tmpl
	err
#pragma version 9

// This TEAL was generated by TEALScript v0.62.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// txnTypeEnum()void
abi_route_txnTypeEnum:
	// execute txnTypeEnum()void
	callsub txnTypeEnum
	int 1
	return

txnTypeEnum:
	proto 0 0

	// tests/contracts/general.algo.ts:18
	// assert(this.txnGroup[0].typeEnum === TransactionType.ApplicationCall)
	int 0
	gtxns TypeEnum
	int appl
	==
	assert
	retsub

// txnGroupLength()void
abi_route_txnGroupLength:
	// execute txnGroupLength()void
	callsub txnGroupLength
	int 1
	return

txnGroupLength:
	proto 0 0

	// tests/contracts/general.algo.ts:22
	// assert(this.txnGroup.length === 1)
	global GroupSize
	int 1
	==
	assert
	retsub

// asserts(bool,bool)void
abi_route_asserts:
	// arg2: bool
	txna ApplicationArgs 2
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// arg1: bool
	txna ApplicationArgs 1
	dup
	len
	int 1
	==
	assert
	int 0
	getbit

	// execute asserts(bool,bool)void
	callsub asserts
	int 1
	return

asserts:
	proto 2 0

	// tests/contracts/general.algo.ts:26
	// assert(arg1, arg2, arg1 === arg2)
	frame_dig -1 // arg1: bool
	assert
	frame_dig -2 // arg2: bool
	assert
	frame_dig -1 // arg1: bool
	frame_dig -2 // arg2: bool
	==
	assert
	retsub

// verifyTxnFromArg(pay)void
abi_route_verifyTxnFromArg:
	// somePay: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute verifyTxnFromArg(pay)void
	callsub verifyTxnFromArg
	int 1
	return

verifyTxnFromArg:
	proto 1 0

	// tests/contracts/general.algo.ts:30
	// verifyTxn(somePay, { receiver: this.app.address, amount: 100_000 })
	// verify receiver
	frame_dig -1 // somePay: pay
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // somePay: pay
	gtxns Amount
	int 100_000
	==
	assert
	retsub

// verifyTxnFromTxnGroup()void
abi_route_verifyTxnFromTxnGroup:
	// execute verifyTxnFromTxnGroup()void
	callsub verifyTxnFromTxnGroup
	int 1
	return

verifyTxnFromTxnGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:34
	// verifyTxn(this.txnGroup[0], { sender: this.txn.sender })
	// verify sender
	int 0
	gtxns Sender
	txn Sender
	==
	assert
	retsub

// verifyTxnCondition()void
abi_route_verifyTxnCondition:
	// execute verifyTxnCondition()void
	callsub verifyTxnCondition
	int 1
	return

verifyTxnCondition:
	proto 0 0

	// tests/contracts/general.algo.ts:38
	// verifyTxn(this.txn, {
	//       applicationID: { greaterThan: 1 },
	//     })
	// verify applicationID
	txn ApplicationID
	int 1
	>
	assert
	retsub

// verifyTxnIncludedIn()void
abi_route_verifyTxnIncludedIn:
	// execute verifyTxnIncludedIn()void
	callsub verifyTxnIncludedIn
	int 1
	return

verifyTxnIncludedIn:
	proto 0 0

	// tests/contracts/general.algo.ts:44
	// verifyTxn(this.txn, {
	//       sender: { includedIn: [this.txn.sender] },
	//     })
	// verify sender
	txn Sender
	txn Sender
	==
	assert
	retsub

// verifyTxnNotIncludedIn()void
abi_route_verifyTxnNotIncludedIn:
	// execute verifyTxnNotIncludedIn()void
	callsub verifyTxnNotIncludedIn
	int 1
	return

verifyTxnNotIncludedIn:
	proto 0 0

	// tests/contracts/general.algo.ts:50
	// verifyTxn(this.txn, {
	//       sender: { notIncludedIn: [globals.zeroAddress] },
	//     })
	// verify sender
	txn Sender
	global ZeroAddress
	!=
	assert
	retsub

// submitPendingGroup()void
abi_route_submitPendingGroup:
	// execute submitPendingGroup()void
	callsub submitPendingGroup
	int 1
	return

submitPendingGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:56
	// this.pendingGroup.addPayment({ amount: 100_000, receiver: this.app.address })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:56
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:56
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:57
	// this.pendingGroup.addAssetCreation({ configAssetTotal: 1 })
	itxn_begin
	int acfg
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:57
	// configAssetTotal: 1
	int 1
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:58
	// this.pendingGroup.submit()
	itxn_submit
	retsub

// methodWithTxnArgs()void
abi_route_methodWithTxnArgs:
	// execute methodWithTxnArgs()void
	callsub methodWithTxnArgs
	int 1
	return

methodWithTxnArgs:
	proto 0 0

	// tests/contracts/general.algo.ts:62
	// sendMethodCall<[InnerPayment, InnerMethodCall<[uint64], void>], void>({
	//       name: 'foo',
	//       methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: Application.fromID(1337),
	//           methodArgs: [1],
	//         },
	//       ],
	//     })
	itxn_begin
	int pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:65
	// amount: 100_000
	int 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:65
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "bar(uint64)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:68
	// applicationID: Application.fromID(1337)
	int 1337
	itxn_field ApplicationID

	// tests/contracts/general.algo.ts:69
	// methodArgs: [1]
	byte 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee
	itxn_begin
	int appl
	itxn_field TypeEnum
	method "foo(pay,appl)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:64
	// methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: Application.fromID(1337),
	//           methodArgs: [1],
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// shift()void
abi_route_shift:
	// execute shift()void
	callsub shift
	int 1
	return

shift:
	proto 0 0

	// tests/contracts/general.algo.ts:76
	// assert(1 << 2 === 4)
	int 1
	int 2
	shl
	int 4
	==
	assert

	// tests/contracts/general.algo.ts:77
	// assert(4 >> 1 === 2)
	int 4
	int 1
	shr
	int 2
	==
	assert
	retsub

// fromBytes()void
abi_route_fromBytes:
	// execute fromBytes()void
	callsub fromBytes
	int 1
	return

fromBytes:
	proto 0 0

	// tests/contracts/general.algo.ts:81
	// assert(Address.fromBytes('abc').minBalance)
	byte 0x616263 // "abc"
	acct_params_get AcctMinBalance
	assert
	assert
	retsub

// fromID()void
abi_route_fromID:
	// execute fromID()void
	callsub fromID
	int 1
	return

fromID:
	proto 0 0

	// tests/contracts/general.algo.ts:85
	// log(Application.fromID(123).creator)
	int 123
	app_params_get AppCreator
	assert
	log

	// tests/contracts/general.algo.ts:86
	// log(Asset.fromID(123).creator)
	int 123
	asset_params_get AssetCreator
	assert
	log
	retsub

// bzeroFunction()void
abi_route_bzeroFunction:
	byte 0x; dupn 3 // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute bzeroFunction()void
	callsub bzeroFunction
	int 1
	return

bzeroFunction:
	proto 4 0

	// tests/contracts/general.algo.ts:90
	// n = 1
	int 1
	frame_bury -1 // n: uint64

	// tests/contracts/general.algo.ts:91
	// x: bytes = bzero(2)
	byte 0x0000
	frame_bury -2 // x: bytes

	// tests/contracts/general.algo.ts:92
	// y: bytes = bzero(n)
	int 1 // n: uint64
	bzero
	frame_bury -3 // y: bytes

	// tests/contracts/general.algo.ts:93
	// z: [uint64, uint<8>] = bzero<[uint64, uint<8>]>()
	byte 0x000000000000000000
	frame_bury -4 // z: [uint64,uint8]

	// tests/contracts/general.algo.ts:94
	// assert(len(x + y + z) === 12)
	byte 0x0000 // x: bytes
	frame_dig -3 // y: bytes
	concat
	byte 0x000000000000000000 // z: [uint64,uint8]
	concat
	len
	int 12
	==
	assert
	retsub

// events()void
abi_route_events:
	// execute events()void
	callsub events
	int 1
	return

events:
	proto 0 0

	// tests/contracts/general.algo.ts:100
	// this.myEvent.log(this.app, 1)
	byte 0x87528196 // myEvent(uint64,uint64)
	txna Applications 0
	itob
	byte 0x0000000000000001
	concat
	concat
	log
	retsub

// letOptimization(uint64[])uint64[]
abi_route_letOptimization:
	// a: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute letOptimization(uint64[])uint64[]
	callsub letOptimization
	int 1
	return

letOptimization:
	proto 1 0

	// tests/contracts/general.algo.ts:104
	// assert(a[0])
	frame_dig -1 // a: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	assert

	// tests/contracts/general.algo.ts:106
	// b = [1, 2, 3]
	byte 0x000000000000000100000000000000020000000000000003
	frame_bury -1 // b: uint64[]

	// tests/contracts/general.algo.ts:108
	// return b;
	frame_dig -1 // a: uint64[]
	dup
	len
	int 8
	/
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// staticContractProperties()void
abi_route_staticContractProperties:
	// execute staticContractProperties()void
	callsub staticContractProperties
	int 1
	return

staticContractProperties:
	proto 0 0

	// tests/contracts/general.algo.ts:112
	// sendAppCall({
	//       approvalProgram: DummyContract.approvalProgram(),
	//       clearStateProgram: DummyContract.clearProgram(),
	//       localNumByteSlice: DummyContract.schema.local.numByteSlice,
	//       localNumUint: DummyContract.schema.local.numUint,
	//       globalNumByteSlice: DummyContract.schema.global.numByteSlice,
	//       globalNumUint: DummyContract.schema.global.numUint,
	//     })
	itxn_begin
	int appl
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:113
	// approvalProgram: DummyContract.approvalProgram()
	byte b64 CTEYgQANgQYLMRkIjQEABACBAUOABLhEezY2GgCOAf/wAA==
	itxn_field ApprovalProgram

	// tests/contracts/general.algo.ts:114
	// clearStateProgram: DummyContract.clearProgram()
	byte b64 CQ==
	itxn_field ClearStateProgram

	// tests/contracts/general.algo.ts:115
	// localNumByteSlice: DummyContract.schema.local.numByteSlice
	int 0
	itxn_field LocalNumByteSlice

	// tests/contracts/general.algo.ts:116
	// localNumUint: DummyContract.schema.local.numUint
	int 0
	itxn_field LocalNumUint

	// tests/contracts/general.algo.ts:117
	// globalNumByteSlice: DummyContract.schema.global.numByteSlice
	int 0
	itxn_field GlobalNumByteSlice

	// tests/contracts/general.algo.ts:118
	// globalNumUint: DummyContract.schema.global.numUint
	int 0
	itxn_field GlobalNumUint

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// numberToString()void
abi_route_numberToString:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute numberToString()void
	callsub numberToString
	int 1
	return

numberToString:
	proto 2 0

	// tests/contracts/general.algo.ts:123
	// n = 1
	int 1
	frame_bury -1 // n: uint64

	// tests/contracts/general.algo.ts:124
	// s = '1'
	byte 0x31 // "1"
	frame_bury -2 // s: bytes

	// tests/contracts/general.algo.ts:125
	// assert(n.toString() === s)
	int 1 // n: uint64
	callsub itoa
	byte 0x31 // "1" // s: bytes
	==
	assert
	retsub

// methodOnParens()void
abi_route_methodOnParens:
	// execute methodOnParens()void
	callsub methodOnParens
	int 1
	return

methodOnParens:
	proto 0 0

	// tests/contracts/general.algo.ts:129
	// assert((1 + 2).toString() === '3')
	int 3
	callsub itoa
	byte 0x33 // "3"
	==
	assert
	retsub

// stringSubstring()void
abi_route_stringSubstring:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute stringSubstring()void
	callsub stringSubstring
	int 1
	return

stringSubstring:
	proto 1 0

	// tests/contracts/general.algo.ts:133
	// s = 'abcdef'
	byte 0x616263646566 // "abcdef"
	frame_bury -1 // s: bytes

	// tests/contracts/general.algo.ts:134
	// assert(s.substring(1, 3) === 'bc')
	byte 0x6263
	byte 0x6263 // "bc"
	==
	assert
	retsub

// idProperty()void
abi_route_idProperty:
	byte 0x; dup // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute idProperty()void
	callsub idProperty
	int 1
	return

idProperty:
	proto 2 0

	// tests/contracts/general.algo.ts:138
	// app = Application.zeroIndex
	int 0
	frame_bury -1 // app: application

	// tests/contracts/general.algo.ts:139
	// assert(Application.fromID(app.id) === app)
	int 0 // app: application
	int 0 // app: application
	==
	assert

	// tests/contracts/general.algo.ts:141
	// asa = Asset.zeroIndex
	int 0
	frame_bury -2 // asa: asset

	// tests/contracts/general.algo.ts:142
	// assert(Asset.fromID(asa.id) === asa)
	int 0 // asa: asset
	int 0 // asa: asset
	==
	assert
	retsub

// scratchSlot()void
abi_route_scratchSlot:
	// execute scratchSlot()void
	callsub scratchSlot
	int 1
	return

scratchSlot:
	proto 0 0

	// tests/contracts/general.algo.ts:146
	// this.scratch.value = 1337
	int 1337
	store 0

	// tests/contracts/general.algo.ts:147
	// assert(this.scratch.value === 1337)
	load 0
	int 1337
	==
	assert
	retsub

// ecdsa()(uint512,uint512)
abi_route_ecdsa:
	// execute ecdsa()(uint512,uint512)
	callsub ecdsa
	int 1
	return

ecdsa:
	proto 0 0

	// tests/contracts/general.algo.ts:151
	// ecdsa_verify('Secp256k1', '' as StaticArray<byte, 32>, 1, 2, 3, 4)
	byte 0x0000000000000000000000000000000000000000000000000000000000000000 // ""
	byte 0x01
	byte 0x02
	byte 0x03
	byte 0x04
	ecdsa_verify Secp256k1

	// tests/contracts/general.algo.ts:152
	// ecdsa_pk_decompress('Secp256k1', '' as StaticArray<byte, 33>)
	byte 0x000000000000000000000000000000000000000000000000000000000000000000 // ""
	ecdsa_pk_decompress Secp256k1
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	concat

	// tests/contracts/general.algo.ts:153
	// return ecdsa_pk_recover('Secp256k1', '' as StaticArray<byte, 32>, 1, 2, 3);
	byte 0x0000000000000000000000000000000000000000000000000000000000000000 // ""
	int 1
	byte 0x02
	byte 0x03
	ecdsa_pk_recover Secp256k1
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	byte 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "txnTypeEnum()void"
	method "txnGroupLength()void"
	method "asserts(bool,bool)void"
	method "verifyTxnFromArg(pay)void"
	method "verifyTxnFromTxnGroup()void"
	method "verifyTxnCondition()void"
	method "verifyTxnIncludedIn()void"
	method "verifyTxnNotIncludedIn()void"
	method "submitPendingGroup()void"
	method "methodWithTxnArgs()void"
	method "shift()void"
	method "fromBytes()void"
	method "fromID()void"
	method "bzeroFunction()void"
	method "events()void"
	method "letOptimization(uint64[])uint64[]"
	method "staticContractProperties()void"
	method "numberToString()void"
	method "methodOnParens()void"
	method "stringSubstring()void"
	method "idProperty()void"
	method "scratchSlot()void"
	method "ecdsa()(uint512,uint512)"
	txna ApplicationArgs 0
	match abi_route_txnTypeEnum abi_route_txnGroupLength abi_route_asserts abi_route_verifyTxnFromArg abi_route_verifyTxnFromTxnGroup abi_route_verifyTxnCondition abi_route_verifyTxnIncludedIn abi_route_verifyTxnNotIncludedIn abi_route_submitPendingGroup abi_route_methodWithTxnArgs abi_route_shift abi_route_fromBytes abi_route_fromID abi_route_bzeroFunction abi_route_events abi_route_letOptimization abi_route_staticContractProperties abi_route_numberToString abi_route_methodOnParens abi_route_stringSubstring abi_route_idProperty abi_route_scratchSlot abi_route_ecdsa
	err

intToAscii:
	proto 1 1
	byte 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	int 1
	extract3
	retsub
	

itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	int 0
	==
	bz itoa_if_end
	byte 0x151f7c75000130
	log
	retsub

itoa_if_end:
	frame_dig -1 // i: uint64
	int 10
	/
	int 0
	>
	bz itoa_ternary_false
	frame_dig -1 // i: uint64
	int 10
	/
	callsub itoa
	b itoa_ternary_end

itoa_ternary_false:
	byte 0x // ""

itoa_ternary_end:
	frame_dig -1 // i: uint64
	int 10
	%
	callsub intToAscii
	concat
	retsub
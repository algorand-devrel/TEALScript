#pragma version 9

// This TEAL was generated by TEALScript v0.44.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// prefix()void
abi_route_prefix:
	// execute prefix()void
	callsub prefix
	int 1
	return

prefix:
	proto 0 0

	// tests/contracts/storage.algo.ts:20
	// this.boxMapWithPrefix('oo').value = 'bar'
	byte "f"
	byte "oo"
	concat
	dup
	box_del
	pop
	byte "bar"
	box_put
	retsub

// globalKeyPut()void
abi_route_globalKeyPut:
	// execute globalKeyPut()void
	callsub globalKeyPut
	int 1
	return

globalKeyPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:24
	// this.globalKey.value = 'bar'
	byte "foo"
	byte "bar"
	app_global_put
	retsub

// globalKeyGet()void
abi_route_globalKeyGet:
	// execute globalKeyGet()void
	callsub globalKeyGet
	int 1
	return

globalKeyGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:28
	// assert(this.globalKey.value === 'bar')
	byte "foo"
	app_global_get
	byte "bar"
	==
	assert
	retsub

// globalKeyDelete()void
abi_route_globalKeyDelete:
	// execute globalKeyDelete()void
	callsub globalKeyDelete
	int 1
	return

globalKeyDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:32
	// this.globalKey.delete()
	byte "foo"
	app_global_del
	retsub

// globalKeyExists()void
abi_route_globalKeyExists:
	// execute globalKeyExists()void
	callsub globalKeyExists
	int 1
	return

globalKeyExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:36
	// assert(this.globalKey.exists)
	txna Applications 0
	byte "foo"
	app_global_get_ex
	swap
	pop
	assert
	retsub

// localKeyPut(account)void
abi_route_localKeyPut:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localKeyPut(account)void
	callsub localKeyPut
	int 1
	return

localKeyPut:
	proto 1 0

	// tests/contracts/storage.algo.ts:40
	// this.localKey(a).value = 'bar'
	frame_dig -1 // a: account
	byte "foo"
	byte "bar"
	app_local_put
	retsub

// localKeyGet(account)void
abi_route_localKeyGet:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localKeyGet(account)void
	callsub localKeyGet
	int 1
	return

localKeyGet:
	proto 1 0

	// tests/contracts/storage.algo.ts:44
	// assert(this.localKey(a).value === 'bar')
	frame_dig -1 // a: account
	byte "foo"
	app_local_get
	byte "bar"
	==
	assert
	retsub

// localKeyDelete(account)void
abi_route_localKeyDelete:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localKeyDelete(account)void
	callsub localKeyDelete
	int 1
	return

localKeyDelete:
	proto 1 0

	// tests/contracts/storage.algo.ts:48
	// this.localKey(a).delete()
	frame_dig -1 // a: account
	byte "foo"
	app_local_del
	retsub

// localKeyExists(account)void
abi_route_localKeyExists:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localKeyExists(account)void
	callsub localKeyExists
	int 1
	return

localKeyExists:
	proto 1 0

	// tests/contracts/storage.algo.ts:52
	// assert(this.localKey(a).exists)
	frame_dig -1 // a: account
	txna Applications 0
	byte "foo"
	app_local_get_ex
	swap
	pop
	assert
	retsub

// boxKeyPut()void
abi_route_boxKeyPut:
	// execute boxKeyPut()void
	callsub boxKeyPut
	int 1
	return

boxKeyPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:56
	// this.boxKey.value = 'bar'
	byte "foo"
	byte "bar"
	box_put
	retsub

// boxKeyGet()void
abi_route_boxKeyGet:
	// execute boxKeyGet()void
	callsub boxKeyGet
	int 1
	return

boxKeyGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:60
	// assert(this.boxKey.value === 'bar')
	byte "foo"
	box_get
	assert
	byte "bar"
	==
	assert
	retsub

// boxKeyDelete()void
abi_route_boxKeyDelete:
	// execute boxKeyDelete()void
	callsub boxKeyDelete
	int 1
	return

boxKeyDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:64
	// this.boxKey.delete()
	byte "foo"
	box_del
	retsub

// boxKeyExists()void
abi_route_boxKeyExists:
	// execute boxKeyExists()void
	callsub boxKeyExists
	int 1
	return

boxKeyExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:68
	// assert(this.boxKey.exists)
	byte "foo"
	box_len
	swap
	pop
	assert
	retsub

// globalMapPut()void
abi_route_globalMapPut:
	// execute globalMapPut()void
	callsub globalMapPut
	int 1
	return

globalMapPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:72
	// this.globalMap('foo').value = 'bar'
	byte "foo"
	byte "bar"
	app_global_put
	retsub

// globalMapGet()void
abi_route_globalMapGet:
	// execute globalMapGet()void
	callsub globalMapGet
	int 1
	return

globalMapGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:76
	// assert(this.globalMap('foo').value === 'bar')
	byte "foo"
	app_global_get
	byte "bar"
	==
	assert
	retsub

// globalMapDelete()void
abi_route_globalMapDelete:
	// execute globalMapDelete()void
	callsub globalMapDelete
	int 1
	return

globalMapDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:80
	// this.globalMap('foo').delete()
	byte "foo"
	app_global_del
	retsub

// globalMapExists()void
abi_route_globalMapExists:
	// execute globalMapExists()void
	callsub globalMapExists
	int 1
	return

globalMapExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:84
	// assert(this.globalMap('foo').exists)
	txna Applications 0
	byte "foo"
	app_global_get_ex
	swap
	pop
	assert
	retsub

// localMapPut(account)void
abi_route_localMapPut:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localMapPut(account)void
	callsub localMapPut
	int 1
	return

localMapPut:
	proto 1 0

	// tests/contracts/storage.algo.ts:88
	// this.localMap(a, 'foo').value = 'bar'
	frame_dig -1 // a: account
	byte "foo"
	byte "bar"
	app_local_put
	retsub

// localMapGet(account)void
abi_route_localMapGet:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localMapGet(account)void
	callsub localMapGet
	int 1
	return

localMapGet:
	proto 1 0

	// tests/contracts/storage.algo.ts:92
	// assert(this.localMap(a, 'foo').value === 'bar')
	frame_dig -1 // a: account
	byte "foo"
	app_local_get
	byte "bar"
	==
	assert
	retsub

// localMapDelete(account)void
abi_route_localMapDelete:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localMapDelete(account)void
	callsub localMapDelete
	int 1
	return

localMapDelete:
	proto 1 0

	// tests/contracts/storage.algo.ts:96
	// this.localMap(a, 'foo').delete()
	frame_dig -1 // a: account
	byte "foo"
	app_local_del
	retsub

// localMapExists(account)void
abi_route_localMapExists:
	// a: account
	txna ApplicationArgs 1
	btoi
	txnas Accounts

	// execute localMapExists(account)void
	callsub localMapExists
	int 1
	return

localMapExists:
	proto 1 0

	// tests/contracts/storage.algo.ts:100
	// assert(this.localMap(a, 'foo').exists)
	frame_dig -1 // a: account
	txna Applications 0
	byte "foo"
	app_local_get_ex
	swap
	pop
	assert
	retsub

// boxMapPut()void
abi_route_boxMapPut:
	// execute boxMapPut()void
	callsub boxMapPut
	int 1
	return

boxMapPut:
	proto 0 0

	// tests/contracts/storage.algo.ts:104
	// this.boxMap('foo').value = 'bar'
	byte "foo"
	byte "bar"
	box_put
	retsub

// boxMapGet()void
abi_route_boxMapGet:
	// execute boxMapGet()void
	callsub boxMapGet
	int 1
	return

boxMapGet:
	proto 0 0

	// tests/contracts/storage.algo.ts:108
	// assert(this.boxMap('foo').value === 'bar')
	byte "foo"
	box_get
	assert
	byte "bar"
	==
	assert
	retsub

// boxMapDelete()void
abi_route_boxMapDelete:
	// execute boxMapDelete()void
	callsub boxMapDelete
	int 1
	return

boxMapDelete:
	proto 0 0

	// tests/contracts/storage.algo.ts:112
	// this.boxMap('foo').delete()
	byte "foo"
	box_del
	retsub

// boxMapExists()void
abi_route_boxMapExists:
	// execute boxMapExists()void
	callsub boxMapExists
	int 1
	return

boxMapExists:
	proto 0 0

	// tests/contracts/storage.algo.ts:116
	// assert(this.boxMap('foo').exists)
	byte "foo"
	box_len
	swap
	pop
	assert
	retsub

// boxKeyCreate()void
abi_route_boxKeyCreate:
	// execute boxKeyCreate()void
	callsub boxKeyCreate
	int 1
	return

boxKeyCreate:
	proto 0 0

	// tests/contracts/storage.algo.ts:120
	// this.boxKey.create(1024)
	byte "foo"
	int 1024
	box_create
	retsub

// boxMapCreate()void
abi_route_boxMapCreate:
	// execute boxMapCreate()void
	callsub boxMapCreate
	int 1
	return

boxMapCreate:
	proto 0 0

	// tests/contracts/storage.algo.ts:124
	// this.boxMap('bar').create(1024)
	byte "bar"
	int 1024
	box_create
	retsub

// boxKeyLength()uint64
abi_route_boxKeyLength:
	// execute boxKeyLength()uint64
	callsub boxKeyLength
	int 1
	return

boxKeyLength:
	proto 0 0

	// tests/contracts/storage.algo.ts:128
	// return this.boxKey.size;
	byte "foo"
	box_len
	assert
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// boxMapLength()uint64
abi_route_boxMapLength:
	// execute boxMapLength()uint64
	callsub boxMapLength
	int 1
	return

boxMapLength:
	proto 0 0

	// tests/contracts/storage.algo.ts:132
	// return this.boxMap('bar').size;
	byte "bar"
	box_len
	assert
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// boxKeyReplace()void
abi_route_boxKeyReplace:
	// execute boxKeyReplace()void
	callsub boxKeyReplace
	int 1
	return

boxKeyReplace:
	proto 0 0

	// tests/contracts/storage.algo.ts:136
	// this.boxKey.replace(0, 'abc')
	byte "foo"
	int 0
	byte "abc"
	box_replace
	retsub

// boxMapReplace()void
abi_route_boxMapReplace:
	// execute boxMapReplace()void
	callsub boxMapReplace
	int 1
	return

boxMapReplace:
	proto 0 0

	// tests/contracts/storage.algo.ts:140
	// this.boxMap('bar').replace(0, 'abc')
	byte "bar"
	int 0
	byte "abc"
	box_replace
	retsub

// boxKeyExtract()string
abi_route_boxKeyExtract:
	// execute boxKeyExtract()string
	callsub boxKeyExtract
	int 1
	return

boxKeyExtract:
	proto 0 0

	// tests/contracts/storage.algo.ts:144
	// return this.boxKey.extract(0, 3);
	byte "foo"
	int 0
	int 3
	box_extract
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// boxMapExtract()string
abi_route_boxMapExtract:
	// execute boxMapExtract()string
	callsub boxMapExtract
	int 1
	return

boxMapExtract:
	proto 0 0

	// tests/contracts/storage.algo.ts:148
	// return this.boxMap('bar').extract(0, 3);
	byte "bar"
	int 0
	int 3
	box_extract
	dup
	len
	itob
	extract 6 2
	swap
	concat
	byte 0x151f7c75
	swap
	concat
	log
	retsub

// isOptedIn()bool
abi_route_isOptedIn:
	// execute isOptedIn()bool
	callsub isOptedIn
	int 1
	return

isOptedIn:
	proto 0 0

	// tests/contracts/storage.algo.ts:152
	// return this.txn.sender.isOptedInToApp(this.app);
	txn Sender
	txna Applications 0
	app_opted_in
	byte 0x00
	int 0
	uncover 2
	setbit
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "prefix()void"
	method "globalKeyPut()void"
	method "globalKeyGet()void"
	method "globalKeyDelete()void"
	method "globalKeyExists()void"
	method "localKeyPut(account)void"
	method "localKeyGet(account)void"
	method "localKeyDelete(account)void"
	method "localKeyExists(account)void"
	method "boxKeyPut()void"
	method "boxKeyGet()void"
	method "boxKeyDelete()void"
	method "boxKeyExists()void"
	method "globalMapPut()void"
	method "globalMapGet()void"
	method "globalMapDelete()void"
	method "globalMapExists()void"
	method "localMapPut(account)void"
	method "localMapGet(account)void"
	method "localMapDelete(account)void"
	method "localMapExists(account)void"
	method "boxMapPut()void"
	method "boxMapGet()void"
	method "boxMapDelete()void"
	method "boxMapExists()void"
	method "boxKeyCreate()void"
	method "boxMapCreate()void"
	method "boxKeyLength()uint64"
	method "boxMapLength()uint64"
	method "boxKeyReplace()void"
	method "boxMapReplace()void"
	method "boxKeyExtract()string"
	method "boxMapExtract()string"
	method "isOptedIn()bool"
	txna ApplicationArgs 0
	match abi_route_prefix abi_route_globalKeyPut abi_route_globalKeyGet abi_route_globalKeyDelete abi_route_globalKeyExists abi_route_localKeyPut abi_route_localKeyGet abi_route_localKeyDelete abi_route_localKeyExists abi_route_boxKeyPut abi_route_boxKeyGet abi_route_boxKeyDelete abi_route_boxKeyExists abi_route_globalMapPut abi_route_globalMapGet abi_route_globalMapDelete abi_route_globalMapExists abi_route_localMapPut abi_route_localMapGet abi_route_localMapDelete abi_route_localMapExists abi_route_boxMapPut abi_route_boxMapGet abi_route_boxMapDelete abi_route_boxMapExists abi_route_boxKeyCreate abi_route_boxMapCreate abi_route_boxKeyLength abi_route_boxMapLength abi_route_boxKeyReplace abi_route_boxMapReplace abi_route_boxKeyExtract abi_route_boxMapExtract abi_route_isOptedIn
	err
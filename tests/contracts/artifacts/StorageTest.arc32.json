{
  "hints": {
    "prefix()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyPut(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyGet(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyDelete(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyExists(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapPut(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapGet(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapDelete(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapExists(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyCreate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapCreate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyLength()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapLength()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyReplace()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapReplace()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyExtract()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapExtract()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isOptedIn()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "exGlobal()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "exLocal()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "localKey": {
          "type": "bytes",
          "key": "foo"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "globalKey": {
          "type": "bytes",
          "key": "foo"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 3,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDkKCi8vIFRoaXMgVEVBTCB3YXMgZ2VuZXJhdGVkIGJ5IFRFQUxTY3JpcHQgdjAuNjUuMAovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlcHNlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIk5PVF9JTVBMTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECmludCAwCj4KaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoIGNyZWF0ZV9Ob09wIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgTk9UX0lNUExFTUVOVEVEIE5PVF9JTVBMRU1FTlRFRCBOT1RfSU1QTEVNRU5URUQgY2FsbF9Ob09wCgpOT1RfSU1QTEVNRU5URUQ6CgllcnIKCi8vIHByZWZpeCgpdm9pZAphYmlfcm91dGVfcHJlZml4OgoJLy8gZXhlY3V0ZSBwcmVmaXgoKXZvaWQKCWNhbGxzdWIgcHJlZml4CglpbnQgMQoJcmV0dXJuCgpwcmVmaXg6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MjQKCS8vIHRoaXMuYm94TWFwV2l0aFByZWZpeCgnb28nKS52YWx1ZSA9ICdiYXInCglieXRlIDB4NjY2ZjZmCglieXRlIDB4NjY2ZjZmCglib3hfZGVsCglwb3AKCWJ5dGUgMHg2MjYxNzIgLy8gImJhciIKCWJveF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjI1CgkvLyB0aGlzLmdsb2JhbE1hcFdpdGhQcmVmaXgoJ29vJykudmFsdWUgPSAnYmFyJwoJYnl0ZSAweDY2NmY2ZgoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJYXBwX2dsb2JhbF9wdXQKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjI2CgkvLyB0aGlzLmxvY2FsTWFwV2l0aFByZWZpeCh0aGlzLnR4bi5zZW5kZXIsICdvbycpLnZhbHVlID0gJ2JhcicKCXR4biBTZW5kZXIKCWJ5dGUgMHg2NjZmNmYKCWJ5dGUgMHg2MjYxNzIgLy8gImJhciIKCWFwcF9sb2NhbF9wdXQKCXJldHN1YgoKLy8gZ2xvYmFsS2V5UHV0KCl2b2lkCmFiaV9yb3V0ZV9nbG9iYWxLZXlQdXQ6CgkvLyBleGVjdXRlIGdsb2JhbEtleVB1dCgpdm9pZAoJY2FsbHN1YiBnbG9iYWxLZXlQdXQKCWludCAxCglyZXR1cm4KCmdsb2JhbEtleVB1dDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czozMAoJLy8gdGhpcy5nbG9iYWxLZXkudmFsdWUgPSAnYmFyJwoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gZ2xvYmFsS2V5R2V0KCl2b2lkCmFiaV9yb3V0ZV9nbG9iYWxLZXlHZXQ6CgkvLyBleGVjdXRlIGdsb2JhbEtleUdldCgpdm9pZAoJY2FsbHN1YiBnbG9iYWxLZXlHZXQKCWludCAxCglyZXR1cm4KCmdsb2JhbEtleUdldDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czozNAoJLy8gYXNzZXJ0KHRoaXMuZ2xvYmFsS2V5LnZhbHVlID09PSAnYmFyJykKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWFwcF9nbG9iYWxfZ2V0CglieXRlIDB4NjI2MTcyIC8vICJiYXIiCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIGdsb2JhbEtleURlbGV0ZSgpdm9pZAphYmlfcm91dGVfZ2xvYmFsS2V5RGVsZXRlOgoJLy8gZXhlY3V0ZSBnbG9iYWxLZXlEZWxldGUoKXZvaWQKCWNhbGxzdWIgZ2xvYmFsS2V5RGVsZXRlCglpbnQgMQoJcmV0dXJuCgpnbG9iYWxLZXlEZWxldGU6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MzgKCS8vIHRoaXMuZ2xvYmFsS2V5LmRlbGV0ZSgpCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglhcHBfZ2xvYmFsX2RlbAoJcmV0c3ViCgovLyBnbG9iYWxLZXlFeGlzdHMoKXZvaWQKYWJpX3JvdXRlX2dsb2JhbEtleUV4aXN0czoKCS8vIGV4ZWN1dGUgZ2xvYmFsS2V5RXhpc3RzKCl2b2lkCgljYWxsc3ViIGdsb2JhbEtleUV4aXN0cwoJaW50IDEKCXJldHVybgoKZ2xvYmFsS2V5RXhpc3RzOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjQyCgkvLyBhc3NlcnQodGhpcy5nbG9iYWxLZXkuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYXNzZXJ0CglyZXRzdWIKCi8vIGxvY2FsS2V5UHV0KGFjY291bnQpdm9pZAphYmlfcm91dGVfbG9jYWxLZXlQdXQ6CgkvLyBhOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGV4ZWN1dGUgbG9jYWxLZXlQdXQoYWNjb3VudCl2b2lkCgljYWxsc3ViIGxvY2FsS2V5UHV0CglpbnQgMQoJcmV0dXJuCgpsb2NhbEtleVB1dDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czo0NgoJLy8gdGhpcy5sb2NhbEtleShhKS52YWx1ZSA9ICdiYXInCglmcmFtZV9kaWcgLTEgLy8gYTogYWNjb3VudAoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJYXBwX2xvY2FsX3B1dAoJcmV0c3ViCgovLyBsb2NhbEtleUdldChhY2NvdW50KXZvaWQKYWJpX3JvdXRlX2xvY2FsS2V5R2V0OgoJLy8gYTogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoJdHhuYXMgQWNjb3VudHMKCgkvLyBleGVjdXRlIGxvY2FsS2V5R2V0KGFjY291bnQpdm9pZAoJY2FsbHN1YiBsb2NhbEtleUdldAoJaW50IDEKCXJldHVybgoKbG9jYWxLZXlHZXQ6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDEgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6NTAKCS8vIGFzc2VydCh0aGlzLmxvY2FsS2V5KGEpLnZhbHVlID09PSAnYmFyJykKCWZyYW1lX2RpZyAtMSAvLyBhOiBhY2NvdW50CglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglhcHBfbG9jYWxfZ2V0CglieXRlIDB4NjI2MTcyIC8vICJiYXIiCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIGxvY2FsS2V5RGVsZXRlKGFjY291bnQpdm9pZAphYmlfcm91dGVfbG9jYWxLZXlEZWxldGU6CgkvLyBhOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGV4ZWN1dGUgbG9jYWxLZXlEZWxldGUoYWNjb3VudCl2b2lkCgljYWxsc3ViIGxvY2FsS2V5RGVsZXRlCglpbnQgMQoJcmV0dXJuCgpsb2NhbEtleURlbGV0ZToKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czo1NAoJLy8gdGhpcy5sb2NhbEtleShhKS5kZWxldGUoKQoJZnJhbWVfZGlnIC0xIC8vIGE6IGFjY291bnQKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWFwcF9sb2NhbF9kZWwKCXJldHN1YgoKLy8gbG9jYWxLZXlFeGlzdHMoYWNjb3VudCl2b2lkCmFiaV9yb3V0ZV9sb2NhbEtleUV4aXN0czoKCS8vIGE6IGFjY291bnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFjY291bnRzCgoJLy8gZXhlY3V0ZSBsb2NhbEtleUV4aXN0cyhhY2NvdW50KXZvaWQKCWNhbGxzdWIgbG9jYWxLZXlFeGlzdHMKCWludCAxCglyZXR1cm4KCmxvY2FsS2V5RXhpc3RzOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjU4CgkvLyBhc3NlcnQodGhpcy5sb2NhbEtleShhKS5leGlzdHMpCglmcmFtZV9kaWcgLTEgLy8gYTogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYXBwX2xvY2FsX2dldF9leAoJc3dhcAoJcG9wCglhc3NlcnQKCXJldHN1YgoKLy8gYm94S2V5UHV0KCl2b2lkCmFiaV9yb3V0ZV9ib3hLZXlQdXQ6CgkvLyBleGVjdXRlIGJveEtleVB1dCgpdm9pZAoJY2FsbHN1YiBib3hLZXlQdXQKCWludCAxCglyZXR1cm4KCmJveEtleVB1dDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czo2MgoJLy8gdGhpcy5ib3hLZXkudmFsdWUgPSAnYmFyJwoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJYm94X3B1dAoJcmV0c3ViCgovLyBib3hLZXlHZXQoKXZvaWQKYWJpX3JvdXRlX2JveEtleUdldDoKCS8vIGV4ZWN1dGUgYm94S2V5R2V0KCl2b2lkCgljYWxsc3ViIGJveEtleUdldAoJaW50IDEKCXJldHVybgoKYm94S2V5R2V0OgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjY2CgkvLyBhc3NlcnQodGhpcy5ib3hLZXkudmFsdWUgPT09ICdiYXInKQoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYm94X2dldAoJYXNzZXJ0CglieXRlIDB4NjI2MTcyIC8vICJiYXIiCgk9PQoJYXNzZXJ0CglyZXRzdWIKCi8vIGJveEtleURlbGV0ZSgpdm9pZAphYmlfcm91dGVfYm94S2V5RGVsZXRlOgoJLy8gZXhlY3V0ZSBib3hLZXlEZWxldGUoKXZvaWQKCWNhbGxzdWIgYm94S2V5RGVsZXRlCglpbnQgMQoJcmV0dXJuCgpib3hLZXlEZWxldGU6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6NzAKCS8vIHRoaXMuYm94S2V5LmRlbGV0ZSgpCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglib3hfZGVsCglyZXRzdWIKCi8vIGJveEtleUV4aXN0cygpdm9pZAphYmlfcm91dGVfYm94S2V5RXhpc3RzOgoJLy8gZXhlY3V0ZSBib3hLZXlFeGlzdHMoKXZvaWQKCWNhbGxzdWIgYm94S2V5RXhpc3RzCglpbnQgMQoJcmV0dXJuCgpib3hLZXlFeGlzdHM6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6NzQKCS8vIGFzc2VydCh0aGlzLmJveEtleS5leGlzdHMpCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglib3hfbGVuCglzd2FwCglwb3AKCWFzc2VydAoJcmV0c3ViCgovLyBnbG9iYWxNYXBQdXQoKXZvaWQKYWJpX3JvdXRlX2dsb2JhbE1hcFB1dDoKCS8vIGV4ZWN1dGUgZ2xvYmFsTWFwUHV0KCl2b2lkCgljYWxsc3ViIGdsb2JhbE1hcFB1dAoJaW50IDEKCXJldHVybgoKZ2xvYmFsTWFwUHV0OgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjc4CgkvLyB0aGlzLmdsb2JhbE1hcCgnZm9vJykudmFsdWUgPSAnYmFyJwoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gZ2xvYmFsTWFwR2V0KCl2b2lkCmFiaV9yb3V0ZV9nbG9iYWxNYXBHZXQ6CgkvLyBleGVjdXRlIGdsb2JhbE1hcEdldCgpdm9pZAoJY2FsbHN1YiBnbG9iYWxNYXBHZXQKCWludCAxCglyZXR1cm4KCmdsb2JhbE1hcEdldDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czo4MgoJLy8gYXNzZXJ0KHRoaXMuZ2xvYmFsTWFwKCdmb28nKS52YWx1ZSA9PT0gJ2JhcicpCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglhcHBfZ2xvYmFsX2dldAoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBnbG9iYWxNYXBEZWxldGUoKXZvaWQKYWJpX3JvdXRlX2dsb2JhbE1hcERlbGV0ZToKCS8vIGV4ZWN1dGUgZ2xvYmFsTWFwRGVsZXRlKCl2b2lkCgljYWxsc3ViIGdsb2JhbE1hcERlbGV0ZQoJaW50IDEKCXJldHVybgoKZ2xvYmFsTWFwRGVsZXRlOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjg2CgkvLyB0aGlzLmdsb2JhbE1hcCgnZm9vJykuZGVsZXRlKCkKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWFwcF9nbG9iYWxfZGVsCglyZXRzdWIKCi8vIGdsb2JhbE1hcEV4aXN0cygpdm9pZAphYmlfcm91dGVfZ2xvYmFsTWFwRXhpc3RzOgoJLy8gZXhlY3V0ZSBnbG9iYWxNYXBFeGlzdHMoKXZvaWQKCWNhbGxzdWIgZ2xvYmFsTWFwRXhpc3RzCglpbnQgMQoJcmV0dXJuCgpnbG9iYWxNYXBFeGlzdHM6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6OTAKCS8vIGFzc2VydCh0aGlzLmdsb2JhbE1hcCgnZm9vJykuZXhpc3RzKQoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYXBwX2dsb2JhbF9nZXRfZXgKCXN3YXAKCXBvcAoJYXNzZXJ0CglyZXRzdWIKCi8vIGxvY2FsTWFwUHV0KGFjY291bnQpdm9pZAphYmlfcm91dGVfbG9jYWxNYXBQdXQ6CgkvLyBhOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGV4ZWN1dGUgbG9jYWxNYXBQdXQoYWNjb3VudCl2b2lkCgljYWxsc3ViIGxvY2FsTWFwUHV0CglpbnQgMQoJcmV0dXJuCgpsb2NhbE1hcFB1dDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czo5NAoJLy8gdGhpcy5sb2NhbE1hcChhLCAnZm9vJykudmFsdWUgPSAnYmFyJwoJZnJhbWVfZGlnIC0xIC8vIGE6IGFjY291bnQKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWJ5dGUgMHg2MjYxNzIgLy8gImJhciIKCWFwcF9sb2NhbF9wdXQKCXJldHN1YgoKLy8gbG9jYWxNYXBHZXQoYWNjb3VudCl2b2lkCmFiaV9yb3V0ZV9sb2NhbE1hcEdldDoKCS8vIGE6IGFjY291bnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFjY291bnRzCgoJLy8gZXhlY3V0ZSBsb2NhbE1hcEdldChhY2NvdW50KXZvaWQKCWNhbGxzdWIgbG9jYWxNYXBHZXQKCWludCAxCglyZXR1cm4KCmxvY2FsTWFwR2V0OgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjk4CgkvLyBhc3NlcnQodGhpcy5sb2NhbE1hcChhLCAnZm9vJykudmFsdWUgPT09ICdiYXInKQoJZnJhbWVfZGlnIC0xIC8vIGE6IGFjY291bnQKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWFwcF9sb2NhbF9nZXQKCWJ5dGUgMHg2MjYxNzIgLy8gImJhciIKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gbG9jYWxNYXBEZWxldGUoYWNjb3VudCl2b2lkCmFiaV9yb3V0ZV9sb2NhbE1hcERlbGV0ZToKCS8vIGE6IGFjY291bnQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCXR4bmFzIEFjY291bnRzCgoJLy8gZXhlY3V0ZSBsb2NhbE1hcERlbGV0ZShhY2NvdW50KXZvaWQKCWNhbGxzdWIgbG9jYWxNYXBEZWxldGUKCWludCAxCglyZXR1cm4KCmxvY2FsTWFwRGVsZXRlOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAxIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjEwMgoJLy8gdGhpcy5sb2NhbE1hcChhLCAnZm9vJykuZGVsZXRlKCkKCWZyYW1lX2RpZyAtMSAvLyBhOiBhY2NvdW50CglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglhcHBfbG9jYWxfZGVsCglyZXRzdWIKCi8vIGxvY2FsTWFwRXhpc3RzKGFjY291bnQpdm9pZAphYmlfcm91dGVfbG9jYWxNYXBFeGlzdHM6CgkvLyBhOiBhY2NvdW50Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgl0eG5hcyBBY2NvdW50cwoKCS8vIGV4ZWN1dGUgbG9jYWxNYXBFeGlzdHMoYWNjb3VudCl2b2lkCgljYWxsc3ViIGxvY2FsTWFwRXhpc3RzCglpbnQgMQoJcmV0dXJuCgpsb2NhbE1hcEV4aXN0czoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMSAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czoxMDYKCS8vIGFzc2VydCh0aGlzLmxvY2FsTWFwKGEsICdmb28nKS5leGlzdHMpCglmcmFtZV9kaWcgLTEgLy8gYTogYWNjb3VudAoJdHhuYSBBcHBsaWNhdGlvbnMgMAoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYXBwX2xvY2FsX2dldF9leAoJc3dhcAoJcG9wCglhc3NlcnQKCXJldHN1YgoKLy8gYm94TWFwUHV0KCl2b2lkCmFiaV9yb3V0ZV9ib3hNYXBQdXQ6CgkvLyBleGVjdXRlIGJveE1hcFB1dCgpdm9pZAoJY2FsbHN1YiBib3hNYXBQdXQKCWludCAxCglyZXR1cm4KCmJveE1hcFB1dDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czoxMTAKCS8vIHRoaXMuYm94TWFwKCdmb28nKS52YWx1ZSA9ICdiYXInCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglieXRlIDB4NjI2MTcyIC8vICJiYXIiCglib3hfcHV0CglyZXRzdWIKCi8vIGJveE1hcEdldCgpdm9pZAphYmlfcm91dGVfYm94TWFwR2V0OgoJLy8gZXhlY3V0ZSBib3hNYXBHZXQoKXZvaWQKCWNhbGxzdWIgYm94TWFwR2V0CglpbnQgMQoJcmV0dXJuCgpib3hNYXBHZXQ6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTE0CgkvLyBhc3NlcnQodGhpcy5ib3hNYXAoJ2ZvbycpLnZhbHVlID09PSAnYmFyJykKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWJveF9nZXQKCWFzc2VydAoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJPT0KCWFzc2VydAoJcmV0c3ViCgovLyBib3hNYXBEZWxldGUoKXZvaWQKYWJpX3JvdXRlX2JveE1hcERlbGV0ZToKCS8vIGV4ZWN1dGUgYm94TWFwRGVsZXRlKCl2b2lkCgljYWxsc3ViIGJveE1hcERlbGV0ZQoJaW50IDEKCXJldHVybgoKYm94TWFwRGVsZXRlOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjExOAoJLy8gdGhpcy5ib3hNYXAoJ2ZvbycpLmRlbGV0ZSgpCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglib3hfZGVsCglyZXRzdWIKCi8vIGJveE1hcEV4aXN0cygpdm9pZAphYmlfcm91dGVfYm94TWFwRXhpc3RzOgoJLy8gZXhlY3V0ZSBib3hNYXBFeGlzdHMoKXZvaWQKCWNhbGxzdWIgYm94TWFwRXhpc3RzCglpbnQgMQoJcmV0dXJuCgpib3hNYXBFeGlzdHM6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTIyCgkvLyBhc3NlcnQodGhpcy5ib3hNYXAoJ2ZvbycpLmV4aXN0cykKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWJveF9sZW4KCXN3YXAKCXBvcAoJYXNzZXJ0CglyZXRzdWIKCi8vIGJveEtleUNyZWF0ZSgpdm9pZAphYmlfcm91dGVfYm94S2V5Q3JlYXRlOgoJLy8gZXhlY3V0ZSBib3hLZXlDcmVhdGUoKXZvaWQKCWNhbGxzdWIgYm94S2V5Q3JlYXRlCglpbnQgMQoJcmV0dXJuCgpib3hLZXlDcmVhdGU6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTI2CgkvLyB0aGlzLmJveEtleS5jcmVhdGUoMTAyNCkKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWludCAxMDI0Cglib3hfY3JlYXRlCglyZXRzdWIKCi8vIGJveE1hcENyZWF0ZSgpdm9pZAphYmlfcm91dGVfYm94TWFwQ3JlYXRlOgoJLy8gZXhlY3V0ZSBib3hNYXBDcmVhdGUoKXZvaWQKCWNhbGxzdWIgYm94TWFwQ3JlYXRlCglpbnQgMQoJcmV0dXJuCgpib3hNYXBDcmVhdGU6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTMwCgkvLyB0aGlzLmJveE1hcCgnYmFyJykuY3JlYXRlKDEwMjQpCglieXRlIDB4NjI2MTcyIC8vICJiYXIiCglpbnQgMTAyNAoJYm94X2NyZWF0ZQoJcmV0c3ViCgovLyBib3hLZXlMZW5ndGgoKXVpbnQ2NAphYmlfcm91dGVfYm94S2V5TGVuZ3RoOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGJveEtleUxlbmd0aCgpdWludDY0CgljYWxsc3ViIGJveEtleUxlbmd0aAoJaXRvYgoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCmJveEtleUxlbmd0aDoKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAxCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czoxMzQKCS8vIHJldHVybiB0aGlzLmJveEtleS5zaXplOwoJYnl0ZSAweDY2NmY2ZiAvLyAiZm9vIgoJYm94X2xlbgoJYXNzZXJ0CglyZXRzdWIKCi8vIGJveE1hcExlbmd0aCgpdWludDY0CmFiaV9yb3V0ZV9ib3hNYXBMZW5ndGg6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGUgMHgxNTFmN2M3NQoKCS8vIGV4ZWN1dGUgYm94TWFwTGVuZ3RoKCl1aW50NjQKCWNhbGxzdWIgYm94TWFwTGVuZ3RoCglpdG9iCgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKYm94TWFwTGVuZ3RoOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDEKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjEzOAoJLy8gcmV0dXJuIHRoaXMuYm94TWFwKCdiYXInKS5zaXplOwoJYnl0ZSAweDYyNjE3MiAvLyAiYmFyIgoJYm94X2xlbgoJYXNzZXJ0CglyZXRzdWIKCi8vIGJveEtleVJlcGxhY2UoKXZvaWQKYWJpX3JvdXRlX2JveEtleVJlcGxhY2U6CgkvLyBleGVjdXRlIGJveEtleVJlcGxhY2UoKXZvaWQKCWNhbGxzdWIgYm94S2V5UmVwbGFjZQoJaW50IDEKCXJldHVybgoKYm94S2V5UmVwbGFjZToKCS8vIFNldHVwIHRoZSBmcmFtZSBmb3IgYXJncyBhbmQgcmV0dXJuIHZhbHVlLiBVc2UgZW1wdHkgYnl0ZXMgdG8gY3JlYXRlIHNwYWNlIG9uIHRoZSBzdGFjayBmb3IgbG9jYWwgdmFyaWFibGVzIGlmIG5lY2Vzc2FyeQoJcHJvdG8gMCAwCgoJLy8gdGVzdHMvY29udHJhY3RzL3N0b3JhZ2UuYWxnby50czoxNDIKCS8vIHRoaXMuYm94S2V5LnJlcGxhY2UoMCwgJ2FiYycpCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglpbnQgMAoJYnl0ZSAweDYxNjI2MyAvLyAiYWJjIgoJYm94X3JlcGxhY2UKCXJldHN1YgoKLy8gYm94TWFwUmVwbGFjZSgpdm9pZAphYmlfcm91dGVfYm94TWFwUmVwbGFjZToKCS8vIGV4ZWN1dGUgYm94TWFwUmVwbGFjZSgpdm9pZAoJY2FsbHN1YiBib3hNYXBSZXBsYWNlCglpbnQgMQoJcmV0dXJuCgpib3hNYXBSZXBsYWNlOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjE0NgoJLy8gdGhpcy5ib3hNYXAoJ2JhcicpLnJlcGxhY2UoMCwgJ2FiYycpCglieXRlIDB4NjI2MTcyIC8vICJiYXIiCglpbnQgMAoJYnl0ZSAweDYxNjI2MyAvLyAiYWJjIgoJYm94X3JlcGxhY2UKCXJldHN1YgoKLy8gYm94S2V5RXh0cmFjdCgpc3RyaW5nCmFiaV9yb3V0ZV9ib3hLZXlFeHRyYWN0OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGJveEtleUV4dHJhY3QoKXN0cmluZwoJY2FsbHN1YiBib3hLZXlFeHRyYWN0CglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCmJveEtleUV4dHJhY3Q6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTUwCgkvLyByZXR1cm4gdGhpcy5ib3hLZXkuZXh0cmFjdCgwLCAzKTsKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWludCAwCglpbnQgMwoJYm94X2V4dHJhY3QKCXJldHN1YgoKLy8gYm94TWFwRXh0cmFjdCgpc3RyaW5nCmFiaV9yb3V0ZV9ib3hNYXBFeHRyYWN0OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGJveE1hcEV4dHJhY3QoKXN0cmluZwoJY2FsbHN1YiBib3hNYXBFeHRyYWN0CglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludCAxCglyZXR1cm4KCmJveE1hcEV4dHJhY3Q6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMQoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTU0CgkvLyByZXR1cm4gdGhpcy5ib3hNYXAoJ2JhcicpLmV4dHJhY3QoMCwgMyk7CglieXRlIDB4NjI2MTcyIC8vICJiYXIiCglpbnQgMAoJaW50IDMKCWJveF9leHRyYWN0CglyZXRzdWIKCi8vIGlzT3B0ZWRJbigpYm9vbAphYmlfcm91dGVfaXNPcHRlZEluOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlIDB4MTUxZjdjNzUKCgkvLyBleGVjdXRlIGlzT3B0ZWRJbigpYm9vbAoJY2FsbHN1YiBpc09wdGVkSW4KCWJ5dGUgMHgwMAoJaW50IDAKCXVuY292ZXIgMgoJc2V0Yml0Cgljb25jYXQKCWxvZwoJaW50IDEKCXJldHVybgoKaXNPcHRlZEluOgoJLy8gU2V0dXAgdGhlIGZyYW1lIGZvciBhcmdzIGFuZCByZXR1cm4gdmFsdWUuIFVzZSBlbXB0eSBieXRlcyB0byBjcmVhdGUgc3BhY2Ugb24gdGhlIHN0YWNrIGZvciBsb2NhbCB2YXJpYWJsZXMgaWYgbmVjZXNzYXJ5Cglwcm90byAwIDEKCgkvLyB0ZXN0cy9jb250cmFjdHMvc3RvcmFnZS5hbGdvLnRzOjE1OAoJLy8gcmV0dXJuIHRoaXMudHhuLnNlbmRlci5pc09wdGVkSW5Ub0FwcCh0aGlzLmFwcCk7Cgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglhcHBfb3B0ZWRfaW4KCXJldHN1YgoKLy8gZXhHbG9iYWwoKXZvaWQKYWJpX3JvdXRlX2V4R2xvYmFsOgoJLy8gZXhlY3V0ZSBleEdsb2JhbCgpdm9pZAoJY2FsbHN1YiBleEdsb2JhbAoJaW50IDEKCXJldHVybgoKZXhHbG9iYWw6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTYyCgkvLyBsb2codGhpcy5hcHAuZ2xvYmFsKCdmb28nKSBhcyBieXRlcykKCXR4bmEgQXBwbGljYXRpb25zIDAKCWJ5dGUgMHg2NjZmNmYgLy8gImZvbyIKCWFwcF9nbG9iYWxfZ2V0X2V4Cglhc3NlcnQKCWxvZwoJcmV0c3ViCgovLyBleExvY2FsKCl2b2lkCmFiaV9yb3V0ZV9leExvY2FsOgoJLy8gZXhlY3V0ZSBleExvY2FsKCl2b2lkCgljYWxsc3ViIGV4TG9jYWwKCWludCAxCglyZXR1cm4KCmV4TG9jYWw6CgkvLyBTZXR1cCB0aGUgZnJhbWUgZm9yIGFyZ3MgYW5kIHJldHVybiB2YWx1ZS4gVXNlIGVtcHR5IGJ5dGVzIHRvIGNyZWF0ZSBzcGFjZSBvbiB0aGUgc3RhY2sgZm9yIGxvY2FsIHZhcmlhYmxlcyBpZiBuZWNlc3NhcnkKCXByb3RvIDAgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9zdG9yYWdlLmFsZ28udHM6MTY2CgkvLyBsb2codGhpcy50eG4uc2VuZGVyLnN0YXRlKHRoaXMuYXBwLCAnZm9vJykgYXMgYnl0ZXMpCgl0eG4gU2VuZGVyCgl0eG5hIEFwcGxpY2F0aW9ucyAwCglieXRlIDB4NjY2ZjZmIC8vICJmb28iCglhcHBfbG9jYWxfZ2V0X2V4Cglhc3NlcnQKCWxvZwoJcmV0c3ViCgphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnQgMQoJcmV0dXJuCgpjcmVhdGVfTm9PcDoKCW1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCBhYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCWVycgoKY2FsbF9Ob09wOgoJbWV0aG9kICJwcmVmaXgoKXZvaWQiCgltZXRob2QgImdsb2JhbEtleVB1dCgpdm9pZCIKCW1ldGhvZCAiZ2xvYmFsS2V5R2V0KCl2b2lkIgoJbWV0aG9kICJnbG9iYWxLZXlEZWxldGUoKXZvaWQiCgltZXRob2QgImdsb2JhbEtleUV4aXN0cygpdm9pZCIKCW1ldGhvZCAibG9jYWxLZXlQdXQoYWNjb3VudCl2b2lkIgoJbWV0aG9kICJsb2NhbEtleUdldChhY2NvdW50KXZvaWQiCgltZXRob2QgImxvY2FsS2V5RGVsZXRlKGFjY291bnQpdm9pZCIKCW1ldGhvZCAibG9jYWxLZXlFeGlzdHMoYWNjb3VudCl2b2lkIgoJbWV0aG9kICJib3hLZXlQdXQoKXZvaWQiCgltZXRob2QgImJveEtleUdldCgpdm9pZCIKCW1ldGhvZCAiYm94S2V5RGVsZXRlKCl2b2lkIgoJbWV0aG9kICJib3hLZXlFeGlzdHMoKXZvaWQiCgltZXRob2QgImdsb2JhbE1hcFB1dCgpdm9pZCIKCW1ldGhvZCAiZ2xvYmFsTWFwR2V0KCl2b2lkIgoJbWV0aG9kICJnbG9iYWxNYXBEZWxldGUoKXZvaWQiCgltZXRob2QgImdsb2JhbE1hcEV4aXN0cygpdm9pZCIKCW1ldGhvZCAibG9jYWxNYXBQdXQoYWNjb3VudCl2b2lkIgoJbWV0aG9kICJsb2NhbE1hcEdldChhY2NvdW50KXZvaWQiCgltZXRob2QgImxvY2FsTWFwRGVsZXRlKGFjY291bnQpdm9pZCIKCW1ldGhvZCAibG9jYWxNYXBFeGlzdHMoYWNjb3VudCl2b2lkIgoJbWV0aG9kICJib3hNYXBQdXQoKXZvaWQiCgltZXRob2QgImJveE1hcEdldCgpdm9pZCIKCW1ldGhvZCAiYm94TWFwRGVsZXRlKCl2b2lkIgoJbWV0aG9kICJib3hNYXBFeGlzdHMoKXZvaWQiCgltZXRob2QgImJveEtleUNyZWF0ZSgpdm9pZCIKCW1ldGhvZCAiYm94TWFwQ3JlYXRlKCl2b2lkIgoJbWV0aG9kICJib3hLZXlMZW5ndGgoKXVpbnQ2NCIKCW1ldGhvZCAiYm94TWFwTGVuZ3RoKCl1aW50NjQiCgltZXRob2QgImJveEtleVJlcGxhY2UoKXZvaWQiCgltZXRob2QgImJveE1hcFJlcGxhY2UoKXZvaWQiCgltZXRob2QgImJveEtleUV4dHJhY3QoKXN0cmluZyIKCW1ldGhvZCAiYm94TWFwRXh0cmFjdCgpc3RyaW5nIgoJbWV0aG9kICJpc09wdGVkSW4oKWJvb2wiCgltZXRob2QgImV4R2xvYmFsKCl2b2lkIgoJbWV0aG9kICJleExvY2FsKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggYWJpX3JvdXRlX3ByZWZpeCBhYmlfcm91dGVfZ2xvYmFsS2V5UHV0IGFiaV9yb3V0ZV9nbG9iYWxLZXlHZXQgYWJpX3JvdXRlX2dsb2JhbEtleURlbGV0ZSBhYmlfcm91dGVfZ2xvYmFsS2V5RXhpc3RzIGFiaV9yb3V0ZV9sb2NhbEtleVB1dCBhYmlfcm91dGVfbG9jYWxLZXlHZXQgYWJpX3JvdXRlX2xvY2FsS2V5RGVsZXRlIGFiaV9yb3V0ZV9sb2NhbEtleUV4aXN0cyBhYmlfcm91dGVfYm94S2V5UHV0IGFiaV9yb3V0ZV9ib3hLZXlHZXQgYWJpX3JvdXRlX2JveEtleURlbGV0ZSBhYmlfcm91dGVfYm94S2V5RXhpc3RzIGFiaV9yb3V0ZV9nbG9iYWxNYXBQdXQgYWJpX3JvdXRlX2dsb2JhbE1hcEdldCBhYmlfcm91dGVfZ2xvYmFsTWFwRGVsZXRlIGFiaV9yb3V0ZV9nbG9iYWxNYXBFeGlzdHMgYWJpX3JvdXRlX2xvY2FsTWFwUHV0IGFiaV9yb3V0ZV9sb2NhbE1hcEdldCBhYmlfcm91dGVfbG9jYWxNYXBEZWxldGUgYWJpX3JvdXRlX2xvY2FsTWFwRXhpc3RzIGFiaV9yb3V0ZV9ib3hNYXBQdXQgYWJpX3JvdXRlX2JveE1hcEdldCBhYmlfcm91dGVfYm94TWFwRGVsZXRlIGFiaV9yb3V0ZV9ib3hNYXBFeGlzdHMgYWJpX3JvdXRlX2JveEtleUNyZWF0ZSBhYmlfcm91dGVfYm94TWFwQ3JlYXRlIGFiaV9yb3V0ZV9ib3hLZXlMZW5ndGggYWJpX3JvdXRlX2JveE1hcExlbmd0aCBhYmlfcm91dGVfYm94S2V5UmVwbGFjZSBhYmlfcm91dGVfYm94TWFwUmVwbGFjZSBhYmlfcm91dGVfYm94S2V5RXh0cmFjdCBhYmlfcm91dGVfYm94TWFwRXh0cmFjdCBhYmlfcm91dGVfaXNPcHRlZEluIGFiaV9yb3V0ZV9leEdsb2JhbCBhYmlfcm91dGVfZXhMb2NhbAoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "StorageTest",
    "desc": "",
    "methods": [
      {
        "name": "prefix",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyPut",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyGet",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyDelete",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyExists",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapPut",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapGet",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapDelete",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapExists",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyCreate",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapCreate",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyLength",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "boxMapLength",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "boxKeyReplace",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapReplace",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyExtract",
        "args": [],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "boxMapExtract",
        "args": [],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "isOptedIn",
        "args": [],
        "desc": "",
        "returns": {
          "type": "bool",
          "desc": ""
        }
      },
      {
        "name": "exGlobal",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "exLocal",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}
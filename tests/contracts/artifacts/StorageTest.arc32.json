{
  "hints": {
    "prefix()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalKeyExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyPut(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyGet(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyDelete(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localKeyExists(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "globalMapExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapPut(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapGet(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapDelete(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "localMapExists(account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapPut()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapGet()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapDelete()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapExists()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyCreate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapCreate()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyLength()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapLength()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyReplace()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapReplace()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxKeyExtract()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxMapExtract()string": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "isOptedIn()bool": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "exGlobal()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "exLocal()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {
        "localKey": {
          "type": "bytes",
          "key": "foo"
        }
      },
      "reserved": {}
    },
    "global": {
      "declared": {
        "globalKey": {
          "type": "bytes",
          "key": "foo"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 3,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "StorageTest",
    "desc": "",
    "methods": [
      {
        "name": "prefix",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalKeyExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyPut",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyGet",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyDelete",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localKeyExists",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "globalMapExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapPut",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapGet",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapDelete",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "localMapExists",
        "args": [
          {
            "name": "a",
            "type": "account",
            "desc": ""
          }
        ],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapPut",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapGet",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapDelete",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapExists",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyCreate",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapCreate",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyLength",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "boxMapLength",
        "args": [],
        "desc": "",
        "returns": {
          "type": "uint64",
          "desc": ""
        }
      },
      {
        "name": "boxKeyReplace",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxMapReplace",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "boxKeyExtract",
        "args": [],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "boxMapExtract",
        "args": [],
        "desc": "",
        "returns": {
          "type": "string",
          "desc": ""
        }
      },
      {
        "name": "isOptedIn",
        "args": [],
        "desc": "",
        "returns": {
          "type": "bool",
          "desc": ""
        }
      },
      {
        "name": "exGlobal",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "exLocal",
        "args": [],
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        }
      },
      {
        "name": "createApplication",
        "desc": "",
        "returns": {
          "type": "void",
          "desc": ""
        },
        "args": []
      }
    ]
  }
}
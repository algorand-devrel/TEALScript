#pragma version 8
	b main

abi_route_simpleTuple:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	callsub simpleTuple
	int 1
	return

simpleTuple:
	proto 1 0

	// tests/contracts/abi.algo.ts:246
	// a: [uint64, uint<16>, uint64, uint<16>] = [11, 22, 33, 44]
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0014 // initial head offset
	int 11
	itob
	callsub process_static_tuple_element
	int 22
	itob
	extract 6 0
	callsub process_static_tuple_element
	int 33
	itob
	callsub process_static_tuple_element
	int 44
	itob
	extract 6 0
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -1 // a: [uint64,uint16,uint64,uint16]

	// tests/contracts/abi.algo.ts:248
	// return a[3];
	frame_dig -1 // a: [uint64,uint16,uint64,uint16]
	store 0 // full array
	int 0 // initial offset
	int 18 // headOffset
	+
	load 0 // full array
	swap
	int 2
	extract3
	byte 0xFFFF
	b&
	byte 0x151f7c75
	swap
	concat
	log
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "simpleTuple()uint16"
	txna ApplicationArgs 0
	match abi_route_simpleTuple
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub
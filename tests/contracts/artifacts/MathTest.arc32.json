{
  "hints": {
    "u64plus(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u64minus(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u64mul(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u64div(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u256plus(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u256minus(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u256mul(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u256div(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "u64Return256(uint64,uint64)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "maxU64()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "exponent(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "variableTypeHint(uint8,uint8)uint16": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "uint8plus(uint8,uint8)uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "uint8exp(uint8,uint8)uint8": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "plusEquals(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "plusEqualsFromGlobal(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ufixedLiteralMul()ufixed64x2": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "ufixedMul(ufixed64x2,ufixed64x2)ufixed64x2": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "BigUfixedMul(ufixed128x2,ufixed128x2)ufixed128x2": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "TripleBigUfixedMul(ufixed128x2,ufixed128x2,ufixed128x2)ufixed128x2": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "boxTest()uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "unsafeMethodArgs(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "uint256ComparisonType(uint256,uint256)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "gKey": {
          "type": "uint64",
          "key": "gKey"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "MathTest",
    "desc": "",
    "methods": [
      {
        "name": "u64plus",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "u64minus",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "u64mul",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "u64div",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "u256plus",
        "args": [
          {
            "name": "a",
            "type": "uint256"
          },
          {
            "name": "b",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "u256minus",
        "args": [
          {
            "name": "a",
            "type": "uint256"
          },
          {
            "name": "b",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "u256mul",
        "args": [
          {
            "name": "a",
            "type": "uint256"
          },
          {
            "name": "b",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "u256div",
        "args": [
          {
            "name": "a",
            "type": "uint256"
          },
          {
            "name": "b",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "u64Return256",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "maxU64",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "exponent",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "variableTypeHint",
        "args": [
          {
            "name": "x",
            "type": "uint8"
          },
          {
            "name": "y",
            "type": "uint8"
          }
        ],
        "returns": {
          "type": "uint16"
        }
      },
      {
        "name": "uint8plus",
        "args": [
          {
            "name": "a",
            "type": "uint8"
          },
          {
            "name": "b",
            "type": "uint8"
          }
        ],
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "uint8exp",
        "args": [
          {
            "name": "a",
            "type": "uint8"
          },
          {
            "name": "b",
            "type": "uint8"
          }
        ],
        "returns": {
          "type": "uint8"
        }
      },
      {
        "name": "plusEquals",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "plusEqualsFromGlobal",
        "args": [
          {
            "name": "a",
            "type": "uint64"
          },
          {
            "name": "b",
            "type": "uint64"
          }
        ],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "ufixedLiteralMul",
        "args": [],
        "returns": {
          "type": "ufixed64x2"
        }
      },
      {
        "name": "ufixedMul",
        "args": [
          {
            "name": "a",
            "type": "ufixed64x2"
          },
          {
            "name": "b",
            "type": "ufixed64x2"
          }
        ],
        "returns": {
          "type": "ufixed64x2"
        }
      },
      {
        "name": "BigUfixedMul",
        "args": [
          {
            "name": "a",
            "type": "ufixed128x2"
          },
          {
            "name": "b",
            "type": "ufixed128x2"
          }
        ],
        "returns": {
          "type": "ufixed128x2"
        }
      },
      {
        "name": "TripleBigUfixedMul",
        "args": [
          {
            "name": "a",
            "type": "ufixed128x2"
          },
          {
            "name": "b",
            "type": "ufixed128x2"
          },
          {
            "name": "c",
            "type": "ufixed128x2"
          }
        ],
        "returns": {
          "type": "ufixed128x2"
        }
      },
      {
        "name": "boxTest",
        "args": [],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "unsafeMethodArgs",
        "args": [
          {
            "name": "a",
            "type": "uint256"
          },
          {
            "name": "b",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "uint256"
        }
      },
      {
        "name": "uint256ComparisonType",
        "args": [
          {
            "name": "a",
            "type": "uint256"
          },
          {
            "name": "b",
            "type": "uint256"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
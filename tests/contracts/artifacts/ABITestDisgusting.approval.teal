#pragma version 9

// This TEAL was generated by TEALScript v0.44.0
// https://github.com/algorand-devrel/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its repsective branch will be "NOT_IMPLMENTED" which just contains "err"
txn ApplicationID
int 0
>
int 6
*
txn OnCompletion
+
switch create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED call_NoOp

NOT_IMPLEMENTED:
	err

// disgusting()uint64
abi_route_disgusting:
	byte 0x // push empty bytes to fill the stack frame for this subroutine's local variables

	// execute disgusting()uint64
	callsub disgusting
	int 1
	return

disgusting:
	proto 1 0

	// tests/contracts/abi.algo.ts:294
	// a: StaticArray<[
	//       StaticArray<uint<16>, 2>,
	//       uint64,
	//       [uint<16>, uint64],
	//       StaticArray< StaticArray<uint64, 2>, 2>
	//     ], 2> = [
	//       [[11, 22], 33, [44, 55], [[66, 77], [88, 99]]],
	//       [[111, 222], 333, [444, 555], [[666, 777], [888, 999]]],
	//     ]
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0036 // initial head offset
	byte 0x000b
	byte 0x0016
	concat
	callsub process_static_tuple_element
	int 33
	itob
	callsub process_static_tuple_element
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000a // initial head offset
	byte 0x002c
	callsub process_static_tuple_element
	int 55
	itob
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	callsub process_static_tuple_element
	int 66
	itob
	int 77
	itob
	concat
	int 88
	itob
	int 99
	itob
	concat
	concat
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0036 // initial head offset
	byte 0x006f
	byte 0x00de
	concat
	callsub process_static_tuple_element
	int 333
	itob
	callsub process_static_tuple_element
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x000a // initial head offset
	byte 0x01bc
	callsub process_static_tuple_element
	int 555
	itob
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	callsub process_static_tuple_element
	int 666
	itob
	int 777
	itob
	concat
	int 888
	itob
	int 999
	itob
	concat
	concat
	callsub process_static_tuple_element
	pop // pop head offset
	concat // concat head and tail
	concat
	frame_bury -1 // a: [uint16[2],uint64,[uint16,uint64],uint64[2][2]][2]

	// tests/contracts/abi.algo.ts:304
	// a[1][3][1] = [8888, 9999]
	frame_dig -1 // a: [uint16[2],uint64,[uint16,uint64],uint64[2][2]][2]
	store 0 // full array
	int 0 // initial offset
	int 54 // acc * typeLength
	+
	int 22 // headOffset
	+
	int 16 // acc * typeLength
	+
	load 0 // full array
	swap
	int 8888
	itob
	int 9999
	itob
	concat
	replace3
	frame_bury -1 // a: [uint16[2],uint64,[uint16,uint64],uint64[2][2]][2]

	// tests/contracts/abi.algo.ts:305
	// return a[1][3][1][0];
	frame_dig -1 // a: [uint16[2],uint64,[uint16,uint64],uint64[2][2]][2]
	store 0 // full array
	int 0 // initial offset
	int 54 // acc * typeLength
	+
	int 22 // headOffset
	+
	int 16 // acc * typeLength
	+
	int 0 // acc * typeLength
	+
	load 0 // full array
	swap
	int 8
	extract3
	btoi
	itob
	byte 0x151f7c75
	swap
	concat
	log
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "disgusting()uint64"
	txna ApplicationArgs 0
	match abi_route_disgusting
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub
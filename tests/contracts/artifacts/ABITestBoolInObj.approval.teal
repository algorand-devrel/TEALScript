#pragma version 10
intcblock 0 1 2 6
bytecblock 0x 0x00 0xe67c8fcb 0xb8447b36

// This TEAL was generated by TEALScript v0.102.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// boolInObj()void
*abi_route_boolInObj:
	// execute boolInObj()void
	callsub boolInObj
	int 1
	return

// boolInObj(): void
boolInObj:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/abi.algo.ts:1225
	// x: { foo: boolean; bar: boolean; baz: boolean } = { foo: true, bar: true, baz: true }
	byte 0x00
	int 0
	int 1
	setbit
	int 1
	dup
	setbit
	int 2
	int 1
	setbit
	frame_bury 0 // x: { foo: boolean; bar: boolean; baz: boolean }

	// tests/contracts/abi.algo.ts:1226
	// x.bar = false
	frame_dig 0 // x: { foo: boolean; bar: boolean; baz: boolean }
	store 255 // full array
	load 255 // full array
	int 1
	int 0
	setbit
	frame_bury 0 // x: { foo: boolean; bar: boolean; baz: boolean }

	// tests/contracts/abi.algo.ts:1227
	// asserts(x.foo === true, x.bar === false, x.baz === true)
	frame_dig 0 // x: { foo: boolean; bar: boolean; baz: boolean }
	store 255 // full array
	load 255 // full array
	int 0
	getbit
	int 1
	==

	// asserts failed: asserts(x.foo === true, x.bar === false, x.baz === true)
	assert
	frame_dig 0 // x: { foo: boolean; bar: boolean; baz: boolean }
	store 255 // full array
	load 255 // full array
	int 1
	getbit
	int 0
	==

	// asserts failed: asserts(x.foo === true, x.bar === false, x.baz === true)
	assert
	frame_dig 0 // x: { foo: boolean; bar: boolean; baz: boolean }
	store 255 // full array
	load 255 // full array
	int 2
	getbit
	int 1
	==

	// asserts failed: asserts(x.foo === true, x.bar === false, x.baz === true)
	assert
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	byte 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	byte 0xe67c8fcb // method "boolInObj()void"
	txna ApplicationArgs 0
	match *abi_route_boolInObj

	// this contract does not implement the given ABI method for call NoOp
	err
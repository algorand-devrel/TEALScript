#pragma version 9

// This TEAL was generated by TEALScript v0.70.1
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implmented in the contract, its respective branch will be "NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch call_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED create_NoOp NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED NOT_IMPLEMENTED

NOT_IMPLEMENTED:
	err

abi_route_whileLoop:
	// The ABI return prefix
	byte 0x151f7c75

	// execute whileLoop()uint64
	callsub whileLoop
	itob
	concat
	log
	int 1
	return

// whileLoop()uint64
whileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/loops.algo.ts:6
	// i = 0
	int 0
	frame_bury 0 // i: uint64

while_0:
	// tests/contracts/loops.algo.ts:8
	// i < 10
	frame_dig 0 // i: uint64
	int 10
	<
	bz while_0_end

	// tests/contracts/loops.algo.ts:9
	// i = i + 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64
	b while_0

while_0_end:
	// tests/contracts/loops.algo.ts:12
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

abi_route_forLoop:
	// The ABI return prefix
	byte 0x151f7c75

	// execute forLoop()uint64
	callsub forLoop
	itob
	concat
	log
	int 1
	return

// forLoop()uint64
forLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dup

	// tests/contracts/loops.algo.ts:16
	// i = 0
	int 0
	frame_bury 0 // i: uint64

	// tests/contracts/loops.algo.ts:18
	// j = 0
	int 0
	frame_bury 1 // j: uint64

for_0:
	// tests/contracts/loops.algo.ts:18
	// j < 10
	frame_dig 1 // j: uint64
	int 10
	<
	bz for_0_end

	// tests/contracts/loops.algo.ts:19
	// i = i + 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64

	// tests/contracts/loops.algo.ts:18
	// j = j + 1
	frame_dig 1 // j: uint64
	int 1
	+
	frame_bury 1 // j: uint64
	b for_0

for_0_end:
	// tests/contracts/loops.algo.ts:22
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

abi_route_doWhileLoop:
	// The ABI return prefix
	byte 0x151f7c75

	// execute doWhileLoop()uint64
	callsub doWhileLoop
	itob
	concat
	log
	int 1
	return

// doWhileLoop()uint64
doWhileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x

	// tests/contracts/loops.algo.ts:26
	// i = 0
	int 0
	frame_bury 0 // i: uint64

do_while_0:
	// tests/contracts/loops.algo.ts:29
	// i = i + 1
	frame_dig 0 // i: uint64
	int 1
	+
	frame_bury 0 // i: uint64

	// tests/contracts/loops.algo.ts:30
	// i < 10
	frame_dig 0 // i: uint64
	int 10
	<
	bnz do_while_0

	// tests/contracts/loops.algo.ts:32
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

abi_route_createApplication:
	int 1
	return

create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match abi_route_createApplication
	err

call_NoOp:
	method "whileLoop()uint64"
	method "forLoop()uint64"
	method "doWhileLoop()uint64"
	txna ApplicationArgs 0
	match abi_route_whileLoop abi_route_forLoop abi_route_doWhileLoop
	err
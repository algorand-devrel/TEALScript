{
  "hints": {
    "payment()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetCreation()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "appCall()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetConfig()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetFreeze()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "assetTransfer()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "methodCall()uint64": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "onlineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "offlineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDk="
  },
  "contract": {
    "name": "ItxnsTest",
    "desc": "",
    "methods": [
      {
        "name": "payment",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetCreation",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "appCall",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetConfig",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetFreeze",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "assetTransfer",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "methodCall",
        "args": [],
        "returns": {
          "type": "uint64"
        }
      },
      {
        "name": "onlineKeyRegistration",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "offlineKeyRegistration",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}
#pragma version 10

// This TEAL was generated by TEALScript v0.91.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// forOfBreak()uint64
*abi_route_forOfBreak:
	// The ABI return prefix
	byte 0x151f7c75

	// execute forOfBreak()uint64
	callsub forOfBreak
	itob
	concat
	log
	int 1
	return

// forOfBreak(): uint64
forOfBreak:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	byte 0x
	dupn 4

	// tests/contracts/abi.algo.ts:1498
	// a: StaticArray<uint64, 3> = [1, 2, 3]
	byte 0x000000000000000100000000000000020000000000000003
	frame_bury 0 // a: StaticArray<uint64, 3>

	// tests/contracts/abi.algo.ts:1499
	// sum = 0
	int 0
	frame_bury 1 // sum: uint64
	frame_dig 0 // a: StaticArray<uint64, 3>
	dup
	frame_bury 2 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 3 // v: uint64
	int 0
	frame_bury 4 // the offset we are extracting the next element from

*forOf_0:
	// *if0_condition
	// tests/contracts/abi.algo.ts:1504
	// sum > 2
	frame_dig 1 // sum: uint64
	int 2
	>
	bz *if0_end

	// *if0_consequent
	b *forOf_0_end

*if0_end:
	// tests/contracts/abi.algo.ts:1505
	// sum += v
	frame_dig 1 // sum: uint64
	frame_dig 3 // v: uint64
	+
	frame_bury 1 // sum: uint64

*forOf_0_continue:
	// increment offset and loop if not out of bounds
	frame_dig 4 // the offset we are extracting the next element from
	int 8
	+
	dup
	int 24 // offset of last element
	<
	bz *forOf_0_end
	frame_bury 4 // the offset we are extracting the next element from
	frame_dig 2 // copy of the array we are iterating over
	frame_dig 4 // the offset we are extracting the next element from
	int 8
	extract
	btoi
	frame_bury 3 // v: uint64
	b *forOf_0

*forOf_0_end:
	// tests/contracts/abi.algo.ts:1507
	// return sum;
	frame_dig 1 // sum: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

*abi_route_createApplication:
	int 1
	return

*create_NoOp:
	method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "forOfBreak()uint64"
	txna ApplicationArgs 0
	match *abi_route_forOfBreak
	err
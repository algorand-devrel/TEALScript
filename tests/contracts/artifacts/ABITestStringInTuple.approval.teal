#pragma version 8
	b main

abi_route_stringInTuple:
	txn OnCompletion
	int NoOp
	==
	txn ApplicationID
	int 0
	!=
	&&
	assert
	byte 0x
	callsub stringInTuple
	int 1
	return

stringInTuple:
	proto 1 0

	// tests/contracts/abi.algo.ts:515
	// a: [uint<16>, uint<8>[], string, uint<8>[]] = [1, [2], 'Hello World!', [3]]
	byte 0x // initial head
	byte 0x // initial tail
	byte 0x0008 // initial head offset
	int 1
	itob
	extract 6 0
	callsub process_static_tuple_element
	int 2
	itob
	extract 7 0
	byte 0x0001
	swap
	concat
	callsub process_dynamic_tuple_element
	byte "Hello World!"
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub process_dynamic_tuple_element
	int 3
	itob
	extract 7 0
	byte 0x0001
	swap
	concat
	callsub process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury -1 // a: [uint16,uint8[],string,uint8[]]

	// tests/contracts/abi.algo.ts:517
	// return a;
	frame_dig -1 // a: [uint16,uint8[],string,uint8[]]
	byte 0x151f7c75
	swap
	concat
	log
	retsub

main:
	txn NumAppArgs
	bnz route_abi

	// default createApplication
	txn ApplicationID
	int 0
	==
	txn OnCompletion
	int NoOp
	==
	&&
	return

route_abi:
	method "stringInTuple()(uint16,uint8[],string,uint8[])"
	txna ApplicationArgs 0
	match abi_route_stringInTuple
	err

process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub
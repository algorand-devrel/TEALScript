// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Loops LoopsTest Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 10 5 1337
bytecblock 0x 0x151f7c75

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// whileLoop()uint64
*abi_route_whileLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute whileLoop()uint64
	callsub whileLoop
	itob
	concat
	log
	intc 0 // 1
	return

// whileLoop(): uint64
whileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/loops.algo.ts:7
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

*while_0:

*while_0_continue:
	// tests/contracts/loops.algo.ts:9
	// i < 10
	frame_dig 0 // i: uint64
	intc 2 // 10
	<
	bz *while_0_end

	// tests/contracts/loops.algo.ts:10
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64
	b *while_0

*while_0_end:
	// tests/contracts/loops.algo.ts:13
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// forLoop()uint64
*abi_route_forLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute forLoop()uint64
	callsub forLoop
	itob
	concat
	log
	intc 0 // 1
	return

// forLoop(): uint64
forLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/loops.algo.ts:17
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

	// tests/contracts/loops.algo.ts:19
	// for (let j = 0; j < 10; j = j + 1)
	intc 1 // 0
	frame_bury 1 // j: uint64

*for_0:
	// tests/contracts/loops.algo.ts:19
	// j < 10
	frame_dig 1 // j: uint64
	intc 2 // 10
	<
	bz *for_0_end

	// tests/contracts/loops.algo.ts:20
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

*for_0_continue:
	// tests/contracts/loops.algo.ts:19
	// j = j + 1
	frame_dig 1 // j: uint64
	intc 0 // 1
	+
	frame_bury 1 // j: uint64
	b *for_0

*for_0_end:
	// tests/contracts/loops.algo.ts:23
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// doWhileLoop()uint64
*abi_route_doWhileLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute doWhileLoop()uint64
	callsub doWhileLoop
	itob
	concat
	log
	intc 0 // 1
	return

// doWhileLoop(): uint64
doWhileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/loops.algo.ts:27
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

*do_while_0_statement:
	// tests/contracts/loops.algo.ts:30
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

*do_while_0:

*do_while_0_continue:
	// tests/contracts/loops.algo.ts:31
	// i < 10
	frame_dig 0 // i: uint64
	intc 2 // 10
	<
	bnz *do_while_0_statement

*do_while_0_end:
	// tests/contracts/loops.algo.ts:33
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// breakWhileLoop()uint64
*abi_route_breakWhileLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute breakWhileLoop()uint64
	callsub breakWhileLoop
	itob
	concat
	log
	intc 0 // 1
	return

// breakWhileLoop(): uint64
breakWhileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/loops.algo.ts:37
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

*while_1:

*while_1_continue:
	// tests/contracts/loops.algo.ts:39
	// i < 10
	frame_dig 0 // i: uint64
	intc 2 // 10
	<
	bz *while_1_end

	// tests/contracts/loops.algo.ts:40
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

	// *if0_condition
	// tests/contracts/loops.algo.ts:41
	// i === 5
	frame_dig 0 // i: uint64
	intc 3 // 5
	==
	bz *if0_end

	// *if0_consequent
	b *while_1_end

*if0_end:
	b *while_1

*while_1_end:
	// tests/contracts/loops.algo.ts:44
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// continueWhileLoop()uint64
*abi_route_continueWhileLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute continueWhileLoop()uint64
	callsub continueWhileLoop
	itob
	concat
	log
	intc 0 // 1
	return

// continueWhileLoop(): uint64
continueWhileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/loops.algo.ts:48
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

*while_2:

*while_2_continue:
	// tests/contracts/loops.algo.ts:50
	// i < 10
	frame_dig 0 // i: uint64
	intc 2 // 10
	<
	bz *while_2_end

	// *if1_condition
	// tests/contracts/loops.algo.ts:51
	// i === 5
	frame_dig 0 // i: uint64
	intc 3 // 5
	==
	bz *if1_end

	// *if1_consequent
	// tests/contracts/loops.algo.ts:52
	// i = 1337
	intc 4 // 1337
	frame_bury 0 // i: uint64
	b *while_2_continue

*if1_end:
	// tests/contracts/loops.algo.ts:55
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64
	b *while_2

*while_2_end:
	// tests/contracts/loops.algo.ts:58
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// breakForLoop()uint64
*abi_route_breakForLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute breakForLoop()uint64
	callsub breakForLoop
	itob
	concat
	log
	intc 0 // 1
	return

// breakForLoop(): uint64
breakForLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/loops.algo.ts:62
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

	// tests/contracts/loops.algo.ts:64
	// for (let j = 0; j < 10; j = j + 1)
	intc 1 // 0
	frame_bury 1 // j: uint64

*for_1:
	// tests/contracts/loops.algo.ts:64
	// j < 10
	frame_dig 1 // j: uint64
	intc 2 // 10
	<
	bz *for_1_end

	// tests/contracts/loops.algo.ts:65
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

	// *if2_condition
	// tests/contracts/loops.algo.ts:66
	// i === 5
	frame_dig 0 // i: uint64
	intc 3 // 5
	==
	bz *if2_end

	// *if2_consequent
	b *for_1_end

*if2_end:

*for_1_continue:
	// tests/contracts/loops.algo.ts:64
	// j = j + 1
	frame_dig 1 // j: uint64
	intc 0 // 1
	+
	frame_bury 1 // j: uint64
	b *for_1

*for_1_end:
	// tests/contracts/loops.algo.ts:69
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// continueForLoop()uint64
*abi_route_continueForLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute continueForLoop()uint64
	callsub continueForLoop
	itob
	concat
	log
	intc 0 // 1
	return

// continueForLoop(): uint64
continueForLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/loops.algo.ts:73
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

	// tests/contracts/loops.algo.ts:75
	// for (let j = 0; j < 10; j = j + 1)
	intc 1 // 0
	frame_bury 1 // j: uint64

*for_2:
	// tests/contracts/loops.algo.ts:75
	// j < 10
	frame_dig 1 // j: uint64
	intc 2 // 10
	<
	bz *for_2_end

	// *if3_condition
	// tests/contracts/loops.algo.ts:76
	// i === 5
	frame_dig 0 // i: uint64
	intc 3 // 5
	==
	bz *if3_end

	// *if3_consequent
	// tests/contracts/loops.algo.ts:77
	// i = 1337
	intc 4 // 1337
	frame_bury 0 // i: uint64
	b *for_2_continue

*if3_end:
	// tests/contracts/loops.algo.ts:80
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

*for_2_continue:
	// tests/contracts/loops.algo.ts:75
	// j = j + 1
	frame_dig 1 // j: uint64
	intc 0 // 1
	+
	frame_bury 1 // j: uint64
	b *for_2

*for_2_end:
	// tests/contracts/loops.algo.ts:83
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// breakDoWhileLoop()uint64
*abi_route_breakDoWhileLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute breakDoWhileLoop()uint64
	callsub breakDoWhileLoop
	itob
	concat
	log
	intc 0 // 1
	return

// breakDoWhileLoop(): uint64
breakDoWhileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/loops.algo.ts:87
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

*do_while_1_statement:
	// tests/contracts/loops.algo.ts:90
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

	// *if4_condition
	// tests/contracts/loops.algo.ts:91
	// i === 5
	frame_dig 0 // i: uint64
	intc 3 // 5
	==
	bz *if4_end

	// *if4_consequent
	b *do_while_1_end

*if4_end:

*do_while_1:

*do_while_1_continue:
	// tests/contracts/loops.algo.ts:92
	// i < 10
	frame_dig 0 // i: uint64
	intc 2 // 10
	<
	bnz *do_while_1_statement

*do_while_1_end:
	// tests/contracts/loops.algo.ts:94
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// continueDoWhileLoop()uint64
*abi_route_continueDoWhileLoop:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute continueDoWhileLoop()uint64
	callsub continueDoWhileLoop
	itob
	concat
	log
	intc 0 // 1
	return

// continueDoWhileLoop(): uint64
continueDoWhileLoop:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/loops.algo.ts:98
	// i = 0
	intc 1 // 0
	frame_bury 0 // i: uint64

*do_while_2_statement:
	// *if5_condition
	// tests/contracts/loops.algo.ts:101
	// i === 5
	frame_dig 0 // i: uint64
	intc 3 // 5
	==
	bz *if5_end

	// *if5_consequent
	// tests/contracts/loops.algo.ts:102
	// i = 1337
	intc 4 // 1337
	frame_bury 0 // i: uint64
	b *do_while_2_continue

*if5_end:
	// tests/contracts/loops.algo.ts:105
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64

*do_while_2:

*do_while_2_continue:
	// tests/contracts/loops.algo.ts:106
	// i < 10
	frame_dig 0 // i: uint64
	intc 2 // 10
	<
	bnz *do_while_2_statement

*do_while_2_end:
	// tests/contracts/loops.algo.ts:108
	// return i;
	frame_dig 0 // i: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xe164bbd9 // method "whileLoop()uint64"
	pushbytes 0x5b3ed9f6 // method "forLoop()uint64"
	pushbytes 0x1d861a3d // method "doWhileLoop()uint64"
	pushbytes 0x821fe829 // method "breakWhileLoop()uint64"
	pushbytes 0x8d15280a // method "continueWhileLoop()uint64"
	pushbytes 0x6897cf5e // method "breakForLoop()uint64"
	pushbytes 0x99cbacab // method "continueForLoop()uint64"
	pushbytes 0x86d5edd3 // method "breakDoWhileLoop()uint64"
	pushbytes 0xe01d9d42 // method "continueDoWhileLoop()uint64"
	txna ApplicationArgs 0
	match *abi_route_whileLoop *abi_route_forLoop *abi_route_doWhileLoop *abi_route_breakWhileLoop *abi_route_continueWhileLoop *abi_route_breakForLoop *abi_route_continueForLoop *abi_route_breakDoWhileLoop *abi_route_continueDoWhileLoop

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Loops LoopsTest Artifacts Maintains program size 1`] = `579`;

exports[`Loops LoopsTest Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "whileLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "forLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "doWhileLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "breakWhileLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "continueWhileLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "breakForLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "continueForLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "breakDoWhileLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "continueDoWhileLoop",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "LoopsTest",
}
`;

exports[`Loops LoopsTest Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "whileLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "forLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "doWhileLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "breakWhileLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "continueWhileLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "breakForLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "continueForLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "breakDoWhileLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "continueDoWhileLoop",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "LoopsTest",
  },
  "hints": {
    "breakDoWhileLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "breakForLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "breakWhileLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "continueDoWhileLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "continueForLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "continueWhileLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "doWhileLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "forLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "whileLoop()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

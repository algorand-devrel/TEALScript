// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`If IfTest Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 2 32
bytecblock 0x151f7c75 0x6966 0x656c7365 0x656e64 0x666f6f 0x 0x656c73652069662031 0x656c73652069662032 0x656c7365206966

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// singleIf(bool)string
*abi_route_singleIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg0) for singleIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute singleIf(bool)string
	callsub singleIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// singleIf(arg0: boolean): string
singleIf:
	proto 1 1

	// *if0_condition
	// tests/contracts/if.algo.ts:7
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if0_end

	// *if0_consequent
	// tests/contracts/if.algo.ts:8
	// return 'if';
	bytec 1 //  "if"
	retsub

*if0_end:
	// tests/contracts/if.algo.ts:11
	// return 'end';
	bytec 3 //  "end"
	retsub

// ifElse(bool)string
*abi_route_ifElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg0) for ifElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElse(bool)string
	callsub ifElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElse(arg0: boolean): string
ifElse:
	proto 1 1

	// *if1_condition
	// tests/contracts/if.algo.ts:15
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if1_else

	// *if1_consequent
	// tests/contracts/if.algo.ts:16
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if1_end

*if1_else:
	// tests/contracts/if.algo.ts:18
	// return 'else';
	bytec 2 //  "else"
	retsub

*if1_end:
	retsub

// ifElseIf(bool,bool)string
*abi_route_ifElseIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for ifElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for ifElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIf(bool,bool)string
	callsub ifElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIf(arg0: boolean, arg1: boolean): string
ifElseIf:
	proto 2 1

	// *if2_condition
	// tests/contracts/if.algo.ts:23
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if2_elseif1_condition

	// *if2_consequent
	// tests/contracts/if.algo.ts:24
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if2_end

*if2_elseif1_condition:
	// tests/contracts/if.algo.ts:25
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if2_end

	// *if2_elseif1_consequent
	// tests/contracts/if.algo.ts:26
	// return 'else if';
	bytec 8 //  "else if"
	retsub

*if2_end:
	// tests/contracts/if.algo.ts:29
	// return 'end';
	bytec 3 //  "end"
	retsub

// ifElseIfElse(bool,bool)string
*abi_route_ifElseIfElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for ifElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for ifElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIfElse(bool,bool)string
	callsub ifElseIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIfElse(arg0: boolean, arg1: boolean): string
ifElseIfElse:
	proto 2 1

	// *if3_condition
	// tests/contracts/if.algo.ts:33
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if3_elseif1_condition

	// *if3_consequent
	// tests/contracts/if.algo.ts:34
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if3_end

*if3_elseif1_condition:
	// tests/contracts/if.algo.ts:35
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if3_else

	// *if3_elseif1_consequent
	// tests/contracts/if.algo.ts:36
	// return 'else if';
	bytec 8 //  "else if"
	retsub
	b *if3_end

*if3_else:
	// tests/contracts/if.algo.ts:38
	// return 'else';
	bytec 2 //  "else"
	retsub

*if3_end:
	retsub

// ifElseIfElseIf(bool,bool,bool)string
*abi_route_ifElseIfElseIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg2: bool
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg2) for ifElseIfElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg1) for ifElseIfElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 2 (arg0) for ifElseIfElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIfElseIf(bool,bool,bool)string
	callsub ifElseIfElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIfElseIf(arg0: boolean, arg1: boolean, arg2: boolean): string
ifElseIfElseIf:
	proto 3 1

	// *if4_condition
	// tests/contracts/if.algo.ts:43
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if4_elseif1_condition

	// *if4_consequent
	// tests/contracts/if.algo.ts:44
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if4_end

*if4_elseif1_condition:
	// tests/contracts/if.algo.ts:45
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if4_elseif2_condition

	// *if4_elseif1_consequent
	// tests/contracts/if.algo.ts:46
	// return 'else if 1';
	bytec 6 //  "else if 1"
	retsub
	b *if4_end

*if4_elseif2_condition:
	// tests/contracts/if.algo.ts:47
	// arg2
	frame_dig -3 // arg2: boolean
	bz *if4_end

	// *if4_elseif2_consequent
	// tests/contracts/if.algo.ts:48
	// return 'else if 2';
	bytec 7 //  "else if 2"
	retsub

*if4_end:
	// tests/contracts/if.algo.ts:51
	// return 'end';
	bytec 3 //  "end"
	retsub

// ifElseIfElseIfElse(bool,bool,bool)string
*abi_route_ifElseIfElseIfElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg2: bool
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg2) for ifElseIfElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg1) for ifElseIfElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 2 (arg0) for ifElseIfElseIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute ifElseIfElseIfElse(bool,bool,bool)string
	callsub ifElseIfElseIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// ifElseIfElseIfElse(arg0: boolean, arg1: boolean, arg2: boolean): string
ifElseIfElseIfElse:
	proto 3 1

	// *if5_condition
	// tests/contracts/if.algo.ts:55
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if5_elseif1_condition

	// *if5_consequent
	// tests/contracts/if.algo.ts:56
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if5_end

*if5_elseif1_condition:
	// tests/contracts/if.algo.ts:57
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if5_elseif2_condition

	// *if5_elseif1_consequent
	// tests/contracts/if.algo.ts:58
	// return 'else if 1';
	bytec 6 //  "else if 1"
	retsub
	b *if5_end

*if5_elseif2_condition:
	// tests/contracts/if.algo.ts:59
	// arg2
	frame_dig -3 // arg2: boolean
	bz *if5_else

	// *if5_elseif2_consequent
	// tests/contracts/if.algo.ts:60
	// return 'else if 2';
	bytec 7 //  "else if 2"
	retsub
	b *if5_end

*if5_else:
	// tests/contracts/if.algo.ts:62
	// return 'else';
	bytec 2 //  "else"
	retsub

*if5_end:
	retsub

// nestedIf(bool,bool)string
*abi_route_nestedIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for nestedIf must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for nestedIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute nestedIf(bool,bool)string
	callsub nestedIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// nestedIf(arg0: boolean, arg1: boolean): string
nestedIf:
	proto 2 1

	// *if6_condition
	// tests/contracts/if.algo.ts:67
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if6_else

	// *if6_consequent
	// *if7_condition
	// tests/contracts/if.algo.ts:68
	// arg1
	frame_dig -2 // arg1: boolean
	bz *if7_end

	// *if7_consequent
	// tests/contracts/if.algo.ts:69
	// return 'nested if';
	pushbytes 0x6e6573746564206966 // "nested if"
	retsub

*if7_end:
	// tests/contracts/if.algo.ts:71
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if6_end

*if6_else:
	// tests/contracts/if.algo.ts:73
	// return 'else';
	bytec 2 //  "else"
	retsub

*if6_end:
	retsub

// bracketlessIfElse(bool)string
*abi_route_bracketlessIfElse:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg0) for bracketlessIfElse must be a bool
	assert
	intc 1 // 0
	getbit

	// execute bracketlessIfElse(bool)string
	callsub bracketlessIfElse
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// bracketlessIfElse(arg0: boolean): string
bracketlessIfElse:
	proto 1 1

	// *if8_condition
	// tests/contracts/if.algo.ts:78
	// arg0
	frame_dig -1 // arg0: boolean
	bz *if8_else

	// *if8_consequent
	// tests/contracts/if.algo.ts:78
	// return 'if';
	bytec 1 //  "if"
	retsub
	b *if8_end

*if8_else:
	// tests/contracts/if.algo.ts:79
	// return 'else';
	bytec 2 //  "else"
	retsub

*if8_end:
	retsub

// nestedTernary(bool,bool)uint64
*abi_route_nestedTernary:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg1: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg1) for nestedTernary must be a bool
	assert
	intc 1 // 0
	getbit

	// arg0: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg0) for nestedTernary must be a bool
	assert
	intc 1 // 0
	getbit

	// execute nestedTernary(bool,bool)uint64
	callsub nestedTernary
	itob
	concat
	log
	intc 0 // 1
	return

// nestedTernary(arg0: boolean, arg1: boolean): uint64
nestedTernary:
	proto 2 1

	// tests/contracts/if.algo.ts:84
	// return arg0 ? 1 : arg1 ? 2 : 3;
	frame_dig -1 // arg0: boolean
	bz *ternary0_false
	intc 0 // 1
	b *ternary0_end

*ternary0_false:
	frame_dig -2 // arg1: boolean
	bz *ternary1_false
	intc 2 // 2
	b *ternary1_end

*ternary1_false:
	pushint 3

*ternary1_end:

*ternary0_end:
	retsub

// stringIf(string)uint64
*abi_route_stringIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: string
	txna ApplicationArgs 1
	extract 2 0

	// execute stringIf(string)uint64
	callsub stringIf
	itob
	concat
	log
	intc 0 // 1
	return

// stringIf(arg0: string): uint64
stringIf:
	proto 1 1

	// *if9_condition
	// tests/contracts/if.algo.ts:88
	// arg0
	frame_dig -1 // arg0: string
	bytec 5 // 0x
	b!=
	bz *if9_end

	// *if9_consequent
	// tests/contracts/if.algo.ts:89
	// return 1;
	intc 0 // 1
	retsub

*if9_end:
	// tests/contracts/if.algo.ts:92
	// return 2;
	intc 2 // 2
	retsub

// stringTernary(string)uint64
*abi_route_stringTernary:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// arg0: string
	txna ApplicationArgs 1
	extract 2 0

	// execute stringTernary(string)uint64
	callsub stringTernary
	itob
	concat
	log
	intc 0 // 1
	return

// stringTernary(arg0: string): uint64
stringTernary:
	proto 1 1

	// tests/contracts/if.algo.ts:96
	// return arg0 ? 1 : 2;
	frame_dig -1 // arg0: string
	bytec 5 // 0x
	b!=
	bz *ternary2_false
	intc 0 // 1
	b *ternary2_end

*ternary2_false:
	intc 2 // 2

*ternary2_end:
	retsub

// smallUintConditional(uint16)void
*abi_route_smallUintConditional:
	// a: uint16
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 2
	==

	// argument 0 (a) for smallUintConditional must be a uint16
	assert
	btoi

	// execute smallUintConditional(uint16)void
	callsub smallUintConditional
	intc 0 // 1
	return

// smallUintConditional(a: uint16): void
smallUintConditional:
	proto 1 0

	// *if10_condition
	// tests/contracts/if.algo.ts:100
	// a
	frame_dig -1 // a: uint16
	bytec 5 // 0x
	b!=
	bz *if10_end

	// *if10_consequent
	// tests/contracts/if.algo.ts:101
	// log('foo')
	bytec 4 //  "foo"
	log

*if10_end:
	retsub

// smallUintComparisonConditional(uint16,uint16)void
*abi_route_smallUintComparisonConditional:
	// b: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 0 (b) for smallUintComparisonConditional must be a uint16
	assert
	btoi

	// a: uint16
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 2
	==

	// argument 1 (a) for smallUintComparisonConditional must be a uint16
	assert
	btoi

	// execute smallUintComparisonConditional(uint16,uint16)void
	callsub smallUintComparisonConditional
	intc 0 // 1
	return

// smallUintComparisonConditional(a: uint16, b: uint16): void
smallUintComparisonConditional:
	proto 2 0

	// *if11_condition
	// tests/contracts/if.algo.ts:106
	// a <= b
	frame_dig -1 // a: uint16
	frame_dig -2 // b: uint16
	<=
	bz *if11_end

	// *if11_consequent
	// tests/contracts/if.algo.ts:107
	// log('foo')
	bytec 4 //  "foo"
	log

*if11_end:
	retsub

// uint256ComparsionConditional(uint256,uint256)void
*abi_route_uint256ComparsionConditional:
	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 32
	==

	// argument 0 (b) for uint256ComparsionConditional must be a uint256
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 32
	==

	// argument 1 (a) for uint256ComparsionConditional must be a uint256
	assert

	// execute uint256ComparsionConditional(uint256,uint256)void
	callsub uint256ComparsionConditional
	intc 0 // 1
	return

// uint256ComparsionConditional(a: uint256, b: uint256): void
uint256ComparsionConditional:
	proto 2 0

	// *if12_condition
	// tests/contracts/if.algo.ts:112
	// a <= b
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b<=
	bz *if12_end

	// *if12_consequent
	// tests/contracts/if.algo.ts:113
	// log('foo')
	bytec 4 //  "foo"
	log

*if12_end:
	retsub

// nestedIfInElseIf(bool,bool)string
*abi_route_nestedIfInElseIf:
	// The ABI return prefix
	bytec 0 // 0x151f7c75

	// b: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (b) for nestedIfInElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// a: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (a) for nestedIfInElseIf must be a bool
	assert
	intc 1 // 0
	getbit

	// execute nestedIfInElseIf(bool,bool)string
	callsub nestedIfInElseIf
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// nestedIfInElseIf(a: boolean, b: boolean): string
nestedIfInElseIf:
	proto 2 1

	// *if13_condition
	// tests/contracts/if.algo.ts:118
	// a
	frame_dig -1 // a: boolean
	bz *if13_elseif1_condition

	// *if13_consequent
	// *if14_condition
	// tests/contracts/if.algo.ts:119
	// b
	frame_dig -2 // b: boolean
	bz *if14_else

	// *if14_consequent
	// tests/contracts/if.algo.ts:120
	// return 'a and b';
	pushbytes 0x6120616e642062 // "a and b"
	retsub
	b *if14_end

*if14_else:
	// tests/contracts/if.algo.ts:122
	// return 'a';
	pushbytes 0x61 // "a"
	retsub

*if14_end:
	b *if13_end

*if13_elseif1_condition:
	// tests/contracts/if.algo.ts:124
	// b
	frame_dig -2 // b: boolean
	bz *if13_else

	// *if13_elseif1_consequent
	// tests/contracts/if.algo.ts:125
	// return 'b';
	pushbytes 0x62 // "b"
	retsub
	b *if13_end

*if13_else:
	// tests/contracts/if.algo.ts:127
	// return 'neither';
	pushbytes 0x6e656974686572 // "neither"
	retsub

*if13_end:
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x436ec1c2 // method "singleIf(bool)string"
	pushbytes 0x1c7a0d5e // method "ifElse(bool)string"
	pushbytes 0x5e0fb6cf // method "ifElseIf(bool,bool)string"
	pushbytes 0x5e1c6c50 // method "ifElseIfElse(bool,bool)string"
	pushbytes 0x58d0ba92 // method "ifElseIfElseIf(bool,bool,bool)string"
	pushbytes 0x5d2f4f02 // method "ifElseIfElseIfElse(bool,bool,bool)string"
	pushbytes 0x845729d9 // method "nestedIf(bool,bool)string"
	pushbytes 0x8fe76ca8 // method "bracketlessIfElse(bool)string"
	pushbytes 0x1a3c7878 // method "nestedTernary(bool,bool)uint64"
	pushbytes 0x74bcc868 // method "stringIf(string)uint64"
	pushbytes 0x4212f905 // method "stringTernary(string)uint64"
	pushbytes 0x95ddaebf // method "smallUintConditional(uint16)void"
	pushbytes 0x3147b866 // method "smallUintComparisonConditional(uint16,uint16)void"
	pushbytes 0x42897f61 // method "uint256ComparsionConditional(uint256,uint256)void"
	pushbytes 0x534be2b7 // method "nestedIfInElseIf(bool,bool)string"
	txna ApplicationArgs 0
	match *abi_route_singleIf *abi_route_ifElse *abi_route_ifElseIf *abi_route_ifElseIfElse *abi_route_ifElseIfElseIf *abi_route_ifElseIfElseIfElse *abi_route_nestedIf *abi_route_bracketlessIfElse *abi_route_nestedTernary *abi_route_stringIf *abi_route_stringTernary *abi_route_smallUintConditional *abi_route_smallUintComparisonConditional *abi_route_uint256ComparsionConditional *abi_route_nestedIfInElseIf

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`If IfTest Artifacts Maintains program size 1`] = `1024`;

exports[`If IfTest Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "singleIf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "ifElse",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "ifElseIf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "ifElseIfElse",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg2",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "ifElseIfElseIf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg2",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "ifElseIfElseIfElse",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "nestedIf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "bracketlessIfElse",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "nestedTernary",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "string",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "stringIf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg0",
          "type": "string",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "stringTernary",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint16",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "smallUintConditional",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint16",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint16",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "smallUintComparisonConditional",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint256",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint256",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "uint256ComparsionConditional",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "nestedIfInElseIf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "IfTest",
}
`;

exports[`If IfTest Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "singleIf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "ifElse",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "ifElseIf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "ifElseIfElse",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg2",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "ifElseIfElseIf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg2",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "ifElseIfElseIfElse",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "nestedIf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "bracketlessIfElse",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "nestedTernary",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "string",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "stringIf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg0",
            "type": "string",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "stringTernary",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint16",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "smallUintConditional",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint16",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint16",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "smallUintComparisonConditional",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint256",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint256",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "uint256ComparsionConditional",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "nestedIfInElseIf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "IfTest",
  },
  "hints": {
    "bracketlessIfElse(bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "ifElse(bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "ifElseIf(bool,bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "ifElseIfElse(bool,bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "ifElseIfElseIf(bool,bool,bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "ifElseIfElseIfElse(bool,bool,bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "nestedIf(bool,bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "nestedIfInElseIf(bool,bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "nestedTernary(bool,bool)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "singleIf(bool)string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "smallUintComparisonConditional(uint16,uint16)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "smallUintConditional(uint16)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "stringIf(string)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "stringTernary(string)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "uint256ComparsionConditional(uint256,uint256)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMiAzMgpieXRlY2Jsb2NrIDB4MTUxZjdjNzUgMHg2OTY2IDB4NjU2YzczNjUgMHg2NTZlNjQgMHg2NjZmNmYgMHggMHg2NTZjNzM2NTIwNjk2NjIwMzEgMHg2NTZjNzM2NTIwNjk2NjIwMzIgMHg2NTZjNzM2NTIwNjk2NgoKLy8gaHR0cHM6Ly9naXRodWIuY29tL2FsZ29yYW5kZm91bmRhdGlvbi9URUFMU2NyaXB0CgovLyBUaGlzIGNvbnRyYWN0IGlzIGNvbXBsaWFudCB3aXRoIGFuZC9vciBpbXBsZW1lbnRzIHRoZSBmb2xsb3dpbmcgQVJDczogWyBBUkM0IF0KCi8vIFRoZSBmb2xsb3dpbmcgdGVuIGxpbmVzIG9mIFRFQUwgaGFuZGxlIGluaXRpYWwgcHJvZ3JhbSBmbG93Ci8vIFRoaXMgcGF0dGVybiBpcyB1c2VkIHRvIG1ha2UgaXQgZWFzeSBmb3IgYW55b25lIHRvIHBhcnNlIHRoZSBzdGFydCBvZiB0aGUgcHJvZ3JhbSBhbmQgZGV0ZXJtaW5lIGlmIGEgc3BlY2lmaWMgYWN0aW9uIGlzIGFsbG93ZWQKLy8gSGVyZSwgYWN0aW9uIHJlZmVycyB0byB0aGUgT25Db21wbGV0ZSBpbiBjb21iaW5hdGlvbiB3aXRoIHdoZXRoZXIgdGhlIGFwcCBpcyBiZWluZyBjcmVhdGVkIG9yIGNhbGxlZAovLyBFdmVyeSBwb3NzaWJsZSBhY3Rpb24gZm9yIHRoaXMgY29udHJhY3QgaXMgcmVwcmVzZW50ZWQgaW4gdGhlIHN3aXRjaCBzdGF0ZW1lbnQKLy8gSWYgdGhlIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhlIGNvbnRyYWN0LCBpdHMgcmVzcGVjdGl2ZSBicmFuY2ggd2lsbCBiZSAiKk5PVF9JTVBMRU1FTlRFRCIgd2hpY2gganVzdCBjb250YWlucyAiZXJyIgp0eG4gQXBwbGljYXRpb25JRAohCnB1c2hpbnQgNgoqCnR4biBPbkNvbXBsZXRpb24KKwpzd2l0Y2ggKmNhbGxfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNyZWF0ZV9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRAoKKk5PVF9JTVBMRU1FTlRFRDoKCS8vIFRoZSByZXF1ZXN0ZWQgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGlzIGNvbnRyYWN0LiBBcmUgeW91IHVzaW5nIHRoZSBjb3JyZWN0IE9uQ29tcGxldGU/IERpZCB5b3Ugc2V0IHlvdXIgYXBwIElEPwoJZXJyCgovLyBzaW5nbGVJZihib29sKXN0cmluZwoqYWJpX3JvdXRlX3NpbmdsZUlmOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhcmcwOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMCAoYXJnMCkgZm9yIHNpbmdsZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBleGVjdXRlIHNpbmdsZUlmKGJvb2wpc3RyaW5nCgljYWxsc3ViIHNpbmdsZUlmCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHNpbmdsZUlmKGFyZzA6IGJvb2xlYW4pOiBzdHJpbmcKc2luZ2xlSWY6Cglwcm90byAxIDEKCgkvLyAqaWYwX2NvbmRpdGlvbgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NwoJLy8gYXJnMAoJZnJhbWVfZGlnIC0xIC8vIGFyZzA6IGJvb2xlYW4KCWJ6ICppZjBfZW5kCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo4CgkvLyByZXR1cm4gJ2lmJzsKCWJ5dGVjIDEgLy8gICJpZiIKCXJldHN1YgoKKmlmMF9lbmQ6CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoxMQoJLy8gcmV0dXJuICdlbmQnOwoJYnl0ZWMgMyAvLyAgImVuZCIKCXJldHN1YgoKLy8gaWZFbHNlKGJvb2wpc3RyaW5nCiphYmlfcm91dGVfaWZFbHNlOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhcmcwOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMCAoYXJnMCkgZm9yIGlmRWxzZSBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gZXhlY3V0ZSBpZkVsc2UoYm9vbClzdHJpbmcKCWNhbGxzdWIgaWZFbHNlCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGlmRWxzZShhcmcwOiBib29sZWFuKTogc3RyaW5nCmlmRWxzZToKCXByb3RvIDEgMQoKCS8vICppZjFfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoxNQoJLy8gYXJnMAoJZnJhbWVfZGlnIC0xIC8vIGFyZzA6IGJvb2xlYW4KCWJ6ICppZjFfZWxzZQoKCS8vICppZjFfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MTYKCS8vIHJldHVybiAnaWYnOwoJYnl0ZWMgMSAvLyAgImlmIgoJcmV0c3ViCgliICppZjFfZW5kCgoqaWYxX2Vsc2U6CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoxOAoJLy8gcmV0dXJuICdlbHNlJzsKCWJ5dGVjIDIgLy8gICJlbHNlIgoJcmV0c3ViCgoqaWYxX2VuZDoKCXJldHN1YgoKLy8gaWZFbHNlSWYoYm9vbCxib29sKXN0cmluZwoqYWJpX3JvdXRlX2lmRWxzZUlmOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhcmcxOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMCAoYXJnMSkgZm9yIGlmRWxzZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBhcmcwOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMSAoYXJnMCkgZm9yIGlmRWxzZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBleGVjdXRlIGlmRWxzZUlmKGJvb2wsYm9vbClzdHJpbmcKCWNhbGxzdWIgaWZFbHNlSWYKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gaWZFbHNlSWYoYXJnMDogYm9vbGVhbiwgYXJnMTogYm9vbGVhbik6IHN0cmluZwppZkVsc2VJZjoKCXByb3RvIDIgMQoKCS8vICppZjJfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoyMwoJLy8gYXJnMAoJZnJhbWVfZGlnIC0xIC8vIGFyZzA6IGJvb2xlYW4KCWJ6ICppZjJfZWxzZWlmMV9jb25kaXRpb24KCgkvLyAqaWYyX2NvbnNlcXVlbnQKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjI0CgkvLyByZXR1cm4gJ2lmJzsKCWJ5dGVjIDEgLy8gICJpZiIKCXJldHN1YgoJYiAqaWYyX2VuZAoKKmlmMl9lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjI1CgkvLyBhcmcxCglmcmFtZV9kaWcgLTIgLy8gYXJnMTogYm9vbGVhbgoJYnogKmlmMl9lbmQKCgkvLyAqaWYyX2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MjYKCS8vIHJldHVybiAnZWxzZSBpZic7CglieXRlYyA4IC8vICAiZWxzZSBpZiIKCXJldHN1YgoKKmlmMl9lbmQ6CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoyOQoJLy8gcmV0dXJuICdlbmQnOwoJYnl0ZWMgMyAvLyAgImVuZCIKCXJldHN1YgoKLy8gaWZFbHNlSWZFbHNlKGJvb2wsYm9vbClzdHJpbmcKKmFiaV9yb3V0ZV9pZkVsc2VJZkVsc2U6CgkvLyBUaGUgQUJJIHJldHVybiBwcmVmaXgKCWJ5dGVjIDAgLy8gMHgxNTFmN2M3NQoKCS8vIGFyZzE6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDAgLy8gMQoJPT0KCgkvLyBhcmd1bWVudCAwIChhcmcxKSBmb3IgaWZFbHNlSWZFbHNlIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBhcmcwOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMSAoYXJnMCkgZm9yIGlmRWxzZUlmRWxzZSBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gZXhlY3V0ZSBpZkVsc2VJZkVsc2UoYm9vbCxib29sKXN0cmluZwoJY2FsbHN1YiBpZkVsc2VJZkVsc2UKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gaWZFbHNlSWZFbHNlKGFyZzA6IGJvb2xlYW4sIGFyZzE6IGJvb2xlYW4pOiBzdHJpbmcKaWZFbHNlSWZFbHNlOgoJcHJvdG8gMiAxCgoJLy8gKmlmM19jb25kaXRpb24KCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjMzCgkvLyBhcmcwCglmcmFtZV9kaWcgLTEgLy8gYXJnMDogYm9vbGVhbgoJYnogKmlmM19lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjNfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MzQKCS8vIHJldHVybiAnaWYnOwoJYnl0ZWMgMSAvLyAgImlmIgoJcmV0c3ViCgliICppZjNfZW5kCgoqaWYzX2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MzUKCS8vIGFyZzEKCWZyYW1lX2RpZyAtMiAvLyBhcmcxOiBib29sZWFuCglieiAqaWYzX2Vsc2UKCgkvLyAqaWYzX2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MzYKCS8vIHJldHVybiAnZWxzZSBpZic7CglieXRlYyA4IC8vICAiZWxzZSBpZiIKCXJldHN1YgoJYiAqaWYzX2VuZAoKKmlmM19lbHNlOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MzgKCS8vIHJldHVybiAnZWxzZSc7CglieXRlYyAyIC8vICAiZWxzZSIKCXJldHN1YgoKKmlmM19lbmQ6CglyZXRzdWIKCi8vIGlmRWxzZUlmRWxzZUlmKGJvb2wsYm9vbCxib29sKXN0cmluZwoqYWJpX3JvdXRlX2lmRWxzZUlmRWxzZUlmOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhcmcyOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMCAoYXJnMikgZm9yIGlmRWxzZUlmRWxzZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBhcmcxOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMSAoYXJnMSkgZm9yIGlmRWxzZUlmRWxzZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBhcmcwOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMiAoYXJnMCkgZm9yIGlmRWxzZUlmRWxzZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBleGVjdXRlIGlmRWxzZUlmRWxzZUlmKGJvb2wsYm9vbCxib29sKXN0cmluZwoJY2FsbHN1YiBpZkVsc2VJZkVsc2VJZgoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBpZkVsc2VJZkVsc2VJZihhcmcwOiBib29sZWFuLCBhcmcxOiBib29sZWFuLCBhcmcyOiBib29sZWFuKTogc3RyaW5nCmlmRWxzZUlmRWxzZUlmOgoJcHJvdG8gMyAxCgoJLy8gKmlmNF9jb25kaXRpb24KCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjQzCgkvLyBhcmcwCglmcmFtZV9kaWcgLTEgLy8gYXJnMDogYm9vbGVhbgoJYnogKmlmNF9lbHNlaWYxX2NvbmRpdGlvbgoKCS8vICppZjRfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NDQKCS8vIHJldHVybiAnaWYnOwoJYnl0ZWMgMSAvLyAgImlmIgoJcmV0c3ViCgliICppZjRfZW5kCgoqaWY0X2Vsc2VpZjFfY29uZGl0aW9uOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NDUKCS8vIGFyZzEKCWZyYW1lX2RpZyAtMiAvLyBhcmcxOiBib29sZWFuCglieiAqaWY0X2Vsc2VpZjJfY29uZGl0aW9uCgoJLy8gKmlmNF9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjQ2CgkvLyByZXR1cm4gJ2Vsc2UgaWYgMSc7CglieXRlYyA2IC8vICAiZWxzZSBpZiAxIgoJcmV0c3ViCgliICppZjRfZW5kCgoqaWY0X2Vsc2VpZjJfY29uZGl0aW9uOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NDcKCS8vIGFyZzIKCWZyYW1lX2RpZyAtMyAvLyBhcmcyOiBib29sZWFuCglieiAqaWY0X2VuZAoKCS8vICppZjRfZWxzZWlmMl9jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo0OAoJLy8gcmV0dXJuICdlbHNlIGlmIDInOwoJYnl0ZWMgNyAvLyAgImVsc2UgaWYgMiIKCXJldHN1YgoKKmlmNF9lbmQ6CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo1MQoJLy8gcmV0dXJuICdlbmQnOwoJYnl0ZWMgMyAvLyAgImVuZCIKCXJldHN1YgoKLy8gaWZFbHNlSWZFbHNlSWZFbHNlKGJvb2wsYm9vbCxib29sKXN0cmluZwoqYWJpX3JvdXRlX2lmRWxzZUlmRWxzZUlmRWxzZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYXJnMjogYm9vbAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZHVwCglsZW4KCWludGMgMCAvLyAxCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGFyZzIpIGZvciBpZkVsc2VJZkVsc2VJZkVsc2UgbXVzdCBiZSBhIGJvb2wKCWFzc2VydAoJaW50YyAxIC8vIDAKCWdldGJpdAoKCS8vIGFyZzE6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDAgLy8gMQoJPT0KCgkvLyBhcmd1bWVudCAxIChhcmcxKSBmb3IgaWZFbHNlSWZFbHNlSWZFbHNlIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBhcmcwOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMiAoYXJnMCkgZm9yIGlmRWxzZUlmRWxzZUlmRWxzZSBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gZXhlY3V0ZSBpZkVsc2VJZkVsc2VJZkVsc2UoYm9vbCxib29sLGJvb2wpc3RyaW5nCgljYWxsc3ViIGlmRWxzZUlmRWxzZUlmRWxzZQoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBpZkVsc2VJZkVsc2VJZkVsc2UoYXJnMDogYm9vbGVhbiwgYXJnMTogYm9vbGVhbiwgYXJnMjogYm9vbGVhbik6IHN0cmluZwppZkVsc2VJZkVsc2VJZkVsc2U6Cglwcm90byAzIDEKCgkvLyAqaWY1X2NvbmRpdGlvbgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NTUKCS8vIGFyZzAKCWZyYW1lX2RpZyAtMSAvLyBhcmcwOiBib29sZWFuCglieiAqaWY1X2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmNV9jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo1NgoJLy8gcmV0dXJuICdpZic7CglieXRlYyAxIC8vICAiaWYiCglyZXRzdWIKCWIgKmlmNV9lbmQKCippZjVfZWxzZWlmMV9jb25kaXRpb246CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo1NwoJLy8gYXJnMQoJZnJhbWVfZGlnIC0yIC8vIGFyZzE6IGJvb2xlYW4KCWJ6ICppZjVfZWxzZWlmMl9jb25kaXRpb24KCgkvLyAqaWY1X2Vsc2VpZjFfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NTgKCS8vIHJldHVybiAnZWxzZSBpZiAxJzsKCWJ5dGVjIDYgLy8gICJlbHNlIGlmIDEiCglyZXRzdWIKCWIgKmlmNV9lbmQKCippZjVfZWxzZWlmMl9jb25kaXRpb246CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo1OQoJLy8gYXJnMgoJZnJhbWVfZGlnIC0zIC8vIGFyZzI6IGJvb2xlYW4KCWJ6ICppZjVfZWxzZQoKCS8vICppZjVfZWxzZWlmMl9jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo2MAoJLy8gcmV0dXJuICdlbHNlIGlmIDInOwoJYnl0ZWMgNyAvLyAgImVsc2UgaWYgMiIKCXJldHN1YgoJYiAqaWY1X2VuZAoKKmlmNV9lbHNlOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NjIKCS8vIHJldHVybiAnZWxzZSc7CglieXRlYyAyIC8vICAiZWxzZSIKCXJldHN1YgoKKmlmNV9lbmQ6CglyZXRzdWIKCi8vIG5lc3RlZElmKGJvb2wsYm9vbClzdHJpbmcKKmFiaV9yb3V0ZV9uZXN0ZWRJZjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYXJnMTogYm9vbAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMCAvLyAxCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGFyZzEpIGZvciBuZXN0ZWRJZiBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gYXJnMDogYm9vbAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMCAvLyAxCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGFyZzApIGZvciBuZXN0ZWRJZiBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gZXhlY3V0ZSBuZXN0ZWRJZihib29sLGJvb2wpc3RyaW5nCgljYWxsc3ViIG5lc3RlZElmCglkdXAKCWxlbgoJaXRvYgoJZXh0cmFjdCA2IDIKCXN3YXAKCWNvbmNhdAoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIG5lc3RlZElmKGFyZzA6IGJvb2xlYW4sIGFyZzE6IGJvb2xlYW4pOiBzdHJpbmcKbmVzdGVkSWY6Cglwcm90byAyIDEKCgkvLyAqaWY2X2NvbmRpdGlvbgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NjcKCS8vIGFyZzAKCWZyYW1lX2RpZyAtMSAvLyBhcmcwOiBib29sZWFuCglieiAqaWY2X2Vsc2UKCgkvLyAqaWY2X2NvbnNlcXVlbnQKCS8vICppZjdfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo2OAoJLy8gYXJnMQoJZnJhbWVfZGlnIC0yIC8vIGFyZzE6IGJvb2xlYW4KCWJ6ICppZjdfZW5kCgoJLy8gKmlmN19jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo2OQoJLy8gcmV0dXJuICduZXN0ZWQgaWYnOwoJcHVzaGJ5dGVzIDB4NmU2NTczNzQ2NTY0MjA2OTY2IC8vICJuZXN0ZWQgaWYiCglyZXRzdWIKCippZjdfZW5kOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6NzEKCS8vIHJldHVybiAnaWYnOwoJYnl0ZWMgMSAvLyAgImlmIgoJcmV0c3ViCgliICppZjZfZW5kCgoqaWY2X2Vsc2U6CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo3MwoJLy8gcmV0dXJuICdlbHNlJzsKCWJ5dGVjIDIgLy8gICJlbHNlIgoJcmV0c3ViCgoqaWY2X2VuZDoKCXJldHN1YgoKLy8gYnJhY2tldGxlc3NJZkVsc2UoYm9vbClzdHJpbmcKKmFiaV9yb3V0ZV9icmFja2V0bGVzc0lmRWxzZToKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYXJnMDogYm9vbAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMCAvLyAxCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGFyZzApIGZvciBicmFja2V0bGVzc0lmRWxzZSBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gZXhlY3V0ZSBicmFja2V0bGVzc0lmRWxzZShib29sKXN0cmluZwoJY2FsbHN1YiBicmFja2V0bGVzc0lmRWxzZQoJZHVwCglsZW4KCWl0b2IKCWV4dHJhY3QgNiAyCglzd2FwCgljb25jYXQKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBicmFja2V0bGVzc0lmRWxzZShhcmcwOiBib29sZWFuKTogc3RyaW5nCmJyYWNrZXRsZXNzSWZFbHNlOgoJcHJvdG8gMSAxCgoJLy8gKmlmOF9jb25kaXRpb24KCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjc4CgkvLyBhcmcwCglmcmFtZV9kaWcgLTEgLy8gYXJnMDogYm9vbGVhbgoJYnogKmlmOF9lbHNlCgoJLy8gKmlmOF9jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo3OAoJLy8gcmV0dXJuICdpZic7CglieXRlYyAxIC8vICAiaWYiCglyZXRzdWIKCWIgKmlmOF9lbmQKCippZjhfZWxzZToKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjc5CgkvLyByZXR1cm4gJ2Vsc2UnOwoJYnl0ZWMgMiAvLyAgImVsc2UiCglyZXRzdWIKCippZjhfZW5kOgoJcmV0c3ViCgovLyBuZXN0ZWRUZXJuYXJ5KGJvb2wsYm9vbCl1aW50NjQKKmFiaV9yb3V0ZV9uZXN0ZWRUZXJuYXJ5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhcmcxOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMCAoYXJnMSkgZm9yIG5lc3RlZFRlcm5hcnkgbXVzdCBiZSBhIGJvb2wKCWFzc2VydAoJaW50YyAxIC8vIDAKCWdldGJpdAoKCS8vIGFyZzA6IGJvb2wKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDAgLy8gMQoJPT0KCgkvLyBhcmd1bWVudCAxIChhcmcwKSBmb3IgbmVzdGVkVGVybmFyeSBtdXN0IGJlIGEgYm9vbAoJYXNzZXJ0CglpbnRjIDEgLy8gMAoJZ2V0Yml0CgoJLy8gZXhlY3V0ZSBuZXN0ZWRUZXJuYXJ5KGJvb2wsYm9vbCl1aW50NjQKCWNhbGxzdWIgbmVzdGVkVGVybmFyeQoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIG5lc3RlZFRlcm5hcnkoYXJnMDogYm9vbGVhbiwgYXJnMTogYm9vbGVhbik6IHVpbnQ2NApuZXN0ZWRUZXJuYXJ5OgoJcHJvdG8gMiAxCgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6ODQKCS8vIHJldHVybiBhcmcwID8gMSA6IGFyZzEgPyAyIDogMzsKCWZyYW1lX2RpZyAtMSAvLyBhcmcwOiBib29sZWFuCglieiAqdGVybmFyeTBfZmFsc2UKCWludGMgMCAvLyAxCgliICp0ZXJuYXJ5MF9lbmQKCip0ZXJuYXJ5MF9mYWxzZToKCWZyYW1lX2RpZyAtMiAvLyBhcmcxOiBib29sZWFuCglieiAqdGVybmFyeTFfZmFsc2UKCWludGMgMiAvLyAyCgliICp0ZXJuYXJ5MV9lbmQKCip0ZXJuYXJ5MV9mYWxzZToKCXB1c2hpbnQgMwoKKnRlcm5hcnkxX2VuZDoKCip0ZXJuYXJ5MF9lbmQ6CglyZXRzdWIKCi8vIHN0cmluZ0lmKHN0cmluZyl1aW50NjQKKmFiaV9yb3V0ZV9zdHJpbmdJZjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYXJnMDogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgc3RyaW5nSWYoc3RyaW5nKXVpbnQ2NAoJY2FsbHN1YiBzdHJpbmdJZgoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHN0cmluZ0lmKGFyZzA6IHN0cmluZyk6IHVpbnQ2NApzdHJpbmdJZjoKCXByb3RvIDEgMQoKCS8vICppZjlfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo4OAoJLy8gYXJnMAoJZnJhbWVfZGlnIC0xIC8vIGFyZzA6IHN0cmluZwoJYnl0ZWMgNSAvLyAweAoJYiE9CglieiAqaWY5X2VuZAoKCS8vICppZjlfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6ODkKCS8vIHJldHVybiAxOwoJaW50YyAwIC8vIDEKCXJldHN1YgoKKmlmOV9lbmQ6CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo5MgoJLy8gcmV0dXJuIDI7CglpbnRjIDIgLy8gMgoJcmV0c3ViCgovLyBzdHJpbmdUZXJuYXJ5KHN0cmluZyl1aW50NjQKKmFiaV9yb3V0ZV9zdHJpbmdUZXJuYXJ5OgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAwIC8vIDB4MTUxZjdjNzUKCgkvLyBhcmcwOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWV4dHJhY3QgMiAwCgoJLy8gZXhlY3V0ZSBzdHJpbmdUZXJuYXJ5KHN0cmluZyl1aW50NjQKCWNhbGxzdWIgc3RyaW5nVGVybmFyeQoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHN0cmluZ1Rlcm5hcnkoYXJnMDogc3RyaW5nKTogdWludDY0CnN0cmluZ1Rlcm5hcnk6Cglwcm90byAxIDEKCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czo5NgoJLy8gcmV0dXJuIGFyZzAgPyAxIDogMjsKCWZyYW1lX2RpZyAtMSAvLyBhcmcwOiBzdHJpbmcKCWJ5dGVjIDUgLy8gMHgKCWIhPQoJYnogKnRlcm5hcnkyX2ZhbHNlCglpbnRjIDAgLy8gMQoJYiAqdGVybmFyeTJfZW5kCgoqdGVybmFyeTJfZmFsc2U6CglpbnRjIDIgLy8gMgoKKnRlcm5hcnkyX2VuZDoKCXJldHN1YgoKLy8gc21hbGxVaW50Q29uZGl0aW9uYWwodWludDE2KXZvaWQKKmFiaV9yb3V0ZV9zbWFsbFVpbnRDb25kaXRpb25hbDoKCS8vIGE6IHVpbnQxNgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGEpIGZvciBzbWFsbFVpbnRDb25kaXRpb25hbCBtdXN0IGJlIGEgdWludDE2Cglhc3NlcnQKCWJ0b2kKCgkvLyBleGVjdXRlIHNtYWxsVWludENvbmRpdGlvbmFsKHVpbnQxNil2b2lkCgljYWxsc3ViIHNtYWxsVWludENvbmRpdGlvbmFsCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBzbWFsbFVpbnRDb25kaXRpb25hbChhOiB1aW50MTYpOiB2b2lkCnNtYWxsVWludENvbmRpdGlvbmFsOgoJcHJvdG8gMSAwCgoJLy8gKmlmMTBfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoxMDAKCS8vIGEKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MTYKCWJ5dGVjIDUgLy8gMHgKCWIhPQoJYnogKmlmMTBfZW5kCgoJLy8gKmlmMTBfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MTAxCgkvLyBsb2coJ2ZvbycpCglieXRlYyA0IC8vICAiZm9vIgoJbG9nCgoqaWYxMF9lbmQ6CglyZXRzdWIKCi8vIHNtYWxsVWludENvbXBhcmlzb25Db25kaXRpb25hbCh1aW50MTYsdWludDE2KXZvaWQKKmFiaV9yb3V0ZV9zbWFsbFVpbnRDb21wYXJpc29uQ29uZGl0aW9uYWw6CgkvLyBiOiB1aW50MTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglpbnRjIDIgLy8gMgoJPT0KCgkvLyBhcmd1bWVudCAwIChiKSBmb3Igc21hbGxVaW50Q29tcGFyaXNvbkNvbmRpdGlvbmFsIG11c3QgYmUgYSB1aW50MTYKCWFzc2VydAoJYnRvaQoKCS8vIGE6IHVpbnQxNgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMiAvLyAyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGEpIGZvciBzbWFsbFVpbnRDb21wYXJpc29uQ29uZGl0aW9uYWwgbXVzdCBiZSBhIHVpbnQxNgoJYXNzZXJ0CglidG9pCgoJLy8gZXhlY3V0ZSBzbWFsbFVpbnRDb21wYXJpc29uQ29uZGl0aW9uYWwodWludDE2LHVpbnQxNil2b2lkCgljYWxsc3ViIHNtYWxsVWludENvbXBhcmlzb25Db25kaXRpb25hbAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gc21hbGxVaW50Q29tcGFyaXNvbkNvbmRpdGlvbmFsKGE6IHVpbnQxNiwgYjogdWludDE2KTogdm9pZApzbWFsbFVpbnRDb21wYXJpc29uQ29uZGl0aW9uYWw6Cglwcm90byAyIDAKCgkvLyAqaWYxMV9jb25kaXRpb24KCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjEwNgoJLy8gYSA8PSBiCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDE2CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDE2Cgk8PQoJYnogKmlmMTFfZW5kCgoJLy8gKmlmMTFfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MTA3CgkvLyBsb2coJ2ZvbycpCglieXRlYyA0IC8vICAiZm9vIgoJbG9nCgoqaWYxMV9lbmQ6CglyZXRzdWIKCi8vIHVpbnQyNTZDb21wYXJzaW9uQ29uZGl0aW9uYWwodWludDI1Nix1aW50MjU2KXZvaWQKKmFiaV9yb3V0ZV91aW50MjU2Q29tcGFyc2lvbkNvbmRpdGlvbmFsOgoJLy8gYjogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChiKSBmb3IgdWludDI1NkNvbXBhcnNpb25Db25kaXRpb25hbCBtdXN0IGJlIGEgdWludDI1NgoJYXNzZXJ0CgoJLy8gYTogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJZHVwCglsZW4KCWludGMgMyAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAxIChhKSBmb3IgdWludDI1NkNvbXBhcnNpb25Db25kaXRpb25hbCBtdXN0IGJlIGEgdWludDI1NgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSB1aW50MjU2Q29tcGFyc2lvbkNvbmRpdGlvbmFsKHVpbnQyNTYsdWludDI1Nil2b2lkCgljYWxsc3ViIHVpbnQyNTZDb21wYXJzaW9uQ29uZGl0aW9uYWwKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHVpbnQyNTZDb21wYXJzaW9uQ29uZGl0aW9uYWwoYTogdWludDI1NiwgYjogdWludDI1Nik6IHZvaWQKdWludDI1NkNvbXBhcnNpb25Db25kaXRpb25hbDoKCXByb3RvIDIgMAoKCS8vICppZjEyX2NvbmRpdGlvbgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MTEyCgkvLyBhIDw9IGIKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50MjU2CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDI1NgoJYjw9CglieiAqaWYxMl9lbmQKCgkvLyAqaWYxMl9jb25zZXF1ZW50CgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoxMTMKCS8vIGxvZygnZm9vJykKCWJ5dGVjIDQgLy8gICJmb28iCglsb2cKCippZjEyX2VuZDoKCXJldHN1YgoKLy8gbmVzdGVkSWZJbkVsc2VJZihib29sLGJvb2wpc3RyaW5nCiphYmlfcm91dGVfbmVzdGVkSWZJbkVsc2VJZjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMCAvLyAweDE1MWY3Yzc1CgoJLy8gYjogYm9vbAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMCAvLyAxCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGIpIGZvciBuZXN0ZWRJZkluRWxzZUlmIG11c3QgYmUgYSBib29sCglhc3NlcnQKCWludGMgMSAvLyAwCglnZXRiaXQKCgkvLyBhOiBib29sCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDEKCT09CgoJLy8gYXJndW1lbnQgMSAoYSkgZm9yIG5lc3RlZElmSW5FbHNlSWYgbXVzdCBiZSBhIGJvb2wKCWFzc2VydAoJaW50YyAxIC8vIDAKCWdldGJpdAoKCS8vIGV4ZWN1dGUgbmVzdGVkSWZJbkVsc2VJZihib29sLGJvb2wpc3RyaW5nCgljYWxsc3ViIG5lc3RlZElmSW5FbHNlSWYKCWR1cAoJbGVuCglpdG9iCglleHRyYWN0IDYgMgoJc3dhcAoJY29uY2F0Cgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gbmVzdGVkSWZJbkVsc2VJZihhOiBib29sZWFuLCBiOiBib29sZWFuKTogc3RyaW5nCm5lc3RlZElmSW5FbHNlSWY6Cglwcm90byAyIDEKCgkvLyAqaWYxM19jb25kaXRpb24KCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjExOAoJLy8gYQoJZnJhbWVfZGlnIC0xIC8vIGE6IGJvb2xlYW4KCWJ6ICppZjEzX2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmMTNfY29uc2VxdWVudAoJLy8gKmlmMTRfY29uZGl0aW9uCgkvLyB0ZXN0cy9jb250cmFjdHMvaWYuYWxnby50czoxMTkKCS8vIGIKCWZyYW1lX2RpZyAtMiAvLyBiOiBib29sZWFuCglieiAqaWYxNF9lbHNlCgoJLy8gKmlmMTRfY29uc2VxdWVudAoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MTIwCgkvLyByZXR1cm4gJ2EgYW5kIGInOwoJcHVzaGJ5dGVzIDB4NjEyMDYxNmU2NDIwNjIgLy8gImEgYW5kIGIiCglyZXRzdWIKCWIgKmlmMTRfZW5kCgoqaWYxNF9lbHNlOgoJLy8gdGVzdHMvY29udHJhY3RzL2lmLmFsZ28udHM6MTIyCgkvLyByZXR1cm4gJ2EnOwoJcHVzaGJ5dGVzIDB4NjEgLy8gImEiCglyZXRzdWIKCippZjE0X2VuZDoKCWIgKmlmMTNfZW5kCgoqaWYxM19lbHNlaWYxX2NvbmRpdGlvbjoKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjEyNAoJLy8gYgoJZnJhbWVfZGlnIC0yIC8vIGI6IGJvb2xlYW4KCWJ6ICppZjEzX2Vsc2UKCgkvLyAqaWYxM19lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjEyNQoJLy8gcmV0dXJuICdiJzsKCXB1c2hieXRlcyAweDYyIC8vICJiIgoJcmV0c3ViCgliICppZjEzX2VuZAoKKmlmMTNfZWxzZToKCS8vIHRlc3RzL2NvbnRyYWN0cy9pZi5hbGdvLnRzOjEyNwoJLy8gcmV0dXJuICduZWl0aGVyJzsKCXB1c2hieXRlcyAweDZlNjU2OTc0Njg2NTcyIC8vICJuZWl0aGVyIgoJcmV0c3ViCgoqaWYxM19lbmQ6CglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnRjIDAgLy8gMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4NDM2ZWMxYzIgLy8gbWV0aG9kICJzaW5nbGVJZihib29sKXN0cmluZyIKCXB1c2hieXRlcyAweDFjN2EwZDVlIC8vIG1ldGhvZCAiaWZFbHNlKGJvb2wpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4NWUwZmI2Y2YgLy8gbWV0aG9kICJpZkVsc2VJZihib29sLGJvb2wpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4NWUxYzZjNTAgLy8gbWV0aG9kICJpZkVsc2VJZkVsc2UoYm9vbCxib29sKXN0cmluZyIKCXB1c2hieXRlcyAweDU4ZDBiYTkyIC8vIG1ldGhvZCAiaWZFbHNlSWZFbHNlSWYoYm9vbCxib29sLGJvb2wpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4NWQyZjRmMDIgLy8gbWV0aG9kICJpZkVsc2VJZkVsc2VJZkVsc2UoYm9vbCxib29sLGJvb2wpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4ODQ1NzI5ZDkgLy8gbWV0aG9kICJuZXN0ZWRJZihib29sLGJvb2wpc3RyaW5nIgoJcHVzaGJ5dGVzIDB4OGZlNzZjYTggLy8gbWV0aG9kICJicmFja2V0bGVzc0lmRWxzZShib29sKXN0cmluZyIKCXB1c2hieXRlcyAweDFhM2M3ODc4IC8vIG1ldGhvZCAibmVzdGVkVGVybmFyeShib29sLGJvb2wpdWludDY0IgoJcHVzaGJ5dGVzIDB4NzRiY2M4NjggLy8gbWV0aG9kICJzdHJpbmdJZihzdHJpbmcpdWludDY0IgoJcHVzaGJ5dGVzIDB4NDIxMmY5MDUgLy8gbWV0aG9kICJzdHJpbmdUZXJuYXJ5KHN0cmluZyl1aW50NjQiCglwdXNoYnl0ZXMgMHg5NWRkYWViZiAvLyBtZXRob2QgInNtYWxsVWludENvbmRpdGlvbmFsKHVpbnQxNil2b2lkIgoJcHVzaGJ5dGVzIDB4MzE0N2I4NjYgLy8gbWV0aG9kICJzbWFsbFVpbnRDb21wYXJpc29uQ29uZGl0aW9uYWwodWludDE2LHVpbnQxNil2b2lkIgoJcHVzaGJ5dGVzIDB4NDI4OTdmNjEgLy8gbWV0aG9kICJ1aW50MjU2Q29tcGFyc2lvbkNvbmRpdGlvbmFsKHVpbnQyNTYsdWludDI1Nil2b2lkIgoJcHVzaGJ5dGVzIDB4NTM0YmUyYjcgLy8gbWV0aG9kICJuZXN0ZWRJZkluRWxzZUlmKGJvb2wsYm9vbClzdHJpbmciCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX3NpbmdsZUlmICphYmlfcm91dGVfaWZFbHNlICphYmlfcm91dGVfaWZFbHNlSWYgKmFiaV9yb3V0ZV9pZkVsc2VJZkVsc2UgKmFiaV9yb3V0ZV9pZkVsc2VJZkVsc2VJZiAqYWJpX3JvdXRlX2lmRWxzZUlmRWxzZUlmRWxzZSAqYWJpX3JvdXRlX25lc3RlZElmICphYmlfcm91dGVfYnJhY2tldGxlc3NJZkVsc2UgKmFiaV9yb3V0ZV9uZXN0ZWRUZXJuYXJ5ICphYmlfcm91dGVfc3RyaW5nSWYgKmFiaV9yb3V0ZV9zdHJpbmdUZXJuYXJ5ICphYmlfcm91dGVfc21hbGxVaW50Q29uZGl0aW9uYWwgKmFiaV9yb3V0ZV9zbWFsbFVpbnRDb21wYXJpc29uQ29uZGl0aW9uYWwgKmFiaV9yb3V0ZV91aW50MjU2Q29tcGFyc2lvbkNvbmRpdGlvbmFsICphYmlfcm91dGVfbmVzdGVkSWZJbkVsc2VJZgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

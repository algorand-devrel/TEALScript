// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Binary Expressions BinaryTest Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// and(uint64,uint64)void
*abi_route_and:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute and(uint64,uint64)void
	callsub and
	intc 0 // 1
	return

// and(a: uint64, b: uint64): void
and:
	proto 2 0

	// tests/contracts/binary.algo.ts:6
	// assert(a && b)
	frame_dig -1 // a: uint64
	dup
	bz *skip_and0
	frame_dig -2 // b: uint64
	&&

*skip_and0:
	assert
	retsub

// or(uint64,uint64)void
*abi_route_or:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute or(uint64,uint64)void
	callsub or
	intc 0 // 1
	return

// or(a: uint64, b: uint64): void
or:
	proto 2 0

	// tests/contracts/binary.algo.ts:10
	// assert(a || b)
	frame_dig -1 // a: uint64
	dup
	bnz *skip_or0
	frame_dig -2 // b: uint64
	||

*skip_or0:
	assert
	retsub

// equal(uint64,uint64)void
*abi_route_equal:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute equal(uint64,uint64)void
	callsub equal
	intc 0 // 1
	return

// equal(a: uint64, b: uint64): void
equal:
	proto 2 0

	// tests/contracts/binary.algo.ts:14
	// assert(a === b)
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	==
	assert
	retsub

// notEqual(uint64,uint64)void
*abi_route_notEqual:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute notEqual(uint64,uint64)void
	callsub notEqual
	intc 0 // 1
	return

// notEqual(a: uint64, b: uint64): void
notEqual:
	proto 2 0

	// tests/contracts/binary.algo.ts:18
	// assert(a !== b)
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	!=
	assert
	retsub

// bitAnd(uint64,uint64)void
*abi_route_bitAnd:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute bitAnd(uint64,uint64)void
	callsub bitAnd
	intc 0 // 1
	return

// bitAnd(a: uint64, b: uint64): void
bitAnd:
	proto 2 0

	// tests/contracts/binary.algo.ts:22
	// assert(a & b)
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	&
	assert
	retsub

// bitOr(uint64,uint64)void
*abi_route_bitOr:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute bitOr(uint64,uint64)void
	callsub bitOr
	intc 0 // 1
	return

// bitOr(a: uint64, b: uint64): void
bitOr:
	proto 2 0

	// tests/contracts/binary.algo.ts:26
	// assert(a | b)
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	|
	assert
	retsub

// bitXor(uint64,uint64)void
*abi_route_bitXor:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute bitXor(uint64,uint64)void
	callsub bitXor
	intc 0 // 1
	return

// bitXor(a: uint64, b: uint64): void
bitXor:
	proto 2 0

	// tests/contracts/binary.algo.ts:30
	// assert(a ^ b)
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	^
	assert
	retsub

// combo(uint64,uint64,uint64)void
*abi_route_combo:
	// c: uint64
	txna ApplicationArgs 3
	btoi

	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute combo(uint64,uint64,uint64)void
	callsub combo
	intc 0 // 1
	return

// combo(a: uint64, b: uint64, c: uint64): void
combo:
	proto 3 0

	// tests/contracts/binary.algo.ts:34
	// assert(a || (b && c))
	frame_dig -1 // a: uint64
	dup
	bnz *skip_or1
	frame_dig -2 // b: uint64
	dup
	bz *skip_and1
	frame_dig -3 // c: uint64
	&&

*skip_and1:
	||

*skip_or1:
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x6fd13a13 // method "and(uint64,uint64)void"
	pushbytes 0x700aa887 // method "or(uint64,uint64)void"
	pushbytes 0x723c87ef // method "equal(uint64,uint64)void"
	pushbytes 0xe7ffb9d3 // method "notEqual(uint64,uint64)void"
	pushbytes 0x9285188e // method "bitAnd(uint64,uint64)void"
	pushbytes 0x592dc73f // method "bitOr(uint64,uint64)void"
	pushbytes 0x6d46504a // method "bitXor(uint64,uint64)void"
	pushbytes 0x74dc5150 // method "combo(uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_and *abi_route_or *abi_route_equal *abi_route_notEqual *abi_route_bitAnd *abi_route_bitOr *abi_route_bitXor *abi_route_combo

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Binary Expressions BinaryTest Artifacts Maintains program size 1`] = `333`;

exports[`Binary Expressions BinaryTest Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "and",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "or",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "equal",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "notEqual",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "bitAnd",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "bitOr",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "bitXor",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "c",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "combo",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "BinaryTest",
}
`;

exports[`Binary Expressions BinaryTest Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "and",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "or",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "equal",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "notEqual",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "bitAnd",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "bitOr",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "bitXor",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "c",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "combo",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "BinaryTest",
  },
  "hints": {
    "and(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "bitAnd(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "bitOr(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "bitXor(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "combo(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "equal(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "notEqual(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "or(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCgovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGFuZCh1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9hbmQ6CgkvLyBiOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFuZCh1aW50NjQsdWludDY0KXZvaWQKCWNhbGxzdWIgYW5kCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBhbmQoYTogdWludDY0LCBiOiB1aW50NjQpOiB2b2lkCmFuZDoKCXByb3RvIDIgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9iaW5hcnkuYWxnby50czo2CgkvLyBhc3NlcnQoYSAmJiBiKQoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJZHVwCglieiAqc2tpcF9hbmQwCglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CgkmJgoKKnNraXBfYW5kMDoKCWFzc2VydAoJcmV0c3ViCgovLyBvcih1aW50NjQsdWludDY0KXZvaWQKKmFiaV9yb3V0ZV9vcjoKCS8vIGI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGE6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgb3IodWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIG9yCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBvcihhOiB1aW50NjQsIGI6IHVpbnQ2NCk6IHZvaWQKb3I6Cglwcm90byAyIDAKCgkvLyB0ZXN0cy9jb250cmFjdHMvYmluYXJ5LmFsZ28udHM6MTAKCS8vIGFzc2VydChhIHx8IGIpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CglkdXAKCWJueiAqc2tpcF9vcjAKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCXx8Cgoqc2tpcF9vcjA6Cglhc3NlcnQKCXJldHN1YgoKLy8gZXF1YWwodWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfZXF1YWw6CgkvLyBiOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGVxdWFsKHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBlcXVhbAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZXF1YWwoYTogdWludDY0LCBiOiB1aW50NjQpOiB2b2lkCmVxdWFsOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2JpbmFyeS5hbGdvLnRzOjE0CgkvLyBhc3NlcnQoYSA9PT0gYikKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCT09Cglhc3NlcnQKCXJldHN1YgoKLy8gbm90RXF1YWwodWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfbm90RXF1YWw6CgkvLyBiOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIG5vdEVxdWFsKHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBub3RFcXVhbAoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gbm90RXF1YWwoYTogdWludDY0LCBiOiB1aW50NjQpOiB2b2lkCm5vdEVxdWFsOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2JpbmFyeS5hbGdvLnRzOjE4CgkvLyBhc3NlcnQoYSAhPT0gYikKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCSE9Cglhc3NlcnQKCXJldHN1YgoKLy8gYml0QW5kKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2JpdEFuZDoKCS8vIGI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGE6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYml0QW5kKHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBiaXRBbmQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGJpdEFuZChhOiB1aW50NjQsIGI6IHVpbnQ2NCk6IHZvaWQKYml0QW5kOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2JpbmFyeS5hbGdvLnRzOjIyCgkvLyBhc3NlcnQoYSAmIGIpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CgkmCglhc3NlcnQKCXJldHN1YgoKLy8gYml0T3IodWludDY0LHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfYml0T3I6CgkvLyBiOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGJpdE9yKHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBiaXRPcgoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gYml0T3IoYTogdWludDY0LCBiOiB1aW50NjQpOiB2b2lkCmJpdE9yOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2JpbmFyeS5hbGdvLnRzOjI2CgkvLyBhc3NlcnQoYSB8IGIpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0Cgl8Cglhc3NlcnQKCXJldHN1YgoKLy8gYml0WG9yKHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2JpdFhvcjoKCS8vIGI6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJYnRvaQoKCS8vIGE6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgYml0WG9yKHVpbnQ2NCx1aW50NjQpdm9pZAoJY2FsbHN1YiBiaXRYb3IKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGJpdFhvcihhOiB1aW50NjQsIGI6IHVpbnQ2NCk6IHZvaWQKYml0WG9yOgoJcHJvdG8gMiAwCgoJLy8gdGVzdHMvY29udHJhY3RzL2JpbmFyeS5hbGdvLnRzOjMwCgkvLyBhc3NlcnQoYSBeIGIpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CgleCglhc3NlcnQKCXJldHN1YgoKLy8gY29tYm8odWludDY0LHVpbnQ2NCx1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2NvbWJvOgoJLy8gYzogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAzCglidG9pCgoJLy8gYjogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglidG9pCgoJLy8gYTogdWludDY0Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCgoJLy8gZXhlY3V0ZSBjb21ibyh1aW50NjQsdWludDY0LHVpbnQ2NCl2b2lkCgljYWxsc3ViIGNvbWJvCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBjb21ibyhhOiB1aW50NjQsIGI6IHVpbnQ2NCwgYzogdWludDY0KTogdm9pZApjb21ibzoKCXByb3RvIDMgMAoKCS8vIHRlc3RzL2NvbnRyYWN0cy9iaW5hcnkuYWxnby50czozNAoJLy8gYXNzZXJ0KGEgfHwgKGIgJiYgYykpCglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CglkdXAKCWJueiAqc2tpcF9vcjEKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCWR1cAoJYnogKnNraXBfYW5kMQoJZnJhbWVfZGlnIC0zIC8vIGM6IHVpbnQ2NAoJJiYKCipza2lwX2FuZDE6Cgl8fAoKKnNraXBfb3IxOgoJYXNzZXJ0CglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnRjIDAgLy8gMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4NmZkMTNhMTMgLy8gbWV0aG9kICJhbmQodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NzAwYWE4ODcgLy8gbWV0aG9kICJvcih1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg3MjNjODdlZiAvLyBtZXRob2QgImVxdWFsKHVpbnQ2NCx1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGU3ZmZiOWQzIC8vIG1ldGhvZCAibm90RXF1YWwodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4OTI4NTE4OGUgLy8gbWV0aG9kICJiaXRBbmQodWludDY0LHVpbnQ2NCl2b2lkIgoJcHVzaGJ5dGVzIDB4NTkyZGM3M2YgLy8gbWV0aG9kICJiaXRPcih1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg2ZDQ2NTA0YSAvLyBtZXRob2QgImJpdFhvcih1aW50NjQsdWludDY0KXZvaWQiCglwdXNoYnl0ZXMgMHg3NGRjNTE1MCAvLyBtZXRob2QgImNvbWJvKHVpbnQ2NCx1aW50NjQsdWludDY0KXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2FuZCAqYWJpX3JvdXRlX29yICphYmlfcm91dGVfZXF1YWwgKmFiaV9yb3V0ZV9ub3RFcXVhbCAqYWJpX3JvdXRlX2JpdEFuZCAqYWJpX3JvdXRlX2JpdE9yICphYmlfcm91dGVfYml0WG9yICphYmlfcm91dGVfY29tYm8KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

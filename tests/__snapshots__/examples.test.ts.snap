// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Examples ConstantProductAMM Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 0 1 1000 4 10000000000 2 3
bytecblock 0x 0x61 0x62 0x67 0x70 0x72

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// examples/amm/amm.algo.ts:20
	// this.governor.value = this.txn.sender
	bytec 3 //  "g"
	txn Sender
	app_global_put
	retsub

// doCreatePoolToken(aAsset: AssetID, bAsset: AssetID): AssetID
doCreatePoolToken:
	proto 2 1

	// examples/amm/amm.algo.ts:26
	// return sendAssetCreation({
	//       configAssetName: 'DPT-' + aAsset.unitName + '-' + bAsset.unitName,
	//       configAssetUnitName: 'dpt',
	//       configAssetTotal: TOTAL_SUPPLY,
	//       configAssetDecimals: 3,
	//       configAssetManager: this.app.address,
	//       configAssetReserve: this.app.address,
	//     });
	itxn_begin
	intc 6 //  acfg
	itxn_field TypeEnum

	// examples/amm/amm.algo.ts:27
	// configAssetName: 'DPT-' + aAsset.unitName + '-' + bAsset.unitName
	pushbytes 0x4450542d // "DPT-"
	frame_dig -1 // aAsset: AssetID
	asset_params_get AssetUnitName
	pop
	concat
	pushbytes 0x2d // "-"
	concat
	frame_dig -2 // bAsset: AssetID
	asset_params_get AssetUnitName
	pop
	concat
	itxn_field ConfigAssetName

	// examples/amm/amm.algo.ts:28
	// configAssetUnitName: 'dpt'
	pushbytes 0x647074 // "dpt"
	itxn_field ConfigAssetUnitName

	// examples/amm/amm.algo.ts:29
	// configAssetTotal: TOTAL_SUPPLY
	intc 4 // 10000000000
	itxn_field ConfigAssetTotal

	// examples/amm/amm.algo.ts:30
	// configAssetDecimals: 3
	intc 6 // 3
	itxn_field ConfigAssetDecimals

	// examples/amm/amm.algo.ts:31
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// examples/amm/amm.algo.ts:32
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	retsub

// doAxfer(receiver: Address, asset: AssetID, amount: uint64): void
doAxfer:
	proto 3 0

	// examples/amm/amm.algo.ts:37
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       xferAsset: asset,
	//       assetAmount: amount,
	//     })
	itxn_begin
	intc 3 //  axfer
	itxn_field TypeEnum

	// examples/amm/amm.algo.ts:38
	// assetReceiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field AssetReceiver

	// examples/amm/amm.algo.ts:39
	// xferAsset: asset
	frame_dig -2 // asset: AssetID
	itxn_field XferAsset

	// examples/amm/amm.algo.ts:40
	// assetAmount: amount
	frame_dig -3 // amount: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// doOptIn(asset: AssetID): void
doOptIn:
	proto 1 0

	// examples/amm/amm.algo.ts:45
	// this.doAxfer(this.app.address, asset, 0)
	intc 0 // 0
	frame_dig -1 // asset: AssetID
	global CurrentApplicationAddress
	callsub doAxfer
	retsub

// tokensToMintIntial(aAmount: uint64, bAmount: uint64): uint64
tokensToMintIntial:
	proto 2 1

	// examples/amm/amm.algo.ts:49
	// return sqrt(aAmount * bAmount);
	frame_dig -1 // aAmount: uint64
	frame_dig -2 // bAmount: uint64
	*
	sqrt
	retsub

// tokensToMint(issued: uint64, aSupply: uint64, bSupply: uint64, aAmount: uint64, bAmount: uint64): uint64
tokensToMint:
	proto 5 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// examples/amm/amm.algo.ts:53
	// aRatio = wideRatio([aAmount, SCALE], [aSupply])
	frame_dig -4 // aAmount: uint64
	intc 2 // 1000
	mulw
	intc 0 // 0
	frame_dig -2 // aSupply: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 0 // aRatio: uint64

	// examples/amm/amm.algo.ts:54
	// bRatio = wideRatio([bAmount, SCALE], [bSupply])
	frame_dig -5 // bAmount: uint64
	intc 2 // 1000
	mulw
	intc 0 // 0
	frame_dig -3 // bSupply: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 1 // bRatio: uint64

	// examples/amm/amm.algo.ts:56
	// ratio = aRatio < bRatio ? aRatio : bRatio
	frame_dig 0 // aRatio: uint64
	frame_dig 1 // bRatio: uint64
	<
	bz *ternary0_false
	frame_dig 0 // aRatio: uint64
	b *ternary0_end

*ternary0_false:
	frame_dig 1 // bRatio: uint64

*ternary0_end:
	frame_bury 2 // ratio: uint64

	// examples/amm/amm.algo.ts:58
	// return wideRatio([ratio, issued], [SCALE]);
	frame_dig 2 // ratio: uint64
	frame_dig -1 // issued: uint64
	mulw
	intc 0 // 0
	intc 2 // 1000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// computeRatio(): uint64
computeRatio:
	proto 0 1

	// examples/amm/amm.algo.ts:62
	// return wideRatio(
	//       [this.app.address.assetBalance(this.assetA.value), SCALE],
	//       [this.app.address.assetBalance(this.assetB.value)]
	//     );
	global CurrentApplicationAddress
	bytec 1 //  "a"
	app_global_get
	asset_holding_get AssetBalance
	pop
	intc 2 // 1000
	mulw
	intc 0 // 0
	global CurrentApplicationAddress
	bytec 2 //  "b"
	app_global_get
	asset_holding_get AssetBalance
	pop
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// tokensToBurn(issued: uint64, supply: uint64, amount: uint64): uint64
tokensToBurn:
	proto 3 1

	// examples/amm/amm.algo.ts:69
	// return wideRatio([supply, amount], [issued]);
	frame_dig -2 // supply: uint64
	frame_dig -3 // amount: uint64
	mulw
	intc 0 // 0
	frame_dig -1 // issued: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	retsub

// tokensToSwap(inAmount: uint64, inSupply: uint64, outSupply: uint64): uint64
tokensToSwap:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/amm/amm.algo.ts:73
	// factor = SCALE - FEE
	pushint 995
	frame_bury 0 // factor: uint64

	// examples/amm/amm.algo.ts:74
	// return wideRatio([inAmount, factor, outSupply], [inSupply * SCALE + inAmount * factor]);
	frame_dig -1 // inAmount: uint64
	frame_dig 0 // factor: uint64
	mulw
	frame_dig -3 // outSupply: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	intc 0 // 0
	frame_dig -2 // inSupply: uint64
	intc 2 // 1000
	*
	frame_dig -1 // inAmount: uint64
	frame_dig 0 // factor: uint64
	*
	+
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// set_governor(address)void
*abi_route_set_governor:
	// governor: address
	txna ApplicationArgs 1
	dup
	len
	pushint 32
	==

	// argument 0 (governor) for set_governor must be a address
	assert

	// execute set_governor(address)void
	callsub set_governor
	intc 1 // 1
	return

// set_governor(governor: Address): void
set_governor:
	proto 1 0

	// examples/amm/amm.algo.ts:78
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	bytec 3 //  "g"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.governor.value"}
	assert

	// examples/amm/amm.algo.ts:79
	// this.governor.value = governor
	bytec 3 //  "g"
	frame_dig -1 // governor: Address
	app_global_put
	retsub

// bootstrap(pay,uint64,uint64)uint64
*abi_route_bootstrap:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// bAsset: uint64
	txna ApplicationArgs 2
	btoi

	// aAsset: uint64
	txna ApplicationArgs 1
	btoi

	// seed: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 2 (seed) for bootstrap must be a pay transaction
	assert

	// execute bootstrap(pay,uint64,uint64)uint64
	callsub bootstrap
	itob
	concat
	log
	intc 1 // 1
	return

// bootstrap(seed: PayTxn, aAsset: AssetID, bAsset: AssetID): AssetID
bootstrap:
	proto 3 1

	// examples/amm/amm.algo.ts:83
	// verifyAppCallTxn(this.txn, { sender: this.governor.value })
	// verify sender
	txn Sender
	bytec 3 //  "g"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.governor.value"}
	assert

	// examples/amm/amm.algo.ts:85
	// assert(globals.groupSize === 2)
	global GroupSize
	intc 5 // 2
	==
	assert

	// examples/amm/amm.algo.ts:87
	// verifyPayTxn(seed, { receiver: this.app.address, amount: { greaterThanEqualTo: 300_000 } })
	// verify receiver
	frame_dig -1 // seed: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"seed","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // seed: PayTxn
	gtxns Amount
	pushint 300_000
	>=

	// transaction verification failed: {"txn":"seed","field":"amount","condition":"greaterThanEqualTo","expected":">=300_000"}
	assert

	// examples/amm/amm.algo.ts:88
	// assert(aAsset < bAsset)
	frame_dig -2 // aAsset: AssetID
	frame_dig -3 // bAsset: AssetID
	<
	assert

	// examples/amm/amm.algo.ts:90
	// this.assetA.value = aAsset
	bytec 1 //  "a"
	frame_dig -2 // aAsset: AssetID
	app_global_put

	// examples/amm/amm.algo.ts:91
	// this.assetB.value = bAsset
	bytec 2 //  "b"
	frame_dig -3 // bAsset: AssetID
	app_global_put

	// examples/amm/amm.algo.ts:92
	// this.poolToken.value = this.doCreatePoolToken(aAsset, bAsset)
	bytec 4 //  "p"
	frame_dig -3 // bAsset: AssetID
	frame_dig -2 // aAsset: AssetID
	callsub doCreatePoolToken
	app_global_put

	// examples/amm/amm.algo.ts:94
	// this.doOptIn(aAsset)
	frame_dig -2 // aAsset: AssetID
	callsub doOptIn

	// examples/amm/amm.algo.ts:95
	// this.doOptIn(bAsset)
	frame_dig -3 // bAsset: AssetID
	callsub doOptIn

	// examples/amm/amm.algo.ts:97
	// return this.poolToken.value;
	bytec 4 //  "p"
	app_global_get
	retsub

// mint(axfer,axfer,uint64,uint64,uint64)void
*abi_route_mint:
	// bAsset: uint64
	txna ApplicationArgs 3
	btoi

	// aAsset: uint64
	txna ApplicationArgs 2
	btoi

	// poolAsset: uint64
	txna ApplicationArgs 1
	btoi

	// bXfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 3 (bXfer) for mint must be a axfer transaction
	assert

	// aXfer: axfer
	txn GroupIndex
	intc 5 // 2
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 4 (aXfer) for mint must be a axfer transaction
	assert

	// execute mint(axfer,axfer,uint64,uint64,uint64)void
	callsub mint
	intc 1 // 1
	return

// mint(aXfer: AssetTransferTxn, bXfer: AssetTransferTxn, poolAsset: AssetID, aAsset: AssetID, bAsset: AssetID): void
mint:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// well formed mint
	// examples/amm/amm.algo.ts:102
	// assert(aAsset === this.assetA.value)
	frame_dig -4 // aAsset: AssetID
	bytec 1 //  "a"
	app_global_get
	==
	assert

	// examples/amm/amm.algo.ts:103
	// assert(bAsset === this.assetB.value)
	frame_dig -5 // bAsset: AssetID
	bytec 2 //  "b"
	app_global_get
	==
	assert

	// examples/amm/amm.algo.ts:104
	// assert(poolAsset === this.poolToken.value)
	frame_dig -3 // poolAsset: AssetID
	bytec 4 //  "p"
	app_global_get
	==
	assert

	// valid asset A axfer
	// examples/amm/amm.algo.ts:107
	// verifyAssetTransferTxn(aXfer, {
	//       sender: this.txn.sender,
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       xferAsset: aAsset,
	//     })
	// verify sender
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"aXfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetAmount
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns AssetAmount
	intc 0 // 0
	>

	// transaction verification failed: {"txn":"aXfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// verify assetReceiver
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"aXfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -4 // aAsset: AssetID
	==

	// transaction verification failed: {"txn":"aXfer","field":"xferAsset","expected":"aAsset"}
	assert

	// valid asset B axfer
	// examples/amm/amm.algo.ts:115
	// verifyAssetTransferTxn(bXfer, {
	//       sender: this.txn.sender,
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       xferAsset: bAsset,
	//     })
	// verify sender
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"bXfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetAmount
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns AssetAmount
	intc 0 // 0
	>

	// transaction verification failed: {"txn":"bXfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// verify assetReceiver
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"bXfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -5 // bAsset: AssetID
	==

	// transaction verification failed: {"txn":"bXfer","field":"xferAsset","expected":"bAsset"}
	assert

	// *if0_condition
	// examples/amm/amm.algo.ts:123
	// this.app.address.assetBalance(aAsset) === aXfer.assetAmount &&
	//       this.app.address.assetBalance(bAsset) === bXfer.assetAmount
	global CurrentApplicationAddress
	frame_dig -4 // aAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns AssetAmount
	==
	dup
	bz *skip_and0
	global CurrentApplicationAddress
	frame_dig -5 // bAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns AssetAmount
	==
	&&

*skip_and0:
	bz *if0_else

	// *if0_consequent
	// examples/amm/amm.algo.ts:126
	// this.tokensToMintIntial(aXfer.assetAmount, bXfer.assetAmount)
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns AssetAmount
	callsub tokensToMintIntial
	b *if0_end

*if0_else:
	// examples/amm/amm.algo.ts:128
	// toMint = this.tokensToMint(
	//         TOTAL_SUPPLY - this.app.address.assetBalance(poolAsset),
	//         this.app.address.assetBalance(aAsset) - aXfer.assetAmount,
	//         this.app.address.assetBalance(bAsset) - bXfer.assetAmount,
	//         aXfer.assetAmount,
	//         bXfer.assetAmount
	//       )
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns AssetAmount
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns AssetAmount
	global CurrentApplicationAddress
	frame_dig -5 // bAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig -2 // bXfer: AssetTransferTxn
	gtxns AssetAmount
	-
	global CurrentApplicationAddress
	frame_dig -4 // aAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig -1 // aXfer: AssetTransferTxn
	gtxns AssetAmount
	-
	intc 4 // 10000000000
	global CurrentApplicationAddress
	frame_dig -3 // poolAsset: AssetID
	asset_holding_get AssetBalance
	pop
	-
	callsub tokensToMint
	frame_bury 0 // toMint: uint64

	// examples/amm/amm.algo.ts:136
	// assert(toMint > 0)
	frame_dig 0 // toMint: uint64
	intc 0 // 0
	>
	assert

	// examples/amm/amm.algo.ts:138
	// this.doAxfer(this.txn.sender, poolAsset, toMint)
	frame_dig 0 // toMint: uint64
	frame_dig -3 // poolAsset: AssetID
	txn Sender
	callsub doAxfer

*if0_end:
	retsub

// burn(axfer,uint64,uint64,uint64)void
*abi_route_burn:
	// bAsset: uint64
	txna ApplicationArgs 3
	btoi

	// aAsset: uint64
	txna ApplicationArgs 2
	btoi

	// poolAsset: uint64
	txna ApplicationArgs 1
	btoi

	// poolXfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 3 (poolXfer) for burn must be a axfer transaction
	assert

	// execute burn(axfer,uint64,uint64,uint64)void
	callsub burn
	intc 1 // 1
	return

// burn(poolXfer: AssetTransferTxn, poolAsset: AssetID, aAsset: AssetID, bAsset: AssetID): void
burn:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// well formed burn
	// examples/amm/amm.algo.ts:144
	// assert(poolAsset === this.poolToken.value)
	frame_dig -2 // poolAsset: AssetID
	bytec 4 //  "p"
	app_global_get
	==
	assert

	// examples/amm/amm.algo.ts:145
	// assert(aAsset === this.assetA.value)
	frame_dig -3 // aAsset: AssetID
	bytec 1 //  "a"
	app_global_get
	==
	assert

	// examples/amm/amm.algo.ts:146
	// assert(bAsset === this.assetB.value)
	frame_dig -4 // bAsset: AssetID
	bytec 2 //  "b"
	app_global_get
	==
	assert

	// valid pool axfer
	// examples/amm/amm.algo.ts:149
	// verifyAssetTransferTxn(poolXfer, {
	//       sender: this.txn.sender,
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       xferAsset: poolAsset,
	//     })
	// verify sender
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"poolXfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify assetAmount
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns AssetAmount
	intc 0 // 0
	>

	// transaction verification failed: {"txn":"poolXfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// verify assetReceiver
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"poolXfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify xferAsset
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -2 // poolAsset: AssetID
	==

	// transaction verification failed: {"txn":"poolXfer","field":"xferAsset","expected":"poolAsset"}
	assert

	// examples/amm/amm.algo.ts:156
	// issued = TOTAL_SUPPLY - (this.app.address.assetBalance(poolAsset) - poolXfer.assetAmount)
	intc 4 // 10000000000
	global CurrentApplicationAddress
	frame_dig -2 // poolAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns AssetAmount
	-
	-
	frame_bury 0 // issued: uint64

	// examples/amm/amm.algo.ts:158
	// aAmt = this.tokensToBurn(issued, this.app.address.assetBalance(aAsset), poolXfer.assetAmount)
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns AssetAmount
	global CurrentApplicationAddress
	frame_dig -3 // aAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig 0 // issued: uint64
	callsub tokensToBurn
	frame_bury 1 // aAmt: uint64

	// examples/amm/amm.algo.ts:160
	// bAmt = this.tokensToBurn(issued, this.app.address.assetBalance(bAsset), poolXfer.assetAmount)
	frame_dig -1 // poolXfer: AssetTransferTxn
	gtxns AssetAmount
	global CurrentApplicationAddress
	frame_dig -4 // bAsset: AssetID
	asset_holding_get AssetBalance
	pop
	frame_dig 0 // issued: uint64
	callsub tokensToBurn
	frame_bury 2 // bAmt: uint64

	// examples/amm/amm.algo.ts:162
	// this.doAxfer(this.txn.sender, aAsset, aAmt)
	frame_dig 1 // aAmt: uint64
	frame_dig -3 // aAsset: AssetID
	txn Sender
	callsub doAxfer

	// examples/amm/amm.algo.ts:163
	// this.doAxfer(this.txn.sender, bAsset, bAmt)
	frame_dig 2 // bAmt: uint64
	frame_dig -4 // bAsset: AssetID
	txn Sender
	callsub doAxfer

	// examples/amm/amm.algo.ts:165
	// this.ratio.value = this.computeRatio()
	bytec 5 //  "r"
	callsub computeRatio
	app_global_put
	retsub

// swap(axfer,uint64,uint64)void
*abi_route_swap:
	// bAsset: uint64
	txna ApplicationArgs 2
	btoi

	// aAsset: uint64
	txna ApplicationArgs 1
	btoi

	// swapXfer: axfer
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 3 //  axfer
	==

	// argument 2 (swapXfer) for swap must be a axfer transaction
	assert

	// execute swap(axfer,uint64,uint64)void
	callsub swap
	intc 1 // 1
	return

// swap(swapXfer: AssetTransferTxn, aAsset: AssetID, bAsset: AssetID): void
swap:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// well formed swap
	// examples/amm/amm.algo.ts:170
	// assert(aAsset === this.assetA.value)
	frame_dig -2 // aAsset: AssetID
	bytec 1 //  "a"
	app_global_get
	==
	assert

	// examples/amm/amm.algo.ts:171
	// assert(bAsset === this.assetB.value)
	frame_dig -3 // bAsset: AssetID
	bytec 2 //  "b"
	app_global_get
	==
	assert

	// examples/amm/amm.algo.ts:173
	// verifyAssetTransferTxn(swapXfer, {
	//       assetAmount: { greaterThan: 0 },
	//       assetReceiver: this.app.address,
	//       sender: this.txn.sender,
	//       xferAsset: { includedIn: [aAsset, bAsset] },
	//     })
	// verify assetAmount
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns AssetAmount
	intc 0 // 0
	>

	// transaction verification failed: {"txn":"swapXfer","field":"assetAmount","condition":"greaterThan","expected":">0"}
	assert

	// verify assetReceiver
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"swapXfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// verify sender
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"swapXfer","field":"sender","expected":"this.txn.sender"}
	assert

	// verify xferAsset
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -2 // aAsset: AssetID
	==
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -3 // bAsset: AssetID
	==
	||

	// transaction verification failed: {"txn":{"txnText":"swapXfer"},"field":"xferAsset","condition":"includedIn","expected":"[aAsset, bAsset]"}
	assert

	// examples/amm/amm.algo.ts:180
	// outId = swapXfer.xferAsset === aAsset ? aAsset : bAsset
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns XferAsset
	frame_dig -2 // aAsset: AssetID
	==
	bz *ternary1_false
	frame_dig -2 // aAsset: AssetID
	b *ternary1_end

*ternary1_false:
	frame_dig -3 // bAsset: AssetID

*ternary1_end:
	frame_bury 0 // outId: uint64

	// examples/amm/amm.algo.ts:182
	// inId = swapXfer.xferAsset
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns XferAsset
	frame_bury 1 // inId: uint64

	// examples/amm/amm.algo.ts:184
	// toSwap = this.tokensToSwap(
	//       swapXfer.assetAmount,
	//       this.app.address.assetBalance(inId) - swapXfer.assetAmount,
	//       this.app.address.assetBalance(outId)
	//     )
	global CurrentApplicationAddress
	frame_dig 0 // outId: uint64
	asset_holding_get AssetBalance
	pop
	global CurrentApplicationAddress
	frame_dig 1 // inId: uint64
	asset_holding_get AssetBalance
	pop
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns AssetAmount
	-
	frame_dig -1 // swapXfer: AssetTransferTxn
	gtxns AssetAmount
	callsub tokensToSwap
	frame_bury 2 // toSwap: uint64

	// examples/amm/amm.algo.ts:190
	// assert(toSwap > 0)
	frame_dig 2 // toSwap: uint64
	intc 0 // 0
	>
	assert

	// examples/amm/amm.algo.ts:192
	// this.doAxfer(this.txn.sender, outId, toSwap)
	frame_dig 2 // toSwap: uint64
	frame_dig 0 // outId: uint64
	txn Sender
	callsub doAxfer

	// examples/amm/amm.algo.ts:194
	// this.ratio.value = this.computeRatio()
	bytec 5 //  "r"
	callsub computeRatio
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xddc4cb4a // method "set_governor(address)void"
	pushbytes 0x25e6c376 // method "bootstrap(pay,uint64,uint64)uint64"
	pushbytes 0x10045c79 // method "mint(axfer,axfer,uint64,uint64,uint64)void"
	pushbytes 0x028e37c1 // method "burn(axfer,uint64,uint64,uint64)void"
	pushbytes 0x632aaed8 // method "swap(axfer,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_set_governor *abi_route_bootstrap *abi_route_mint *abi_route_burn *abi_route_swap

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples ConstantProductAMM Artifacts Maintains program size 1`] = `1086`;

exports[`Examples ConstantProductAMM Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "governor",
          "type": "address",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "set_governor",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "seed",
          "type": "pay",
        },
        {
          "desc": undefined,
          "name": "aAsset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "bAsset",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "bootstrap",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "aXfer",
          "type": "axfer",
        },
        {
          "desc": undefined,
          "name": "bXfer",
          "type": "axfer",
        },
        {
          "desc": undefined,
          "name": "poolAsset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "aAsset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "bAsset",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "mint",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "poolXfer",
          "type": "axfer",
        },
        {
          "desc": undefined,
          "name": "poolAsset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "aAsset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "bAsset",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "burn",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "swapXfer",
          "type": "axfer",
        },
        {
          "desc": undefined,
          "name": "aAsset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "bAsset",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "swap",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "ConstantProductAMM",
}
`;

exports[`Examples ConstantProductAMM Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "governor",
            "type": "address",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "set_governor",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "seed",
            "type": "pay",
          },
          {
            "desc": undefined,
            "name": "aAsset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "bAsset",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "bootstrap",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "aXfer",
            "type": "axfer",
          },
          {
            "desc": undefined,
            "name": "bXfer",
            "type": "axfer",
          },
          {
            "desc": undefined,
            "name": "poolAsset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "aAsset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "bAsset",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "mint",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "poolXfer",
            "type": "axfer",
          },
          {
            "desc": undefined,
            "name": "poolAsset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "aAsset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "bAsset",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "burn",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "swapXfer",
            "type": "axfer",
          },
          {
            "desc": undefined,
            "name": "aAsset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "bAsset",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "swap",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "ConstantProductAMM",
  },
  "hints": {
    "bootstrap(pay,uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "burn(axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "mint(axfer,axfer,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "set_governor(address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "swap(axfer,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "assetA": {
          "key": "a",
          "type": "uint64",
        },
        "assetB": {
          "key": "b",
          "type": "uint64",
        },
        "governor": {
          "key": "g",
          "type": "bytes",
        },
        "poolToken": {
          "key": "p",
          "type": "uint64",
        },
        "ratio": {
          "key": "r",
          "type": "uint64",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples AbstractedAccount Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 32 6
bytecblock 0x70 0x61 0x 0x63 0x6e 0x0000000000000000 0x0f885493 0x00

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 3 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// verifyRekeyToAbstractedAccount(): void
//
// Ensure that by the end of the group the abstracted account has control of its address
verifyRekeyToAbstractedAccount:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x
	dupn 2

	// examples/arc58/arc58.algo.ts:45
	// rekeyedBack = false
	intc 1 // 0
	frame_bury 0 // rekeyedBack: bool

	// examples/arc58/arc58.algo.ts:47
	// for (let i = this.txn.groupIndex; i < this.txnGroup.length; i += 1)
	txn GroupIndex
	frame_bury 1 // i: uint64

*for_0:
	// examples/arc58/arc58.algo.ts:47
	// i < this.txnGroup.length
	frame_dig 1 // i: uint64
	global GroupSize
	<
	bz *for_0_end

	// examples/arc58/arc58.algo.ts:48
	// txn = this.txnGroup[i]
	frame_dig 1 // i: uint64
	frame_bury 2 // txn: txn

	// *if0_condition
	// examples/arc58/arc58.algo.ts:51
	// txn.sender === this.controlledAddress.value && txn.rekeyTo === this.controlledAddress.value
	frame_dig 2 // txn: txn
	gtxns Sender
	bytec 3 //  "c"
	app_global_get
	==
	dup
	bz *skip_and0
	frame_dig 2 // txn: txn
	gtxns RekeyTo
	bytec 3 //  "c"
	app_global_get
	==
	&&

*skip_and0:
	bz *if0_end

	// *if0_consequent
	// examples/arc58/arc58.algo.ts:52
	// rekeyedBack = true
	intc 0 // 1
	frame_bury 0 // rekeyedBack: bool
	b *for_0_end

*if0_end:
	// *if1_condition
	// examples/arc58/arc58.algo.ts:58
	// txn.typeEnum === TransactionType.ApplicationCall &&
	//         txn.applicationID === this.app &&
	//         txn.numAppArgs === 1 &&
	//         txn.applicationArgs[0] === method('arc58_verifyAuthAddr()void')
	frame_dig 2 // txn: txn
	gtxns TypeEnum
	intc 3 //  appl
	==
	dup
	bz *skip_and1
	frame_dig 2 // txn: txn
	gtxns ApplicationID
	txna Applications 0
	==
	&&

*skip_and1:
	dup
	bz *skip_and2
	frame_dig 2 // txn: txn
	gtxns NumAppArgs
	intc 0 // 1
	==
	&&

*skip_and2:
	dup
	bz *skip_and3
	frame_dig 2 // txn: txn
	gtxns ApplicationArgs 0
	bytec 6 //  method "arc58_verifyAuthAddr()void"
	==
	&&

*skip_and3:
	bz *if1_end

	// *if1_consequent
	// examples/arc58/arc58.algo.ts:63
	// rekeyedBack = true
	intc 0 // 1
	frame_bury 0 // rekeyedBack: bool
	b *for_0_end

*if1_end:

*for_0_continue:
	// examples/arc58/arc58.algo.ts:47
	// i += 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// examples/arc58/arc58.algo.ts:68
	// assert(rekeyedBack)
	frame_dig 0 // rekeyedBack: bool
	assert
	retsub

// getAuthAddr(): Address
//
// What the value of this.address.value.authAddr should be when this.controlledAddress
// is able to be controlled by this app. It will either be this.app.address or zeroAddress
getAuthAddr:
	proto 0 1

	// examples/arc58/arc58.algo.ts:76
	// return this.controlledAddress.value === this.app.address ? Address.zeroAddress : this.app.address;
	bytec 3 //  "c"
	app_global_get
	global CurrentApplicationAddress
	==
	bz *ternary0_false
	global ZeroAddress
	b *ternary0_end

*ternary0_false:
	global CurrentApplicationAddress

*ternary0_end:
	retsub

// createApplication(address,address)void
*abi_route_createApplication:
	// admin: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 0 (admin) for createApplication must be a address
	assert

	// controlledAddress: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (controlledAddress) for createApplication must be a address
	assert

	// execute createApplication(address,address)void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(controlledAddress: Address, admin: Address): void
//
// Create an abstracted account application.
// This is not part of ARC58 and implementation specific.
//
// @param controlledAddress The address of the abstracted account. If zeroAddress, then the address of the contract account will be used
// @param admin The admin for this app
createApplication:
	proto 2 0

	// examples/arc58/arc58.algo.ts:87
	// verifyAppCallTxn(this.txn, {
	//       sender: { includedIn: [controlledAddress, admin] },
	//     })
	// verify sender
	txn Sender
	frame_dig -1 // controlledAddress: Address
	==
	txn Sender
	frame_dig -2 // admin: Address
	==
	||

	// transaction verification failed: {"txn":{"txnText":"this.txn"},"field":"sender","condition":"includedIn","expected":"[controlledAddress, admin]"}
	assert

	// examples/arc58/arc58.algo.ts:91
	// assert(admin !== controlledAddress)
	frame_dig -2 // admin: Address
	frame_dig -1 // controlledAddress: Address
	!=
	assert

	// examples/arc58/arc58.algo.ts:93
	// this.admin.value = admin
	bytec 1 //  "a"
	frame_dig -2 // admin: Address
	app_global_put

	// examples/arc58/arc58.algo.ts:94
	// this.controlledAddress.value = controlledAddress === Address.zeroAddress ? this.app.address : controlledAddress
	bytec 3 //  "c"
	frame_dig -1 // controlledAddress: Address
	global ZeroAddress
	==
	bz *ternary1_false
	global CurrentApplicationAddress
	b *ternary1_end

*ternary1_false:
	frame_dig -1 // controlledAddress: Address

*ternary1_end:
	app_global_put
	retsub

// arc58_changeAdmin(address)void
*abi_route_arc58_changeAdmin:
	// newAdmin: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (newAdmin) for arc58_changeAdmin must be a address
	assert

	// execute arc58_changeAdmin(address)void
	callsub arc58_changeAdmin
	intc 0 // 1
	return

// arc58_changeAdmin(newAdmin: Address): void
//
// Attempt to change the admin for this app. Some implementations MAY not support this.
//
// @param newAdmin The new admin
arc58_changeAdmin:
	proto 1 0

	// examples/arc58/arc58.algo.ts:103
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:104
	// this.admin.value = newAdmin
	bytec 1 //  "a"
	frame_dig -1 // newAdmin: Address
	app_global_put
	retsub

// arc58_pluginChangeAdmin(uint64,address,address)void
*abi_route_arc58_pluginChangeAdmin:
	// newAdmin: address
	txna ApplicationArgs 3
	dup
	len
	intc 2 // 32
	==

	// argument 0 (newAdmin) for arc58_pluginChangeAdmin must be a address
	assert

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 1 (allowedCaller) for arc58_pluginChangeAdmin must be a address
	assert

	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_pluginChangeAdmin(uint64,address,address)void
	callsub arc58_pluginChangeAdmin
	intc 0 // 1
	return

// arc58_pluginChangeAdmin(plugin: AppID, allowedCaller: Address, newAdmin: Address): void
//
// Attempt to change the admin via plugin.
//
// @param plugin The app calling the plugin
// @param allowedCaller The address that triggered the plugin
// @param newAdmin The new admin
arc58_pluginChangeAdmin:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:116
	// verifyTxn(this.txn, { sender: plugin.address })
	// verify sender
	txn Sender
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"plugin.address"}
	assert

	// examples/arc58/arc58.algo.ts:117
	// assert(this.controlledAddress.value.authAddr === plugin.address, 'This plugin is not in control of the account')
	bytec 3 //  "c"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	==

	// This plugin is not in control of the account
	assert

	// examples/arc58/arc58.algo.ts:119
	// key: PluginsKey = { application: plugin, allowedCaller: allowedCaller }
	frame_dig -1 // plugin: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:120
	// assert(
	//       this.plugins(key).exists && this.plugins(key).value.adminPrivileges,
	//       'This plugin does not have admin privileges'
	//     )
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and4
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 192
	getbit
	&&

*skip_and4:
	// This plugin does not have admin privileges
	assert

	// examples/arc58/arc58.algo.ts:125
	// this.admin.value = newAdmin
	bytec 1 //  "a"
	frame_dig -3 // newAdmin: Address
	app_global_put
	retsub

// arc58_getAdmin()address
*abi_route_arc58_getAdmin:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute arc58_getAdmin()address
	callsub arc58_getAdmin
	concat
	log
	intc 0 // 1
	return

// arc58_getAdmin(): Address
//
// Get the admin of this app. This method SHOULD always be used rather than reading directly from state
// because different implementations may have different ways of determining the admin.
arc58_getAdmin:
	proto 0 1

	// examples/arc58/arc58.algo.ts:133
	// return this.admin.value;
	bytec 1 //  "a"
	app_global_get
	retsub

// arc58_verifyAuthAddr()void
*abi_route_arc58_verifyAuthAddr:
	// execute arc58_verifyAuthAddr()void
	callsub arc58_verifyAuthAddr
	intc 0 // 1
	return

// arc58_verifyAuthAddr(): void
//
// Verify the abstracted account is rekeyed to this app
arc58_verifyAuthAddr:
	proto 0 0

	// examples/arc58/arc58.algo.ts:140
	// assert(this.controlledAddress.value.authAddr === this.getAuthAddr())
	bytec 3 //  "c"
	app_global_get
	acct_params_get AcctAuthAddr
	pop
	callsub getAuthAddr
	==
	assert
	retsub

// arc58_rekeyTo(address,bool)void
*abi_route_arc58_rekeyTo:
	// flash: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (flash) for arc58_rekeyTo must be a bool
	assert
	intc 1 // 0
	getbit

	// addr: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 1 (addr) for arc58_rekeyTo must be a address
	assert

	// execute arc58_rekeyTo(address,bool)void
	callsub arc58_rekeyTo
	intc 0 // 1
	return

// arc58_rekeyTo(addr: Address, flash: boolean): void
//
// Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.
//
// @param addr The address to rekey to
// @param flash Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call
arc58_rekeyTo:
	proto 2 0

	// examples/arc58/arc58.algo.ts:150
	// verifyAppCallTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:152
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: addr,
	//       rekeyTo: addr,
	//       note: 'rekeying abstracted account',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/arc58/arc58.algo.ts:153
	// sender: this.controlledAddress.value
	bytec 3 //  "c"
	app_global_get
	itxn_field Sender

	// examples/arc58/arc58.algo.ts:154
	// receiver: addr
	frame_dig -1 // addr: Address
	itxn_field Receiver

	// examples/arc58/arc58.algo.ts:155
	// rekeyTo: addr
	frame_dig -1 // addr: Address
	itxn_field RekeyTo

	// examples/arc58/arc58.algo.ts:156
	// note: 'rekeying abstracted account'
	pushbytes 0x72656b6579696e672061627374726163746564206163636f756e74 // "rekeying abstracted account"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// *if2_condition
	// examples/arc58/arc58.algo.ts:159
	// flash
	frame_dig -2 // flash: boolean
	bz *if2_end

	// *if2_consequent
	// examples/arc58/arc58.algo.ts:159
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount

*if2_end:
	retsub

// pluginCallAllowed(app: AppID, caller: Address): boolean
pluginCallAllowed:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:163
	// key: PluginsKey = { application: app, allowedCaller: caller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // caller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:165
	// return (
	//       this.plugins(key).exists &&
	//       this.plugins(key).value.lastValidRound >= globals.round &&
	//       globals.round - this.plugins(key).value.lastCalled >= this.plugins(key).value.cooldown
	//     );
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_len
	swap
	pop
	dup
	bz *skip_and5
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	global Round
	>=
	&&

*skip_and5:
	dup
	bz *skip_and6
	global Round
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	-
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_get

	// box value does not exist: this.plugins(key).value
	assert
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	>=
	&&

*skip_and6:
	// set the subroutine return value
	frame_bury 0
	retsub

// arc58_rekeyToPlugin(uint64)void
*abi_route_arc58_rekeyToPlugin:
	// plugin: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_rekeyToPlugin(uint64)void
	callsub arc58_rekeyToPlugin
	intc 0 // 1
	return

// arc58_rekeyToPlugin(plugin: AppID): void
//
// Temporarily rekey to an approved plugin app address
//
// @param plugin The app to rekey to
arc58_rekeyToPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:178
	// globalAllowed = this.pluginCallAllowed(plugin, Address.zeroAddress)
	global ZeroAddress
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed
	frame_bury 0 // globalAllowed: bool

	// *if3_condition
	// examples/arc58/arc58.algo.ts:180
	// !globalAllowed
	frame_dig 0 // globalAllowed: bool
	!
	bz *if3_end

	// *if3_consequent
	// examples/arc58/arc58.algo.ts:181
	// assert(this.pluginCallAllowed(plugin, this.txn.sender), 'This sender is not allowed to trigger this plugin')
	txn Sender
	frame_dig -1 // plugin: AppID
	callsub pluginCallAllowed

	// This sender is not allowed to trigger this plugin
	assert

*if3_end:
	// examples/arc58/arc58.algo.ts:183
	// sendPayment({
	//       sender: this.controlledAddress.value,
	//       receiver: this.controlledAddress.value,
	//       rekeyTo: plugin.address,
	//       note: 'rekeying to plugin app',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/arc58/arc58.algo.ts:184
	// sender: this.controlledAddress.value
	bytec 3 //  "c"
	app_global_get
	itxn_field Sender

	// examples/arc58/arc58.algo.ts:185
	// receiver: this.controlledAddress.value
	bytec 3 //  "c"
	app_global_get
	itxn_field Receiver

	// examples/arc58/arc58.algo.ts:186
	// rekeyTo: plugin.address
	frame_dig -1 // plugin: AppID
	app_params_get AppAddress
	pop
	itxn_field RekeyTo

	// examples/arc58/arc58.algo.ts:187
	// note: 'rekeying to plugin app'
	pushbytes 0x72656b6579696e6720746f20706c7567696e20617070 // "rekeying to plugin app"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/arc58/arc58.algo.ts:190
	// this.plugins({
	//       application: plugin,
	//       allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender,
	//     }).value.lastCalled = globals.round
	bytec 0 //  "p"
	frame_dig -1 // plugin: AppID
	itob
	frame_dig 0 // globalAllowed: bool
	bz *ternary3_false
	global ZeroAddress
	b *ternary3_end

*ternary3_false:
	txn Sender

*ternary3_end:
	concat
	concat
	box_get

	// box value does not exist: this.plugins({ application: plugin, allowedCaller: globalAllowed ? Address.zeroAddress : this.txn.sender, }).value
	assert
	store 255 // full array
	load 255 // full array
	pushint 16
	global Round
	itob
	bytec 0 //  "p"
	frame_dig -1 // plugin: AppID
	itob
	frame_dig 0 // globalAllowed: bool
	bz *ternary5_false
	global ZeroAddress
	b *ternary5_end

*ternary5_false:
	txn Sender

*ternary5_end:
	concat
	concat
	cover 2
	box_replace

	// examples/arc58/arc58.algo.ts:195
	// this.verifyRekeyToAbstractedAccount()
	callsub verifyRekeyToAbstractedAccount
	retsub

// arc58_rekeyToNamedPlugin(string)void
*abi_route_arc58_rekeyToNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_rekeyToNamedPlugin(string)void
	callsub arc58_rekeyToNamedPlugin
	intc 0 // 1
	return

// arc58_rekeyToNamedPlugin(name: string): void
//
// Temporarily rekey to a named plugin app address
//
// @param name The name of the plugin to rekey to
arc58_rekeyToNamedPlugin:
	proto 1 0

	// examples/arc58/arc58.algo.ts:204
	// this.arc58_rekeyToPlugin(this.namedPlugins(name).value.application)
	intc 1 // 0
	pushint 8
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	cover 2
	box_extract
	btoi
	callsub arc58_rekeyToPlugin
	retsub

// arc58_addPlugin(uint64,address,uint64,uint64,bool)void
*abi_route_arc58_addPlugin:
	// adminPrivileges: bool
	txna ApplicationArgs 5
	dup
	len
	intc 0 // 1
	==

	// argument 0 (adminPrivileges) for arc58_addPlugin must be a bool
	assert
	intc 1 // 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 4
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 3
	btoi

	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 3 (allowedCaller) for arc58_addPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_addPlugin(uint64,address,uint64,uint64,bool)void
	callsub arc58_addPlugin
	intc 0 // 1
	return

// arc58_addPlugin(app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean): void
//
// Add an app to the list of approved plugins
//
// @param app The app to add
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
arc58_addPlugin:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:224
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:225
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:226
	// this.plugins(key).value = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//     }
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -3 // lastValidRound: uint64
	itob
	frame_dig -4 // cooldown: uint64
	itob
	concat
	bytec 5 // 0x0000000000000000
	concat
	bytec 7 // 0x00
	intc 1 // 0
	frame_dig -5 // adminPrivileges: boolean
	setbit
	concat
	box_put
	retsub

// arc58_removePlugin(uint64,address)void
*abi_route_arc58_removePlugin:
	// allowedCaller: address
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 32
	==

	// argument 0 (allowedCaller) for arc58_removePlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 1
	btoi

	// execute arc58_removePlugin(uint64,address)void
	callsub arc58_removePlugin
	intc 0 // 1
	return

// arc58_removePlugin(app: AppID, allowedCaller: Address): void
//
// Remove an app from the list of approved plugins
//
// @param app The app to remove
arc58_removePlugin:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:240
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:242
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -1 // app: AppID
	itob
	frame_dig -2 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:243
	// this.plugins(key).delete()
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	box_del
	retsub

// arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void
*abi_route_arc58_addNamedPlugin:
	// adminPrivileges: bool
	txna ApplicationArgs 6
	dup
	len
	intc 0 // 1
	==

	// argument 0 (adminPrivileges) for arc58_addNamedPlugin must be a bool
	assert
	intc 1 // 0
	getbit

	// cooldown: uint64
	txna ApplicationArgs 5
	btoi

	// lastValidRound: uint64
	txna ApplicationArgs 4
	btoi

	// allowedCaller: address
	txna ApplicationArgs 3
	dup
	len
	intc 2 // 32
	==

	// argument 3 (allowedCaller) for arc58_addNamedPlugin must be a address
	assert

	// app: uint64
	txna ApplicationArgs 2
	btoi

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void
	callsub arc58_addNamedPlugin
	intc 0 // 1
	return

// arc58_addNamedPlugin(name: string, app: AppID, allowedCaller: Address, lastValidRound: uint64, cooldown: uint64, adminPrivileges: boolean): void
//
// Add a named plugin
//
// @param app The plugin app
// @param name The plugin name
// @param allowedCaller The address of that's allowed to call the app
// or the global zero address for all addresses
// @param lastValidRound The round when the permission expires
// @param cooldown  The number of rounds that must pass before the plugin can be called again
// @param adminPrivileges Whether the plugin has permissions to change the admin account
arc58_addNamedPlugin:
	proto 6 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:265
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:266
	// assert(!this.namedPlugins(name).exists)
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_len
	swap
	pop
	!
	assert

	// examples/arc58/arc58.algo.ts:268
	// key: PluginsKey = { application: app, allowedCaller: allowedCaller }
	frame_dig -2 // app: AppID
	itob
	frame_dig -3 // allowedCaller: Address
	concat
	frame_bury 0 // key: PluginsKey

	// examples/arc58/arc58.algo.ts:269
	// this.namedPlugins(name).value = key
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	frame_dig 0 // key: PluginsKey
	box_put

	// examples/arc58/arc58.algo.ts:270
	// this.plugins(key).value = {
	//       lastValidRound: lastValidRound,
	//       cooldown: cooldown,
	//       lastCalled: 0,
	//       adminPrivileges: adminPrivileges,
	//     }
	bytec 0 //  "p"
	frame_dig 0 // key: PluginsKey
	concat
	frame_dig -4 // lastValidRound: uint64
	itob
	frame_dig -5 // cooldown: uint64
	itob
	concat
	bytec 5 // 0x0000000000000000
	concat
	bytec 7 // 0x00
	intc 1 // 0
	frame_dig -6 // adminPrivileges: boolean
	setbit
	concat
	box_put
	retsub

// arc58_removeNamedPlugin(string)void
*abi_route_arc58_removeNamedPlugin:
	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute arc58_removeNamedPlugin(string)void
	callsub arc58_removeNamedPlugin
	intc 0 // 1
	return

// arc58_removeNamedPlugin(name: string): void
//
// Remove a named plugin
//
// @param name The plugin name
arc58_removeNamedPlugin:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 2 // 0x

	// examples/arc58/arc58.algo.ts:284
	// verifyTxn(this.txn, { sender: this.admin.value })
	// verify sender
	txn Sender
	bytec 1 //  "a"
	app_global_get
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.admin.value"}
	assert

	// examples/arc58/arc58.algo.ts:286
	// app = this.namedPlugins(name).value
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	frame_bury 0 // storage key//app

	// examples/arc58/arc58.algo.ts:287
	// this.namedPlugins(name).delete()
	bytec 4 //  "n"
	frame_dig -1 // name: string
	concat
	box_del

	// examples/arc58/arc58.algo.ts:288
	// this.plugins(app).delete()
	bytec 0 //  "p"
	frame_dig 0 // storage key//app
	box_get

	// box value does not exist: this.namedPlugins(name).value
	assert
	concat
	box_del
	retsub

*create_NoOp:
	pushbytes 0xb4c77d71 // method "createApplication(address,address)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd24b7556 // method "arc58_changeAdmin(address)void"
	pushbytes 0x5fa449c6 // method "arc58_pluginChangeAdmin(uint64,address,address)void"
	pushbytes 0x13bc44e4 // method "arc58_getAdmin()address"
	bytec 6 //  method "arc58_verifyAuthAddr()void"
	pushbytes 0xc95a5d3d // method "arc58_rekeyTo(address,bool)void"
	pushbytes 0x7c766ddc // method "arc58_rekeyToPlugin(uint64)void"
	pushbytes 0x56f28b58 // method "arc58_rekeyToNamedPlugin(string)void"
	pushbytes 0xd12dcb61 // method "arc58_addPlugin(uint64,address,uint64,uint64,bool)void"
	pushbytes 0x4d372355 // method "arc58_removePlugin(uint64,address)void"
	pushbytes 0x8a72a750 // method "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void"
	pushbytes 0xe350b9d4 // method "arc58_removeNamedPlugin(string)void"
	txna ApplicationArgs 0
	match *abi_route_arc58_changeAdmin *abi_route_arc58_pluginChangeAdmin *abi_route_arc58_getAdmin *abi_route_arc58_verifyAuthAddr *abi_route_arc58_rekeyTo *abi_route_arc58_rekeyToPlugin *abi_route_arc58_rekeyToNamedPlugin *abi_route_arc58_addPlugin *abi_route_arc58_removePlugin *abi_route_arc58_addNamedPlugin *abi_route_arc58_removeNamedPlugin

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples AbstractedAccount Artifacts Maintains program size 1`] = `1130`;

exports[`Examples AbstractedAccount Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used",
          "name": "controlledAddress",
          "type": "address",
        },
        {
          "desc": "The admin for this app",
          "name": "admin",
          "type": "address",
        },
      ],
      "desc": 
"Create an abstracted account application.
This is not part of ARC58 and implementation specific."
,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The new admin",
          "name": "newAdmin",
          "type": "address",
        },
      ],
      "desc": "Attempt to change the admin for this app. Some implementations MAY not support this.",
      "events": undefined,
      "name": "arc58_changeAdmin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The app calling the plugin",
          "name": "plugin",
          "type": "uint64",
        },
        {
          "desc": "The address that triggered the plugin",
          "name": "allowedCaller",
          "type": "address",
        },
        {
          "desc": "The new admin",
          "name": "newAdmin",
          "type": "address",
        },
      ],
      "desc": "Attempt to change the admin via plugin.",
      "events": undefined,
      "name": "arc58_pluginChangeAdmin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": 
"Get the admin of this app. This method SHOULD always be used rather than reading directly from state
because different implementations may have different ways of determining the admin."
,
      "events": undefined,
      "name": "arc58_getAdmin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "address",
      },
    },
    {
      "args": [],
      "desc": "Verify the abstracted account is rekeyed to this app",
      "events": undefined,
      "name": "arc58_verifyAuthAddr",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The address to rekey to",
          "name": "addr",
          "type": "address",
        },
        {
          "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call",
          "name": "flash",
          "type": "bool",
        },
      ],
      "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.",
      "events": undefined,
      "name": "arc58_rekeyTo",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The app to rekey to",
          "name": "plugin",
          "type": "uint64",
        },
      ],
      "desc": "Temporarily rekey to an approved plugin app address",
      "events": undefined,
      "name": "arc58_rekeyToPlugin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The name of the plugin to rekey to",
          "name": "name",
          "type": "string",
        },
      ],
      "desc": "Temporarily rekey to a named plugin app address",
      "events": undefined,
      "name": "arc58_rekeyToNamedPlugin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The app to add",
          "name": "app",
          "type": "uint64",
        },
        {
          "desc": 
"The address of that's allowed to call the app
or the global zero address for all addresses"
,
          "name": "allowedCaller",
          "type": "address",
        },
        {
          "desc": "The round when the permission expires",
          "name": "lastValidRound",
          "type": "uint64",
        },
        {
          "desc": "The number of rounds that must pass before the plugin can be called again",
          "name": "cooldown",
          "type": "uint64",
        },
        {
          "desc": "Whether the plugin has permissions to change the admin account",
          "name": "adminPrivileges",
          "type": "bool",
        },
      ],
      "desc": "Add an app to the list of approved plugins",
      "events": undefined,
      "name": "arc58_addPlugin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The app to remove",
          "name": "app",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "allowedCaller",
          "type": "address",
        },
      ],
      "desc": "Remove an app from the list of approved plugins",
      "events": undefined,
      "name": "arc58_removePlugin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The plugin name",
          "name": "name",
          "type": "string",
        },
        {
          "desc": "The plugin app",
          "name": "app",
          "type": "uint64",
        },
        {
          "desc": 
"The address of that's allowed to call the app
or the global zero address for all addresses"
,
          "name": "allowedCaller",
          "type": "address",
        },
        {
          "desc": "The round when the permission expires",
          "name": "lastValidRound",
          "type": "uint64",
        },
        {
          "desc": "The number of rounds that must pass before the plugin can be called again",
          "name": "cooldown",
          "type": "uint64",
        },
        {
          "desc": "Whether the plugin has permissions to change the admin account",
          "name": "adminPrivileges",
          "type": "bool",
        },
      ],
      "desc": "Add a named plugin",
      "events": undefined,
      "name": "arc58_addNamedPlugin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The plugin name",
          "name": "name",
          "type": "string",
        },
      ],
      "desc": "Remove a named plugin",
      "events": undefined,
      "name": "arc58_removeNamedPlugin",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "AbstractedAccount",
}
`;

exports[`Examples AbstractedAccount Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": "The address of the abstracted account. If zeroAddress, then the address of the contract account will be used",
            "name": "controlledAddress",
            "type": "address",
          },
          {
            "desc": "The admin for this app",
            "name": "admin",
            "type": "address",
          },
        ],
        "desc": 
"Create an abstracted account application.
This is not part of ARC58 and implementation specific."
,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The new admin",
            "name": "newAdmin",
            "type": "address",
          },
        ],
        "desc": "Attempt to change the admin for this app. Some implementations MAY not support this.",
        "events": undefined,
        "name": "arc58_changeAdmin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The app calling the plugin",
            "name": "plugin",
            "type": "uint64",
          },
          {
            "desc": "The address that triggered the plugin",
            "name": "allowedCaller",
            "type": "address",
          },
          {
            "desc": "The new admin",
            "name": "newAdmin",
            "type": "address",
          },
        ],
        "desc": "Attempt to change the admin via plugin.",
        "events": undefined,
        "name": "arc58_pluginChangeAdmin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": 
"Get the admin of this app. This method SHOULD always be used rather than reading directly from state
because different implementations may have different ways of determining the admin."
,
        "events": undefined,
        "name": "arc58_getAdmin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "address",
        },
      },
      {
        "args": [],
        "desc": "Verify the abstracted account is rekeyed to this app",
        "events": undefined,
        "name": "arc58_verifyAuthAddr",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The address to rekey to",
            "name": "addr",
            "type": "address",
          },
          {
            "desc": "Whether or not this should be a flash rekey. If true, the rekey back to the app address must done in the same txn group as this call",
            "name": "flash",
            "type": "bool",
          },
        ],
        "desc": "Rekey the abstracted account to another address. Primarily useful for rekeying to an EOA.",
        "events": undefined,
        "name": "arc58_rekeyTo",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The app to rekey to",
            "name": "plugin",
            "type": "uint64",
          },
        ],
        "desc": "Temporarily rekey to an approved plugin app address",
        "events": undefined,
        "name": "arc58_rekeyToPlugin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The name of the plugin to rekey to",
            "name": "name",
            "type": "string",
          },
        ],
        "desc": "Temporarily rekey to a named plugin app address",
        "events": undefined,
        "name": "arc58_rekeyToNamedPlugin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The app to add",
            "name": "app",
            "type": "uint64",
          },
          {
            "desc": 
"The address of that's allowed to call the app
or the global zero address for all addresses"
,
            "name": "allowedCaller",
            "type": "address",
          },
          {
            "desc": "The round when the permission expires",
            "name": "lastValidRound",
            "type": "uint64",
          },
          {
            "desc": "The number of rounds that must pass before the plugin can be called again",
            "name": "cooldown",
            "type": "uint64",
          },
          {
            "desc": "Whether the plugin has permissions to change the admin account",
            "name": "adminPrivileges",
            "type": "bool",
          },
        ],
        "desc": "Add an app to the list of approved plugins",
        "events": undefined,
        "name": "arc58_addPlugin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The app to remove",
            "name": "app",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "allowedCaller",
            "type": "address",
          },
        ],
        "desc": "Remove an app from the list of approved plugins",
        "events": undefined,
        "name": "arc58_removePlugin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The plugin name",
            "name": "name",
            "type": "string",
          },
          {
            "desc": "The plugin app",
            "name": "app",
            "type": "uint64",
          },
          {
            "desc": 
"The address of that's allowed to call the app
or the global zero address for all addresses"
,
            "name": "allowedCaller",
            "type": "address",
          },
          {
            "desc": "The round when the permission expires",
            "name": "lastValidRound",
            "type": "uint64",
          },
          {
            "desc": "The number of rounds that must pass before the plugin can be called again",
            "name": "cooldown",
            "type": "uint64",
          },
          {
            "desc": "Whether the plugin has permissions to change the admin account",
            "name": "adminPrivileges",
            "type": "bool",
          },
        ],
        "desc": "Add a named plugin",
        "events": undefined,
        "name": "arc58_addNamedPlugin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The plugin name",
            "name": "name",
            "type": "string",
          },
        ],
        "desc": "Remove a named plugin",
        "events": undefined,
        "name": "arc58_removeNamedPlugin",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "AbstractedAccount",
  },
  "hints": {
    "arc58_addNamedPlugin(string,uint64,address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_addPlugin(uint64,address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_changeAdmin(address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_getAdmin()address": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_pluginChangeAdmin(uint64,address,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_rekeyTo(address,bool)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_rekeyToNamedPlugin(string)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_rekeyToPlugin(uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_removeNamedPlugin(string)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_removePlugin(uint64,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc58_verifyAuthAddr()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication(address,address)void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "admin": {
          "key": "a",
          "type": "bytes",
        },
        "controlledAddress": {
          "key": "c",
          "type": "bytes",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 2,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples ARC72 Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 32 1 256 0 288
bytecblock 0x 0x151f7c75 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0x696e646578

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// arc72_ownerOf(uint256)address
*abi_route_arc72_ownerOf:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// tokenId: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 0 (tokenId) for arc72_ownerOf must be a uint256
	assert

	// execute arc72_ownerOf(uint256)address
	callsub arc72_ownerOf
	concat
	log
	intc 1 // 1
	return

// arc72_ownerOf(tokenId: uint256): Address
//
//
// Returns the address of the current owner of the NFT with the given tokenId
//
// @param tokenId The ID of the NFT
// @returns The current owner of the NFT
arc72_ownerOf:
	proto 1 1

	// examples/arc72/arc72.algo.ts:25
	// return this.tokenBox(tokenId).value.owner;
	frame_dig -1 // tokenId: uint256
	intc 3 // 0
	intc 0 // 32
	box_extract
	retsub

// arc72_tokenURI(uint256)byte[256]
*abi_route_arc72_tokenURI:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// tokenId: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 0 (tokenId) for arc72_tokenURI must be a uint256
	assert

	// execute arc72_tokenURI(uint256)byte[256]
	callsub arc72_tokenURI
	concat
	log
	intc 1 // 1
	return

// arc72_tokenURI(tokenId: uint256): Bytes256
//
//
// Returns a URI pointing to the NFT metadata
//
// @param tokenId The ID of the NFT
// @returns URI to token metadata
arc72_tokenURI:
	proto 1 1

	// examples/arc72/arc72.algo.ts:37
	// return this.tokenBox(tokenId).value.uri;
	frame_dig -1 // tokenId: uint256
	intc 0 //  headOffset
	intc 2 // 256
	box_extract
	retsub

// transferTo(to: Address, tokenId: uint256): void
transferTo:
	proto 2 0

	// examples/arc72/arc72.algo.ts:41
	// this.tokenBox(tokenId).value.owner = to
	frame_dig -2 // tokenId: uint256
	intc 3 // 0
	frame_dig -1 // to: Address
	box_replace
	retsub

// arc72_transferFrom(address,address,uint256)void
*abi_route_arc72_transferFrom:
	// tokenId: uint256
	txna ApplicationArgs 3
	dup
	len
	intc 0 // 32
	==

	// argument 0 (tokenId) for arc72_transferFrom must be a uint256
	assert

	// to: address
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 32
	==

	// argument 1 (to) for arc72_transferFrom must be a address
	assert

	// _from: address
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 2 (_from) for arc72_transferFrom must be a address
	assert

	// execute arc72_transferFrom(address,address,uint256)void
	callsub arc72_transferFrom
	intc 1 // 1
	return

// arc72_transferFrom(_from: Address, to: Address, tokenId: uint256): void
//
// Transfers ownership of an NFT
arc72_transferFrom:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/arc72/arc72.algo.ts:48
	// token = this.tokenBox(tokenId).value
	frame_dig -3 // tokenId: uint256
	frame_bury 0 // storage key//token

	// examples/arc72/arc72.algo.ts:50
	// key: Control = { owner: this.txn.sender, controller: _from }
	txn Sender
	frame_dig -1 // _from: Address
	concat
	frame_bury 1 // key: Control

	// *if0_condition
	// examples/arc72/arc72.algo.ts:52
	// this.txn.sender === _from || this.txn.sender === token.controller || this.controlBox(key).exists
	txn Sender
	frame_dig -1 // _from: Address
	==
	dup
	bnz *skip_or0
	txn Sender
	frame_dig -3 // tokenId: uint256
	intc 4 //  headOffset
	intc 0 // 32
	box_extract
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	frame_dig 1 // key: Control
	box_len
	swap
	pop
	||

*skip_or1:
	bz *if0_else

	// *if0_consequent
	// examples/arc72/arc72.algo.ts:53
	// this.transferTo(to, tokenId)
	frame_dig -3 // tokenId: uint256
	frame_dig -2 // to: Address
	callsub transferTo
	b *if0_end

*if0_else:
	// Transfer not authorized
	err

*if0_end:
	retsub

// arc72_approve(address,uint256)void
*abi_route_arc72_approve:
	// tokenId: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 32
	==

	// argument 0 (tokenId) for arc72_approve must be a uint256
	assert

	// approved: address
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 1 (approved) for arc72_approve must be a address
	assert

	// execute arc72_approve(address,uint256)void
	callsub arc72_approve
	intc 1 // 1
	return

// arc72_approve(approved: Address, tokenId: uint256): void
//
//
// Approve a controller for a single NFT
//
// @param approved Approved controller address
// @param tokenId The ID of the NFT
arc72_approve:
	proto 2 0

	// examples/arc72/arc72.algo.ts:65
	// this.tokenBox(tokenId).value.controller = approved
	frame_dig -2 // tokenId: uint256
	intc 4 //  headOffset
	frame_dig -1 // approved: Address
	box_replace
	retsub

// arc72_setApprovalForAll(address,bool)void
*abi_route_arc72_setApprovalForAll:
	// approved: bool
	txna ApplicationArgs 2
	dup
	len
	intc 1 // 1
	==

	// argument 0 (approved) for arc72_setApprovalForAll must be a bool
	assert
	intc 3 // 0
	getbit

	// operator: address
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 1 (operator) for arc72_setApprovalForAll must be a address
	assert

	// execute arc72_setApprovalForAll(address,bool)void
	callsub arc72_setApprovalForAll
	intc 1 // 1
	return

// arc72_setApprovalForAll(operator: Address, approved: boolean): void
//
//
// Approve an operator for all NFTs for a user
//
// @param operator Approved operator address
// @param approved true to give approval, false to revoke
// @returns
arc72_setApprovalForAll:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/arc72/arc72.algo.ts:77
	// key: Control = { owner: this.txn.sender, controller: operator }
	txn Sender
	frame_dig -1 // operator: Address
	concat
	frame_bury 0 // key: Control

	// *if1_condition
	// examples/arc72/arc72.algo.ts:79
	// approved
	frame_dig -2 // approved: boolean
	bz *if1_elseif1_condition

	// *if1_consequent
	// examples/arc72/arc72.algo.ts:79
	// this.controlBox(key).value = ''
	frame_dig 0 // key: Control
	dup
	box_del
	pop
	bytec 0 //  ""
	box_put
	b *if1_end

*if1_elseif1_condition:
	// examples/arc72/arc72.algo.ts:80
	// this.controlBox(key).exists
	frame_dig 0 // key: Control
	box_len
	swap
	pop
	bz *if1_end

	// *if1_elseif1_consequent
	// examples/arc72/arc72.algo.ts:80
	// this.controlBox(key).delete()
	frame_dig 0 // key: Control
	box_del

*if1_end:
	retsub

// mint(address)void
*abi_route_mint:
	// to: address
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 0 (to) for mint must be a address
	assert

	// execute mint(address)void
	callsub mint
	intc 1 // 1
	return

// mint(to: Address): void
mint:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/arc72/arc72.algo.ts:84
	// index = this.index.value
	bytec 3 //  "index"
	app_global_get
	frame_bury 0 // index: uint256

	// examples/arc72/arc72.algo.ts:86
	// token: Token = {
	//       owner: to,
	//       uri: 'https://github.com/algorandfoundation/ARCs' as Bytes256,
	//       controller: Address.zeroAddress,
	//     }
	frame_dig -1 // to: Address
	pushbytes 0x68747470733a2f2f6769746875622e636f6d2f616c676f72616e64666f756e646174696f6e2f4152437300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 // "https://github.com/algorandfoundation/ARCs"
	concat
	global ZeroAddress
	concat
	frame_bury 1 // token: Token

	// examples/arc72/arc72.algo.ts:92
	// this.tokenBox(index).value = token
	frame_dig 0 // index: uint256
	frame_dig 1 // token: Token
	box_put

	// examples/arc72/arc72.algo.ts:93
	// this.transferTo(to, index)
	frame_dig 0 // index: uint256
	frame_dig -1 // to: Address
	callsub transferTo

	// examples/arc72/arc72.algo.ts:94
	// this.index.value = index + 1
	bytec 3 //  "index"
	frame_dig 0 // index: uint256
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000001
	b+
	dup
	bitlen
	intc 2 // 256
	<=

	// index + 1 overflowed 256 bits
	assert
	bytec 2 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	app_global_put
	retsub

// arc72_totalSupply()uint256
*abi_route_arc72_totalSupply:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute arc72_totalSupply()uint256
	callsub arc72_totalSupply
	dup
	bitlen
	intc 2 // 256
	<=

	// arc72_totalSupply return value overflowed 256 bits
	assert
	bytec 2 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	concat
	log
	intc 1 // 1
	return

// arc72_totalSupply(): uint256
//
// Returns the number of NFTs currently defined by this contract
arc72_totalSupply:
	proto 0 1

	// examples/arc72/arc72.algo.ts:102
	// return this.index.value;
	bytec 3 //  "index"
	app_global_get
	retsub

// arc72_tokenByIndex(uint256)uint256
*abi_route_arc72_tokenByIndex:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// index: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 0 (index) for arc72_tokenByIndex must be a uint256
	assert

	// execute arc72_tokenByIndex(uint256)uint256
	callsub arc72_tokenByIndex
	dup
	bitlen
	intc 2 // 256
	<=

	// arc72_tokenByIndex return value overflowed 256 bits
	assert
	bytec 2 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	concat
	log
	intc 1 // 1
	return

// arc72_tokenByIndex(index: uint256): uint256
//
// Returns the token ID of the token with the given index among all NFTs defined by the contract
arc72_tokenByIndex:
	proto 1 1

	// examples/arc72/arc72.algo.ts:110
	// return index;
	frame_dig -1 // index: uint256
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x79096a14 // method "arc72_ownerOf(uint256)address"
	pushbytes 0xc3c1fc00 // method "arc72_tokenURI(uint256)byte[256]"
	pushbytes 0xf2f194a0 // method "arc72_transferFrom(address,address,uint256)void"
	pushbytes 0xb4edba4e // method "arc72_approve(address,uint256)void"
	pushbytes 0x7134395f // method "arc72_setApprovalForAll(address,bool)void"
	pushbytes 0xac4cfadf // method "mint(address)void"
	pushbytes 0x64d72a7a // method "arc72_totalSupply()uint256"
	pushbytes 0x6d9bfd27 // method "arc72_tokenByIndex(uint256)uint256"
	txna ApplicationArgs 0
	match *abi_route_arc72_ownerOf *abi_route_arc72_tokenURI *abi_route_arc72_transferFrom *abi_route_arc72_approve *abi_route_arc72_setApprovalForAll *abi_route_mint *abi_route_arc72_totalSupply *abi_route_arc72_tokenByIndex

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples ARC72 Artifacts Maintains program size 1`] = `840`;

exports[`Examples ARC72 Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": "The ID of the NFT",
          "name": "tokenId",
          "type": "uint256",
        },
      ],
      "desc": "Returns the address of the current owner of the NFT with the given tokenId",
      "events": undefined,
      "name": "arc72_ownerOf",
      "readonly": true,
      "returns": {
        "desc": "The current owner of the NFT",
        "type": "address",
      },
    },
    {
      "args": [
        {
          "desc": "The ID of the NFT",
          "name": "tokenId",
          "type": "uint256",
        },
      ],
      "desc": "Returns a URI pointing to the NFT metadata",
      "events": undefined,
      "name": "arc72_tokenURI",
      "readonly": true,
      "returns": {
        "desc": "URI to token metadata",
        "type": "byte[256]",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "_from",
          "type": "address",
        },
        {
          "desc": undefined,
          "name": "to",
          "type": "address",
        },
        {
          "desc": undefined,
          "name": "tokenId",
          "type": "uint256",
        },
      ],
      "desc": "Transfers ownership of an NFT",
      "events": undefined,
      "name": "arc72_transferFrom",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "Approved controller address",
          "name": "approved",
          "type": "address",
        },
        {
          "desc": "The ID of the NFT",
          "name": "tokenId",
          "type": "uint256",
        },
      ],
      "desc": "Approve a controller for a single NFT",
      "events": undefined,
      "name": "arc72_approve",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "Approved operator address",
          "name": "operator",
          "type": "address",
        },
        {
          "desc": "true to give approval, false to revoke",
          "name": "approved",
          "type": "bool",
        },
      ],
      "desc": "Approve an operator for all NFTs for a user",
      "events": undefined,
      "name": "arc72_setApprovalForAll",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "to",
          "type": "address",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "mint",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": "Returns the number of NFTs currently defined by this contract",
      "events": undefined,
      "name": "arc72_totalSupply",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "uint256",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "index",
          "type": "uint256",
        },
      ],
      "desc": "Returns the token ID of the token with the given index among all NFTs defined by the contract",
      "events": undefined,
      "name": "arc72_tokenByIndex",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "uint256",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "ARC72",
}
`;

exports[`Examples ARC72 Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": "The ID of the NFT",
            "name": "tokenId",
            "type": "uint256",
          },
        ],
        "desc": "Returns the address of the current owner of the NFT with the given tokenId",
        "events": undefined,
        "name": "arc72_ownerOf",
        "readonly": true,
        "returns": {
          "desc": "The current owner of the NFT",
          "type": "address",
        },
      },
      {
        "args": [
          {
            "desc": "The ID of the NFT",
            "name": "tokenId",
            "type": "uint256",
          },
        ],
        "desc": "Returns a URI pointing to the NFT metadata",
        "events": undefined,
        "name": "arc72_tokenURI",
        "readonly": true,
        "returns": {
          "desc": "URI to token metadata",
          "type": "byte[256]",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "_from",
            "type": "address",
          },
          {
            "desc": undefined,
            "name": "to",
            "type": "address",
          },
          {
            "desc": undefined,
            "name": "tokenId",
            "type": "uint256",
          },
        ],
        "desc": "Transfers ownership of an NFT",
        "events": undefined,
        "name": "arc72_transferFrom",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "Approved controller address",
            "name": "approved",
            "type": "address",
          },
          {
            "desc": "The ID of the NFT",
            "name": "tokenId",
            "type": "uint256",
          },
        ],
        "desc": "Approve a controller for a single NFT",
        "events": undefined,
        "name": "arc72_approve",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "Approved operator address",
            "name": "operator",
            "type": "address",
          },
          {
            "desc": "true to give approval, false to revoke",
            "name": "approved",
            "type": "bool",
          },
        ],
        "desc": "Approve an operator for all NFTs for a user",
        "events": undefined,
        "name": "arc72_setApprovalForAll",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "to",
            "type": "address",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "mint",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": "Returns the number of NFTs currently defined by this contract",
        "events": undefined,
        "name": "arc72_totalSupply",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "uint256",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "index",
            "type": "uint256",
          },
        ],
        "desc": "Returns the token ID of the token with the given index among all NFTs defined by the contract",
        "events": undefined,
        "name": "arc72_tokenByIndex",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "uint256",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "ARC72",
  },
  "hints": {
    "arc72_approve(address,uint256)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc72_ownerOf(uint256)address": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc72_setApprovalForAll(address,bool)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc72_tokenByIndex(uint256)uint256": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc72_tokenURI(uint256)byte[256]": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc72_totalSupply()uint256": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "arc72_transferFrom(address,address,uint256)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "mint(address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "index": {
          "key": "index",
          "type": "bytes",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples ARC75 Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 8 2 0
bytecblock 0x 0x0024

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// verifyMBRPayment(payment: PayTxn, preMBR: uint64): void
verifyMBRPayment:
	proto 2 0

	// examples/arc75/arc75.algo.ts:10
	// verifyPayTxn(payment, {
	//       receiver: this.app.address,
	//       amount: this.app.address.minBalance - preMBR,
	//     })
	// verify receiver
	frame_dig -1 // payment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"payment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_dig -2 // preMBR: uint64
	-
	==

	// transaction verification failed: {"txn":"payment","field":"amount","expected":"this.app.address.minBalance - preMBR"}
	assert
	retsub

// sendMBRPayment(preMBR: uint64): void
sendMBRPayment:
	proto 1 0

	// examples/arc75/arc75.algo.ts:17
	// sendPayment({
	//       receiver: this.txn.sender,
	//       amount: preMBR - this.app.address.minBalance,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/arc75/arc75.algo.ts:18
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// examples/arc75/arc75.algo.ts:19
	// amount: preMBR - this.app.address.minBalance
	frame_dig -1 // preMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 3 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// addAppToWhiteList(string,uint16,uint64,pay)void
*abi_route_addAppToWhiteList:
	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payment) for addAppToWhiteList must be a pay transaction
	assert

	// appID: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 2 (boxIndex) for addAppToWhiteList must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute addAppToWhiteList(string,uint16,uint64,pay)void
	callsub addAppToWhiteList
	intc 0 // 1
	return

// addAppToWhiteList(arc: string, boxIndex: uint16, appID: uint64, payment: PayTxn): void
//
// Add app to whitelist box
//
// @param arc - The ARC the whitelist corresponds to
// @param boxIndex - The index of the whitelist box to add the app to
// @param appID - The app ID to add to the whitelist
// @param payment - The payment transaction to cover the MBR change
addAppToWhiteList:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// examples/arc75/arc75.algo.ts:33
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:34
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// *if0_condition
	// examples/arc75/arc75.algo.ts:36
	// this.whitelist(whitelist).exists
	frame_dig 1 // whitelist: Whitelist
	box_len
	swap
	pop
	bz *if0_else

	// *if0_consequent
	// examples/arc75/arc75.algo.ts:37
	// this.whitelist(whitelist).value.push(appID)
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	frame_dig -3 // appID: uint64
	itob
	concat
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	b *if0_end

*if0_else:
	// examples/arc75/arc75.algo.ts:39
	// newWhitelist: uint64[] = [appID]
	frame_dig -3 // appID: uint64
	itob
	frame_bury 2 // newWhitelist: uint64[]

	// examples/arc75/arc75.algo.ts:40
	// this.whitelist(whitelist).value = newWhitelist
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	frame_dig 2 // newWhitelist: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

*if0_end:
	// examples/arc75/arc75.algo.ts:43
	// this.verifyMBRPayment(payment, preMBR)
	frame_dig 0 // preMBR: uint64
	frame_dig -4 // payment: PayTxn
	callsub verifyMBRPayment
	retsub

// setAppWhitelist(string,uint16,uint64[])void
*abi_route_setAppWhitelist:
	// appIDs: uint64[]
	txna ApplicationArgs 3
	extract 2 0

	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 1 (boxIndex) for setAppWhitelist must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setAppWhitelist(string,uint16,uint64[])void
	callsub setAppWhitelist
	intc 0 // 1
	return

// setAppWhitelist(arc: string, boxIndex: uint16, appIDs: uint64[]): void
//
// Sets a app whitelist for the sender. Should only be used when adding/removing
// more than one app
//
// @param boxIndex - The index of the whitelist box to put the app IDs in
// @param appIDs - Array of app IDs that signify the whitelisted apps
setAppWhitelist:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/arc75/arc75.algo.ts:55
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:56
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// examples/arc75/arc75.algo.ts:58
	// this.whitelist(whitelist).delete()
	frame_dig 1 // whitelist: Whitelist
	box_del

	// examples/arc75/arc75.algo.ts:60
	// this.whitelist(whitelist).value = appIDs
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	frame_dig -3 // appIDs: uint64[]
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put

	// *if1_condition
	// examples/arc75/arc75.algo.ts:62
	// preMBR > this.app.address.minBalance
	frame_dig 0 // preMBR: uint64
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	>
	bz *if1_else

	// *if1_consequent
	// examples/arc75/arc75.algo.ts:63
	// this.sendMBRPayment(preMBR)
	frame_dig 0 // preMBR: uint64
	callsub sendMBRPayment
	b *if1_end

*if1_else:
	// examples/arc75/arc75.algo.ts:65
	// this.verifyMBRPayment(this.txnGroup[this.txn.groupIndex - 1] as PayTxn, preMBR)
	frame_dig 0 // preMBR: uint64
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// failed to cast this.txnGroup[this.txn.groupIndex - 1] to pay
	assert
	callsub verifyMBRPayment

*if1_end:
	retsub

// deleteWhitelist(string,uint16)void
*abi_route_deleteWhitelist:
	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 0 (boxIndex) for deleteWhitelist must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute deleteWhitelist(string,uint16)void
	callsub deleteWhitelist
	intc 0 // 1
	return

// deleteWhitelist(arc: string, boxIndex: uint16): void
//
// Deletes a app whitelist for the sender
//
// @param arc - The ARC the whitelist corresponds to
// @param boxIndex - The index of the whitelist box to delete
deleteWhitelist:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/arc75/arc75.algo.ts:77
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:78
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// examples/arc75/arc75.algo.ts:80
	// this.whitelist(whitelist).delete()
	frame_dig 1 // whitelist: Whitelist
	box_del

	// examples/arc75/arc75.algo.ts:82
	// this.sendMBRPayment(preMBR)
	frame_dig 0 // preMBR: uint64
	callsub sendMBRPayment
	retsub

// deleteAppFromWhitelist(string,uint16,uint64,uint64)void
*abi_route_deleteAppFromWhitelist:
	// index: uint64
	txna ApplicationArgs 4
	btoi

	// appID: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint16
	txna ApplicationArgs 2
	dup
	len
	intc 2 // 2
	==

	// argument 2 (boxIndex) for deleteAppFromWhitelist must be a uint16
	assert
	btoi

	// arc: string
	txna ApplicationArgs 1
	extract 2 0

	// execute deleteAppFromWhitelist(string,uint16,uint64,uint64)void
	callsub deleteAppFromWhitelist
	intc 0 // 1
	return

// deleteAppFromWhitelist(arc: string, boxIndex: uint16, appID: uint64, index: uint64): void
//
// Deletes a app from a whitelist for the sender
//
// @param boxIndex - The index of the whitelist box to delete from
// @param appID - The app ID to delete from the whitelist
// @param index - The index of the app in the whitelist
deleteAppFromWhitelist:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// examples/arc75/arc75.algo.ts:94
	// preMBR = this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	frame_bury 0 // preMBR: uint64

	// examples/arc75/arc75.algo.ts:95
	// whitelist: Whitelist = { account: this.txn.sender, boxIndex: boxIndex, arc: arc }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	txn Sender
	callsub *process_static_tuple_element
	frame_dig -2 // boxIndex: uint16
	itob
	extract 6 2
	callsub *process_static_tuple_element
	frame_dig -1 // arc: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 1 // whitelist: Whitelist

	// examples/arc75/arc75.algo.ts:97
	// spliced = this.whitelist(whitelist).value.splice(index, 1)
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	intc 0 // 1
	frame_dig -4 // index: uint64
	intc 1 // 8
	*
	store 247 // splice start
	pushint 16
	store 246 // splice byte length
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	intc 3 // 0
	load 247 // splice start
	substring3
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	dup
	len
	load 247 // splice start
	load 246 // splice byte length
	+
	intc 1 // 8
	-
	swap
	substring3
	concat
	frame_dig 1 // whitelist: Whitelist
	box_get

	// box value does not exist: this.whitelist(whitelist).value
	assert
	extract 2 0
	load 247 // splice start
	load 246 // splice byte length
	intc 1 // 8
	-
	extract3
	swap
	frame_dig 1 // whitelist: Whitelist
	dup
	box_del
	pop
	swap
	dup
	len
	intc 1 // 8
	/
	itob
	extract 6 2
	swap
	concat
	box_put
	frame_bury 2 // spliced: uint64[]

	// examples/arc75/arc75.algo.ts:99
	// assert(spliced[0] === appID)
	frame_dig 2 // spliced: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	frame_dig -3 // appID: uint64
	==
	assert

	// examples/arc75/arc75.algo.ts:101
	// this.sendMBRPayment(preMBR)
	frame_dig 0 // preMBR: uint64
	callsub sendMBRPayment
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x467c7cbd // method "addAppToWhiteList(string,uint16,uint64,pay)void"
	pushbytes 0xd198fcb8 // method "setAppWhitelist(string,uint16,uint64[])void"
	pushbytes 0x7c33e832 // method "deleteWhitelist(string,uint16)void"
	pushbytes 0x7e1674ac // method "deleteAppFromWhitelist(string,uint16,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_addAppToWhiteList *abi_route_setAppWhitelist *abi_route_deleteWhitelist *abi_route_deleteAppFromWhitelist

	// this contract does not implement the given ABI method for call NoOp
	err

*process_static_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -1 // element
	concat
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub"
`;

exports[`Examples ARC75 Artifacts Maintains program size 1`] = `736`;

exports[`Examples ARC75 Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": "The ARC the whitelist corresponds to",
          "name": "arc",
          "type": "string",
        },
        {
          "desc": "The index of the whitelist box to add the app to",
          "name": "boxIndex",
          "type": "uint16",
        },
        {
          "desc": "The app ID to add to the whitelist",
          "name": "appID",
          "type": "uint64",
        },
        {
          "desc": "The payment transaction to cover the MBR change",
          "name": "payment",
          "type": "pay",
        },
      ],
      "desc": "Add app to whitelist box",
      "events": undefined,
      "name": "addAppToWhiteList",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arc",
          "type": "string",
        },
        {
          "desc": "The index of the whitelist box to put the app IDs in",
          "name": "boxIndex",
          "type": "uint16",
        },
        {
          "desc": "Array of app IDs that signify the whitelisted apps",
          "name": "appIDs",
          "type": "uint64[]",
        },
      ],
      "desc": 
"Sets a app whitelist for the sender. Should only be used when adding/removing
more than one app"
,
      "events": undefined,
      "name": "setAppWhitelist",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The ARC the whitelist corresponds to",
          "name": "arc",
          "type": "string",
        },
        {
          "desc": "The index of the whitelist box to delete",
          "name": "boxIndex",
          "type": "uint16",
        },
      ],
      "desc": "Deletes a app whitelist for the sender",
      "events": undefined,
      "name": "deleteWhitelist",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arc",
          "type": "string",
        },
        {
          "desc": "The index of the whitelist box to delete from",
          "name": "boxIndex",
          "type": "uint16",
        },
        {
          "desc": "The app ID to delete from the whitelist",
          "name": "appID",
          "type": "uint64",
        },
        {
          "desc": "The index of the app in the whitelist",
          "name": "index",
          "type": "uint64",
        },
      ],
      "desc": "Deletes a app from a whitelist for the sender",
      "events": undefined,
      "name": "deleteAppFromWhitelist",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "ARC75",
}
`;

exports[`Examples ARC75 Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": "The ARC the whitelist corresponds to",
            "name": "arc",
            "type": "string",
          },
          {
            "desc": "The index of the whitelist box to add the app to",
            "name": "boxIndex",
            "type": "uint16",
          },
          {
            "desc": "The app ID to add to the whitelist",
            "name": "appID",
            "type": "uint64",
          },
          {
            "desc": "The payment transaction to cover the MBR change",
            "name": "payment",
            "type": "pay",
          },
        ],
        "desc": "Add app to whitelist box",
        "events": undefined,
        "name": "addAppToWhiteList",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arc",
            "type": "string",
          },
          {
            "desc": "The index of the whitelist box to put the app IDs in",
            "name": "boxIndex",
            "type": "uint16",
          },
          {
            "desc": "Array of app IDs that signify the whitelisted apps",
            "name": "appIDs",
            "type": "uint64[]",
          },
        ],
        "desc": 
"Sets a app whitelist for the sender. Should only be used when adding/removing
more than one app"
,
        "events": undefined,
        "name": "setAppWhitelist",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The ARC the whitelist corresponds to",
            "name": "arc",
            "type": "string",
          },
          {
            "desc": "The index of the whitelist box to delete",
            "name": "boxIndex",
            "type": "uint16",
          },
        ],
        "desc": "Deletes a app whitelist for the sender",
        "events": undefined,
        "name": "deleteWhitelist",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arc",
            "type": "string",
          },
          {
            "desc": "The index of the whitelist box to delete from",
            "name": "boxIndex",
            "type": "uint16",
          },
          {
            "desc": "The app ID to delete from the whitelist",
            "name": "appID",
            "type": "uint64",
          },
          {
            "desc": "The index of the app in the whitelist",
            "name": "index",
            "type": "uint64",
          },
        ],
        "desc": "Deletes a app from a whitelist for the sender",
        "events": undefined,
        "name": "deleteAppFromWhitelist",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "ARC75",
  },
  "hints": {
    "addAppToWhiteList(string,uint16,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "deleteAppFromWhitelist(string,uint16,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "deleteWhitelist(string,uint16)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "setAppWhitelist(string,uint16,uint64[])void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples Auction Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 4
bytecblock 0x70726576696f7573426964646572 0x70726576696f7573426964 0x61756374696f6e456e64 0x636c61696d61626c65416d6f756e74 0x617361416d74 0x617361 0x

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *call_OptIn *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// examples/auction/auction.algo.ts:18
	// this.auctionEnd.value = 0
	bytec 2 //  "auctionEnd"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:19
	// this.previousBid.value = 0
	bytec 1 //  "previousBid"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:20
	// this.asaAmt.value = 0
	bytec 4 //  "asaAmt"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:21
	// this.asa.value = AssetID.zeroIndex
	bytec 5 //  "asa"
	intc 1 // 0
	app_global_put

	// examples/auction/auction.algo.ts:24
	// this.previousBidder.value = globals.zeroAddress
	bytec 0 //  "previousBidder"
	global ZeroAddress
	app_global_put
	retsub

// optIntoAsset(uint64)void
*abi_route_optIntoAsset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute optIntoAsset(uint64)void
	callsub optIntoAsset
	intc 0 // 1
	return

// optIntoAsset(asset: AssetID): void
optIntoAsset:
	proto 1 0

	// Only allow app creator to opt the app account into a ASA
	// examples/auction/auction.algo.ts:29
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// Verify a ASA hasn't already been opted into
	// examples/auction/auction.algo.ts:32
	// assert(this.asa.value === AssetID.zeroIndex)
	bytec 5 //  "asa"
	app_global_get
	intc 1 // 0
	==
	assert

	// Save ASA ID in global state
	// examples/auction/auction.algo.ts:35
	// this.asa.value = asset
	bytec 5 //  "asa"
	frame_dig -1 // asset: AssetID
	app_global_put

	// Submit opt-in transaction: 0 asset transfer to self
	// examples/auction/auction.algo.ts:38
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       xferAsset: asset,
	//       assetAmount: 0,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:39
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// examples/auction/auction.algo.ts:40
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// examples/auction/auction.algo.ts:41
	// assetAmount: 0
	intc 1 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// startAuction(uint64,uint64,axfer)void
*abi_route_startAuction:
	// axfer: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 2 //  axfer
	==

	// argument 0 (axfer) for startAuction must be a axfer transaction
	assert

	// length: uint64
	txna ApplicationArgs 2
	btoi

	// startingPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute startAuction(uint64,uint64,axfer)void
	callsub startAuction
	intc 0 // 1
	return

// startAuction(startingPrice: uint64, length: uint64, axfer: AssetTransferTxn): void
startAuction:
	proto 3 0

	// examples/auction/auction.algo.ts:46
	// verifyAppCallTxn(this.txn, { sender: globals.creatorAddress })
	// verify sender
	txn Sender
	global CreatorAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"globals.creatorAddress"}
	assert

	// Ensure the auction hasn't already been started
	// examples/auction/auction.algo.ts:49
	// assert(this.auctionEnd.value === 0)
	bytec 2 //  "auctionEnd"
	app_global_get
	intc 1 // 0
	==
	assert

	// Verify axfer
	// examples/auction/auction.algo.ts:52
	// verifyAssetTransferTxn(axfer, { assetReceiver: this.app.address })
	// verify assetReceiver
	frame_dig -3 // axfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"axfer","field":"assetReceiver","expected":"this.app.address"}
	assert

	// Set global state
	// examples/auction/auction.algo.ts:55
	// this.asaAmt.value = axfer.assetAmount
	bytec 4 //  "asaAmt"
	frame_dig -3 // axfer: AssetTransferTxn
	gtxns AssetAmount
	app_global_put

	// examples/auction/auction.algo.ts:56
	// this.auctionEnd.value = globals.latestTimestamp + length
	bytec 2 //  "auctionEnd"
	global LatestTimestamp
	frame_dig -2 // length: uint64
	+
	app_global_put

	// examples/auction/auction.algo.ts:57
	// this.previousBid.value = startingPrice
	bytec 1 //  "previousBid"
	frame_dig -1 // startingPrice: uint64
	app_global_put
	retsub

// pay(receiver: Address, amount: uint64): void
pay:
	proto 2 0

	// examples/auction/auction.algo.ts:61
	// sendPayment({
	//       receiver: receiver,
	//       amount: amount,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:62
	// receiver: receiver
	frame_dig -1 // receiver: Address
	itxn_field Receiver

	// examples/auction/auction.algo.ts:63
	// amount: amount
	frame_dig -2 // amount: uint64
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// optInToApplication()void
*abi_route_optInToApplication:
	// execute optInToApplication()void
	callsub optInToApplication
	intc 0 // 1
	return

// optInToApplication(): void
optInToApplication:
	proto 0 0
	retsub

// bid(pay)void
*abi_route_bid:
	// payment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (payment) for bid must be a pay transaction
	assert

	// execute bid(pay)void
	callsub bid
	intc 0 // 1
	return

// bid(payment: PayTxn): void
bid:
	proto 1 0

	// Ensure auction hasn't ended
	// examples/auction/auction.algo.ts:72
	// assert(globals.latestTimestamp < this.auctionEnd.value)
	global LatestTimestamp
	bytec 2 //  "auctionEnd"
	app_global_get
	<
	assert

	// Verify payment transaction
	// examples/auction/auction.algo.ts:75
	// verifyPayTxn(payment, {
	//       sender: this.txn.sender,
	//       amount: { greaterThan: this.previousBid.value },
	//     })
	// verify sender
	frame_dig -1 // payment: PayTxn
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"payment","field":"sender","expected":"this.txn.sender"}
	assert

	// verify amount
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	bytec 1 //  "previousBid"
	app_global_get
	>

	// transaction verification failed: {"txn":"payment","field":"amount","condition":"greaterThan","expected":">this.previousBid.value"}
	assert

	// Set global state
	// examples/auction/auction.algo.ts:81
	// this.previousBid.value = payment.amount
	bytec 1 //  "previousBid"
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	app_global_put

	// examples/auction/auction.algo.ts:82
	// this.previousBidder.value = payment.sender
	bytec 0 //  "previousBidder"
	frame_dig -1 // payment: PayTxn
	gtxns Sender
	app_global_put

	// Update claimable amount
	// examples/auction/auction.algo.ts:85
	// this.claimableAmount(this.txn.sender).value = payment.amount
	txn Sender
	bytec 3 //  "claimableAmount"
	frame_dig -1 // payment: PayTxn
	gtxns Amount
	app_local_put
	retsub

// claimBids()void
*abi_route_claimBids:
	// execute claimBids()void
	callsub claimBids
	intc 0 // 1
	return

// claimBids(): void
claimBids:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 6 // 0x
	dup

	// examples/auction/auction.algo.ts:89
	// originalAmount = this.claimableAmount(this.txn.sender).value
	txn Sender
	bytec 3 //  "claimableAmount"
	app_local_get
	frame_bury 0 // originalAmount: uint64

	// examples/auction/auction.algo.ts:90
	// amount = originalAmount
	frame_dig 0 // originalAmount: uint64
	frame_bury 1 // amount: uint64

	// subtract previous bid if sender is previous bidder
	// *if0_condition
	// examples/auction/auction.algo.ts:93
	// this.txn.sender === this.previousBidder.value
	txn Sender
	bytec 0 //  "previousBidder"
	app_global_get
	==
	bz *if0_end

	// *if0_consequent
	// examples/auction/auction.algo.ts:93
	// amount = amount - this.previousBid.value
	frame_dig 1 // amount: uint64
	bytec 1 //  "previousBid"
	app_global_get
	-
	frame_bury 1 // amount: uint64

*if0_end:
	// examples/auction/auction.algo.ts:95
	// this.pay(this.txn.sender, amount)
	frame_dig 1 // amount: uint64
	txn Sender
	callsub pay

	// examples/auction/auction.algo.ts:96
	// this.claimableAmount(this.txn.sender).value = originalAmount - amount
	txn Sender
	bytec 3 //  "claimableAmount"
	frame_dig 0 // originalAmount: uint64
	frame_dig 1 // amount: uint64
	-
	app_local_put
	retsub

// claim_asset(uint64)void
*abi_route_claim_asset:
	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute claim_asset(uint64)void
	callsub claim_asset
	intc 0 // 1
	return

// claim_asset(asset: AssetID): void
claim_asset:
	proto 1 0

	// examples/auction/auction.algo.ts:100
	// assert(globals.latestTimestamp > this.auctionEnd.value)
	global LatestTimestamp
	bytec 2 //  "auctionEnd"
	app_global_get
	>
	assert

	// Send ASA to previous bidder
	// examples/auction/auction.algo.ts:103
	// sendAssetTransfer({
	//       assetReceiver: this.previousBidder.value,
	//       xferAsset: asset,
	//       assetAmount: this.asaAmt.value,
	//       assetCloseTo: this.previousBidder.value,
	//     })
	itxn_begin
	intc 2 //  axfer
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:104
	// assetReceiver: this.previousBidder.value
	bytec 0 //  "previousBidder"
	app_global_get
	itxn_field AssetReceiver

	// examples/auction/auction.algo.ts:105
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// examples/auction/auction.algo.ts:106
	// assetAmount: this.asaAmt.value
	bytec 4 //  "asaAmt"
	app_global_get
	itxn_field AssetAmount

	// examples/auction/auction.algo.ts:107
	// assetCloseTo: this.previousBidder.value
	bytec 0 //  "previousBidder"
	app_global_get
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// examples/auction/auction.algo.ts:112
	// sendPayment({
	//       receiver: globals.creatorAddress,
	//       closeRemainderTo: globals.creatorAddress,
	//       amount: 0,
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// examples/auction/auction.algo.ts:113
	// receiver: globals.creatorAddress
	global CreatorAddress
	itxn_field Receiver

	// examples/auction/auction.algo.ts:114
	// closeRemainderTo: globals.creatorAddress
	global CreatorAddress
	itxn_field CloseRemainderTo

	// examples/auction/auction.algo.ts:115
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x3987f0c1 // method "optIntoAsset(uint64)void"
	pushbytes 0xc2725922 // method "startAuction(uint64,uint64,axfer)void"
	pushbytes 0xdb7fe843 // method "bid(pay)void"
	pushbytes 0x032f650d // method "claimBids()void"
	pushbytes 0x59b2ab26 // method "claim_asset(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_optIntoAsset *abi_route_startAuction *abi_route_bid *abi_route_claimBids *abi_route_claim_asset

	// this contract does not implement the given ABI method for call NoOp
	err

*call_OptIn:
	pushbytes 0x01a3a3ff // method "optInToApplication()void"
	txna ApplicationArgs 0
	match *abi_route_optInToApplication

	// this contract does not implement the given ABI method for call OptIn
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err"
`;

exports[`Examples Auction Artifacts Maintains program size 1`] = `553`;

exports[`Examples Auction Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "asset",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "optIntoAsset",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "startingPrice",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "length",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "axfer",
          "type": "axfer",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "startAuction",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "optInToApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "payment",
          "type": "pay",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "bid",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "claimBids",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "asset",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "claim_asset",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "deleteApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "Auction",
}
`;

exports[`Examples Auction Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "asset",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "optIntoAsset",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "startingPrice",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "length",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "axfer",
            "type": "axfer",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "startAuction",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "optInToApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "payment",
            "type": "pay",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "bid",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "claimBids",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "asset",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "claim_asset",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "deleteApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "Auction",
  },
  "hints": {
    "bid(pay)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "claimBids()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "claim_asset(uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL",
      },
    },
    "optInToApplication()void": {
      "call_config": {
        "opt_in": "CALL",
      },
    },
    "optIntoAsset(uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "startAuction(uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "asa": {
          "key": "asa",
          "type": "uint64",
        },
        "asaAmt": {
          "key": "asaAmt",
          "type": "uint64",
        },
        "auctionEnd": {
          "key": "auctionEnd",
          "type": "uint64",
        },
        "previousBid": {
          "key": "previousBid",
          "type": "uint64",
        },
        "previousBidder": {
          "key": "previousBidder",
          "type": "bytes",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {
        "claimableAmount": {
          "key": "claimableAmount",
          "type": "uint64",
        },
      },
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1,
    },
  },
}
`;

exports[`Examples BigBox Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 8 0 400 16 32768 2
bytecblock 0x 0x63757272656e74496e646578

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// startUpload(string,uint64,uint64,pay)void
*abi_route_startUpload:
	// mbrPayment: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (mbrPayment) for startUpload must be a pay transaction
	assert

	// endBoxSize: uint64
	txna ApplicationArgs 3
	btoi

	// numBoxes: uint64
	txna ApplicationArgs 2
	btoi

	// dataIdentifier: string
	txna ApplicationArgs 1
	extract 2 0

	// execute startUpload(string,uint64,uint64,pay)void
	callsub startUpload
	intc 0 // 1
	return

// startUpload(dataIdentifier: string, numBoxes: uint64, endBoxSize: uint64, mbrPayment: PayTxn): void
//
//
// Allocate boxes to begin data upload process
//
// @param dataIdentifier The unique identifier for the data
// @param numBoxes The number of boxes that the data will take up
// @param endBoxSize The size of the last box
// @param mbrPayment Payment from the uploader to cover the box MBR
startUpload:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// examples/big_box/big_box.algo.ts:41
	// startBox = this.currentIndex.value
	bytec 1 //  "currentIndex"
	app_global_get
	frame_bury 0 // startBox: uint64

	// examples/big_box/big_box.algo.ts:42
	// endBox = startBox + numBoxes - 1
	frame_dig 0 // startBox: uint64
	frame_dig -2 // numBoxes: uint64
	+
	intc 0 // 1
	-
	frame_bury 1 // endBox: uint64

	// examples/big_box/big_box.algo.ts:44
	// metadata: Metadata = {
	//       start: startBox,
	//       end: endBox,
	//       status: IN_PROGRESS,
	//       endSize: endBoxSize,
	//     }
	frame_dig 0 // startBox: uint64
	itob
	frame_dig 1 // endBox: uint64
	itob
	concat
	pushbytes 0x00
	concat
	frame_dig -3 // endBoxSize: uint64
	itob
	concat
	frame_bury 2 // metadata: Metadata

	// examples/big_box/big_box.algo.ts:51
	// assert(!this.metadata(dataIdentifier).exists)
	frame_dig -1 // dataIdentifier: string
	box_len
	swap
	pop
	!
	assert

	// examples/big_box/big_box.algo.ts:53
	// this.metadata(dataIdentifier).value = metadata
	frame_dig -1 // dataIdentifier: string
	frame_dig 2 // metadata: Metadata
	box_put

	// examples/big_box/big_box.algo.ts:55
	// this.currentIndex.value = endBox + 1
	bytec 1 //  "currentIndex"
	frame_dig 1 // endBox: uint64
	intc 0 // 1
	+
	app_global_put

	// examples/big_box/big_box.algo.ts:57
	// totalCost =
	//       numBoxes * COST_PER_BOX + // cost of boxes
	//       (numBoxes - 1) * MAX_BOX_SIZE * COST_PER_BYTE + // cost of data
	//       numBoxes * 64 * COST_PER_BYTE + // cost of keys
	//       endBoxSize * COST_PER_BYTE
	frame_dig -2 // numBoxes: uint64
	pushint 2500
	*
	frame_dig -2 // numBoxes: uint64
	intc 0 // 1
	-
	intc 5 // 32768
	*
	intc 3 // 400
	*
	+
	frame_dig -2 // numBoxes: uint64
	pushint 64
	*
	intc 3 // 400
	*
	+
	frame_dig -3 // endBoxSize: uint64
	intc 3 // 400
	*
	+
	frame_bury 3 // totalCost: uint64

	// examples/big_box/big_box.algo.ts:63
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: totalCost })
	// verify receiver
	frame_dig -4 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -4 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 3 // totalCost: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"totalCost"}
	assert
	retsub

// upload(string,uint64,uint64,byte[])void
*abi_route_upload:
	// data: byte[]
	txna ApplicationArgs 4
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 3
	btoi

	// boxIndex: uint64
	txna ApplicationArgs 2
	btoi

	// dataIdentifier: string
	txna ApplicationArgs 1
	extract 2 0

	// execute upload(string,uint64,uint64,byte[])void
	callsub upload
	intc 0 // 1
	return

// upload(dataIdentifier: string, boxIndex: uint64, offset: uint64, data: bytes): void
//
//
// Upload data to a specific offset in a box
//
// @param dataIdentifier The unique identifier for the data
// @param boxIndex The index of the box to upload the given chunk of data to
// @param offset The offset within the box to start writing the data
// @param data The data to write
upload:
	proto 4 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/big_box/big_box.algo.ts:76
	// metadata = this.metadata(dataIdentifier).value
	frame_dig -1 // dataIdentifier: string
	frame_bury 0 // storage key//metadata

	// examples/big_box/big_box.algo.ts:77
	// assert(metadata.status === IN_PROGRESS)
	frame_dig -1 // dataIdentifier: string
	intc 4 //  headOffset
	intc 0 // 1
	box_extract
	btoi
	intc 2 // 0
	==
	assert

	// examples/big_box/big_box.algo.ts:78
	// assert(metadata.start <= boxIndex && boxIndex <= metadata.end)
	frame_dig -1 // dataIdentifier: string
	intc 2 // 0
	intc 1 // 8
	box_extract
	btoi
	frame_dig -2 // boxIndex: uint64
	<=
	dup
	bz *skip_and0
	frame_dig -2 // boxIndex: uint64
	frame_dig -1 // dataIdentifier: string
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	<=
	&&

*skip_and0:
	assert

	// *if0_condition
	// examples/big_box/big_box.algo.ts:80
	// offset === 0
	frame_dig -3 // offset: uint64
	intc 2 // 0
	==
	bz *if0_end

	// *if0_consequent
	// examples/big_box/big_box.algo.ts:81
	// this.dataBoxes(boxIndex).create(boxIndex === metadata.end ? metadata.endSize : MAX_BOX_SIZE)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -2 // boxIndex: uint64
	frame_dig -1 // dataIdentifier: string
	intc 1 //  headOffset
	intc 1 // 8
	box_extract
	btoi
	==
	bz *ternary0_false
	frame_dig -1 // dataIdentifier: string
	pushint 17 // headOffset
	intc 1 // 8
	box_extract
	btoi
	b *ternary0_end

*ternary0_false:
	intc 5 // 32768

*ternary0_end:
	box_create
	pop

*if0_end:
	// examples/big_box/big_box.algo.ts:84
	// this.dataBoxes(boxIndex).replace(offset, data)
	frame_dig -2 // boxIndex: uint64
	itob
	frame_dig -3 // offset: uint64
	frame_dig -4 // data: bytes
	box_replace
	retsub

// setStatus(string,uint8)void
*abi_route_setStatus:
	// status: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (status) for setStatus must be a uint8
	assert
	btoi

	// dataIdentifier: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setStatus(string,uint8)void
	callsub setStatus
	intc 0 // 1
	return

// setStatus(dataIdentifier: string, status: uint<8>): void
//
//
// Set the status of the data
//
// @param dataIdentifier The unique identifier for the data
// @param status The new status for the data
setStatus:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/big_box/big_box.algo.ts:95
	// currentStatus = this.metadata(dataIdentifier).value.status
	frame_dig -1 // dataIdentifier: string
	intc 4 //  headOffset
	intc 0 // 1
	box_extract
	btoi
	frame_bury 0 // currentStatus: uint8

	// examples/big_box/big_box.algo.ts:97
	// assert(status === READY || status === IMMUTABLE || status === IN_PROGRESS)
	frame_dig -2 // status: uint<8>
	intc 0 // 1
	==
	dup
	bnz *skip_or0
	frame_dig -2 // status: uint<8>
	intc 6 // 2
	==
	||

*skip_or0:
	dup
	bnz *skip_or1
	frame_dig -2 // status: uint<8>
	intc 2 // 0
	==
	||

*skip_or1:
	assert

	// examples/big_box/big_box.algo.ts:98
	// assert(currentStatus !== IMMUTABLE)
	frame_dig 0 // currentStatus: uint8
	intc 6 // 2
	!=
	assert

	// examples/big_box/big_box.algo.ts:100
	// this.metadata(dataIdentifier).value.status = status
	intc 4 //  headOffset
	frame_dig -2 // status: uint<8>
	itob
	extract 7 1
	frame_dig -1 // dataIdentifier: string
	cover 2
	box_replace
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xa05b5669 // method "startUpload(string,uint64,uint64,pay)void"
	pushbytes 0x1b7dfa35 // method "upload(string,uint64,uint64,byte[])void"
	pushbytes 0xbf3856f8 // method "setStatus(string,uint8)void"
	txna ApplicationArgs 0
	match *abi_route_startUpload *abi_route_upload *abi_route_setStatus

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples BigBox Artifacts Maintains program size 1`] = `431`;

exports[`Examples BigBox Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": "The unique identifier for the data",
          "name": "dataIdentifier",
          "type": "string",
        },
        {
          "desc": "The number of boxes that the data will take up",
          "name": "numBoxes",
          "type": "uint64",
        },
        {
          "desc": "The size of the last box",
          "name": "endBoxSize",
          "type": "uint64",
        },
        {
          "desc": "Payment from the uploader to cover the box MBR",
          "name": "mbrPayment",
          "type": "pay",
        },
      ],
      "desc": "Allocate boxes to begin data upload process",
      "events": undefined,
      "name": "startUpload",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The unique identifier for the data",
          "name": "dataIdentifier",
          "type": "string",
        },
        {
          "desc": "The index of the box to upload the given chunk of data to",
          "name": "boxIndex",
          "type": "uint64",
        },
        {
          "desc": "The offset within the box to start writing the data",
          "name": "offset",
          "type": "uint64",
        },
        {
          "desc": "The data to write",
          "name": "data",
          "type": "byte[]",
        },
      ],
      "desc": "Upload data to a specific offset in a box",
      "events": undefined,
      "name": "upload",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The unique identifier for the data",
          "name": "dataIdentifier",
          "type": "string",
        },
        {
          "desc": "The new status for the data",
          "name": "status",
          "type": "uint8",
        },
      ],
      "desc": "Set the status of the data",
      "events": undefined,
      "name": "setStatus",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "BigBox",
}
`;

exports[`Examples BigBox Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": "The unique identifier for the data",
            "name": "dataIdentifier",
            "type": "string",
          },
          {
            "desc": "The number of boxes that the data will take up",
            "name": "numBoxes",
            "type": "uint64",
          },
          {
            "desc": "The size of the last box",
            "name": "endBoxSize",
            "type": "uint64",
          },
          {
            "desc": "Payment from the uploader to cover the box MBR",
            "name": "mbrPayment",
            "type": "pay",
          },
        ],
        "desc": "Allocate boxes to begin data upload process",
        "events": undefined,
        "name": "startUpload",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The unique identifier for the data",
            "name": "dataIdentifier",
            "type": "string",
          },
          {
            "desc": "The index of the box to upload the given chunk of data to",
            "name": "boxIndex",
            "type": "uint64",
          },
          {
            "desc": "The offset within the box to start writing the data",
            "name": "offset",
            "type": "uint64",
          },
          {
            "desc": "The data to write",
            "name": "data",
            "type": "byte[]",
          },
        ],
        "desc": "Upload data to a specific offset in a box",
        "events": undefined,
        "name": "upload",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The unique identifier for the data",
            "name": "dataIdentifier",
            "type": "string",
          },
          {
            "desc": "The new status for the data",
            "name": "status",
            "type": "uint8",
          },
        ],
        "desc": "Set the status of the data",
        "events": undefined,
        "name": "setStatus",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "BigBox",
  },
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "setStatus(string,uint8)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "startUpload(string,uint64,uint64,pay)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "upload(string,uint64,uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "currentIndex": {
          "key": "currentIndex",
          "type": "uint64",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples Calculator Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// getSum(a: uint64, b: uint64): uint64
//
// Calculates the sum of two numbers
//
// @param a
// @param b
// @returns The sum of a and b
getSum:
	proto 2 1

	// examples/calculator/calculator.algo.ts:13
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	retsub

// getDifference(a: uint64, b: uint64): uint64
//
// Calculates the difference between two numbers
//
// @param a
// @param b
// @returns The difference between a and b.
getDifference:
	proto 2 1

	// examples/calculator/calculator.algo.ts:24
	// return a >= b ? a - b : b - a;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	>=
	bz *ternary0_false
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	-
	b *ternary0_end

*ternary0_false:
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	-

*ternary0_end:
	retsub

// doMath(uint64,uint64,string)uint64
*abi_route_doMath:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// operation: string
	txna ApplicationArgs 3
	extract 2 0

	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute doMath(uint64,uint64,string)uint64
	callsub doMath
	itob
	concat
	log
	intc 0 // 1
	return

// doMath(a: uint64, b: uint64, operation: string): uint64
//
// A method that takes two numbers and does either addition or subtraction
//
// @param a The first number
// @param b The second number
// @param operation The operation to perform. Can be either 'sum' or 'difference'
//
// @returns The result of the operation
doMath:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// *if0_condition
	// examples/calculator/calculator.algo.ts:39
	// operation === 'sum'
	frame_dig -3 // operation: string
	pushbytes 0x73756d // "sum"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// examples/calculator/calculator.algo.ts:40
	// result = this.getSum(a, b)
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	callsub getSum
	frame_bury 0 // result: uint64
	b *if0_end

*if0_elseif1_condition:
	// examples/calculator/calculator.algo.ts:41
	// operation === 'difference'
	frame_dig -3 // operation: string
	pushbytes 0x646966666572656e6365 // "difference"
	==
	bz *if0_else

	// *if0_elseif1_consequent
	// examples/calculator/calculator.algo.ts:42
	// result = this.getDifference(a, b)
	frame_dig -2 // b: uint64
	frame_dig -1 // a: uint64
	callsub getDifference
	frame_bury 0 // result: uint64
	b *if0_end

*if0_else:
	// Invalid operation
	err

*if0_end:
	// examples/calculator/calculator.algo.ts:45
	// return result;
	frame_dig 0 // result: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x76a7ef33 // method "doMath(uint64,uint64,string)uint64"
	txna ApplicationArgs 0
	match *abi_route_doMath

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples Calculator Artifacts Maintains program size 1`] = `196`;

exports[`Examples Calculator Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": "The first number",
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": "The second number",
          "name": "b",
          "type": "uint64",
        },
        {
          "desc": "The operation to perform. Can be either 'sum' or 'difference'",
          "name": "operation",
          "type": "string",
        },
      ],
      "desc": "A method that takes two numbers and does either addition or subtraction",
      "events": undefined,
      "name": "doMath",
      "readonly": undefined,
      "returns": {
        "desc": "The result of the operation",
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "Calculator",
}
`;

exports[`Examples Calculator Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": "The first number",
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": "The second number",
            "name": "b",
            "type": "uint64",
          },
          {
            "desc": "The operation to perform. Can be either 'sum' or 'difference'",
            "name": "operation",
            "type": "string",
          },
        ],
        "desc": "A method that takes two numbers and does either addition or subtraction",
        "events": undefined,
        "name": "doMath",
        "readonly": undefined,
        "returns": {
          "desc": "The result of the operation",
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "Calculator",
  },
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "doMath(uint64,uint64,string)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCgovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGdldFN1bShhOiB1aW50NjQsIGI6IHVpbnQ2NCk6IHVpbnQ2NAovLwovLyBDYWxjdWxhdGVzIHRoZSBzdW0gb2YgdHdvIG51bWJlcnMKLy8KLy8gQHBhcmFtIGEKLy8gQHBhcmFtIGIKLy8gQHJldHVybnMgVGhlIHN1bSBvZiBhIGFuZCBiCmdldFN1bToKCXByb3RvIDIgMQoKCS8vIGV4YW1wbGVzL2NhbGN1bGF0b3IvY2FsY3VsYXRvci5hbGdvLnRzOjEzCgkvLyByZXR1cm4gYSArIGI7CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDY0CglmcmFtZV9kaWcgLTIgLy8gYjogdWludDY0CgkrCglyZXRzdWIKCi8vIGdldERpZmZlcmVuY2UoYTogdWludDY0LCBiOiB1aW50NjQpOiB1aW50NjQKLy8KLy8gQ2FsY3VsYXRlcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBudW1iZXJzCi8vCi8vIEBwYXJhbSBhCi8vIEBwYXJhbSBiCi8vIEByZXR1cm5zIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gYSBhbmQgYi4KZ2V0RGlmZmVyZW5jZToKCXByb3RvIDIgMQoKCS8vIGV4YW1wbGVzL2NhbGN1bGF0b3IvY2FsY3VsYXRvci5hbGdvLnRzOjI0CgkvLyByZXR1cm4gYSA+PSBiID8gYSAtIGIgOiBiIC0gYTsKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCT49CglieiAqdGVybmFyeTBfZmFsc2UKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCS0KCWIgKnRlcm5hcnkwX2VuZAoKKnRlcm5hcnkwX2ZhbHNlOgoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQ2NAoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQ2NAoJLQoKKnRlcm5hcnkwX2VuZDoKCXJldHN1YgoKLy8gZG9NYXRoKHVpbnQ2NCx1aW50NjQsc3RyaW5nKXVpbnQ2NAoqYWJpX3JvdXRlX2RvTWF0aDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJcHVzaGJ5dGVzIDB4MTUxZjdjNzUKCgkvLyBvcGVyYXRpb246IHN0cmluZwoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMwoJZXh0cmFjdCAyIDAKCgkvLyBiOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyBhOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRvTWF0aCh1aW50NjQsdWludDY0LHN0cmluZyl1aW50NjQKCWNhbGxzdWIgZG9NYXRoCglpdG9iCgljb25jYXQKCWxvZwoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZG9NYXRoKGE6IHVpbnQ2NCwgYjogdWludDY0LCBvcGVyYXRpb246IHN0cmluZyk6IHVpbnQ2NAovLwovLyBBIG1ldGhvZCB0aGF0IHRha2VzIHR3byBudW1iZXJzIGFuZCBkb2VzIGVpdGhlciBhZGRpdGlvbiBvciBzdWJ0cmFjdGlvbgovLwovLyBAcGFyYW0gYSBUaGUgZmlyc3QgbnVtYmVyCi8vIEBwYXJhbSBiIFRoZSBzZWNvbmQgbnVtYmVyCi8vIEBwYXJhbSBvcGVyYXRpb24gVGhlIG9wZXJhdGlvbiB0byBwZXJmb3JtLiBDYW4gYmUgZWl0aGVyICdzdW0nIG9yICdkaWZmZXJlbmNlJwovLwovLyBAcmV0dXJucyBUaGUgcmVzdWx0IG9mIHRoZSBvcGVyYXRpb24KZG9NYXRoOgoJcHJvdG8gMyAxCgoJLy8gUHVzaCBlbXB0eSBieXRlcyBhZnRlciB0aGUgZnJhbWUgcG9pbnRlciB0byByZXNlcnZlIHNwYWNlIGZvciBsb2NhbCB2YXJpYWJsZXMKCXB1c2hieXRlcyAweAoKCS8vICppZjBfY29uZGl0aW9uCgkvLyBleGFtcGxlcy9jYWxjdWxhdG9yL2NhbGN1bGF0b3IuYWxnby50czozOQoJLy8gb3BlcmF0aW9uID09PSAnc3VtJwoJZnJhbWVfZGlnIC0zIC8vIG9wZXJhdGlvbjogc3RyaW5nCglwdXNoYnl0ZXMgMHg3Mzc1NmQgLy8gInN1bSIKCT09CglieiAqaWYwX2Vsc2VpZjFfY29uZGl0aW9uCgoJLy8gKmlmMF9jb25zZXF1ZW50CgkvLyBleGFtcGxlcy9jYWxjdWxhdG9yL2NhbGN1bGF0b3IuYWxnby50czo0MAoJLy8gcmVzdWx0ID0gdGhpcy5nZXRTdW0oYSwgYikKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWNhbGxzdWIgZ2V0U3VtCglmcmFtZV9idXJ5IDAgLy8gcmVzdWx0OiB1aW50NjQKCWIgKmlmMF9lbmQKCippZjBfZWxzZWlmMV9jb25kaXRpb246CgkvLyBleGFtcGxlcy9jYWxjdWxhdG9yL2NhbGN1bGF0b3IuYWxnby50czo0MQoJLy8gb3BlcmF0aW9uID09PSAnZGlmZmVyZW5jZScKCWZyYW1lX2RpZyAtMyAvLyBvcGVyYXRpb246IHN0cmluZwoJcHVzaGJ5dGVzIDB4NjQ2OTY2NjY2NTcyNjU2ZTYzNjUgLy8gImRpZmZlcmVuY2UiCgk9PQoJYnogKmlmMF9lbHNlCgoJLy8gKmlmMF9lbHNlaWYxX2NvbnNlcXVlbnQKCS8vIGV4YW1wbGVzL2NhbGN1bGF0b3IvY2FsY3VsYXRvci5hbGdvLnRzOjQyCgkvLyByZXN1bHQgPSB0aGlzLmdldERpZmZlcmVuY2UoYSwgYikKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyBhOiB1aW50NjQKCWNhbGxzdWIgZ2V0RGlmZmVyZW5jZQoJZnJhbWVfYnVyeSAwIC8vIHJlc3VsdDogdWludDY0CgliICppZjBfZW5kCgoqaWYwX2Vsc2U6CgkvLyBJbnZhbGlkIG9wZXJhdGlvbgoJZXJyCgoqaWYwX2VuZDoKCS8vIGV4YW1wbGVzL2NhbGN1bGF0b3IvY2FsY3VsYXRvci5hbGdvLnRzOjQ1CgkvLyByZXR1cm4gcmVzdWx0OwoJZnJhbWVfZGlnIDAgLy8gcmVzdWx0OiB1aW50NjQKCgkvLyBzZXQgdGhlIHN1YnJvdXRpbmUgcmV0dXJuIHZhbHVlCglmcmFtZV9idXJ5IDAKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludGMgMCAvLyAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHg3NmE3ZWYzMyAvLyBtZXRob2QgImRvTWF0aCh1aW50NjQsdWludDY0LHN0cmluZyl1aW50NjQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2RvTWF0aAoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjYWxsIE5vT3AKCWVycg==",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples FactoryCaller Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 0 1 6
bytecblock 0xb8447b36 0x

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// mintAndGetAsset()uint64
*abi_route_mintAndGetAsset:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// execute mintAndGetAsset()uint64
	callsub mintAndGetAsset
	itob
	concat
	log
	intc 1 // 1
	return

// mintAndGetAsset(): AssetID
mintAndGetAsset:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// examples/itxns/itxns.algo.ts:25
	// sendMethodCall<typeof NFTFactory.prototype.createApplication>({
	//       clearStateProgram: NFTFactory.clearProgram(),
	//       approvalProgram: NFTFactory.approvalProgram(),
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 0 //  method "createApplication()void"
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:26
	// clearStateProgram: NFTFactory.clearProgram()
	pushbytes 0x0a
	itxn_field ClearStateProgram

	// examples/itxns/itxns.algo.ts:27
	// approvalProgram: NFTFactory.approvalProgram()
	pushbytes 0x0a2002010031181481060b3119088d0c006f00000000000000000000006100000000000000000000008004151f7c75361a02570200361a015702008800051650b022438a0201b18103b2108bffb2268bfeb22522b22223b201b3b43c89361a02491581201244361a011788000222438a0200b18104b2108bfeb21422b2128bffb21123b201b38922438004b8447b36361a008e01fff1008004d2024c738004c7e260af361a008e02ff7dffb100
	itxn_field ApprovalProgram

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/itxns/itxns.algo.ts:30
	// factoryApp = this.itxn.createdApplicationID
	itxn CreatedApplicationID
	frame_bury 0 // factoryApp: uint64

	// examples/itxns/itxns.algo.ts:32
	// sendPayment({
	//       amount: 200_000,
	//       receiver: factoryApp.address,
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:33
	// amount: 200_000
	pushint 200_000
	itxn_field Amount

	// examples/itxns/itxns.algo.ts:34
	// receiver: factoryApp.address
	frame_dig 0 // factoryApp: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/itxns/itxns.algo.ts:37
	// createdAsset = sendMethodCall<typeof NFTFactory.prototype.createNFT>({
	//       applicationID: factoryApp,
	//       methodArgs: ['My NFT', 'MNFT'],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xd2024c73 // method "createNFT(string,string)uint64"
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:38
	// applicationID: factoryApp
	frame_dig 0 // factoryApp: uint64
	itxn_field ApplicationID

	// examples/itxns/itxns.algo.ts:39
	// methodArgs: ['My NFT', 'MNFT']
	pushbytes 0x00064d79204e4654
	itxn_field ApplicationArgs
	pushbytes 0x00044d4e4654
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 1 // createdAsset: uint64

	// examples/itxns/itxns.algo.ts:42
	// sendAssetTransfer({
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//       xferAsset: createdAsset,
	//     })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:43
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// examples/itxns/itxns.algo.ts:44
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// examples/itxns/itxns.algo.ts:45
	// xferAsset: createdAsset
	frame_dig 1 // createdAsset: uint64
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/itxns/itxns.algo.ts:48
	// sendMethodCall<typeof NFTFactory.prototype.transferNFT>({
	//       applicationID: factoryApp,
	//       methodArgs: [createdAsset, this.app.address],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xc7e260af // method "transferNFT(uint64,address)void"
	itxn_field ApplicationArgs

	// examples/itxns/itxns.algo.ts:49
	// applicationID: factoryApp
	frame_dig 0 // factoryApp: uint64
	itxn_field ApplicationID

	// examples/itxns/itxns.algo.ts:50
	// methodArgs: [createdAsset, this.app.address]
	frame_dig 1 // createdAsset: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/itxns/itxns.algo.ts:53
	// return createdAsset;
	frame_dig 1 // createdAsset: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	bytec 0 //  method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x45ded8e0 // method "mintAndGetAsset()uint64"
	txna ApplicationArgs 0
	match *abi_route_mintAndGetAsset

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples FactoryCaller Artifacts Maintains program size 1`] = `422`;

exports[`Examples FactoryCaller Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "mintAndGetAsset",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "FactoryCaller",
}
`;

exports[`Examples FactoryCaller Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "mintAndGetAsset",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "FactoryCaller",
  },
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "mintAndGetAsset()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples NFTFactory Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createNFT(string,string)uint64
*abi_route_createNFT:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// unitName: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute createNFT(string,string)uint64
	callsub createNFT
	itob
	concat
	log
	intc 0 // 1
	return

// createNFT(name: string, unitName: string): AssetID
createNFT:
	proto 2 1

	// examples/itxns/itxns.algo.ts:6
	// return sendAssetCreation({
	//       configAssetName: name,
	//       configAssetUnitName: unitName,
	//       configAssetTotal: 1,
	//     });
	itxn_begin
	pushint 3 // acfg
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:7
	// configAssetName: name
	frame_dig -1 // name: string
	itxn_field ConfigAssetName

	// examples/itxns/itxns.algo.ts:8
	// configAssetUnitName: unitName
	frame_dig -2 // unitName: string
	itxn_field ConfigAssetUnitName

	// examples/itxns/itxns.algo.ts:9
	// configAssetTotal: 1
	intc 0 // 1
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	retsub

// transferNFT(uint64,address)void
*abi_route_transferNFT:
	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	pushint 32
	==

	// argument 0 (receiver) for transferNFT must be a address
	assert

	// asset: uint64
	txna ApplicationArgs 1
	btoi

	// execute transferNFT(uint64,address)void
	callsub transferNFT
	intc 0 // 1
	return

// transferNFT(asset: AssetID, receiver: Address): void
transferNFT:
	proto 2 0

	// examples/itxns/itxns.algo.ts:14
	// sendAssetTransfer({
	//       assetReceiver: receiver,
	//       assetAmount: 1,
	//       xferAsset: asset,
	//     })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// examples/itxns/itxns.algo.ts:15
	// assetReceiver: receiver
	frame_dig -2 // receiver: Address
	itxn_field AssetReceiver

	// examples/itxns/itxns.algo.ts:16
	// assetAmount: 1
	intc 0 // 1
	itxn_field AssetAmount

	// examples/itxns/itxns.algo.ts:17
	// xferAsset: asset
	frame_dig -1 // asset: AssetID
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xd2024c73 // method "createNFT(string,string)uint64"
	pushbytes 0xc7e260af // method "transferNFT(uint64,address)void"
	txna ApplicationArgs 0
	match *abi_route_createNFT *abi_route_transferNFT

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples NFTFactory Artifacts Maintains program size 1`] = `173`;

exports[`Examples NFTFactory Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "name",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "unitName",
          "type": "string",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "createNFT",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "asset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "receiver",
          "type": "address",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "transferNFT",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "NFTFactory",
}
`;

exports[`Examples NFTFactory Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "name",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "unitName",
            "type": "string",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "createNFT",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "asset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "receiver",
            "type": "address",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "transferNFT",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "NFTFactory",
  },
  "hints": {
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "createNFT(string,string)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "transferNFT(uint64,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gY3JlYXRlTkZUKHN0cmluZyxzdHJpbmcpdWludDY0CiphYmlfcm91dGVfY3JlYXRlTkZUOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglwdXNoYnl0ZXMgMHgxNTFmN2M3NQoKCS8vIHVuaXROYW1lOiBzdHJpbmcKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWV4dHJhY3QgMiAwCgoJLy8gbmFtZTogc3RyaW5nCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglleHRyYWN0IDIgMAoKCS8vIGV4ZWN1dGUgY3JlYXRlTkZUKHN0cmluZyxzdHJpbmcpdWludDY0CgljYWxsc3ViIGNyZWF0ZU5GVAoJaXRvYgoJY29uY2F0Cglsb2cKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGNyZWF0ZU5GVChuYW1lOiBzdHJpbmcsIHVuaXROYW1lOiBzdHJpbmcpOiBBc3NldElECmNyZWF0ZU5GVDoKCXByb3RvIDIgMQoKCS8vIGV4YW1wbGVzL2l0eG5zL2l0eG5zLmFsZ28udHM6NgoJLy8gcmV0dXJuIHNlbmRBc3NldENyZWF0aW9uKHsKCS8vICAgICAgIGNvbmZpZ0Fzc2V0TmFtZTogbmFtZSwKCS8vICAgICAgIGNvbmZpZ0Fzc2V0VW5pdE5hbWU6IHVuaXROYW1lLAoJLy8gICAgICAgY29uZmlnQXNzZXRUb3RhbDogMSwKCS8vICAgICB9KTsKCWl0eG5fYmVnaW4KCXB1c2hpbnQgMyAvLyBhY2ZnCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gZXhhbXBsZXMvaXR4bnMvaXR4bnMuYWxnby50czo3CgkvLyBjb25maWdBc3NldE5hbWU6IG5hbWUKCWZyYW1lX2RpZyAtMSAvLyBuYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXROYW1lCgoJLy8gZXhhbXBsZXMvaXR4bnMvaXR4bnMuYWxnby50czo4CgkvLyBjb25maWdBc3NldFVuaXROYW1lOiB1bml0TmFtZQoJZnJhbWVfZGlnIC0yIC8vIHVuaXROYW1lOiBzdHJpbmcKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRVbml0TmFtZQoKCS8vIGV4YW1wbGVzL2l0eG5zL2l0eG5zLmFsZ28udHM6OQoJLy8gY29uZmlnQXNzZXRUb3RhbDogMQoJaW50YyAwIC8vIDEKCWl0eG5fZmllbGQgQ29uZmlnQXNzZXRUb3RhbAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCWl0eG4gQ3JlYXRlZEFzc2V0SUQKCXJldHN1YgoKLy8gdHJhbnNmZXJORlQodWludDY0LGFkZHJlc3Mpdm9pZAoqYWJpX3JvdXRlX3RyYW5zZmVyTkZUOgoJLy8gcmVjZWl2ZXI6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWR1cAoJbGVuCglwdXNoaW50IDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKHJlY2VpdmVyKSBmb3IgdHJhbnNmZXJORlQgbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGFzc2V0OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIHRyYW5zZmVyTkZUKHVpbnQ2NCxhZGRyZXNzKXZvaWQKCWNhbGxzdWIgdHJhbnNmZXJORlQKCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIHRyYW5zZmVyTkZUKGFzc2V0OiBBc3NldElELCByZWNlaXZlcjogQWRkcmVzcyk6IHZvaWQKdHJhbnNmZXJORlQ6Cglwcm90byAyIDAKCgkvLyBleGFtcGxlcy9pdHhucy9pdHhucy5hbGdvLnRzOjE0CgkvLyBzZW5kQXNzZXRUcmFuc2Zlcih7CgkvLyAgICAgICBhc3NldFJlY2VpdmVyOiByZWNlaXZlciwKCS8vICAgICAgIGFzc2V0QW1vdW50OiAxLAoJLy8gICAgICAgeGZlckFzc2V0OiBhc3NldCwKCS8vICAgICB9KQoJaXR4bl9iZWdpbgoJcHVzaGludCA0IC8vIGF4ZmVyCglpdHhuX2ZpZWxkIFR5cGVFbnVtCgoJLy8gZXhhbXBsZXMvaXR4bnMvaXR4bnMuYWxnby50czoxNQoJLy8gYXNzZXRSZWNlaXZlcjogcmVjZWl2ZXIKCWZyYW1lX2RpZyAtMiAvLyByZWNlaXZlcjogQWRkcmVzcwoJaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCgoJLy8gZXhhbXBsZXMvaXR4bnMvaXR4bnMuYWxnby50czoxNgoJLy8gYXNzZXRBbW91bnQ6IDEKCWludGMgMCAvLyAxCglpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CgoJLy8gZXhhbXBsZXMvaXR4bnMvaXR4bnMuYWxnby50czoxNwoJLy8geGZlckFzc2V0OiBhc3NldAoJZnJhbWVfZGlnIC0xIC8vIGFzc2V0OiBBc3NldElECglpdHhuX2ZpZWxkIFhmZXJBc3NldAoKCS8vIEZlZSBmaWVsZCBub3Qgc2V0LCBkZWZhdWx0aW5nIHRvIDAKCWludGMgMSAvLyAwCglpdHhuX2ZpZWxkIEZlZQoKCS8vIFN1Ym1pdCBpbm5lciB0cmFuc2FjdGlvbgoJaXR4bl9zdWJtaXQKCXJldHN1YgoKKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbjoKCWludGMgMCAvLyAxCglyZXR1cm4KCipjcmVhdGVfTm9PcDoKCXB1c2hieXRlcyAweGI4NDQ3YjM2IC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNyZWF0ZSBOb09wCgllcnIKCipjYWxsX05vT3A6CglwdXNoYnl0ZXMgMHhkMjAyNGM3MyAvLyBtZXRob2QgImNyZWF0ZU5GVChzdHJpbmcsc3RyaW5nKXVpbnQ2NCIKCXB1c2hieXRlcyAweGM3ZTI2MGFmIC8vIG1ldGhvZCAidHJhbnNmZXJORlQodWludDY0LGFkZHJlc3Mpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlTkZUICphYmlfcm91dGVfdHJhbnNmZXJORlQKCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY2FsbCBOb09wCgllcnI=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples OptInLsig Artifacts Generates TEAL 1`] = `
"#pragma version 10
//#pragma mode logicsig
intcblock 0 1 TMPL_APP_ID

// https://github.com/algorandfoundation/TEALScript

// The address of this logic signature is FKZPLQTSDQKAIA2GQUXW2QPXIN7P5VBZU7H67MP5WZSBLJNMXMMALMPEME

b *route_logic

// logic()void
*route_logic:
	// execute logic()void
	callsub logic
	intc 1 // 1
	return

// logic(): void
//
// Verify this is an opt in transaction
logic:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	pushbytes 0x

	// examples/lsig_with_app/lsig_with_app.algo.ts:14
	// verifyAssetTransferTxn(this.txn, {
	//       assetAmount: 0,
	//       assetReceiver: this.txn.sender,
	//       // It's very important to set fee to 0 for delegated logic signatures
	//       // Otherwise the fee can be used to drain the signer's account
	//       fee: 0,
	//       // Also very important to check that the rekey is set to zero address
	//       rekeyTo: globals.zeroAddress,
	//       // Finally we must ensure that this is not a close transaction, which will drain the signer's account of the given asset
	//       assetCloseTo: globals.zeroAddress,
	//     })
	// verify axfer
	txn TypeEnum
	pushint 4 // axfer
	==

	// transaction verification failed: {"txn":"this.txn","field":"typeEnum","expected":"axfer"}
	assert

	// verify assetAmount
	txn AssetAmount
	intc 0 // 0
	==

	// transaction verification failed: {"txn":"this.txn","field":"assetAmount","expected":"0"}
	assert

	// verify assetReceiver
	txn AssetReceiver
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txn","field":"assetReceiver","expected":"this.txn.sender"}
	assert

	// verify fee
	txn Fee
	intc 0 // 0
	==

	// transaction verification failed: {"txn":"this.txn","field":"fee","expected":"0"}
	assert

	// verify rekeyTo
	txn RekeyTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"rekeyTo","expected":"globals.zeroAddress"}
	assert

	// verify assetCloseTo
	txn AssetCloseTo
	global ZeroAddress
	==

	// transaction verification failed: {"txn":"this.txn","field":"assetCloseTo","expected":"globals.zeroAddress"}
	assert

	// examples/lsig_with_app/lsig_with_app.algo.ts:26
	// appCall = this.txnGroup[this.txn.groupIndex + 1]
	txn GroupIndex
	intc 1 // 1
	+
	frame_bury 0 // appCall: txn

	// examples/lsig_with_app/lsig_with_app.algo.ts:29
	// assert(appCall.applicationID === this.APP_ID)
	frame_dig 0 // appCall: txn
	gtxns ApplicationID
	intc 2 // TMPL_APP_ID
	==
	assert

	// examples/lsig_with_app/lsig_with_app.algo.ts:30
	// assert(appCall.applicationArgs[0] === method('verifyCreator(axfer,asset)void'))
	frame_dig 0 // appCall: txn
	gtxns ApplicationArgs 0
	pushbytes 0xd47b9716 // method "verifyCreator(axfer,asset)void"
	==
	assert
	retsub"
`;

exports[`Examples OptInLsig Artifacts Maintains program size 1`] = `80`;

exports[`Examples CreatorVerifier Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 32
bytecblock 0x00

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// allowOptInsFrom(address)void
*abi_route_allowOptInsFrom:
	// creator: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (creator) for allowOptInsFrom must be a address
	assert

	// execute allowOptInsFrom(address)void
	callsub allowOptInsFrom
	intc 0 // 1
	return

// allowOptInsFrom(creator: Address): void
//
// Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator
allowOptInsFrom:
	proto 1 0

	// examples/lsig_with_app/lsig_with_app.algo.ts:41
	// this.allowedCreators([this.txn.sender, creator]).value = true
	txn Sender
	frame_dig -1 // creator: Address
	concat
	intc 0 // 1
	bytec 0 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	box_put
	retsub

// disableOptInsFrom(address)void
*abi_route_disableOptInsFrom:
	// creator: address
	txna ApplicationArgs 1
	dup
	len
	intc 2 // 32
	==

	// argument 0 (creator) for disableOptInsFrom must be a address
	assert

	// execute disableOptInsFrom(address)void
	callsub disableOptInsFrom
	intc 0 // 1
	return

// disableOptInsFrom(creator: Address): void
//
// Disable opt-ins for ASAs from the given creator
disableOptInsFrom:
	proto 1 0

	// examples/lsig_with_app/lsig_with_app.algo.ts:46
	// this.allowedCreators([this.txn.sender, creator]).value = false
	txn Sender
	frame_dig -1 // creator: Address
	concat
	intc 1 // 0
	bytec 0 // 0x00
	intc 1 // 0
	uncover 2
	setbit
	box_put
	retsub

// verifyCreator(axfer)void
*abi_route_verifyCreator:
	// optIn: axfer
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	pushint 4 // axfer
	==

	// argument 0 (optIn) for verifyCreator must be a axfer transaction
	assert

	// execute verifyCreator(axfer)void
	callsub verifyCreator
	intc 0 // 1
	return

// verifyCreator(optIn: AssetTransferTxn): void
verifyCreator:
	proto 1 0

	// examples/lsig_with_app/lsig_with_app.algo.ts:52
	// assert(this.allowedCreators([optIn.sender, optIn.xferAsset.creator]).value)
	frame_dig -1 // optIn: AssetTransferTxn
	gtxns Sender
	frame_dig -1 // optIn: AssetTransferTxn
	gtxns XferAsset
	asset_params_get AssetCreator
	pop
	concat
	box_get

	// box value does not exist: this.allowedCreators([optIn.sender, optIn.xferAsset.creator]).value
	assert
	intc 1 // 0
	getbit
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xf1bf2ca8 // method "allowOptInsFrom(address)void"
	pushbytes 0xbc28ac2b // method "disableOptInsFrom(address)void"
	pushbytes 0x8d5aa727 // method "verifyCreator(axfer)void"
	txna ApplicationArgs 0
	match *abi_route_allowOptInsFrom *abi_route_disableOptInsFrom *abi_route_verifyCreator

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples CreatorVerifier Artifacts Maintains program size 1`] = `187`;

exports[`Examples CreatorVerifier Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "creator",
          "type": "address",
        },
      ],
      "desc": "Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator",
      "events": undefined,
      "name": "allowOptInsFrom",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "creator",
          "type": "address",
        },
      ],
      "desc": "Disable opt-ins for ASAs from the given creator",
      "events": undefined,
      "name": "disableOptInsFrom",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "optIn",
          "type": "axfer",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "verifyCreator",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "CreatorVerifier",
}
`;

exports[`Examples CreatorVerifier Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "creator",
            "type": "address",
          },
        ],
        "desc": "Allow anyone to use the lsig to opt in the txn sender into an asset created by the creator",
        "events": undefined,
        "name": "allowOptInsFrom",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "creator",
            "type": "address",
          },
        ],
        "desc": "Disable opt-ins for ASAs from the given creator",
        "events": undefined,
        "name": "disableOptInsFrom",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "optIn",
            "type": "axfer",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "verifyCreator",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "CreatorVerifier",
  },
  "hints": {
    "allowOptInsFrom(address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "disableOptInsFrom(address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyCreator(axfer)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxIDAgMzIKYnl0ZWNibG9jayAweDAwCgovLyBodHRwczovL2dpdGh1Yi5jb20vYWxnb3JhbmRmb3VuZGF0aW9uL1RFQUxTY3JpcHQKCi8vIFRoaXMgY29udHJhY3QgaXMgY29tcGxpYW50IHdpdGggYW5kL29yIGltcGxlbWVudHMgdGhlIGZvbGxvd2luZyBBUkNzOiBbIEFSQzQgXQoKLy8gVGhlIGZvbGxvd2luZyB0ZW4gbGluZXMgb2YgVEVBTCBoYW5kbGUgaW5pdGlhbCBwcm9ncmFtIGZsb3cKLy8gVGhpcyBwYXR0ZXJuIGlzIHVzZWQgdG8gbWFrZSBpdCBlYXN5IGZvciBhbnlvbmUgdG8gcGFyc2UgdGhlIHN0YXJ0IG9mIHRoZSBwcm9ncmFtIGFuZCBkZXRlcm1pbmUgaWYgYSBzcGVjaWZpYyBhY3Rpb24gaXMgYWxsb3dlZAovLyBIZXJlLCBhY3Rpb24gcmVmZXJzIHRvIHRoZSBPbkNvbXBsZXRlIGluIGNvbWJpbmF0aW9uIHdpdGggd2hldGhlciB0aGUgYXBwIGlzIGJlaW5nIGNyZWF0ZWQgb3IgY2FsbGVkCi8vIEV2ZXJ5IHBvc3NpYmxlIGFjdGlvbiBmb3IgdGhpcyBjb250cmFjdCBpcyByZXByZXNlbnRlZCBpbiB0aGUgc3dpdGNoIHN0YXRlbWVudAovLyBJZiB0aGUgYWN0aW9uIGlzIG5vdCBpbXBsZW1lbnRlZCBpbiB0aGUgY29udHJhY3QsIGl0cyByZXNwZWN0aXZlIGJyYW5jaCB3aWxsIGJlICIqTk9UX0lNUExFTUVOVEVEIiB3aGljaCBqdXN0IGNvbnRhaW5zICJlcnIiCnR4biBBcHBsaWNhdGlvbklECiEKcHVzaGludCA2CioKdHhuIE9uQ29tcGxldGlvbgorCnN3aXRjaCAqY2FsbF9Ob09wICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGFsbG93T3B0SW5zRnJvbShhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9hbGxvd09wdEluc0Zyb206CgkvLyBjcmVhdG9yOiBhZGRyZXNzCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAyIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGNyZWF0b3IpIGZvciBhbGxvd09wdEluc0Zyb20gbXVzdCBiZSBhIGFkZHJlc3MKCWFzc2VydAoKCS8vIGV4ZWN1dGUgYWxsb3dPcHRJbnNGcm9tKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBhbGxvd09wdEluc0Zyb20KCWludGMgMCAvLyAxCglyZXR1cm4KCi8vIGFsbG93T3B0SW5zRnJvbShjcmVhdG9yOiBBZGRyZXNzKTogdm9pZAovLwovLyBBbGxvdyBhbnlvbmUgdG8gdXNlIHRoZSBsc2lnIHRvIG9wdCBpbiB0aGUgdHhuIHNlbmRlciBpbnRvIGFuIGFzc2V0IGNyZWF0ZWQgYnkgdGhlIGNyZWF0b3IKYWxsb3dPcHRJbnNGcm9tOgoJcHJvdG8gMSAwCgoJLy8gZXhhbXBsZXMvbHNpZ193aXRoX2FwcC9sc2lnX3dpdGhfYXBwLmFsZ28udHM6NDEKCS8vIHRoaXMuYWxsb3dlZENyZWF0b3JzKFt0aGlzLnR4bi5zZW5kZXIsIGNyZWF0b3JdKS52YWx1ZSA9IHRydWUKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBjcmVhdG9yOiBBZGRyZXNzCgljb25jYXQKCWludGMgMCAvLyAxCglieXRlYyAwIC8vIDB4MDAKCWludGMgMSAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYm94X3B1dAoJcmV0c3ViCgovLyBkaXNhYmxlT3B0SW5zRnJvbShhZGRyZXNzKXZvaWQKKmFiaV9yb3V0ZV9kaXNhYmxlT3B0SW5zRnJvbToKCS8vIGNyZWF0b3I6IGFkZHJlc3MKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDIgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMCAoY3JlYXRvcikgZm9yIGRpc2FibGVPcHRJbnNGcm9tIG11c3QgYmUgYSBhZGRyZXNzCglhc3NlcnQKCgkvLyBleGVjdXRlIGRpc2FibGVPcHRJbnNGcm9tKGFkZHJlc3Mpdm9pZAoJY2FsbHN1YiBkaXNhYmxlT3B0SW5zRnJvbQoJaW50YyAwIC8vIDEKCXJldHVybgoKLy8gZGlzYWJsZU9wdEluc0Zyb20oY3JlYXRvcjogQWRkcmVzcyk6IHZvaWQKLy8KLy8gRGlzYWJsZSBvcHQtaW5zIGZvciBBU0FzIGZyb20gdGhlIGdpdmVuIGNyZWF0b3IKZGlzYWJsZU9wdEluc0Zyb206Cglwcm90byAxIDAKCgkvLyBleGFtcGxlcy9sc2lnX3dpdGhfYXBwL2xzaWdfd2l0aF9hcHAuYWxnby50czo0NgoJLy8gdGhpcy5hbGxvd2VkQ3JlYXRvcnMoW3RoaXMudHhuLnNlbmRlciwgY3JlYXRvcl0pLnZhbHVlID0gZmFsc2UKCXR4biBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBjcmVhdG9yOiBBZGRyZXNzCgljb25jYXQKCWludGMgMSAvLyAwCglieXRlYyAwIC8vIDB4MDAKCWludGMgMSAvLyAwCgl1bmNvdmVyIDIKCXNldGJpdAoJYm94X3B1dAoJcmV0c3ViCgovLyB2ZXJpZnlDcmVhdG9yKGF4ZmVyKXZvaWQKKmFiaV9yb3V0ZV92ZXJpZnlDcmVhdG9yOgoJLy8gb3B0SW46IGF4ZmVyCgl0eG4gR3JvdXBJbmRleAoJaW50YyAwIC8vIDEKCS0KCWR1cAoJZ3R4bnMgVHlwZUVudW0KCXB1c2hpbnQgNCAvLyBheGZlcgoJPT0KCgkvLyBhcmd1bWVudCAwIChvcHRJbikgZm9yIHZlcmlmeUNyZWF0b3IgbXVzdCBiZSBhIGF4ZmVyIHRyYW5zYWN0aW9uCglhc3NlcnQKCgkvLyBleGVjdXRlIHZlcmlmeUNyZWF0b3IoYXhmZXIpdm9pZAoJY2FsbHN1YiB2ZXJpZnlDcmVhdG9yCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyB2ZXJpZnlDcmVhdG9yKG9wdEluOiBBc3NldFRyYW5zZmVyVHhuKTogdm9pZAp2ZXJpZnlDcmVhdG9yOgoJcHJvdG8gMSAwCgoJLy8gZXhhbXBsZXMvbHNpZ193aXRoX2FwcC9sc2lnX3dpdGhfYXBwLmFsZ28udHM6NTIKCS8vIGFzc2VydCh0aGlzLmFsbG93ZWRDcmVhdG9ycyhbb3B0SW4uc2VuZGVyLCBvcHRJbi54ZmVyQXNzZXQuY3JlYXRvcl0pLnZhbHVlKQoJZnJhbWVfZGlnIC0xIC8vIG9wdEluOiBBc3NldFRyYW5zZmVyVHhuCglndHhucyBTZW5kZXIKCWZyYW1lX2RpZyAtMSAvLyBvcHRJbjogQXNzZXRUcmFuc2ZlclR4bgoJZ3R4bnMgWGZlckFzc2V0Cglhc3NldF9wYXJhbXNfZ2V0IEFzc2V0Q3JlYXRvcgoJcG9wCgljb25jYXQKCWJveF9nZXQKCgkvLyBib3ggdmFsdWUgZG9lcyBub3QgZXhpc3Q6IHRoaXMuYWxsb3dlZENyZWF0b3JzKFtvcHRJbi5zZW5kZXIsIG9wdEluLnhmZXJBc3NldC5jcmVhdG9yXSkudmFsdWUKCWFzc2VydAoJaW50YyAxIC8vIDAKCWdldGJpdAoJYXNzZXJ0CglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnRjIDAgLy8gMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4ZjFiZjJjYTggLy8gbWV0aG9kICJhbGxvd09wdEluc0Zyb20oYWRkcmVzcyl2b2lkIgoJcHVzaGJ5dGVzIDB4YmMyOGFjMmIgLy8gbWV0aG9kICJkaXNhYmxlT3B0SW5zRnJvbShhZGRyZXNzKXZvaWQiCglwdXNoYnl0ZXMgMHg4ZDVhYTcyNyAvLyBtZXRob2QgInZlcmlmeUNyZWF0b3IoYXhmZXIpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfYWxsb3dPcHRJbnNGcm9tICphYmlfcm91dGVfZGlzYWJsZU9wdEluc0Zyb20gKmFiaV9yb3V0ZV92ZXJpZnlDcmVhdG9yCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples MerkleTree Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 33 0 99 3
bytecblock 0x 0x726f6f74 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8550000000000000000000000000000000000000000000000000000000000000000 0x0000000000000000000000000000000000000000000000000000000000000000 0x73697a65

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_DeleteApplication *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// calcInitRoot(): bytes32
calcInitRoot:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/merkle/merkle.algo.ts:17
	// result = hex(EMPTY_HASH) as bytes32
	bytec 2 // 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8550000000000000000000000000000000000000000000000000000000000000000
	bytec 0 // 0x
	dup
	b==
	assert
	extract 0 32
	frame_bury 0 // result: byte[32]

	// examples/merkle/merkle.algo.ts:19
	// for (let i = 0; i < TREE_DEPTH; i = i + 1)
	intc 2 // 0
	frame_bury 1 // i: uint64

*for_0:
	// examples/merkle/merkle.algo.ts:19
	// i < TREE_DEPTH
	frame_dig 1 // i: uint64
	intc 4 // 3
	<
	bz *for_0_end

	// examples/merkle/merkle.algo.ts:20
	// result = sha256(result + result)
	frame_dig 0 // result: byte[32]
	frame_dig 0 // result: byte[32]
	concat
	sha256
	frame_bury 0 // result: byte[32]

*for_0_continue:
	// examples/merkle/merkle.algo.ts:19
	// i = i + 1
	frame_dig 1 // i: uint64
	intc 0 // 1
	+
	frame_bury 1 // i: uint64
	b *for_0

*for_0_end:
	// examples/merkle/merkle.algo.ts:23
	// return result;
	frame_dig 0 // result: byte[32]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// hashConcat(left: bytes32, right: bytes32): bytes32
hashConcat:
	proto 2 1

	// examples/merkle/merkle.algo.ts:27
	// return sha256(left + right);
	frame_dig -1 // left: bytes32
	frame_dig -2 // right: bytes32
	concat
	sha256
	retsub

// isRightSibling(elem: Branch): boolean
isRightSibling:
	proto 1 1

	// examples/merkle/merkle.algo.ts:31
	// return getbyte(elem, 0) === RIGHT_SIBLING_PREFIX;
	frame_dig -1 // elem: Branch
	intc 2 // 0
	getbyte
	pushint 170
	==
	retsub

// calcRoot(leaf: bytes32, path: Path): bytes32
calcRoot:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/merkle/merkle.algo.ts:37
	// for (let i = 0; i < TREE_DEPTH; i = i + 1)
	intc 2 // 0
	frame_bury 0 // i: uint64

*for_1:
	// examples/merkle/merkle.algo.ts:37
	// i < TREE_DEPTH
	frame_dig 0 // i: uint64
	intc 4 // 3
	<
	bz *for_1_end
	frame_dig 0 // i: uint64
	frame_bury 1 // accessor: accessor//0//elem

	// *if0_condition
	// examples/merkle/merkle.algo.ts:40
	// this.isRightSibling(elem)
	frame_dig -2 // path: Path
	frame_dig 1 // saved accessor: accessor//0//elem
	intc 1 // 33
	* // acc * typeLength
	intc 1 // 33
	extract3
	callsub isRightSibling
	bz *if0_else

	// *if0_consequent
	// examples/merkle/merkle.algo.ts:41
	// result = this.hashConcat(result, extract3(elem, 1, 32) as bytes32)
	frame_dig -2 // path: Path
	frame_dig 1 // saved accessor: accessor//0//elem
	intc 1 // 33
	* // acc * typeLength
	intc 1 // 33
	extract3
	extract 1 32
	bytec 3 // 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 0 // 0x
	b==
	assert
	extract 0 32
	frame_dig -1 // leaf: bytes32
	callsub hashConcat
	frame_bury -1 // result: bytes32
	b *if0_end

*if0_else:
	// examples/merkle/merkle.algo.ts:43
	// result = this.hashConcat(extract3(elem, 1, 32) as bytes32, result)
	frame_dig -1 // leaf: bytes32
	frame_dig -2 // path: Path
	frame_dig 1 // saved accessor: accessor//0//elem
	intc 1 // 33
	* // acc * typeLength
	intc 1 // 33
	extract3
	extract 1 32
	bytec 3 // 0x0000000000000000000000000000000000000000000000000000000000000000
	concat
	dup
	extract 32 0
	bytec 0 // 0x
	b==
	assert
	extract 0 32
	callsub hashConcat
	frame_bury -1 // result: bytes32

*if0_end:

*for_1_continue:
	// examples/merkle/merkle.algo.ts:37
	// i = i + 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64
	b *for_1

*for_1_end:
	// examples/merkle/merkle.algo.ts:47
	// return result;
	frame_dig -1 // leaf: bytes32

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// deleteApplication()void
*abi_route_deleteApplication:
	// execute deleteApplication()void
	callsub deleteApplication
	intc 0 // 1
	return

// deleteApplication(): void
deleteApplication:
	proto 0 0

	// examples/merkle/merkle.algo.ts:51
	// verifyAppCallTxn(this.txn, { sender: this.app.creator })
	// verify sender
	txn Sender
	txna Applications 0
	app_params_get AppCreator
	pop
	==

	// transaction verification failed: {"txn":"this.txn","field":"sender","expected":"this.app.creator"}
	assert
	retsub

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 0 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// examples/merkle/merkle.algo.ts:55
	// this.root.value = this.calcInitRoot()
	bytec 1 //  "root"
	callsub calcInitRoot
	app_global_put
	retsub

// verify(byte[],byte[33][3])void
*abi_route_verify:
	// path: byte[33][3]
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 99
	==

	// argument 0 (path) for verify must be a byte[33][3]
	assert

	// data: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute verify(byte[],byte[33][3])void
	callsub verify
	intc 0 // 1
	return

// verify(data: bytes, path: Path): void
verify:
	proto 2 0

	// examples/merkle/merkle.algo.ts:59
	// assert(this.root.value === this.calcRoot(sha256(data), path))
	bytec 1 //  "root"
	app_global_get
	frame_dig -2 // path: Path
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	==
	assert
	retsub

// appendLeaf(byte[],byte[33][3])void
*abi_route_appendLeaf:
	// path: byte[33][3]
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 99
	==

	// argument 0 (path) for appendLeaf must be a byte[33][3]
	assert

	// data: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute appendLeaf(byte[],byte[33][3])void
	callsub appendLeaf
	intc 0 // 1
	return

// appendLeaf(data: bytes, path: Path): void
appendLeaf:
	proto 2 0

	// examples/merkle/merkle.algo.ts:63
	// assert(data !== '')
	frame_dig -1 // data: bytes
	bytec 0 //  ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:64
	// assert(this.root.value === this.calcRoot(hex(EMPTY_HASH) as bytes32, path))
	bytec 1 //  "root"
	app_global_get
	frame_dig -2 // path: Path
	bytec 2 // 0xe3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b8550000000000000000000000000000000000000000000000000000000000000000
	bytec 0 // 0x
	dup
	b==
	assert
	extract 0 32
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:66
	// this.root.value = this.calcRoot(sha256(data), path)
	bytec 1 //  "root"
	frame_dig -2 // path: Path
	frame_dig -1 // data: bytes
	sha256
	callsub calcRoot
	app_global_put

	// examples/merkle/merkle.algo.ts:68
	// this.size.value = this.size.value + 1
	bytec 4 //  "size"
	dup
	app_global_get
	intc 0 // 1
	+
	app_global_put
	retsub

// updateLeaf(byte[],byte[],byte[33][3])void
*abi_route_updateLeaf:
	// path: byte[33][3]
	txna ApplicationArgs 3
	dup
	len
	intc 3 // 99
	==

	// argument 0 (path) for updateLeaf must be a byte[33][3]
	assert

	// newData: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// oldData: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// execute updateLeaf(byte[],byte[],byte[33][3])void
	callsub updateLeaf
	intc 0 // 1
	return

// updateLeaf(oldData: bytes, newData: bytes, path: Path): void
updateLeaf:
	proto 3 0

	// examples/merkle/merkle.algo.ts:72
	// assert(newData !== '')
	frame_dig -2 // newData: bytes
	bytec 0 //  ""
	!=
	assert

	// examples/merkle/merkle.algo.ts:73
	// assert(this.root.value === this.calcRoot(sha256(oldData), path))
	bytec 1 //  "root"
	app_global_get
	frame_dig -3 // path: Path
	frame_dig -1 // oldData: bytes
	sha256
	callsub calcRoot
	==
	assert

	// examples/merkle/merkle.algo.ts:75
	// this.root.value = this.calcRoot(sha256(newData), path)
	bytec 1 //  "root"
	frame_dig -3 // path: Path
	frame_dig -2 // newData: bytes
	sha256
	callsub calcRoot
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x506cb8d8 // method "verify(byte[],byte[33][3])void"
	pushbytes 0x04f63238 // method "appendLeaf(byte[],byte[33][3])void"
	pushbytes 0x255d93e3 // method "updateLeaf(byte[],byte[],byte[33][3])void"
	txna ApplicationArgs 0
	match *abi_route_verify *abi_route_appendLeaf *abi_route_updateLeaf

	// this contract does not implement the given ABI method for call NoOp
	err

*call_DeleteApplication:
	pushbytes 0x2487c32c // method "deleteApplication()void"
	txna ApplicationArgs 0
	match *abi_route_deleteApplication

	// this contract does not implement the given ABI method for call DeleteApplication
	err"
`;

exports[`Examples MerkleTree Artifacts Maintains program size 1`] = `584`;

exports[`Examples MerkleTree Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "deleteApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "data",
          "type": "byte[]",
        },
        {
          "desc": undefined,
          "name": "path",
          "type": "byte[33][3]",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "verify",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "data",
          "type": "byte[]",
        },
        {
          "desc": undefined,
          "name": "path",
          "type": "byte[33][3]",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "appendLeaf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "oldData",
          "type": "byte[]",
        },
        {
          "desc": undefined,
          "name": "newData",
          "type": "byte[]",
        },
        {
          "desc": undefined,
          "name": "path",
          "type": "byte[33][3]",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "updateLeaf",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "MerkleTree",
}
`;

exports[`Examples MerkleTree Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "deleteApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "data",
            "type": "byte[]",
          },
          {
            "desc": undefined,
            "name": "path",
            "type": "byte[33][3]",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "verify",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "data",
            "type": "byte[]",
          },
          {
            "desc": undefined,
            "name": "path",
            "type": "byte[33][3]",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "appendLeaf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "oldData",
            "type": "byte[]",
          },
          {
            "desc": undefined,
            "name": "newData",
            "type": "byte[]",
          },
          {
            "desc": undefined,
            "name": "path",
            "type": "byte[33][3]",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "updateLeaf",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "MerkleTree",
  },
  "hints": {
    "appendLeaf(byte[],byte[33][3])void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "deleteApplication()void": {
      "call_config": {
        "delete_application": "CALL",
      },
    },
    "updateLeaf(byte[],byte[],byte[33][3])void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verify(byte[],byte[33][3])void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "root": {
          "key": "root",
          "type": "bytes",
        },
        "size": {
          "key": "size",
          "type": "uint64",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples NonABIExample Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1
bytecblock 0x

// https://github.com/algorandfoundation/TEALScript

// !!!! WARNING: This contract is *NOT* ARC4 compliant. It may contain ABI methods, but it also allows app calls where the first argument does NOT match an ABI selector

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *call_UpdateApplication *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// add(x: uint64, y: uint64): uint64
add:
	proto 2 1

	// examples/non_abi/non_abi.algo.ts:6
	// return x + y;
	frame_dig -1 // x: uint64
	frame_dig -2 // y: uint64
	+
	retsub

// abiAdd(uint64,uint64)uint64
*abi_route_abiAdd:
	// The ABI return prefix
	pushbytes 0x151f7c75

	// y: uint64
	txna ApplicationArgs 2
	btoi

	// x: uint64
	txna ApplicationArgs 1
	btoi

	// execute abiAdd(uint64,uint64)uint64
	callsub abiAdd
	itob
	concat
	log
	intc 0 // 1
	return

// abiAdd(x: uint64, y: uint64): uint64
abiAdd:
	proto 2 1

	// examples/non_abi/non_abi.algo.ts:10
	// return this.add(x, y);
	frame_dig -2 // y: uint64
	frame_dig -1 // x: uint64
	callsub add
	retsub

// nonAbiAdd(): void
nonAbiAdd:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// examples/non_abi/non_abi.algo.ts:15
	// x = btoi(this.txn.applicationArgs![0])
	txn ApplicationArgs 0
	btoi
	frame_bury 0 // x: uint64

	// examples/non_abi/non_abi.algo.ts:16
	// y = btoi(this.txn.applicationArgs![1])
	txn ApplicationArgs 1
	btoi
	frame_bury 1 // y: uint64

	// examples/non_abi/non_abi.algo.ts:17
	// log(itob(this.add(x, y)))
	frame_dig 1 // y: uint64
	frame_dig 0 // x: uint64
	callsub add
	itob
	log
	retsub

// nonAbiUpdate(): void
nonAbiUpdate:
	proto 0 0

	// examples/non_abi/non_abi.algo.ts:22
	// log('Updated!')
	pushbytes 0x5570646174656421 // "Updated!"
	log
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0xb8b84484 // method "abiAdd(uint64,uint64)uint64"
	txna ApplicationArgs 0
	match *abi_route_abiAdd

	// !!!! WARNING: non-ABI routing
	callsub nonAbiAdd
	intc 0 // 1
	return

*call_UpdateApplication:
	// !!!! WARNING: non-ABI routing
	callsub nonAbiUpdate
	intc 0 // 1
	return"
`;

exports[`Examples NonABIExample Artifacts Maintains program size 1`] = `166`;

exports[`Examples NonABIExample Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "x",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "y",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "abiAdd",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "NonABIExample",
}
`;

exports[`Examples NonABIExample Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "x",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "y",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "abiAdd",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "NonABIExample",
  },
  "hints": {
    "abiAdd(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHgKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gISEhISBXQVJOSU5HOiBUaGlzIGNvbnRyYWN0IGlzICpOT1QqIEFSQzQgY29tcGxpYW50LiBJdCBtYXkgY29udGFpbiBBQkkgbWV0aG9kcywgYnV0IGl0IGFsc28gYWxsb3dzIGFwcCBjYWxscyB3aGVyZSB0aGUgZmlyc3QgYXJndW1lbnQgZG9lcyBOT1QgbWF0Y2ggYW4gQUJJIHNlbGVjdG9yCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKmNhbGxfVXBkYXRlQXBwbGljYXRpb24gKk5PVF9JTVBMRU1FTlRFRCAqY3JlYXRlX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVECgoqTk9UX0lNUExFTUVOVEVEOgoJLy8gVGhlIHJlcXVlc3RlZCBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoaXMgY29udHJhY3QuIEFyZSB5b3UgdXNpbmcgdGhlIGNvcnJlY3QgT25Db21wbGV0ZT8gRGlkIHlvdSBzZXQgeW91ciBhcHAgSUQ/CgllcnIKCi8vIGFkZCh4OiB1aW50NjQsIHk6IHVpbnQ2NCk6IHVpbnQ2NAphZGQ6Cglwcm90byAyIDEKCgkvLyBleGFtcGxlcy9ub25fYWJpL25vbl9hYmkuYWxnby50czo2CgkvLyByZXR1cm4geCArIHk7CglmcmFtZV9kaWcgLTEgLy8geDogdWludDY0CglmcmFtZV9kaWcgLTIgLy8geTogdWludDY0CgkrCglyZXRzdWIKCi8vIGFiaUFkZCh1aW50NjQsdWludDY0KXVpbnQ2NAoqYWJpX3JvdXRlX2FiaUFkZDoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJcHVzaGJ5dGVzIDB4MTUxZjdjNzUKCgkvLyB5OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDIKCWJ0b2kKCgkvLyB4OiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGFiaUFkZCh1aW50NjQsdWludDY0KXVpbnQ2NAoJY2FsbHN1YiBhYmlBZGQKCWl0b2IKCWNvbmNhdAoJbG9nCglpbnRjIDAgLy8gMQoJcmV0dXJuCgovLyBhYmlBZGQoeDogdWludDY0LCB5OiB1aW50NjQpOiB1aW50NjQKYWJpQWRkOgoJcHJvdG8gMiAxCgoJLy8gZXhhbXBsZXMvbm9uX2FiaS9ub25fYWJpLmFsZ28udHM6MTAKCS8vIHJldHVybiB0aGlzLmFkZCh4LCB5KTsKCWZyYW1lX2RpZyAtMiAvLyB5OiB1aW50NjQKCWZyYW1lX2RpZyAtMSAvLyB4OiB1aW50NjQKCWNhbGxzdWIgYWRkCglyZXRzdWIKCi8vIG5vbkFiaUFkZCgpOiB2b2lkCm5vbkFiaUFkZDoKCXByb3RvIDAgMAoKCS8vIFB1c2ggZW1wdHkgYnl0ZXMgYWZ0ZXIgdGhlIGZyYW1lIHBvaW50ZXIgdG8gcmVzZXJ2ZSBzcGFjZSBmb3IgbG9jYWwgdmFyaWFibGVzCglieXRlYyAwIC8vIDB4CglkdXAKCgkvLyBleGFtcGxlcy9ub25fYWJpL25vbl9hYmkuYWxnby50czoxNQoJLy8geCA9IGJ0b2kodGhpcy50eG4uYXBwbGljYXRpb25BcmdzIVswXSkKCXR4biBBcHBsaWNhdGlvbkFyZ3MgMAoJYnRvaQoJZnJhbWVfYnVyeSAwIC8vIHg6IHVpbnQ2NAoKCS8vIGV4YW1wbGVzL25vbl9hYmkvbm9uX2FiaS5hbGdvLnRzOjE2CgkvLyB5ID0gYnRvaSh0aGlzLnR4bi5hcHBsaWNhdGlvbkFyZ3MhWzFdKQoJdHhuIEFwcGxpY2F0aW9uQXJncyAxCglidG9pCglmcmFtZV9idXJ5IDEgLy8geTogdWludDY0CgoJLy8gZXhhbXBsZXMvbm9uX2FiaS9ub25fYWJpLmFsZ28udHM6MTcKCS8vIGxvZyhpdG9iKHRoaXMuYWRkKHgsIHkpKSkKCWZyYW1lX2RpZyAxIC8vIHk6IHVpbnQ2NAoJZnJhbWVfZGlnIDAgLy8geDogdWludDY0CgljYWxsc3ViIGFkZAoJaXRvYgoJbG9nCglyZXRzdWIKCi8vIG5vbkFiaVVwZGF0ZSgpOiB2b2lkCm5vbkFiaVVwZGF0ZToKCXByb3RvIDAgMAoKCS8vIGV4YW1wbGVzL25vbl9hYmkvbm9uX2FiaS5hbGdvLnRzOjIyCgkvLyBsb2coJ1VwZGF0ZWQhJykKCXB1c2hieXRlcyAweDU1NzA2NDYxNzQ2NTY0MjEgLy8gIlVwZGF0ZWQhIgoJbG9nCglyZXRzdWIKCiphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb246CglpbnRjIDAgLy8gMQoJcmV0dXJuCgoqY3JlYXRlX05vT3A6CglwdXNoYnl0ZXMgMHhiODQ0N2IzNiAvLyBtZXRob2QgImNyZWF0ZUFwcGxpY2F0aW9uKCl2b2lkIgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAoJbWF0Y2ggKmFiaV9yb3V0ZV9jcmVhdGVBcHBsaWNhdGlvbgoKCS8vIHRoaXMgY29udHJhY3QgZG9lcyBub3QgaW1wbGVtZW50IHRoZSBnaXZlbiBBQkkgbWV0aG9kIGZvciBjcmVhdGUgTm9PcAoJZXJyCgoqY2FsbF9Ob09wOgoJcHVzaGJ5dGVzIDB4YjhiODQ0ODQgLy8gbWV0aG9kICJhYmlBZGQodWludDY0LHVpbnQ2NCl1aW50NjQiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2FiaUFkZAoKCS8vICEhISEgV0FSTklORzogbm9uLUFCSSByb3V0aW5nCgljYWxsc3ViIG5vbkFiaUFkZAoJaW50YyAwIC8vIDEKCXJldHVybgoKKmNhbGxfVXBkYXRlQXBwbGljYXRpb246CgkvLyAhISEhIFdBUk5JTkc6IG5vbi1BQkkgcm91dGluZwoJY2FsbHN1YiBub25BYmlVcGRhdGUKCWludGMgMCAvLyAxCglyZXR1cm4=",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples Simple Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 32 1 256
bytecblock 0x636f756e746572 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0x151f7c75

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// incrementCounter(i: uint64): void
incrementCounter:
	proto 1 0

	// examples/simple/simple.algo.ts:7
	// this.counter.value = this.counter.value + i
	bytec 0 //  "counter"
	dup
	app_global_get
	frame_dig -1 // i: uint64
	+
	app_global_put
	retsub

// incr(uint64)void
*abi_route_incr:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute incr(uint64)void
	callsub incr
	intc 1 // 1
	return

// incr(i: uint64): void
incr:
	proto 1 0

	// examples/simple/simple.algo.ts:11
	// this.incrementCounter(i)
	frame_dig -1 // i: uint64
	callsub incrementCounter
	retsub

// decr(uint64)void
*abi_route_decr:
	// i: uint64
	txna ApplicationArgs 1
	btoi

	// execute decr(uint64)void
	callsub decr
	intc 1 // 1
	return

// decr(i: uint64): void
decr:
	proto 1 0

	// examples/simple/simple.algo.ts:15
	// this.counter.value = this.counter.value - i
	bytec 0 //  "counter"
	dup
	app_global_get
	frame_dig -1 // i: uint64
	-
	app_global_put
	retsub

// add(uint256,uint256)uint256
*abi_route_add:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 32
	==

	// argument 0 (b) for add must be a uint256
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 1 (a) for add must be a uint256
	assert

	// execute add(uint256,uint256)uint256
	callsub add
	dup
	bitlen
	intc 2 // 256
	<=

	// add return value overflowed 256 bits
	assert
	bytec 1 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	concat
	log
	intc 1 // 1
	return

// add(a: uint256, b: uint256): uint256
add:
	proto 2 1

	// examples/simple/simple.algo.ts:19
	// return a + b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b+
	retsub

// sub(uint256,uint256)uint256
*abi_route_sub:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// b: uint256
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 32
	==

	// argument 0 (b) for sub must be a uint256
	assert

	// a: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 32
	==

	// argument 1 (a) for sub must be a uint256
	assert

	// execute sub(uint256,uint256)uint256
	callsub sub
	dup
	bitlen
	intc 2 // 256
	<=

	// sub return value overflowed 256 bits
	assert
	bytec 1 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 0 // 32
	-
	swap
	substring3
	concat
	log
	intc 1 // 1
	return

// sub(a: uint256, b: uint256): uint256
sub:
	proto 2 1

	// examples/simple/simple.algo.ts:23
	// return a - b;
	frame_dig -1 // a: uint256
	frame_dig -2 // b: uint256
	b-
	retsub

*abi_route_createApplication:
	intc 1 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x9fab8610 // method "incr(uint64)void"
	pushbytes 0x2e0c5a47 // method "decr(uint64)void"
	pushbytes 0xac976e02 // method "add(uint256,uint256)uint256"
	pushbytes 0x091b32a7 // method "sub(uint256,uint256)uint256"
	txna ApplicationArgs 0
	match *abi_route_incr *abi_route_decr *abi_route_add *abi_route_sub

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples Simple Artifacts Maintains program size 1`] = `288`;

exports[`Examples Simple Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "i",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "incr",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "i",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "decr",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint256",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint256",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "add",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint256",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint256",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint256",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "sub",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint256",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "Simple",
}
`;

exports[`Examples Simple Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "i",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "incr",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "i",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "decr",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint256",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint256",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "add",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint256",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint256",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint256",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "sub",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint256",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "Simple",
  },
  "hints": {
    "add(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "decr(uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "incr(uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "sub(uint256,uint256)uint256": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "counter": {
          "key": "counter",
          "type": "uint64",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCmludGNibG9jayAzMiAxIDI1NgpieXRlY2Jsb2NrIDB4NjM2Zjc1NmU3NDY1NzIgMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGIDB4MTUxZjdjNzUKCi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGdvcmFuZGZvdW5kYXRpb24vVEVBTFNjcmlwdAoKLy8gVGhpcyBjb250cmFjdCBpcyBjb21wbGlhbnQgd2l0aCBhbmQvb3IgaW1wbGVtZW50cyB0aGUgZm9sbG93aW5nIEFSQ3M6IFsgQVJDNCBdCgovLyBUaGUgZm9sbG93aW5nIHRlbiBsaW5lcyBvZiBURUFMIGhhbmRsZSBpbml0aWFsIHByb2dyYW0gZmxvdwovLyBUaGlzIHBhdHRlcm4gaXMgdXNlZCB0byBtYWtlIGl0IGVhc3kgZm9yIGFueW9uZSB0byBwYXJzZSB0aGUgc3RhcnQgb2YgdGhlIHByb2dyYW0gYW5kIGRldGVybWluZSBpZiBhIHNwZWNpZmljIGFjdGlvbiBpcyBhbGxvd2VkCi8vIEhlcmUsIGFjdGlvbiByZWZlcnMgdG8gdGhlIE9uQ29tcGxldGUgaW4gY29tYmluYXRpb24gd2l0aCB3aGV0aGVyIHRoZSBhcHAgaXMgYmVpbmcgY3JlYXRlZCBvciBjYWxsZWQKLy8gRXZlcnkgcG9zc2libGUgYWN0aW9uIGZvciB0aGlzIGNvbnRyYWN0IGlzIHJlcHJlc2VudGVkIGluIHRoZSBzd2l0Y2ggc3RhdGVtZW50Ci8vIElmIHRoZSBhY3Rpb24gaXMgbm90IGltcGxlbWVudGVkIGluIHRoZSBjb250cmFjdCwgaXRzIHJlc3BlY3RpdmUgYnJhbmNoIHdpbGwgYmUgIipOT1RfSU1QTEVNRU5URUQiIHdoaWNoIGp1c3QgY29udGFpbnMgImVyciIKdHhuIEFwcGxpY2F0aW9uSUQKIQpwdXNoaW50IDYKKgp0eG4gT25Db21wbGV0aW9uCisKc3dpdGNoICpjYWxsX05vT3AgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpjcmVhdGVfTm9PcCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQgKk5PVF9JTVBMRU1FTlRFRCAqTk9UX0lNUExFTUVOVEVEICpOT1RfSU1QTEVNRU5URUQKCipOT1RfSU1QTEVNRU5URUQ6CgkvLyBUaGUgcmVxdWVzdGVkIGFjdGlvbiBpcyBub3QgaW1wbGVtZW50ZWQgaW4gdGhpcyBjb250cmFjdC4gQXJlIHlvdSB1c2luZyB0aGUgY29ycmVjdCBPbkNvbXBsZXRlPyBEaWQgeW91IHNldCB5b3VyIGFwcCBJRD8KCWVycgoKLy8gaW5jcmVtZW50Q291bnRlcihpOiB1aW50NjQpOiB2b2lkCmluY3JlbWVudENvdW50ZXI6Cglwcm90byAxIDAKCgkvLyBleGFtcGxlcy9zaW1wbGUvc2ltcGxlLmFsZ28udHM6NwoJLy8gdGhpcy5jb3VudGVyLnZhbHVlID0gdGhpcy5jb3VudGVyLnZhbHVlICsgaQoJYnl0ZWMgMCAvLyAgImNvdW50ZXIiCglkdXAKCWFwcF9nbG9iYWxfZ2V0CglmcmFtZV9kaWcgLTEgLy8gaTogdWludDY0CgkrCglhcHBfZ2xvYmFsX3B1dAoJcmV0c3ViCgovLyBpbmNyKHVpbnQ2NCl2b2lkCiphYmlfcm91dGVfaW5jcjoKCS8vIGk6IHVpbnQ2NAoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQoJYnRvaQoKCS8vIGV4ZWN1dGUgaW5jcih1aW50NjQpdm9pZAoJY2FsbHN1YiBpbmNyCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBpbmNyKGk6IHVpbnQ2NCk6IHZvaWQKaW5jcjoKCXByb3RvIDEgMAoKCS8vIGV4YW1wbGVzL3NpbXBsZS9zaW1wbGUuYWxnby50czoxMQoJLy8gdGhpcy5pbmNyZW1lbnRDb3VudGVyKGkpCglmcmFtZV9kaWcgLTEgLy8gaTogdWludDY0CgljYWxsc3ViIGluY3JlbWVudENvdW50ZXIKCXJldHN1YgoKLy8gZGVjcih1aW50NjQpdm9pZAoqYWJpX3JvdXRlX2RlY3I6CgkvLyBpOiB1aW50NjQKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWJ0b2kKCgkvLyBleGVjdXRlIGRlY3IodWludDY0KXZvaWQKCWNhbGxzdWIgZGVjcgoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gZGVjcihpOiB1aW50NjQpOiB2b2lkCmRlY3I6Cglwcm90byAxIDAKCgkvLyBleGFtcGxlcy9zaW1wbGUvc2ltcGxlLmFsZ28udHM6MTUKCS8vIHRoaXMuY291bnRlci52YWx1ZSA9IHRoaXMuY291bnRlci52YWx1ZSAtIGkKCWJ5dGVjIDAgLy8gICJjb3VudGVyIgoJZHVwCglhcHBfZ2xvYmFsX2dldAoJZnJhbWVfZGlnIC0xIC8vIGk6IHVpbnQ2NAoJLQoJYXBwX2dsb2JhbF9wdXQKCXJldHN1YgoKLy8gYWRkKHVpbnQyNTYsdWludDI1Nil1aW50MjU2CiphYmlfcm91dGVfYWRkOgoJLy8gVGhlIEFCSSByZXR1cm4gcHJlZml4CglieXRlYyAyIC8vIDB4MTUxZjdjNzUKCgkvLyBiOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAyCglkdXAKCWxlbgoJaW50YyAwIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDAgKGIpIGZvciBhZGQgbXVzdCBiZSBhIHVpbnQyNTYKCWFzc2VydAoKCS8vIGE6IHVpbnQyNTYKCXR4bmEgQXBwbGljYXRpb25BcmdzIDEKCWR1cAoJbGVuCglpbnRjIDAgLy8gMzIKCT09CgoJLy8gYXJndW1lbnQgMSAoYSkgZm9yIGFkZCBtdXN0IGJlIGEgdWludDI1NgoJYXNzZXJ0CgoJLy8gZXhlY3V0ZSBhZGQodWludDI1Nix1aW50MjU2KXVpbnQyNTYKCWNhbGxzdWIgYWRkCglkdXAKCWJpdGxlbgoJaW50YyAyIC8vIDI1NgoJPD0KCgkvLyBhZGQgcmV0dXJuIHZhbHVlIG92ZXJmbG93ZWQgMjU2IGJpdHMKCWFzc2VydAoJYnl0ZWMgMSAvLyAweEZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkYKCWImCglkdXAKCWxlbgoJZHVwCglpbnRjIDAgLy8gMzIKCS0KCXN3YXAKCXN1YnN0cmluZzMKCWNvbmNhdAoJbG9nCglpbnRjIDEgLy8gMQoJcmV0dXJuCgovLyBhZGQoYTogdWludDI1NiwgYjogdWludDI1Nik6IHVpbnQyNTYKYWRkOgoJcHJvdG8gMiAxCgoJLy8gZXhhbXBsZXMvc2ltcGxlL3NpbXBsZS5hbGdvLnRzOjE5CgkvLyByZXR1cm4gYSArIGI7CglmcmFtZV9kaWcgLTEgLy8gYTogdWludDI1NgoJZnJhbWVfZGlnIC0yIC8vIGI6IHVpbnQyNTYKCWIrCglyZXRzdWIKCi8vIHN1Yih1aW50MjU2LHVpbnQyNTYpdWludDI1NgoqYWJpX3JvdXRlX3N1YjoKCS8vIFRoZSBBQkkgcmV0dXJuIHByZWZpeAoJYnl0ZWMgMiAvLyAweDE1MWY3Yzc1CgoJLy8gYjogdWludDI1NgoJdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgoJZHVwCglsZW4KCWludGMgMCAvLyAzMgoJPT0KCgkvLyBhcmd1bWVudCAwIChiKSBmb3Igc3ViIG11c3QgYmUgYSB1aW50MjU2Cglhc3NlcnQKCgkvLyBhOiB1aW50MjU2Cgl0eG5hIEFwcGxpY2F0aW9uQXJncyAxCglkdXAKCWxlbgoJaW50YyAwIC8vIDMyCgk9PQoKCS8vIGFyZ3VtZW50IDEgKGEpIGZvciBzdWIgbXVzdCBiZSBhIHVpbnQyNTYKCWFzc2VydAoKCS8vIGV4ZWN1dGUgc3ViKHVpbnQyNTYsdWludDI1Nil1aW50MjU2CgljYWxsc3ViIHN1YgoJZHVwCgliaXRsZW4KCWludGMgMiAvLyAyNTYKCTw9CgoJLy8gc3ViIHJldHVybiB2YWx1ZSBvdmVyZmxvd2VkIDI1NiBiaXRzCglhc3NlcnQKCWJ5dGVjIDEgLy8gMHhGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGRkZGCgliJgoJZHVwCglsZW4KCWR1cAoJaW50YyAwIC8vIDMyCgktCglzd2FwCglzdWJzdHJpbmczCgljb25jYXQKCWxvZwoJaW50YyAxIC8vIDEKCXJldHVybgoKLy8gc3ViKGE6IHVpbnQyNTYsIGI6IHVpbnQyNTYpOiB1aW50MjU2CnN1YjoKCXByb3RvIDIgMQoKCS8vIGV4YW1wbGVzL3NpbXBsZS9zaW1wbGUuYWxnby50czoyMwoJLy8gcmV0dXJuIGEgLSBiOwoJZnJhbWVfZGlnIC0xIC8vIGE6IHVpbnQyNTYKCWZyYW1lX2RpZyAtMiAvLyBiOiB1aW50MjU2CgliLQoJcmV0c3ViCgoqYWJpX3JvdXRlX2NyZWF0ZUFwcGxpY2F0aW9uOgoJaW50YyAxIC8vIDEKCXJldHVybgoKKmNyZWF0ZV9Ob09wOgoJcHVzaGJ5dGVzIDB4Yjg0NDdiMzYgLy8gbWV0aG9kICJjcmVhdGVBcHBsaWNhdGlvbigpdm9pZCIKCXR4bmEgQXBwbGljYXRpb25BcmdzIDAKCW1hdGNoICphYmlfcm91dGVfY3JlYXRlQXBwbGljYXRpb24KCgkvLyB0aGlzIGNvbnRyYWN0IGRvZXMgbm90IGltcGxlbWVudCB0aGUgZ2l2ZW4gQUJJIG1ldGhvZCBmb3IgY3JlYXRlIE5vT3AKCWVycgoKKmNhbGxfTm9PcDoKCXB1c2hieXRlcyAweDlmYWI4NjEwIC8vIG1ldGhvZCAiaW5jcih1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweDJlMGM1YTQ3IC8vIG1ldGhvZCAiZGVjcih1aW50NjQpdm9pZCIKCXB1c2hieXRlcyAweGFjOTc2ZTAyIC8vIG1ldGhvZCAiYWRkKHVpbnQyNTYsdWludDI1Nil1aW50MjU2IgoJcHVzaGJ5dGVzIDB4MDkxYjMyYTcgLy8gbWV0aG9kICJzdWIodWludDI1Nix1aW50MjU2KXVpbnQyNTYiCgl0eG5hIEFwcGxpY2F0aW9uQXJncyAwCgltYXRjaCAqYWJpX3JvdXRlX2luY3IgKmFiaV9yb3V0ZV9kZWNyICphYmlfcm91dGVfYWRkICphYmlfcm91dGVfc3ViCgoJLy8gdGhpcyBjb250cmFjdCBkb2VzIG5vdCBpbXBsZW1lbnQgdGhlIGdpdmVuIEFCSSBtZXRob2QgZm9yIGNhbGwgTm9PcAoJZXJy",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCgovLyBleGFtcGxlcy9zaW1wbGUvc2ltcGxlLmFsZ28udHM6MjcKLy8gdGhpcy5pbmNyZW1lbnRDb3VudGVyKDEpCmludGNibG9jayAxCmJ5dGVjYmxvY2sgMHg2MzZmNzU2ZTc0NjU3MgppbnRjIDAgLy8gMQpjYWxsc3ViIGluY3JlbWVudENvdW50ZXIKaW50YyAwIC8vIDEKcmV0dXJuCgovLyBpbmNyZW1lbnRDb3VudGVyKGk6IHVpbnQ2NCk6IHZvaWQKaW5jcmVtZW50Q291bnRlcjoKCXByb3RvIDEgMAoKCS8vIGV4YW1wbGVzL3NpbXBsZS9zaW1wbGUuYWxnby50czo3CgkvLyB0aGlzLmNvdW50ZXIudmFsdWUgPSB0aGlzLmNvdW50ZXIudmFsdWUgKyBpCglieXRlYyAwIC8vICAiY291bnRlciIKCWR1cAoJYXBwX2dsb2JhbF9nZXQKCWZyYW1lX2RpZyAtMSAvLyBpOiB1aW50NjQKCSsKCWFwcF9nbG9iYWxfcHV0CglyZXRzdWI=",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples ContactsApp Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 2 32
bytecblock 0x 0x0004

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
pushint 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// setMyContact(string,string)void
*abi_route_setMyContact:
	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute setMyContact(string,string)void
	callsub setMyContact
	intc 0 // 1
	return

// setMyContact(name: string, company: string): void
setMyContact:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/tuple_in_box/app.algo.ts:12
	// contact: Contact = { name: name, company: company }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // company: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:14
	// this.myContact.value = contact
	pushbytes 0x6d79436f6e74616374 // "myContact"
	frame_dig 0 // contact: Contact
	app_global_put

	// examples/tuple_in_box/app.algo.ts:15
	// this.contacts(this.txn.sender).value = contact
	txn Sender
	dup
	box_del
	pop
	frame_dig 0 // contact: Contact
	box_put
	retsub

// addContact(string,string,address)void
*abi_route_addContact:
	// address: address
	txna ApplicationArgs 3
	dup
	len
	intc 3 // 32
	==

	// argument 0 (address) for addContact must be a address
	assert

	// company: string
	txna ApplicationArgs 2
	extract 2 0

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute addContact(string,string,address)void
	callsub addContact
	intc 0 // 1
	return

// addContact(name: string, company: string, address: Address): void
addContact:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/tuple_in_box/app.algo.ts:19
	// contact: Contact = { name: name, company: company }
	bytec 0 //  initial head
	bytec 0 //  initial tail
	bytec 1 //  initial head offset
	frame_dig -1 // name: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	frame_dig -2 // company: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	callsub *process_dynamic_tuple_element
	pop // pop head offset
	concat // concat head and tail
	frame_bury 0 // contact: Contact

	// examples/tuple_in_box/app.algo.ts:20
	// this.contacts(address).value = contact
	frame_dig -3 // address: Address
	dup
	box_del
	pop
	frame_dig 0 // contact: Contact
	box_put
	retsub

// updateContactField(string,string,address)void
*abi_route_updateContactField:
	// address: address
	txna ApplicationArgs 3
	dup
	len
	intc 3 // 32
	==

	// argument 0 (address) for updateContactField must be a address
	assert

	// value: string
	txna ApplicationArgs 2
	extract 2 0

	// field: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateContactField(string,string,address)void
	callsub updateContactField
	intc 0 // 1
	return

// updateContactField(field: string, value: string, address: Address): void
updateContactField:
	proto 3 0

	// *if0_condition
	// examples/tuple_in_box/app.algo.ts:24
	// field === 'name'
	frame_dig -1 // field: string
	pushbytes 0x6e616d65 // "name"
	==
	bz *if0_elseif1_condition

	// *if0_consequent
	// examples/tuple_in_box/app.algo.ts:25
	// this.contacts(address).value.name = value
	frame_dig -3 // address: Address
	box_get

	// box value does not exist: this.contacts(address).value
	assert
	store 255 // full array
	intc 1 // 0
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 1 // 0
	load 254 // element start
	substring3
	frame_dig -2 // value: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 250 // length difference
	load 251 // element head offset
	intc 2 // 2
	+ // head ofset
	callsub *update_dynamic_head
	load 255 // full array
	frame_dig -3 // address: Address
	dup
	box_del
	pop
	swap
	box_put
	b *if0_end

*if0_elseif1_condition:
	// examples/tuple_in_box/app.algo.ts:26
	// field === 'company'
	frame_dig -1 // field: string
	pushbytes 0x636f6d70616e79 // "company"
	==
	bz *if0_else

	// *if0_elseif1_consequent
	// examples/tuple_in_box/app.algo.ts:27
	// this.contacts(address).value.company = value
	frame_dig -3 // address: Address
	box_get

	// box value does not exist: this.contacts(address).value
	assert
	store 255 // full array
	intc 2 // 2
	dup
	store 251 // element head offset
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup
	store 254 // element start
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	store 253 // element length
	load 255 // full array
	intc 1 // 0
	load 254 // element start
	substring3
	frame_dig -2 // value: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	dup
	store 252 // new element
	load 255 // full array
	load 254 // element start
	load 253 // element length
	+ // get end of Element
	load 255 // full array
	len
	substring3
	concat
	concat
	store 255 // full array
	callsub *get_length_difference
	load 255 // full array
	frame_dig -3 // address: Address
	dup
	box_del
	pop
	swap
	box_put
	b *if0_end

*if0_else:
	// Invalid field
	err

*if0_end:
	retsub

// verifyContactName(string,address)void
*abi_route_verifyContactName:
	// address: address
	txna ApplicationArgs 2
	dup
	len
	intc 3 // 32
	==

	// argument 0 (address) for verifyContactName must be a address
	assert

	// name: string
	txna ApplicationArgs 1
	extract 2 0

	// execute verifyContactName(string,address)void
	callsub verifyContactName
	intc 0 // 1
	return

// verifyContactName(name: string, address: Address): void
verifyContactName:
	proto 2 0

	// examples/tuple_in_box/app.algo.ts:32
	// assert(this.contacts(address).value.name === name)
	frame_dig -2 // address: Address
	box_get

	// box value does not exist: this.contacts(address).value
	assert
	store 255 // full array
	intc 1 // 0
	load 255 // full array
	load 255 // full array
	uncover 2
	extract_uint16
	dup // duplicate start of element
	load 255 // full array
	swap
	extract_uint16 // get number of elements
	intc 0 //  get type length
	* // multiply by type length
	intc 2 // 2
	+ // add two for length
	extract3
	extract 2 0
	frame_dig -1 // name: string
	==
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x92ccf99b // method "setMyContact(string,string)void"
	pushbytes 0x495acbf7 // method "addContact(string,string,address)void"
	pushbytes 0xfa4e8f93 // method "updateContactField(string,string,address)void"
	pushbytes 0x8a30b87e // method "verifyContactName(string,address)void"
	txna ApplicationArgs 0
	match *abi_route_setMyContact *abi_route_addContact *abi_route_updateContactField *abi_route_verifyContactName

	// this contract does not implement the given ABI method for call NoOp
	err

*process_dynamic_tuple_element:
	proto 4 3
	frame_dig -4 // tuple head
	frame_dig -2 // head offset
	concat
	frame_bury -4 // tuple head
	frame_dig -1 // element
	dup
	len
	frame_dig -2 // head offset
	btoi
	+
	itob
	extract 6 2
	frame_bury -2 // head offset
	frame_dig -3 // tuple tail
	swap
	concat
	frame_bury -3 // tuple tail
	frame_dig -4 // tuple head
	frame_dig -3 // tuple tail
	frame_dig -2 // head offset
	retsub

*update_dynamic_head:
	proto 2 0
	frame_dig -2 // length difference
	load 255 // full array
	frame_dig -1 // dynamic array offset
	extract_uint16 // extract dynamic array offset
	load 249 // subtract head difference
	bz *subtract_head_difference
	+ // add difference to offset
	b *end_calc_new_head

*subtract_head_difference:
	swap
	- // subtract difference from offet

*end_calc_new_head:
	itob // convert to bytes
	extract 6 2 // convert to uint16
	load 255 // full array
	swap
	frame_dig -1 // offset
	swap
	replace3 // update offset
	store 255 // full array
	retsub

*get_length_difference:
	load 252 // new element
	len // length of new element
	load 253 // element length
	<
	bnz *swapped_difference
	load 252 // new element
	len // length of new element
	load 253 // element length
	intc 0 // 1
	store 249 // subtract head difference
	b *get_difference

*swapped_difference:
	load 253 // element length
	load 252 // new element
	len // length of new element
	intc 1 // 0
	store 249 // subtract head difference

*get_difference:
	- // get length difference
	store 250 // length difference
	retsub"
`;

exports[`Examples ContactsApp Artifacts Maintains program size 1`] = `635`;

exports[`Examples ContactsApp Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "name",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "company",
          "type": "string",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "setMyContact",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "name",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "company",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "address",
          "type": "address",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "addContact",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "field",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "value",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "address",
          "type": "address",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "updateContactField",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "name",
          "type": "string",
        },
        {
          "desc": undefined,
          "name": "address",
          "type": "address",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "verifyContactName",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "ContactsApp",
}
`;

exports[`Examples ContactsApp Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "name",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "company",
            "type": "string",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "setMyContact",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "name",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "company",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "address",
            "type": "address",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "addContact",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "field",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "value",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "address",
            "type": "address",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "updateContactField",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "name",
            "type": "string",
          },
          {
            "desc": undefined,
            "name": "address",
            "type": "address",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "verifyContactName",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "ContactsApp",
  },
  "hints": {
    "addContact(string,string,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "setMyContact(string,string)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "updateContactField(string,string,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyContactName(string,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "myContact": {
          "key": "myContact",
          "type": "bytes",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples ValidatorRegistry Artifacts Generates TEAL 1`] = `
"#pragma version 11
intcblock 0 1 8 24 18 268 32 6 3 242 2 10 252 260 700 4 100000 900 16 200 40 72 192 244 1000000 4096 5 226 TMPL_nfdRegistryAppId 300 432 892 1000 28500 50000 11 80 145 153 209
bytecblock 0x76 0x 0x151f7c75 0x737073 0x7374616b6564 0x00 0x6e756d5374616b657273 0x0000000000000000 0x0a8101 0x706f6f6c54656d706c617465417070726f76616c4279746573 0x692e6f776e65722e61 0x6e756d56 0x696e6974 0x63f3f28b 0x12f4bd4b

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 7 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication()void
*abi_route_createApplication:
	// execute createApplication()void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(): void
createApplication:
	proto 0 0

	// examples/reti/validatorRegistry.algo.ts:82
	// this.stakingPoolInitialized.value = false
	bytec 12 //  "init"
	intc 0 // 0
	bytec 5 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put

	// examples/reti/validatorRegistry.algo.ts:83
	// this.numValidators.value = 0
	bytec 11 //  "numV"
	intc 0 // 0
	app_global_put

	// examples/reti/validatorRegistry.algo.ts:84
	// this.numStakers.value = 0
	bytec 6 //  "numStakers"
	intc 0 // 0
	app_global_put

	// examples/reti/validatorRegistry.algo.ts:85
	// this.totalAlgoStaked.value = 0
	bytec 4 //  "staked"
	intc 0 // 0
	app_global_put
	retsub

// initStakingContract(uint64)void
*abi_route_initStakingContract:
	// approvalProgramSize: uint64
	txna ApplicationArgs 1
	btoi

	// execute initStakingContract(uint64)void
	callsub initStakingContract
	intc 1 // 1
	return

// initStakingContract(approvalProgramSize: uint64): void
initStakingContract:
	proto 1 0

	// examples/reti/validatorRegistry.algo.ts:90
	// this.stakingPoolApprovalProgram.create(approvalProgramSize)
	bytec 9 //  "poolTemplateApprovalBytes"
	frame_dig -1 // approvalProgramSize: uint64
	box_create
	pop
	retsub

// loadStakingContractData(uint64,byte[])void
*abi_route_loadStakingContractData:
	// data: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// offset: uint64
	txna ApplicationArgs 1
	btoi

	// execute loadStakingContractData(uint64,byte[])void
	callsub loadStakingContractData
	intc 1 // 1
	return

// loadStakingContractData(offset: uint64, data: bytes): void
loadStakingContractData:
	proto 2 0

	// examples/reti/validatorRegistry.algo.ts:94
	// assert(!this.stakingPoolInitialized.value)
	bytec 12 //  "init"
	app_global_get
	intc 0 // 0
	getbit
	!
	assert

	// examples/reti/validatorRegistry.algo.ts:95
	// this.stakingPoolApprovalProgram.replace(offset, data)
	bytec 9 //  "poolTemplateApprovalBytes"
	frame_dig -1 // offset: uint64
	frame_dig -2 // data: bytes
	box_replace
	retsub

// finalizeStakingContract()void
*abi_route_finalizeStakingContract:
	// execute finalizeStakingContract()void
	callsub finalizeStakingContract
	intc 1 // 1
	return

// finalizeStakingContract(): void
finalizeStakingContract:
	proto 0 0

	// examples/reti/validatorRegistry.algo.ts:99
	// this.stakingPoolInitialized.value = true
	bytec 12 //  "init"
	intc 1 // 1
	bytec 5 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	intc 1 // 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// getMbrAmounts()(uint64,uint64,uint64,uint64)
*abi_route_getMbrAmounts:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getMbrAmounts()(uint64,uint64,uint64,uint64)
	callsub getMbrAmounts
	concat
	log
	intc 1 // 1
	return

// getMbrAmounts(): MbrAmounts
//
// Returns the MBR amounts needed for various actions:
// [
// addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
// addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
// poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
// addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
// ]
getMbrAmounts:
	proto 0 1

	// examples/reti/validatorRegistry.algo.ts:120
	// return {
	//       addValidatorMbr: this.costForBoxStorage(1 /* v prefix */ + len<ValidatorIdType>() + len<ValidatorInfo>()),
	//       addPoolMbr: this.minBalanceForAccount(
	//         1,
	//         // we could calculate this directly by referencing the size of stakingPoolApprovalProgram but it would
	//         // mean our callers would have to reference the box AND buy up i/o - so just go max on extra pages
	//         3,
	//         0,
	//         0,
	//         0,
	//         StakingPool.schema.global.numUint,
	//         StakingPool.schema.global.numByteSlice
	//       ),
	//       poolInitMbr:
	//         ALGORAND_ACCOUNT_MIN_BALANCE +
	//         this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL),
	//       addStakerMbr:
	//         // how much to charge for first time a staker adds stake - since we add a tracking box per staker
	//         this.costForBoxStorage(3 /* 'sps' prefix */ + len<Address>() + len<ValidatorPoolKey>() * MAX_POOLS_PER_STAKER), // size of key + all values
	//     };
	pushint 1101
	callsub costForBoxStorage
	itob
	intc 8 // 3
	intc 35 // 11
	intc 0 // 0
	dupn 2
	intc 8 // 3
	intc 1 // 1
	callsub minBalanceForAccount
	itob
	concat
	intc 16 // 100000
	pushint 12807
	callsub costForBoxStorage
	+
	itob
	concat
	pushint 179
	callsub costForBoxStorage
	itob
	concat
	retsub

// getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
*abi_route_getProtocolConstraints:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)
	callsub getProtocolConstraints
	concat
	log
	intc 1 // 1
	return

// getProtocolConstraints(): Constraints
//
// Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.
getProtocolConstraints:
	proto 0 1

	// examples/reti/validatorRegistry.algo.ts:147
	// return {
	//       epochPayoutRoundsMin: MIN_EPOCH_LENGTH,
	//       epochPayoutRoundsMax: MAX_EPOCH_LENGTH,
	//       minPctToValidatorWFourDecimals: MIN_PCT_TO_VALIDATOR,
	//       maxPctToValidatorWFourDecimals: MAX_PCT_TO_VALIDATOR,
	//       minEntryStake: MIN_ALGO_STAKE_PER_POOL,
	//       maxAlgoPerPool: this.maxAlgoAllowedPerPool(),
	//       maxAlgoPerValidator: this.maxAllowedStake(),
	//       amtConsideredSaturated: this.algoSaturationLevel(),
	//       maxNodes: MAX_NODES,
	//       maxPoolsPerNode: MAX_POOLS_PER_NODE,
	//       maxStakersPerPool: MAX_STAKERS_PER_POOL,
	//     };
	pushbytes 0x000000000000000100000000000f4240000000000000000000000000000f424000000000000f4240
	callsub maxAlgoAllowedPerPool
	itob
	concat
	callsub maxAllowedStake
	itob
	concat
	callsub algoSaturationLevel
	itob
	concat
	pushbytes 0x0000000000000008
	concat
	pushbytes 0x0000000000000003
	concat
	pushbytes 0x00000000000000c8
	concat
	retsub

// getNumValidators()uint64
*abi_route_getNumValidators:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getNumValidators()uint64
	callsub getNumValidators
	itob
	concat
	log
	intc 1 // 1
	return

// getNumValidators(): uint64
//
// Returns the current number of validators
getNumValidators:
	proto 0 1

	// examples/reti/validatorRegistry.algo.ts:167
	// return this.numValidators.value;
	bytec 11 //  "numV"
	app_global_get
	retsub

// getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
*abi_route_getValidatorConfig:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	callsub getValidatorConfig
	concat
	log
	intc 1 // 1
	return

// getValidatorConfig(validatorId: ValidatorIdType): ValidatorConfig
getValidatorConfig:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:172
	// return this.validatorList(validatorId).value.config;
	intc 0 // 0
	intc 9 // 242
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	retsub

// getValidatorState(uint64)(uint16,uint64,uint64,uint64)
*abi_route_getValidatorState:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorState(uint64)(uint16,uint64,uint64,uint64)
	callsub getValidatorState
	concat
	log
	intc 1 // 1
	return

// getValidatorState(validatorId: ValidatorIdType): ValidatorCurState
getValidatorState:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:177
	// return this.validatorList(validatorId).value.state;
	intc 9 //  headOffset
	pushint 26
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	retsub

// getValidatorOwnerAndManager(uint64)(address,address)
*abi_route_getValidatorOwnerAndManager:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getValidatorOwnerAndManager(uint64)(address,address)
	callsub getValidatorOwnerAndManager
	concat
	log
	intc 1 // 1
	return

// getValidatorOwnerAndManager(validatorId: ValidatorIdType): [Address, Address]
getValidatorOwnerAndManager:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:182
	// return [this.validatorList(validatorId).value.config.owner, this.validatorList(validatorId).value.config.manager];
	intc 2 // 8
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	intc 20 // 40
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	concat
	retsub

// getPools(uint64)(uint64,uint16,uint64)[]
*abi_route_getPools:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getPools(uint64)(uint64,uint16,uint64)[]
	callsub getPools
	dup
	len
	intc 4 // 18
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 1 // 1
	return

// getPools(validatorId: ValidatorIdType): PoolInfo[]
//
// Return list of all pools for this validator.
// @param {uint64} validatorId
// @return {PoolInfo[]} - array of pools
// Not callable from other contracts because >1K return but can be called w/ simulate which bumps log returns
getPools:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:193
	// retData: PoolInfo[] = []
	bytec 1 // 0x
	frame_bury 0 // retData: PoolInfo[]

	// examples/reti/validatorRegistry.algo.ts:194
	// poolSet = clone(this.validatorList(validatorId).value.pools)
	intc 5 //  headOffset
	intc 30 // 432
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_bury 1 // poolSet: (uint64,uint16,uint64)[24]

	// examples/reti/validatorRegistry.algo.ts:195
	// for (let i = 0; i < poolSet.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_0:
	// examples/reti/validatorRegistry.algo.ts:195
	// i < poolSet.length
	frame_dig 2 // i: uint64
	intc 3 // 24
	<
	bz *for_0_end

	// *if0_condition
	// examples/reti/validatorRegistry.algo.ts:196
	// poolSet[i].poolAppId === 0
	frame_dig 1 // poolSet: (uint64,uint16,uint64)[24]
	frame_dig 2 // i: uint64
	intc 4 // 18
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	==
	bz *if0_end

	// *if0_consequent
	b *for_0_end

*if0_end:
	// examples/reti/validatorRegistry.algo.ts:200
	// retData.push(poolSet[i])
	frame_dig 0 // retData: PoolInfo[]
	frame_dig 1 // poolSet: (uint64,uint16,uint64)[24]
	frame_dig 2 // i: uint64
	intc 4 // 18
	* // acc * typeLength
	intc 4 // 18
	extract3
	concat
	frame_bury 0 // retData: PoolInfo[]

*for_0_continue:
	// examples/reti/validatorRegistry.algo.ts:195
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_0

*for_0_end:
	// examples/reti/validatorRegistry.algo.ts:202
	// return retData;
	frame_dig 0 // retData: PoolInfo[]

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getPoolAppId(uint64,uint64)uint64
*abi_route_getPoolAppId:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// poolId: uint64
	txna ApplicationArgs 2
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getPoolAppId(uint64,uint64)uint64
	callsub getPoolAppId
	itob
	concat
	log
	intc 1 // 1
	return

// getPoolAppId(validatorId: uint64, poolId: uint64): uint64
//
// getPoolAppId is useful for callers to determine app to call for removing stake if they don't have staking or
// want to get staker list for an account.  The staking pool also uses it to get the app id of staking pool 1
// (which contains reward tokens if being used) so that the amount available can be determined.
getPoolAppId:
	proto 2 1

	// examples/reti/validatorRegistry.algo.ts:212
	// assert(
	//       poolId !== 0 && poolId <= this.validatorList(validatorId).value.pools.length,
	//       'pool id must be between 1 and number of pools for this validator'
	//     )
	frame_dig -2 // poolId: uint64
	intc 0 // 0
	!=
	dup
	bz *skip_and0
	frame_dig -2 // poolId: uint64
	intc 3 // 24
	<=
	&&

*skip_and0:
	// pool id must be between 1 and number of pools for this validator
	assert

	// examples/reti/validatorRegistry.algo.ts:216
	// return this.validatorList(validatorId).value.pools[poolId - 1].poolAppId;
	intc 5 //  headOffset
	frame_dig -2 // poolId: uint64
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 0 // 0
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: uint64
	itob
	concat
	cover 2
	box_extract
	btoi
	retsub

// getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)
*abi_route_getPoolInfo:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 24
	==

	// argument 0 (poolKey) for getPoolInfo must be a (uint64,uint64,uint64)
	assert

	// execute getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)
	callsub getPoolInfo
	concat
	log
	intc 1 // 1
	return

// getPoolInfo(poolKey: ValidatorPoolKey): PoolInfo
getPoolInfo:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:221
	// return this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1];
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 4 // 18
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	retsub

// getCurMaxStakePerPool(uint64)uint64
*abi_route_getCurMaxStakePerPool:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getCurMaxStakePerPool(uint64)uint64
	callsub getCurMaxStakePerPool
	itob
	concat
	log
	intc 1 // 1
	return

// getCurMaxStakePerPool(validatorId: ValidatorIdType): uint64
//
// Calculate the maximum stake per pool for a given validator.
// Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
// as pools are added the max allowed per pool can reduce.
//
// @param {ValidatorIdType} validatorId - The id of the validator.
getCurMaxStakePerPool:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:233
	// numPools = this.validatorList(validatorId).value.state.numPools as uint64
	intc 9 // 242
	intc 10 // 2
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // numPools: uint64

	// examples/reti/validatorRegistry.algo.ts:234
	// hardMaxDividedBetweenPools = this.maxAllowedStake() / numPools
	callsub maxAllowedStake
	frame_dig 0 // numPools: uint64
	/
	frame_bury 1 // hardMaxDividedBetweenPools: uint64

	// examples/reti/validatorRegistry.algo.ts:235
	// maxPerPool: uint64 = this.validatorList(validatorId).value.config.maxAlgoPerPool
	pushint 217
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // maxPerPool: uint64

	// *if1_condition
	// examples/reti/validatorRegistry.algo.ts:236
	// maxPerPool === 0
	frame_dig 2 // maxPerPool: uint64
	intc 0 // 0
	==
	bz *if1_end

	// *if1_consequent
	// examples/reti/validatorRegistry.algo.ts:237
	// maxPerPool = this.maxAlgoAllowedPerPool()
	callsub maxAlgoAllowedPerPool
	frame_bury 2 // maxPerPool: uint64

*if1_end:
	// *if2_condition
	// examples/reti/validatorRegistry.algo.ts:239
	// hardMaxDividedBetweenPools < maxPerPool
	frame_dig 1 // hardMaxDividedBetweenPools: uint64
	frame_dig 2 // maxPerPool: uint64
	<
	bz *if2_end

	// *if2_consequent
	// examples/reti/validatorRegistry.algo.ts:240
	// maxPerPool = hardMaxDividedBetweenPools
	frame_dig 1 // hardMaxDividedBetweenPools: uint64
	frame_bury 2 // maxPerPool: uint64

*if2_end:
	// examples/reti/validatorRegistry.algo.ts:242
	// return maxPerPool;
	frame_dig 2 // maxPerPool: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// doesStakerNeedToPayMBR(address)bool
*abi_route_doesStakerNeedToPayMBR:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (staker) for doesStakerNeedToPayMBR must be a address
	assert

	// execute doesStakerNeedToPayMBR(address)bool
	callsub doesStakerNeedToPayMBR
	bytec 5 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	concat
	log
	intc 1 // 1
	return

// doesStakerNeedToPayMBR(staker: Address): boolean
//
// Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount
// @param staker
doesStakerNeedToPayMBR:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:251
	// return !this.stakerPoolSet(staker).exists;
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	!
	retsub

// getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]
*abi_route_getStakedPoolsForAccount:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	intc 6 // 32
	==

	// argument 0 (staker) for getStakedPoolsForAccount must be a address
	assert

	// execute getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]
	callsub getStakedPoolsForAccount
	dup
	len
	intc 3 // 24
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 1 // 1
	return

// getStakedPoolsForAccount(staker: Address): ValidatorPoolKey[]
//
// Retrieves the staked pools for an account.
//
// @param {Address} staker - The account to retrieve staked pools for.
// @return {ValidatorPoolKey[]} - The array of staked pools for the account.
getStakedPoolsForAccount:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// *if3_condition
	// examples/reti/validatorRegistry.algo.ts:262
	// !this.stakerPoolSet(staker).exists
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	!
	bz *if3_end

	// *if3_consequent
	// examples/reti/validatorRegistry.algo.ts:263
	// return [];
	bytec 1 // 0x
	b *getStakedPoolsForAccount*return

*if3_end:
	// examples/reti/validatorRegistry.algo.ts:265
	// retData: ValidatorPoolKey[] = []
	bytec 1 // 0x
	frame_bury 0 // retData: ValidatorPoolKey[]

	// examples/reti/validatorRegistry.algo.ts:266
	// poolSet = clone(this.stakerPoolSet(staker).value)
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	box_get

	// box value does not exist: this.stakerPoolSet(staker).value
	assert
	frame_bury 1 // poolSet: (uint64,uint64,uint64)[6]

	// examples/reti/validatorRegistry.algo.ts:267
	// for (let i = 0; i < poolSet.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_1:
	// examples/reti/validatorRegistry.algo.ts:267
	// i < poolSet.length
	frame_dig 2 // i: uint64
	intc 7 // 6
	<
	bz *for_1_end

	// *if4_condition
	// examples/reti/validatorRegistry.algo.ts:268
	// poolSet[i].id !== 0
	frame_dig 1 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	!=
	bz *if4_end

	// *if4_consequent
	// examples/reti/validatorRegistry.algo.ts:269
	// retData.push(poolSet[i])
	frame_dig 0 // retData: ValidatorPoolKey[]
	frame_dig 1 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 3 // 24
	extract3
	concat
	frame_bury 0 // retData: ValidatorPoolKey[]

*if4_end:

*for_1_continue:
	// examples/reti/validatorRegistry.algo.ts:267
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_1

*for_1_end:
	// examples/reti/validatorRegistry.algo.ts:272
	// return retData;
	frame_dig 0 // retData: ValidatorPoolKey[]

*getStakedPoolsForAccount*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// getTokenPayoutRatio(uint64)(uint64[24],uint64)
*abi_route_getTokenPayoutRatio:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getTokenPayoutRatio(uint64)(uint64[24],uint64)
	callsub getTokenPayoutRatio
	concat
	log
	intc 1 // 1
	return

// getTokenPayoutRatio(validatorId: ValidatorIdType): PoolTokenPayoutRatio
//
// Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
// payouts across pools can be based on a stable snaphost of stake.
//
// @param {ValidatorIdType} validatorId - The id of the validator.
// @return {PoolTokenPayoutRatio} - The token payout ratio for the validator.
getTokenPayoutRatio:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:284
	// return this.validatorList(validatorId).value.tokenPayoutRatio;
	intc 14 //  headOffset
	intc 19 // 200
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	retsub

// getNodePoolAssignments(uint64)((uint64[3])[8])
*abi_route_getNodePoolAssignments:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute getNodePoolAssignments(uint64)((uint64[3])[8])
	callsub getNodePoolAssignments
	concat
	log
	intc 1 // 1
	return

// getNodePoolAssignments(validatorId: uint64): NodePoolAssignmentConfig
getNodePoolAssignments:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:289
	// assert(this.validatorList(validatorId).exists, "the specified validator id doesn't exist")
	bytec 0 //  "v"
	frame_dig -1 // validatorId: uint64
	itob
	concat
	box_len
	swap
	pop

	// the specified validator id doesn't exist
	assert

	// examples/reti/validatorRegistry.algo.ts:291
	// return this.validatorList(validatorId).value.nodePoolAssignments;
	intc 17 //  headOffset
	intc 22 // 192
	bytec 0 //  "v"
	frame_dig -1 // validatorId: uint64
	itob
	concat
	cover 2
	box_extract
	retsub

// getNFDRegistryID()uint64
*abi_route_getNFDRegistryID:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute getNFDRegistryID()uint64
	callsub getNFDRegistryID
	itob
	concat
	log
	intc 1 // 1
	return

// getNFDRegistryID(): uint64
getNFDRegistryID:
	proto 0 1

	// examples/reti/validatorRegistry.algo.ts:296
	// return this.nfdRegistryAppId;
	intc 28 // TMPL_nfdRegistryAppId
	retsub

// addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64
*abi_route_addValidator:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// config: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	txna ApplicationArgs 2
	dup
	len
	intc 9 // 242
	==

	// argument 0 (config) for addValidator must be a (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	assert

	// nfdName: string
	txna ApplicationArgs 1
	extract 2 0

	// mbrPayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 2 (mbrPayment) for addValidator must be a pay transaction
	assert

	// execute addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64
	callsub addValidator
	itob
	concat
	log
	intc 1 // 1
	return

// addValidator(mbrPayment: PayTxn, nfdName: string, config: ValidatorConfig): uint64
//
// Adds a new validator
// Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds.
//
// @param {PayTxn} mbrPayment payment from caller which covers mbr increase of new validator storage
// @param {string} nfdName (Optional) Name of nfd (used as double-check against id specified in config)
// @param {ValidatorConfig} config ValidatorConfig struct
// @returns {uint64} validator id
addValidator:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// examples/reti/validatorRegistry.algo.ts:308
	// this.validateConfig(config)
	frame_dig -3 // config: ValidatorConfig
	callsub validateConfig

	// examples/reti/validatorRegistry.algo.ts:310
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: this.getMbrAmounts().addValidatorMbr })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	callsub getMbrAmounts
	extract 0 8
	btoi
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"this.getMbrAmounts().addValidatorMbr"}
	assert

	// examples/reti/validatorRegistry.algo.ts:312
	// assert(mbrPayment.fee > 10 * 1000000, 'fee must be 10 ALGO or more to prevent spamming of validators')
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Fee
	pushint 10000000
	>

	// fee must be 10 ALGO or more to prevent spamming of validators
	assert

	// examples/reti/validatorRegistry.algo.ts:315
	// validatorId = this.numValidators.value + 1
	bytec 11 //  "numV"
	app_global_get
	intc 1 // 1
	+
	frame_bury 0 // validatorId: uint64

	// examples/reti/validatorRegistry.algo.ts:316
	// this.numValidators.value = validatorId
	bytec 11 //  "numV"
	frame_dig 0 // validatorId: uint64
	app_global_put

	// examples/reti/validatorRegistry.algo.ts:318
	// this.validatorList(validatorId).create()
	bytec 0 //  "v"
	frame_dig 0 // validatorId: uint64
	itob
	concat
	pushint 1092
	box_create
	pop

	// examples/reti/validatorRegistry.algo.ts:319
	// this.validatorList(validatorId).value.config = config
	intc 0 // 0
	frame_dig -3 // config: ValidatorConfig
	bytec 0 //  "v"
	frame_dig 0 // validatorId: uint64
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:320
	// this.validatorList(validatorId).value.config.id = validatorId
	intc 0 // 0
	frame_dig 0 // validatorId: uint64
	itob
	bytec 0 //  "v"
	frame_dig 0 // validatorId: uint64
	itob
	concat
	cover 2
	box_replace

	// *if5_condition
	// examples/reti/validatorRegistry.algo.ts:323
	// config.nfdForInfo !== 0
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	intc 0 // 0
	!=
	bz *if5_end

	// *if5_consequent
	// examples/reti/validatorRegistry.algo.ts:325
	// assert(this.isNFDAppIDValid(config.nfdForInfo), 'provided NFD must be valid')
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	callsub isNFDAppIDValid

	// provided NFD must be valid
	assert

	// examples/reti/validatorRegistry.algo.ts:327
	// assert(
	//         this.txn.sender === (AppID.fromUint64(config.nfdForInfo).globalState('i.owner.a') as Address),
	//         'If specifying NFD, account adding validator must be owner'
	//       )
	txn Sender
	frame_dig -3 // config: ValidatorConfig
	extract 72 8
	btoi
	bytec 10 //  "i.owner.a"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(config.nfdForInfo).globalState('i.owner.a')
	assert
	==

	// If specifying NFD, account adding validator must be owner
	assert

*if5_end:
	// *if6_condition
	// examples/reti/validatorRegistry.algo.ts:333
	// config.entryGatingType === GATING_TYPE_CREATED_BY_NFD_ADDRESSES ||
	//       config.entryGatingType === GATING_TYPE_SEGMENT_OF_NFD
	frame_dig -3 // config: ValidatorConfig
	extract 80 1
	btoi
	intc 8 // 3
	==
	dup
	bnz *skip_or0
	frame_dig -3 // config: ValidatorConfig
	extract 80 1
	btoi
	intc 15 // 4
	==
	||

*skip_or0:
	bz *if6_end

	// *if6_consequent
	// examples/reti/validatorRegistry.algo.ts:337
	// assert(this.isNFDAppIDValid(config.entryGatingAssets[0]), 'provided NFD App id for gating must be valid NFD')
	frame_dig -3 // config: ValidatorConfig
	extract 113 8
	btoi
	callsub isNFDAppIDValid

	// provided NFD App id for gating must be valid NFD
	assert

*if6_end:
	// examples/reti/validatorRegistry.algo.ts:339
	// this.retiOP_addedValidator.log({ id: validatorId, owner: config.owner, manager: config.manager })
	pushbytes 0xa8dd21cb // retiOP_addedValidator(uint64,address,address)
	frame_dig 0 // validatorId: uint64
	itob
	frame_dig -3 // config: ValidatorConfig
	extract 8 32
	concat
	frame_dig -3 // config: ValidatorConfig
	extract 40 32
	concat
	concat
	log

	// examples/reti/validatorRegistry.algo.ts:340
	// return validatorId;
	frame_dig 0 // validatorId: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// changeValidatorManager(uint64,address)void
*abi_route_changeValidatorManager:
	// manager: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (manager) for changeValidatorManager must be a address
	assert

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorManager(uint64,address)void
	callsub changeValidatorManager
	intc 1 // 1
	return

// changeValidatorManager(validatorId: ValidatorIdType, manager: Address): void
//
// Changes the Validator manager for a specific Validator id.
// [ ONLY OWNER CAN CHANGE ]
//
// @param {ValidatorIdType} validatorId - The id of the validator to change the manager for.
// @param {Address} manager - The new manager address.
changeValidatorManager:
	proto 2 0

	// examples/reti/validatorRegistry.algo.ts:351
	// this.callerMustBeOwner(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwner

	// examples/reti/validatorRegistry.algo.ts:352
	// assert(manager !== globals.zeroAddress, 'needs to at least be valid address')
	frame_dig -2 // manager: Address
	global ZeroAddress
	!=

	// needs to at least be valid address
	assert

	// examples/reti/validatorRegistry.algo.ts:353
	// this.validatorList(validatorId).value.config.manager = manager
	intc 20 // 40
	frame_dig -2 // manager: Address
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorSunsetInfo(uint64,uint64,uint64)void
*abi_route_changeValidatorSunsetInfo:
	// sunsettingTo: uint64
	txna ApplicationArgs 3
	btoi

	// sunsettingOn: uint64
	txna ApplicationArgs 2
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorSunsetInfo(uint64,uint64,uint64)void
	callsub changeValidatorSunsetInfo
	intc 1 // 1
	return

// changeValidatorSunsetInfo(validatorId: ValidatorIdType, sunsettingOn: uint64, sunsettingTo: ValidatorIdType): void
//
// Updates the sunset information for a given validator.
// [ ONLY OWNER CAN CHANGE ]
//
// @param {ValidatorIdType} validatorId - The id of the validator to update.
// @param {uint64} sunsettingOn - The new sunset timestamp.
// @param {uint64} sunsettingTo - The new sunset to validator id.
changeValidatorSunsetInfo:
	proto 3 0

	// examples/reti/validatorRegistry.algo.ts:365
	// this.callerMustBeOwner(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwner

	// examples/reti/validatorRegistry.algo.ts:366
	// this.validatorList(validatorId).value.config.sunsettingOn = sunsettingOn
	intc 27 // 226
	frame_dig -2 // sunsettingOn: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:367
	// this.validatorList(validatorId).value.config.sunsettingTo = sunsettingTo
	pushint 234
	frame_dig -3 // sunsettingTo: ValidatorIdType
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorNFD(uint64,uint64,string)void
*abi_route_changeValidatorNFD:
	// nfdName: string
	txna ApplicationArgs 3
	extract 2 0

	// nfdAppID: uint64
	txna ApplicationArgs 2
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorNFD(uint64,uint64,string)void
	callsub changeValidatorNFD
	intc 1 // 1
	return

// changeValidatorNFD(validatorId: ValidatorIdType, nfdAppID: uint64, nfdName: string): void
//
// Changes the NFD for a validator in the validatorList contract.
// [ ONLY OWNER CAN CHANGE ]
//
// @param {ValidatorIdType} validatorId - The id of the validator to update.
// @param {uint64} nfdAppID - The application id of the NFD to assign to the validator.
// @param {string} nfdName - The name of the NFD (which must match)
changeValidatorNFD:
	proto 3 0

	// examples/reti/validatorRegistry.algo.ts:379
	// this.callerMustBeOwner(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwner

	// examples/reti/validatorRegistry.algo.ts:381
	// assert(this.isNFDAppIDValid(nfdAppID), 'provided NFD must be valid')
	frame_dig -2 // nfdAppID: uint64
	callsub isNFDAppIDValid

	// provided NFD must be valid
	assert

	// examples/reti/validatorRegistry.algo.ts:383
	// assert(
	//       this.txn.sender === (AppID.fromUint64(nfdAppID).globalState('i.owner.a') as Address),
	//       'If specifying NFD, account adding validator must be owner'
	//     )
	txn Sender
	frame_dig -2 // nfdAppID: uint64
	bytec 10 //  "i.owner.a"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(nfdAppID).globalState('i.owner.a')
	assert
	==

	// If specifying NFD, account adding validator must be owner
	assert

	// examples/reti/validatorRegistry.algo.ts:387
	// this.validatorList(validatorId).value.config.nfdForInfo = nfdAppID
	intc 21 // 72
	frame_dig -2 // nfdAppID: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorCommissionAddress(uint64,address)void
*abi_route_changeValidatorCommissionAddress:
	// commissionAddress: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (commissionAddress) for changeValidatorCommissionAddress must be a address
	assert

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorCommissionAddress(uint64,address)void
	callsub changeValidatorCommissionAddress
	intc 1 // 1
	return

// changeValidatorCommissionAddress(validatorId: ValidatorIdType, commissionAddress: Address): void
//
// Change the commission address that validator rewards are sent to.
// [ ONLY OWNER CAN CHANGE ]
changeValidatorCommissionAddress:
	proto 2 0

	// examples/reti/validatorRegistry.algo.ts:395
	// this.callerMustBeOwner(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwner

	// examples/reti/validatorRegistry.algo.ts:396
	// assert(commissionAddress !== Address.zeroAddress)
	frame_dig -2 // commissionAddress: Address
	global ZeroAddress
	!=
	assert

	// examples/reti/validatorRegistry.algo.ts:397
	// this.validatorList(validatorId).value.config.validatorCommissionAddress = commissionAddress
	pushint 177
	frame_dig -2 // commissionAddress: Address
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace
	retsub

// changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void
*abi_route_changeValidatorRewardInfo:
	// RewardPerPayout: uint64
	txna ApplicationArgs 6
	btoi

	// GatingAssetMinBalance: uint64
	txna ApplicationArgs 5
	btoi

	// EntryGatingAssets: uint64[4]
	txna ApplicationArgs 4
	dup
	len
	intc 6 // 32
	==

	// argument 2 (EntryGatingAssets) for changeValidatorRewardInfo must be a uint64[4]
	assert

	// EntryGatingAddress: address
	txna ApplicationArgs 3
	dup
	len
	intc 6 // 32
	==

	// argument 3 (EntryGatingAddress) for changeValidatorRewardInfo must be a address
	assert

	// EntryGatingType: uint8
	txna ApplicationArgs 2
	dup
	len
	intc 1 // 1
	==

	// argument 4 (EntryGatingType) for changeValidatorRewardInfo must be a uint8
	assert
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void
	callsub changeValidatorRewardInfo
	intc 1 // 1
	return

// changeValidatorRewardInfo(validatorId: ValidatorIdType, EntryGatingType: uint8, EntryGatingAddress: Address, EntryGatingAssets: StaticArray<uint64, 4>, GatingAssetMinBalance: uint64, RewardPerPayout: uint64): void
//
// Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
// [ ONLY OWNER CAN CHANGE ]
changeValidatorRewardInfo:
	proto 6 0

	// examples/reti/validatorRegistry.algo.ts:412
	// this.callerMustBeOwner(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwner

	// examples/reti/validatorRegistry.algo.ts:414
	// assert(EntryGatingType >= GATING_TYPE_NONE && EntryGatingType < GATING_TYPE_CONST_MAX, 'invalid Entry gating type')
	frame_dig -2 // EntryGatingType: uint8
	intc 0 // 0
	>=
	dup
	bz *skip_and1
	frame_dig -2 // EntryGatingType: uint8
	intc 15 // 4
	<
	&&

*skip_and1:
	// invalid Entry gating type
	assert

	// *if7_condition
	// examples/reti/validatorRegistry.algo.ts:415
	// EntryGatingType === GATING_TYPE_ASSETS_CREATED_BY
	frame_dig -2 // EntryGatingType: uint8
	intc 1 // 1
	==
	bz *if7_end

	// *if7_consequent
	// examples/reti/validatorRegistry.algo.ts:416
	// assert(EntryGatingAddress !== globals.zeroAddress)
	frame_dig -3 // EntryGatingAddress: Address
	global ZeroAddress
	!=
	assert

*if7_end:
	// *if8_condition
	// examples/reti/validatorRegistry.algo.ts:418
	// EntryGatingType === GATING_TYPE_CREATED_BY_NFD_ADDRESSES || EntryGatingType === GATING_TYPE_SEGMENT_OF_NFD
	frame_dig -2 // EntryGatingType: uint8
	intc 8 // 3
	==
	dup
	bnz *skip_or1
	frame_dig -2 // EntryGatingType: uint8
	intc 15 // 4
	==
	||

*skip_or1:
	bz *if8_end

	// *if8_consequent
	// examples/reti/validatorRegistry.algo.ts:419
	// assert(this.isNFDAppIDValid(EntryGatingAssets[0]), 'provided NFD App id for gating must be valid NFD')
	frame_dig -4 // EntryGatingAssets: StaticArray<uint64, 4>
	extract 0 8
	btoi
	callsub isNFDAppIDValid

	// provided NFD App id for gating must be valid NFD
	assert

*if8_end:
	// examples/reti/validatorRegistry.algo.ts:421
	// this.validatorList(validatorId).value.config.entryGatingType = EntryGatingType
	intc 36 // 80
	frame_dig -2 // EntryGatingType: uint8
	itob
	extract 7 1
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:422
	// this.validatorList(validatorId).value.config.entryGatingAddress = EntryGatingAddress
	pushint 81
	frame_dig -3 // EntryGatingAddress: Address
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:423
	// this.validatorList(validatorId).value.config.entryGatingAssets = EntryGatingAssets
	pushint 113
	frame_dig -4 // EntryGatingAssets: StaticArray<uint64, 4>
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:424
	// this.validatorList(validatorId).value.config.gatingAssetMinBalance = GatingAssetMinBalance
	intc 37 // 145
	frame_dig -5 // GatingAssetMinBalance: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:425
	// this.validatorList(validatorId).value.config.rewardPerPayout = RewardPerPayout
	pushint 161
	frame_dig -6 // RewardPerPayout: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace
	retsub

// addPool(pay,uint64,uint64)(uint64,uint64,uint64)
*abi_route_addPool:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// nodeNum: uint64
	txna ApplicationArgs 2
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// mbrPayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 2 (mbrPayment) for addPool must be a pay transaction
	assert

	// execute addPool(pay,uint64,uint64)(uint64,uint64,uint64)
	callsub addPool
	concat
	log
	intc 1 // 1
	return

// addPool(mbrPayment: PayTxn, validatorId: ValidatorIdType, nodeNum: uint64): ValidatorPoolKey
//
// Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
// The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.
//
// [ ONLY OWNER OR MANAGER CAN call ]
// @param {PayTxn} mbrPayment payment from caller which covers mbr increase of adding a new pool
// @param {uint64} validatorId is id of validator to pool to (must be owner or manager)
// @param {uint64} nodeNum is node number to add to
// @returns {ValidatorPoolKey} pool key to created pool
addPool:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// examples/reti/validatorRegistry.algo.ts:440
	// this.callerMustBeOwnerOrManager(validatorId)
	frame_dig -2 // validatorId: ValidatorIdType
	callsub callerMustBeOwnerOrManager

	// examples/reti/validatorRegistry.algo.ts:443
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: this.getMbrAmounts().addPoolMbr })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	callsub getMbrAmounts
	extract 8 8
	btoi
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"this.getMbrAmounts().addPoolMbr"}
	assert

	// examples/reti/validatorRegistry.algo.ts:445
	// assert(this.validatorList(validatorId).exists, "specified validator id isn't valid")
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	box_len
	swap
	pop

	// specified validator id isn't valid
	assert

	// examples/reti/validatorRegistry.algo.ts:447
	// numPools: uint64 = this.validatorList(validatorId).value.state.numPools as uint64
	intc 9 // 242
	intc 10 // 2
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // numPools: uint64

	// *if9_condition
	// examples/reti/validatorRegistry.algo.ts:448
	// (numPools as uint64) >= MAX_POOLS
	frame_dig 0 // numPools: uint64
	intc 3 // 24
	>=
	bz *if9_end

	// *if9_consequent
	// already at max pool size
	err

*if9_end:
	// examples/reti/validatorRegistry.algo.ts:451
	// numPools += 1
	frame_dig 0 // numPools: uint64
	intc 1 // 1
	+
	frame_bury 0 // numPools: uint64

	// examples/reti/validatorRegistry.algo.ts:454
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: [
	//         this.stakingPoolApprovalProgram.extract(0, 4096),
	//         this.stakingPoolApprovalProgram.extract(4096, this.stakingPoolApprovalProgram.size - 4096),
	//       ],
	//       clearStateProgram: StakingPool.clearProgram(),
	//       globalNumUint: StakingPool.schema.global.numUint,
	//       globalNumByteSlice: StakingPool.schema.global.numByteSlice,
	//       extraProgramPages: 3,
	//       applicationArgs: [
	//         // creatingContractID, validatorId, poolId, minEntryStake
	//         method('createApplication(uint64,uint64,uint64,uint64)void'),
	//         itob(this.app.id),
	//         itob(validatorId),
	//         itob(numPools as uint64),
	//         itob(this.validatorList(validatorId).value.config.minEntryStake),
	//       ],
	//     })
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum

	// examples/reti/validatorRegistry.algo.ts:455
	// onCompletion: OnCompletion.NoOp
	intc 0 //  NoOp
	itxn_field OnCompletion

	// examples/reti/validatorRegistry.algo.ts:456
	// approvalProgram: [
	//         this.stakingPoolApprovalProgram.extract(0, 4096),
	//         this.stakingPoolApprovalProgram.extract(4096, this.stakingPoolApprovalProgram.size - 4096),
	//       ]
	bytec 9 //  "poolTemplateApprovalBytes"
	intc 0 // 0
	intc 25 // 4096
	box_extract
	itxn_field ApprovalProgramPages
	bytec 9 //  "poolTemplateApprovalBytes"
	intc 25 // 4096
	bytec 9 //  "poolTemplateApprovalBytes"
	box_len

	// box value does not exist: this.stakingPoolApprovalProgram.size
	assert
	intc 25 // 4096
	-
	box_extract
	itxn_field ApprovalProgramPages

	// examples/reti/validatorRegistry.algo.ts:460
	// clearStateProgram: StakingPool.clearProgram()
	pushbytes 0x0b
	itxn_field ClearStateProgram

	// examples/reti/validatorRegistry.algo.ts:461
	// globalNumUint: StakingPool.schema.global.numUint
	intc 35 // 11
	itxn_field GlobalNumUint

	// examples/reti/validatorRegistry.algo.ts:462
	// globalNumByteSlice: StakingPool.schema.global.numByteSlice
	intc 8 // 3
	itxn_field GlobalNumByteSlice

	// examples/reti/validatorRegistry.algo.ts:463
	// extraProgramPages: 3
	intc 8 // 3
	itxn_field ExtraProgramPages

	// examples/reti/validatorRegistry.algo.ts:464
	// applicationArgs: [
	//         // creatingContractID, validatorId, poolId, minEntryStake
	//         method('createApplication(uint64,uint64,uint64,uint64)void'),
	//         itob(this.app.id),
	//         itob(validatorId),
	//         itob(numPools as uint64),
	//         itob(this.validatorList(validatorId).value.config.minEntryStake),
	//       ]
	pushbytes 0x59e90aa6 // method "createApplication(uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	itxn_field ApplicationArgs
	frame_dig 0 // numPools: uint64
	itob
	itxn_field ApplicationArgs
	intc 39 // 209
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/validatorRegistry.algo.ts:474
	// this.validatorList(validatorId).value.state.numPools = numPools as uint16
	intc 9 // 242
	frame_dig 0 // numPools: uint64
	itob
	extract 6 2
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:477
	// poolAppId = this.itxn.createdApplicationID.id
	itxn CreatedApplicationID
	frame_bury 1 // poolAppId: uint64

	// examples/reti/validatorRegistry.algo.ts:478
	// this.validatorList(validatorId).value.pools[numPools - 1].poolAppId = poolAppId
	intc 5 //  headOffset
	frame_dig 0 // numPools: uint64
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 0 // 0
	+
	frame_dig 1 // poolAppId: uint64
	itob
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:479
	// this.addPoolToNode(validatorId, poolAppId, nodeNum)
	frame_dig -3 // nodeNum: uint64
	frame_dig 1 // poolAppId: uint64
	frame_dig -2 // validatorId: ValidatorIdType
	callsub addPoolToNode

	// examples/reti/validatorRegistry.algo.ts:481
	// this.retiOP_validatorAddedPool.log({
	//       id: validatorId,
	//       num: numPools as uint16,
	//       poolAppId: AppID.fromUint64(poolAppId),
	//     })
	pushbytes 0xfbcc0f6b // retiOP_validatorAddedPool(uint64,uint16,uint64)
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	frame_dig 0 // numPools: uint64
	itob
	dup
	bitlen
	intc 18 // 16
	<=

	// numPools as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_dig 1 // poolAppId: uint64
	itob
	concat
	concat
	log

	// examples/reti/validatorRegistry.algo.ts:487
	// return { id: validatorId, poolId: numPools as uint64, poolAppId: this.itxn!.createdApplicationID.id };
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	frame_dig 0 // numPools: uint64
	itob
	concat
	itxn CreatedApplicationID
	itob
	concat

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// addStake(pay,uint64,uint64)(uint64,uint64,uint64)
*abi_route_addStake:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// valueToVerify: uint64
	txna ApplicationArgs 2
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// stakedAmountPayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 2 (stakedAmountPayment) for addStake must be a pay transaction
	assert

	// execute addStake(pay,uint64,uint64)(uint64,uint64,uint64)
	callsub addStake
	concat
	log
	intc 1 // 1
	return

// addStake(stakedAmountPayment: PayTxn, validatorId: ValidatorIdType, valueToVerify: uint64): ValidatorPoolKey
//
// Adds stake to a validator pool.
//
// @param {PayTxn} stakedAmountPayment - payment coming from staker to place into a pool
// @param {ValidatorIdType} validatorId - The id of the validator.
// @param {uint64} valueToVerify - only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.
// Txn sender is factored in as well if that is part of gating.
// * @returns {ValidatorPoolKey} - The key of the validator pool.
addStake:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 5

	// examples/reti/validatorRegistry.algo.ts:500
	// assert(this.validatorList(validatorId).exists, "specified validator id isn't valid")
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	box_len
	swap
	pop

	// specified validator id isn't valid
	assert

	// *if10_condition
	// examples/reti/validatorRegistry.algo.ts:503
	// this.validatorList(validatorId).value.config.sunsettingOn > 0
	intc 27 // 226
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 0 // 0
	>
	bz *if10_end

	// *if10_consequent
	// examples/reti/validatorRegistry.algo.ts:505
	// assert(
	//         this.validatorList(validatorId).value.config.sunsettingOn > globals.latestTimestamp,
	//         "can't stake with a validator that is past its sunsetting time"
	//       )
	intc 27 // 226
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	global LatestTimestamp
	>

	// can't stake with a validator that is past its sunsetting time
	assert

*if10_end:
	// examples/reti/validatorRegistry.algo.ts:511
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// examples/reti/validatorRegistry.algo.ts:515
	// verifyPayTxn(stakedAmountPayment, {
	//       sender: staker,
	//       receiver: this.app.address,
	//     })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	frame_dig 0 // staker: address
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"sender","expected":"staker"}
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"receiver","expected":"this.app.address"}
	assert

	// examples/reti/validatorRegistry.algo.ts:523
	// this.doesStakerMeetGating(validatorId, valueToVerify)
	frame_dig -3 // valueToVerify: uint64
	frame_dig -2 // validatorId: ValidatorIdType
	callsub doesStakerMeetGating

	// examples/reti/validatorRegistry.algo.ts:525
	// realAmount = stakedAmountPayment.amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_bury 1 // realAmount: uint64

	// examples/reti/validatorRegistry.algo.ts:526
	// mbrAmtLeftBehind: uint64 = 0
	intc 0 // 0
	frame_bury 2 // mbrAmtLeftBehind: uint64

	// *if11_condition
	// examples/reti/validatorRegistry.algo.ts:528
	// this.doesStakerNeedToPayMBR(staker)
	frame_dig 0 // staker: address
	callsub doesStakerNeedToPayMBR
	bz *if11_end

	// *if11_consequent
	// examples/reti/validatorRegistry.algo.ts:531
	// mbrAmtLeftBehind = this.getMbrAmounts().addStakerMbr
	callsub getMbrAmounts
	extract 24 8
	btoi
	frame_bury 2 // mbrAmtLeftBehind: uint64

	// examples/reti/validatorRegistry.algo.ts:532
	// realAmount -= mbrAmtLeftBehind
	frame_dig 1 // realAmount: uint64
	frame_dig 2 // mbrAmtLeftBehind: uint64
	-
	frame_bury 1 // realAmount: uint64

	// examples/reti/validatorRegistry.algo.ts:533
	// this.stakerPoolSet(staker).create()
	bytec 3 //  "sps"
	frame_dig 0 // staker: address
	concat
	pushint 144
	box_create
	pop

*if11_end:
	// examples/reti/validatorRegistry.algo.ts:537
	// assert(
	//       this.validatorList(validatorId).value.state.totalAlgoStaked + realAmount < this.maxAllowedStake(),
	//       'total staked for all of a validators pools may not exceed hard cap'
	//     )
	intc 12 // 252
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig 1 // realAmount: uint64
	+
	callsub maxAllowedStake
	<

	// total staked for all of a validators pools may not exceed hard cap
	assert

	// examples/reti/validatorRegistry.algo.ts:544
	// findRet = this.findPoolForStaker(validatorId, staker, realAmount)
	frame_dig 1 // realAmount: uint64
	frame_dig 0 // staker: address
	frame_dig -2 // validatorId: ValidatorIdType
	callsub findPoolForStaker
	frame_bury 3 // findRet: ((uint64,uint64,uint64),bool,bool)

	// examples/reti/validatorRegistry.algo.ts:545
	// poolKey = findRet[0]
	// examples/reti/validatorRegistry.algo.ts:546
	// isNewStakerToValidator = findRet[1]
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	intc 22 // 192
	getbit
	frame_bury 4 // isNewStakerToValidator: bool

	// examples/reti/validatorRegistry.algo.ts:547
	// isNewStakerToProtocol = findRet[2]
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	pushint 193
	getbit
	frame_bury 5 // isNewStakerToProtocol: bool

	// *if12_condition
	// examples/reti/validatorRegistry.algo.ts:548
	// poolKey.poolId === 0
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	intc 0 // 0
	==
	bz *if12_end

	// *if12_consequent
	// No pool available with free stake.  Validator needs to add another pool
	err

*if12_end:
	// examples/reti/validatorRegistry.algo.ts:553
	// this.updateStakerPoolSet(staker, poolKey)
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 0 24
	frame_dig 0 // staker: address
	callsub updateStakerPoolSet

	// examples/reti/validatorRegistry.algo.ts:556
	// this.callPoolAddStake(
	//       stakedAmountPayment,
	//       poolKey,
	//       mbrAmtLeftBehind,
	//       isNewStakerToValidator,
	//       isNewStakerToProtocol
	//     )
	frame_dig 5 // isNewStakerToProtocol: bool
	frame_dig 4 // isNewStakerToValidator: bool
	frame_dig 2 // mbrAmtLeftBehind: uint64
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 0 24
	frame_dig -1 // stakedAmountPayment: PayTxn
	callsub callPoolAddStake

	// examples/reti/validatorRegistry.algo.ts:563
	// this.retiOP_stakeAdded.log({
	//       id: validatorId,
	//       poolNum: poolKey.poolId as uint16,
	//       poolAppId: AppID.fromUint64(poolKey.poolAppId),
	//       amountStaked: realAmount,
	//       staker: staker,
	//     })
	pushbytes 0x962b4143 // retiOP_stakeAdded(uint64,uint16,uint64,address,uint64)
	frame_dig -2 // validatorId: ValidatorIdType
	itob
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 8 8
	btoi
	itob
	dup
	bitlen
	intc 18 // 16
	<=

	// poolKey.poolId as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 16 8
	btoi
	itob
	concat
	frame_dig 0 // staker: address
	concat
	frame_dig 1 // realAmount: uint64
	itob
	concat
	concat
	log

	// examples/reti/validatorRegistry.algo.ts:571
	// return poolKey;
	frame_dig 3 // findRet: ((uint64,uint64,uint64),bool,bool)
	store 255 // full array
	load 255 // full array
	extract 0 24

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 5
	retsub

// setTokenPayoutRatio(uint64)(uint64[24],uint64)
*abi_route_setTokenPayoutRatio:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute setTokenPayoutRatio(uint64)(uint64[24],uint64)
	callsub setTokenPayoutRatio
	concat
	log
	intc 1 // 1
	return

// setTokenPayoutRatio(validatorId: ValidatorIdType): PoolTokenPayoutRatio
//
// setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
// of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
// in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
// pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
// It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
// their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
// during the epoch updates across pools)
//
// Multiple pools will call us via pool 1 (pool2->pool1->validator, etc.) so don't assert on pool1 calling multiple
// times in same epoch.  Just return.
//
// @param validatorId - validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.
// @returns PoolTokenPayoutRatio - the finished ratio data
setTokenPayoutRatio:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 8

	// examples/reti/validatorRegistry.algo.ts:591
	// pool1AppID = this.validatorList(validatorId).value.pools[0].poolAppId
	intc 5 // 268
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // pool1AppID: uint64

	// examples/reti/validatorRegistry.algo.ts:592
	// assert(pool1AppID !== 0)
	frame_dig 0 // pool1AppID: uint64
	intc 0 // 0
	!=
	assert

	// *if13_condition
	// examples/reti/validatorRegistry.algo.ts:594
	// this.txn.sender !== AppID.fromUint64(pool1AppID).address
	txn Sender
	frame_dig 0 // pool1AppID: uint64
	app_params_get AppAddress
	pop
	!=
	bz *if13_end

	// *if13_consequent
	// examples/reti/validatorRegistry.algo.ts:595
	// return this.validatorList(validatorId).value.tokenPayoutRatio;
	intc 14 //  headOffset
	intc 19 // 200
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	b *setTokenPayoutRatio*return

*if13_end:
	// examples/reti/validatorRegistry.algo.ts:601
	// curRound = globals.round
	global Round
	frame_bury 1 // curRound: uint64

	// examples/reti/validatorRegistry.algo.ts:602
	// lastPayoutUpdate = this.validatorList(validatorId).value.tokenPayoutRatio.updatedForPayout
	intc 31 // 892
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // lastPayoutUpdate: uint64

	// *if14_condition
	// examples/reti/validatorRegistry.algo.ts:603
	// lastPayoutUpdate !== 0
	frame_dig 2 // lastPayoutUpdate: uint64
	intc 0 // 0
	!=
	bz *if14_end

	// *if14_consequent
	// *if15_condition
	// examples/reti/validatorRegistry.algo.ts:605
	// (AppID.fromUint64(pool1AppID).globalState('lastPayout') as uint64) === lastPayoutUpdate
	frame_dig 0 // pool1AppID: uint64
	pushbytes 0x6c6173745061796f7574 // "lastPayout"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(pool1AppID).globalState('lastPayout')
	assert
	frame_dig 2 // lastPayoutUpdate: uint64
	==
	bz *if15_end

	// *if15_consequent
	// examples/reti/validatorRegistry.algo.ts:606
	// return this.validatorList(validatorId).value.tokenPayoutRatio;
	intc 14 //  headOffset
	intc 19 // 200
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	b *setTokenPayoutRatio*return

*if15_end:
	// examples/reti/validatorRegistry.algo.ts:608
	// epochRoundLength = this.validatorList(validatorId).value.config.epochRoundLength as uint64
	pushint 169
	intc 15 // 4
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 3 // epochRoundLength: uint64

	// examples/reti/validatorRegistry.algo.ts:609
	// thisEpochBegin = curRound - (curRound % epochRoundLength)
	frame_dig 1 // curRound: uint64
	frame_dig 1 // curRound: uint64
	frame_dig 3 // epochRoundLength: uint64
	%
	-
	frame_bury 4 // thisEpochBegin: uint64

	// *if16_condition
	// examples/reti/validatorRegistry.algo.ts:611
	// lastPayoutUpdate - (lastPayoutUpdate % epochRoundLength) === thisEpochBegin
	frame_dig 2 // lastPayoutUpdate: uint64
	frame_dig 2 // lastPayoutUpdate: uint64
	frame_dig 3 // epochRoundLength: uint64
	%
	-
	frame_dig 4 // thisEpochBegin: uint64
	==
	bz *if16_end

	// *if16_consequent
	// examples/reti/validatorRegistry.algo.ts:612
	// return this.validatorList(validatorId).value.tokenPayoutRatio;
	intc 14 //  headOffset
	intc 19 // 200
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	b *setTokenPayoutRatio*return

*if16_end:

*if14_end:
	// examples/reti/validatorRegistry.algo.ts:615
	// this.validatorList(validatorId).value.tokenPayoutRatio.updatedForPayout = curRound
	intc 31 // 892
	frame_dig 1 // curRound: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:617
	// curNumPools = this.validatorList(validatorId).value.state.numPools as uint64
	intc 9 // 242
	intc 10 // 2
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 5 // curNumPools: uint64

	// examples/reti/validatorRegistry.algo.ts:618
	// totalStakeForValidator = this.validatorList(validatorId).value.state.totalAlgoStaked
	intc 12 // 252
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 6 // totalStakeForValidator: uint64

	// examples/reti/validatorRegistry.algo.ts:619
	// for (let i = 0; i < curNumPools; i += 1)
	intc 0 // 0
	frame_bury 7 // i: uint64

*for_2:
	// examples/reti/validatorRegistry.algo.ts:619
	// i < curNumPools
	frame_dig 7 // i: uint64
	frame_dig 5 // curNumPools: uint64
	<
	bz *for_2_end

	// examples/reti/validatorRegistry.algo.ts:624
	// ourPoolPctOfWhole = wideRatio(
	//         [this.validatorList(validatorId).value.pools[i].totalAlgoStaked, 1_000_000],
	//         [totalStakeForValidator]
	//       )
	intc 5 //  headOffset
	frame_dig 7 // i: uint64
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	pushint 1_000_000
	mulw
	intc 0 // 0
	frame_dig 6 // totalStakeForValidator: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 8 // ourPoolPctOfWhole: uint64

	// examples/reti/validatorRegistry.algo.ts:628
	// this.validatorList(validatorId).value.tokenPayoutRatio.poolPctOfWhole[i] = ourPoolPctOfWhole
	intc 14 // 700
	frame_dig 7 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	frame_dig 8 // ourPoolPctOfWhole: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

*for_2_continue:
	// examples/reti/validatorRegistry.algo.ts:619
	// i += 1
	frame_dig 7 // i: uint64
	intc 1 // 1
	+
	frame_bury 7 // i: uint64
	b *for_2

*for_2_end:
	// examples/reti/validatorRegistry.algo.ts:630
	// return this.validatorList(validatorId).value.tokenPayoutRatio;
	intc 14 //  headOffset
	intc 19 // 200
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract

*setTokenPayoutRatio*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 8
	retsub

// stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void
*abi_route_stakeUpdatedViaRewards:
	// saturatedBurnToFeeSink: uint64
	txna ApplicationArgs 5
	btoi

	// validatorCommission: uint64
	txna ApplicationArgs 4
	btoi

	// rewardTokenAmountReserved: uint64
	txna ApplicationArgs 3
	btoi

	// algoToAdd: uint64
	txna ApplicationArgs 2
	btoi

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 24
	==

	// argument 4 (poolKey) for stakeUpdatedViaRewards must be a (uint64,uint64,uint64)
	assert

	// execute stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void
	callsub stakeUpdatedViaRewards
	intc 1 // 1
	return

// stakeUpdatedViaRewards(poolKey: ValidatorPoolKey, algoToAdd: uint64, rewardTokenAmountReserved: uint64, validatorCommission: uint64, saturatedBurnToFeeSink: uint64): void
//
// stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
// stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// The calling App id is validated against our pool list as well.
// @param {ValidatorPoolKey} poolKey - ValidatorPoolKey type
// @param {uint64} algoToAdd - amount this validator's total stake increased via rewards
// @param {uint64} rewardTokenAmountReserved - amount this validator's total stake increased via rewards (that should be
// @param {uint64} validatorCommission - the commission amount the validator was paid, if any
// @param {uint64} saturatedBurnToFeeSink - if the pool was in saturated state, the amount sent back to the fee sink.
// seen as 'accounted for/pending spent')
stakeUpdatedViaRewards:
	proto 5 0

	// examples/reti/validatorRegistry.algo.ts:651
	// this.verifyPoolKeyCaller(poolKey)
	frame_dig -1 // poolKey: ValidatorPoolKey
	callsub verifyPoolKeyCaller

	// examples/reti/validatorRegistry.algo.ts:654
	// this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].totalAlgoStaked += algoToAdd
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // algoToAdd: uint64
	+
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:655
	// this.validatorList(poolKey.id).value.state.totalAlgoStaked += algoToAdd
	intc 12 // 252
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -2 // algoToAdd: uint64
	+
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:656
	// this.validatorList(poolKey.id).value.state.rewardTokenHeldBack += rewardTokenAmountReserved
	intc 13 // 260
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // rewardTokenAmountReserved: uint64
	+
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:658
	// this.totalAlgoStaked.value += algoToAdd
	bytec 4 //  "staked"
	app_global_get
	frame_dig -2 // algoToAdd: uint64
	+
	bytec 4 //  "staked"
	swap
	app_global_put

	// examples/reti/validatorRegistry.algo.ts:661
	// this.reverifyNFDOwnership(poolKey.id)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	callsub reverifyNFDOwnership

	// examples/reti/validatorRegistry.algo.ts:663
	// this.retiOP_epochRewardUpdate.log({
	//       id: poolKey.id,
	//       poolNum: poolKey.poolId as uint16,
	//       poolAppId: AppID.fromUint64(poolKey.poolAppId),
	//       algoAdded: algoToAdd,
	//       rewardTokenHeldBack: rewardTokenAmountReserved,
	//       saturatedBurnToFeeSink: saturatedBurnToFeeSink,
	//       validatorCommission: validatorCommission,
	//     })
	pushbytes 0xb3e47c3d // retiOP_epochRewardUpdate(uint64,uint16,uint64,uint64,uint64,uint64,uint64)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	dup
	bitlen
	intc 18 // 16
	<=

	// poolKey.poolId as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	itob
	concat
	frame_dig -4 // validatorCommission: uint64
	itob
	concat
	frame_dig -5 // saturatedBurnToFeeSink: uint64
	itob
	concat
	frame_dig -2 // algoToAdd: uint64
	itob
	concat
	frame_dig -3 // rewardTokenAmountReserved: uint64
	itob
	concat
	concat
	log
	retsub

// stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void
*abi_route_stakeRemoved:
	// stakerRemoved: bool
	txna ApplicationArgs 5
	dup
	len
	intc 1 // 1
	==

	// argument 0 (stakerRemoved) for stakeRemoved must be a bool
	assert
	intc 0 // 0
	getbit

	// rewardRemoved: uint64
	txna ApplicationArgs 4
	btoi

	// amountRemoved: uint64
	txna ApplicationArgs 3
	btoi

	// staker: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 3 (staker) for stakeRemoved must be a address
	assert

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	intc 3 // 24
	==

	// argument 4 (poolKey) for stakeRemoved must be a (uint64,uint64,uint64)
	assert

	// execute stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void
	callsub stakeRemoved
	intc 1 // 1
	return

// stakeRemoved(poolKey: ValidatorPoolKey, staker: Address, amountRemoved: uint64, rewardRemoved: uint64, stakerRemoved: boolean): void
//
// stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
// from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
// If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
// The calling App id is validated against our pool list as well.
//
// @param {ValidatorPoolKey} poolKey calling us from which stake was removed
// @param {Address} staker
// @param {uint64} amountRemoved - algo amount removed
// @param {uint64} rewardRemoved - if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)
// @param {boolean} stakerRemoved
stakeRemoved:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 3

	// *if17_condition
	// examples/reti/validatorRegistry.algo.ts:693
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 29 // 300
	<
	bz *if17_end

	// *if17_consequent
	// examples/reti/validatorRegistry.algo.ts:694
	// increaseOpcodeBudget()
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 8 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 26 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if17_end:
	// examples/reti/validatorRegistry.algo.ts:696
	// this.verifyPoolKeyCaller(poolKey)
	frame_dig -1 // poolKey: ValidatorPoolKey
	callsub verifyPoolKeyCaller

	// examples/reti/validatorRegistry.algo.ts:700
	// assert(amountRemoved > 0 || rewardRemoved > 0, 'should only be called if algo or reward was removed')
	frame_dig -3 // amountRemoved: uint64
	intc 0 // 0
	>
	dup
	bnz *skip_or2
	frame_dig -4 // rewardRemoved: uint64
	intc 0 // 0
	>
	||

*skip_or2:
	// should only be called if algo or reward was removed
	assert

	// examples/reti/validatorRegistry.algo.ts:703
	// this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].totalAlgoStaked -= amountRemoved
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountRemoved: uint64
	-
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:704
	// this.validatorList(poolKey.id).value.state.totalAlgoStaked -= amountRemoved
	intc 12 // 252
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountRemoved: uint64
	-
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:705
	// this.totalAlgoStaked.value -= amountRemoved
	bytec 4 //  "staked"
	app_global_get
	frame_dig -3 // amountRemoved: uint64
	-
	bytec 4 //  "staked"
	swap
	app_global_put

	// *if18_condition
	// examples/reti/validatorRegistry.algo.ts:707
	// rewardRemoved > 0
	frame_dig -4 // rewardRemoved: uint64
	intc 0 // 0
	>
	bz *if18_else

	// *if18_consequent
	// examples/reti/validatorRegistry.algo.ts:708
	// rewardTokenID = this.validatorList(poolKey.id).value.config.rewardTokenId
	intc 38 // 153
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // rewardTokenID: uint64

	// examples/reti/validatorRegistry.algo.ts:709
	// assert(rewardTokenID !== 0, "rewardRemoved can't be set if validator doesn't have reward token!")
	frame_dig 0 // rewardTokenID: uint64
	intc 0 // 0
	!=

	// rewardRemoved can't be set if validator doesn't have reward token!
	assert

	// examples/reti/validatorRegistry.algo.ts:710
	// assert(
	//         this.validatorList(poolKey.id).value.state.rewardTokenHeldBack >= rewardRemoved,
	//         'reward being removed must be covered by hold back amount'
	//       )
	intc 13 // 260
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -4 // rewardRemoved: uint64
	>=

	// reward being removed must be covered by hold back amount
	assert

	// examples/reti/validatorRegistry.algo.ts:716
	// this.validatorList(poolKey.id).value.state.rewardTokenHeldBack -= rewardRemoved
	intc 13 // 260
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -4 // rewardRemoved: uint64
	-
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// *if19_condition
	// examples/reti/validatorRegistry.algo.ts:721
	// poolKey.poolId !== 1
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	!=
	bz *if19_end

	// *if19_consequent
	// examples/reti/validatorRegistry.algo.ts:722
	// sendMethodCall<typeof StakingPool.prototype.payTokenReward>({
	//           applicationID: AppID.fromUint64(this.validatorList(poolKey.id).value.pools[0].poolAppId),
	//           methodArgs: [staker, rewardTokenID, rewardRemoved],
	//         })
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	bytec 13 //  method "payTokenReward(address,uint64,uint64)void"
	itxn_field ApplicationArgs

	// examples/reti/validatorRegistry.algo.ts:723
	// applicationID: AppID.fromUint64(this.validatorList(poolKey.id).value.pools[0].poolAppId)
	intc 5 // 268
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	itxn_field ApplicationID

	// examples/reti/validatorRegistry.algo.ts:724
	// methodArgs: [staker, rewardTokenID, rewardRemoved]
	frame_dig -2 // staker: Address
	itxn_field ApplicationArgs
	frame_dig 0 // rewardTokenID: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig -4 // rewardRemoved: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if19_end:
	// examples/reti/validatorRegistry.algo.ts:727
	// this.retiOP_stakeRemoved.log({
	//         id: poolKey.id,
	//         poolNum: poolKey.poolId as uint16,
	//         poolAppId: AppID.fromUint64(poolKey.poolAppId),
	//         staker: staker,
	//         amountUnstaked: amountRemoved,
	//         rewardTokenAssetId: AssetID.fromUint64(rewardTokenID),
	//         rewardTokensReceived: rewardRemoved,
	//       })
	bytec 14 //  retiOP_stakeRemoved(uint64,uint16,uint64,address,uint64,uint64,uint64)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	dup
	bitlen
	intc 18 // 16
	<=

	// poolKey.poolId as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	itob
	concat
	frame_dig -2 // staker: Address
	concat
	frame_dig -3 // amountRemoved: uint64
	itob
	concat
	frame_dig -4 // rewardRemoved: uint64
	itob
	concat
	frame_dig 0 // rewardTokenID: uint64
	itob
	concat
	concat
	log
	b *if18_end

*if18_else:
	// examples/reti/validatorRegistry.algo.ts:737
	// this.retiOP_stakeRemoved.log({
	//         id: poolKey.id,
	//         poolNum: poolKey.poolId as uint16,
	//         poolAppId: AppID.fromUint64(poolKey.poolAppId),
	//         staker: staker,
	//         amountUnstaked: amountRemoved,
	//         // no tokens rewarded..
	//         rewardTokenAssetId: AssetID.zeroIndex,
	//         rewardTokensReceived: 0,
	//       })
	bytec 14 //  retiOP_stakeRemoved(uint64,uint16,uint64,address,uint64,uint64,uint64)
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	dup
	bitlen
	intc 18 // 16
	<=

	// poolKey.poolId as uint16 overflowed 16 bits
	assert
	extract 6 2
	concat
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	itob
	concat
	frame_dig -2 // staker: Address
	concat
	frame_dig -3 // amountRemoved: uint64
	itob
	concat
	bytec 7 // 0x0000000000000000
	concat
	bytec 7 // 0x0000000000000000
	concat
	concat
	log

*if18_end:
	// *if20_condition
	// examples/reti/validatorRegistry.algo.ts:749
	// stakerRemoved
	frame_dig -5 // stakerRemoved: boolean
	bz *if20_end

	// *if20_consequent
	// examples/reti/validatorRegistry.algo.ts:751
	// this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].totalStakers -= 1
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	intc 10 // 2
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 1
	-
	itob
	extract 6 2
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:753
	// removeRet = this.removeFromStakerPoolSet(staker, <ValidatorPoolKey>{
	//         id: poolKey.id,
	//         poolId: poolKey.poolId,
	//         poolAppId: poolKey.poolAppId,
	//       })
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	concat
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	itob
	concat
	frame_dig -2 // staker: Address
	callsub removeFromStakerPoolSet
	frame_bury 1 // removeRet: (bool,bool)

	// examples/reti/validatorRegistry.algo.ts:758
	// stakerOutOfThisValidator = removeRet[0]
	frame_dig 1 // removeRet: (bool,bool)
	store 255 // full array
	load 255 // full array
	intc 0 // 0
	getbit
	frame_bury 2 // stakerOutOfThisValidator: bool

	// examples/reti/validatorRegistry.algo.ts:759
	// stakerOutOfProtocol = removeRet[1]
	frame_dig 1 // removeRet: (bool,bool)
	store 255 // full array
	load 255 // full array
	intc 1 // 1
	getbit
	frame_bury 3 // stakerOutOfProtocol: bool

	// *if21_condition
	// examples/reti/validatorRegistry.algo.ts:761
	// stakerOutOfThisValidator
	frame_dig 2 // stakerOutOfThisValidator: bool
	bz *if21_end

	// *if21_consequent
	// examples/reti/validatorRegistry.algo.ts:762
	// this.validatorList(poolKey.id).value.state.totalStakers -= 1
	intc 23 // 244
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 1
	-
	itob
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

*if21_end:
	// *if22_condition
	// examples/reti/validatorRegistry.algo.ts:765
	// stakerOutOfProtocol
	frame_dig 3 // stakerOutOfProtocol: bool
	bz *if22_end

	// *if22_consequent
	// examples/reti/validatorRegistry.algo.ts:766
	// this.numStakers.value -= 1
	bytec 6 //  "numStakers"
	app_global_get
	intc 1 // 1
	-
	bytec 6 //  "numStakers"
	swap
	app_global_put

*if22_end:

*if20_end:
	retsub

// findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)
*abi_route_findPoolForStaker:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// amountToStake: uint64
	txna ApplicationArgs 3
	btoi

	// staker: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 1 (staker) for findPoolForStaker must be a address
	assert

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)
	callsub findPoolForStaker
	concat
	log
	intc 1 // 1
	return

// findPoolForStaker(validatorId: ValidatorIdType, staker: Address, amountToStake: uint64): [ValidatorPoolKey, boolean, boolean]
//
// Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
// First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
// to new pool if necessary.
//
// @param {ValidatorIdType} validatorId - The id of the validator.
// @param {Address} staker - The address of the staker.
// @param {uint64} amountToStake - The amount to stake.
// @returns {ValidatorPoolKey, boolean, boolean} - The pool for the staker, true/false on whether the staker is 'new'
// to this VALIDATOR, and true/false if staker is new to the protocol.
findPoolForStaker:
	proto 3 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 7

	// examples/reti/validatorRegistry.algo.ts:788
	// isNewStakerToValidator = true
	intc 1 // 1
	frame_bury 0 // isNewStakerToValidator: bool

	// examples/reti/validatorRegistry.algo.ts:789
	// isNewStakerToProtocol = true
	intc 1 // 1
	frame_bury 1 // isNewStakerToProtocol: bool

	// examples/reti/validatorRegistry.algo.ts:797
	// maxPerPool = this.getCurMaxStakePerPool(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub getCurMaxStakePerPool
	frame_bury 2 // maxPerPool: uint64

	// *if23_condition
	// examples/reti/validatorRegistry.algo.ts:800
	// this.stakerPoolSet(staker).exists
	bytec 3 //  "sps"
	frame_dig -2 // staker: Address
	concat
	box_len
	swap
	pop
	bz *if23_end

	// *if23_consequent
	// examples/reti/validatorRegistry.algo.ts:801
	// poolSet = clone(this.stakerPoolSet(staker).value)
	bytec 3 //  "sps"
	frame_dig -2 // staker: Address
	concat
	box_get

	// box value does not exist: this.stakerPoolSet(staker).value
	assert
	frame_bury 3 // poolSet: (uint64,uint64,uint64)[6]

	// examples/reti/validatorRegistry.algo.ts:802
	// assert(validatorId !== 0)
	frame_dig -1 // validatorId: ValidatorIdType
	intc 0 // 0
	!=
	assert

	// examples/reti/validatorRegistry.algo.ts:803
	// for (let i = 0; i < poolSet.length; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_3:
	// examples/reti/validatorRegistry.algo.ts:803
	// i < poolSet.length
	frame_dig 4 // i: uint64
	intc 7 // 6
	<
	bz *for_3_end

	// *if24_condition
	// examples/reti/validatorRegistry.algo.ts:804
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 29 // 300
	<
	bz *if24_end

	// *if24_consequent
	// examples/reti/validatorRegistry.algo.ts:805
	// increaseOpcodeBudget()
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 8 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 26 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if24_end:
	// *if25_condition
	// examples/reti/validatorRegistry.algo.ts:807
	// poolSet[i].id === 0
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	==
	bz *if25_end

	// *if25_consequent
	b *for_3_continue

*if25_end:
	// examples/reti/validatorRegistry.algo.ts:810
	// isNewStakerToProtocol = false
	intc 0 // 0
	frame_bury 1 // isNewStakerToProtocol: bool

	// *if26_condition
	// examples/reti/validatorRegistry.algo.ts:811
	// poolSet[i].id === validatorId
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	frame_dig -1 // validatorId: ValidatorIdType
	==
	bz *if26_end

	// *if26_consequent
	// examples/reti/validatorRegistry.algo.ts:813
	// isNewStakerToValidator = false
	intc 0 // 0
	frame_bury 0 // isNewStakerToValidator: bool

	// *if27_condition
	// examples/reti/validatorRegistry.algo.ts:815
	// this.validatorList(validatorId).value.pools[poolSet[i].poolId - 1].totalAlgoStaked + amountToStake <=
	//             maxPerPool
	intc 5 //  headOffset
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 2 //  headOffset
	+
	intc 2 // 8
	extract3
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	frame_dig 2 // maxPerPool: uint64
	<=
	bz *if27_end

	// *if27_consequent
	// examples/reti/validatorRegistry.algo.ts:818
	// return [poolSet[i], isNewStakerToValidator, isNewStakerToProtocol];
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 3 // 24
	extract3
	bytec 5 // 0x00
	intc 0 // 0
	frame_dig 0 // isNewStakerToValidator: bool
	setbit
	intc 1 // 1
	frame_dig 1 // isNewStakerToProtocol: bool
	setbit
	concat
	b *findPoolForStaker*return

*if27_end:

*if26_end:

*for_3_continue:
	// examples/reti/validatorRegistry.algo.ts:803
	// i += 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_3

*for_3_end:

*if23_end:
	// examples/reti/validatorRegistry.algo.ts:825
	// assert(
	//       amountToStake >= this.validatorList(validatorId).value.config.minEntryStake,
	//       'must stake at least the minimum for this pool'
	//     )
	frame_dig -3 // amountToStake: uint64
	intc 39 // 209
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	>=

	// must stake at least the minimum for this pool
	assert

	// examples/reti/validatorRegistry.algo.ts:831
	// pools = clone(this.validatorList(validatorId).value.pools)
	intc 5 //  headOffset
	intc 30 // 432
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_bury 5 // pools: (uint64,uint16,uint64)[24]

	// examples/reti/validatorRegistry.algo.ts:832
	// curNumPools = this.validatorList(validatorId).value.state.numPools as uint64
	intc 9 // 242
	intc 10 // 2
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 6 // curNumPools: uint64

	// examples/reti/validatorRegistry.algo.ts:833
	// for (let i = 0; i < curNumPools; i += 1)
	intc 0 // 0
	frame_bury 7 // i: uint64

*for_4:
	// examples/reti/validatorRegistry.algo.ts:833
	// i < curNumPools
	frame_dig 7 // i: uint64
	frame_dig 6 // curNumPools: uint64
	<
	bz *for_4_end

	// *if28_condition
	// examples/reti/validatorRegistry.algo.ts:834
	// pools[i].totalAlgoStaked + amountToStake <= maxPerPool
	frame_dig 5 // pools: (uint64,uint16,uint64)[24]
	frame_dig 7 // i: uint64
	intc 4 // 18
	* // acc * typeLength
	intc 11 //  headOffset
	+
	intc 2 // 8
	extract3
	btoi
	frame_dig -3 // amountToStake: uint64
	+
	frame_dig 2 // maxPerPool: uint64
	<=
	bz *if28_end

	// *if28_consequent
	// examples/reti/validatorRegistry.algo.ts:835
	// return [
	//           { id: validatorId, poolId: i + 1, poolAppId: pools[i].poolAppId },
	//           isNewStakerToValidator,
	//           isNewStakerToProtocol,
	//         ];
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	frame_dig 7 // i: uint64
	intc 1 // 1
	+
	itob
	concat
	frame_dig 5 // pools: (uint64,uint16,uint64)[24]
	frame_dig 7 // i: uint64
	intc 4 // 18
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	itob
	concat
	bytec 5 // 0x00
	intc 0 // 0
	frame_dig 0 // isNewStakerToValidator: bool
	setbit
	intc 1 // 1
	frame_dig 1 // isNewStakerToProtocol: bool
	setbit
	concat
	b *findPoolForStaker*return

*if28_end:

*for_4_continue:
	// examples/reti/validatorRegistry.algo.ts:833
	// i += 1
	frame_dig 7 // i: uint64
	intc 1 // 1
	+
	frame_bury 7 // i: uint64
	b *for_4

*for_4_end:
	// examples/reti/validatorRegistry.algo.ts:843
	// return [{ id: validatorId, poolId: 0, poolAppId: 0 }, isNewStakerToValidator, isNewStakerToProtocol];
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	bytec 7 // 0x0000000000000000
	concat
	bytec 7 // 0x0000000000000000
	concat
	bytec 5 // 0x00
	intc 0 // 0
	frame_dig 0 // isNewStakerToValidator: bool
	setbit
	intc 1 // 1
	frame_dig 1 // isNewStakerToProtocol: bool
	setbit
	concat

*findPoolForStaker*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 7
	retsub

// movePoolToNode(uint64,uint64,uint64)void
*abi_route_movePoolToNode:
	// nodeNum: uint64
	txna ApplicationArgs 3
	btoi

	// poolAppId: uint64
	txna ApplicationArgs 2
	btoi

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute movePoolToNode(uint64,uint64,uint64)void
	callsub movePoolToNode
	intc 1 // 1
	return

// movePoolToNode(validatorId: ValidatorIdType, poolAppId: uint64, nodeNum: uint64): void
//
// Find the specified pool (in any node number) and move it to the specified node.
// The pool account is forced offline if moved so prior node will still run for 320 rounds but
// new key goes online on new node soon after (320 rounds after it goes online)
// No-op if success, asserts if not found or can't move  (no space in target)
// [ ONLY OWNER OR MANAGER CAN CHANGE ]
//
// @param {ValidatorIdType} validatorId - The id of the validator.
// @param {uint64} poolAppId
// @param {uint64} nodeNum
movePoolToNode:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:858
	// this.callerMustBeOwnerOrManager(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwnerOrManager

	// examples/reti/validatorRegistry.algo.ts:860
	// nodePoolAssignments = clone(this.validatorList(validatorId).value.nodePoolAssignments)
	intc 17 //  headOffset
	intc 22 // 192
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // nodePoolAssignments: ((uint64[3])[8])

	// examples/reti/validatorRegistry.algo.ts:861
	// assert(nodeNum >= 1 && nodeNum <= MAX_NODES, 'node number out of allowable range')
	frame_dig -3 // nodeNum: uint64
	intc 1 // 1
	>=
	dup
	bz *skip_and2
	frame_dig -3 // nodeNum: uint64
	intc 2 // 8
	<=
	&&

*skip_and2:
	// node number out of allowable range
	assert

	// examples/reti/validatorRegistry.algo.ts:863
	// for (let srcNodeIdx = 0; srcNodeIdx < MAX_NODES; srcNodeIdx += 1)
	intc 0 // 0
	frame_bury 1 // srcNodeIdx: uint64

*for_5:
	// examples/reti/validatorRegistry.algo.ts:863
	// srcNodeIdx < MAX_NODES
	frame_dig 1 // srcNodeIdx: uint64
	intc 2 // 8
	<
	bz *for_5_end

	// examples/reti/validatorRegistry.algo.ts:864
	// for (let i = 0; i < MAX_POOLS_PER_NODE; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_6:
	// examples/reti/validatorRegistry.algo.ts:864
	// i < MAX_POOLS_PER_NODE
	frame_dig 2 // i: uint64
	intc 8 // 3
	<
	bz *for_6_end

	// *if29_condition
	// examples/reti/validatorRegistry.algo.ts:865
	// nodePoolAssignments.nodes[srcNodeIdx].poolAppIds[i] === poolAppId
	frame_dig 0 // nodePoolAssignments: ((uint64[3])[8])
	intc 0 // 0
	frame_dig 1 // srcNodeIdx: uint64
	intc 3 // 24
	* // acc * typeLength
	+
	intc 0 // 0
	+
	frame_dig 2 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	intc 2 // 8
	extract3
	btoi
	frame_dig -2 // poolAppId: uint64
	==
	bz *if29_end

	// *if29_consequent
	// examples/reti/validatorRegistry.algo.ts:866
	// assert(nodeNum - 1 !== srcNodeIdx, "can't move to same node")
	frame_dig -3 // nodeNum: uint64
	intc 1 // 1
	-
	frame_dig 1 // srcNodeIdx: uint64
	!=

	// can't move to same node
	assert

	// examples/reti/validatorRegistry.algo.ts:868
	// this.validatorList(validatorId).value.nodePoolAssignments.nodes[srcNodeIdx].poolAppIds[i] = 0
	intc 17 // 900
	frame_dig 1 // srcNodeIdx: uint64
	intc 3 // 24
	* // acc * typeLength
	+
	intc 0 // 0
	+
	frame_dig 2 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	bytec 7 // 0x0000000000000000
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:871
	// sendMethodCall<typeof StakingPool.prototype.goOffline>({
	//             applicationID: AppID.fromUint64(poolAppId),
	//           })
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	pushbytes 0x51ef3b21 // method "goOffline()void"
	itxn_field ApplicationArgs

	// examples/reti/validatorRegistry.algo.ts:872
	// applicationID: AppID.fromUint64(poolAppId)
	frame_dig -2 // poolAppId: uint64
	itxn_field ApplicationID

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/validatorRegistry.algo.ts:876
	// this.addPoolToNode(validatorId, poolAppId, nodeNum)
	frame_dig -3 // nodeNum: uint64
	frame_dig -2 // poolAppId: uint64
	frame_dig -1 // validatorId: ValidatorIdType
	callsub addPoolToNode

	// examples/reti/validatorRegistry.algo.ts:877
	// return;
	retsub

*if29_end:

*for_6_continue:
	// examples/reti/validatorRegistry.algo.ts:864
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_6

*for_6_end:

*for_5_continue:
	// examples/reti/validatorRegistry.algo.ts:863
	// srcNodeIdx += 1
	frame_dig 1 // srcNodeIdx: uint64
	intc 1 // 1
	+
	frame_bury 1 // srcNodeIdx: uint64
	b *for_5

*for_5_end:
	// couldn't find pool app id in nodes to move
	err
	retsub

// emptyTokenRewards(uint64,address)uint64
*abi_route_emptyTokenRewards:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// receiver: address
	txna ApplicationArgs 2
	dup
	len
	intc 6 // 32
	==

	// argument 0 (receiver) for emptyTokenRewards must be a address
	assert

	// validatorId: uint64
	txna ApplicationArgs 1
	btoi

	// execute emptyTokenRewards(uint64,address)uint64
	callsub emptyTokenRewards
	itob
	concat
	log
	intc 1 // 1
	return

// emptyTokenRewards(validatorId: ValidatorIdType, receiver: Address): uint64
//
// Sends the reward tokens held in pool 1 to specified receiver.
// This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
// the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
// NOT be sent as they must be held back for stakers to later claim.
// [ ONLY OWNER CAN CALL]
//
// @param {ValidatorIdType} validatorId - The id of the validator.
// @param {Address} receiver - the account to send the tokens to (must already be opted-in to the reward token)
// @returns {uint64} the amount of reward token sent
emptyTokenRewards:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 3

	// examples/reti/validatorRegistry.algo.ts:896
	// this.callerMustBeOwner(validatorId)
	frame_dig -1 // validatorId: ValidatorIdType
	callsub callerMustBeOwner

	// examples/reti/validatorRegistry.algo.ts:897
	// rewardTokenId = this.validatorList(validatorId).value.config.rewardTokenId
	intc 38 // 153
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // rewardTokenId: uint64

	// examples/reti/validatorRegistry.algo.ts:898
	// rewardTokenHeldBack = this.validatorList(validatorId).value.state.rewardTokenHeldBack
	intc 13 // 260
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // rewardTokenHeldBack: uint64

	// examples/reti/validatorRegistry.algo.ts:899
	// assert(rewardTokenId !== 0, "this validator doesn't have a reward token defined")
	frame_dig 0 // rewardTokenId: uint64
	intc 0 // 0
	!=

	// this validator doesn't have a reward token defined
	assert

	// examples/reti/validatorRegistry.algo.ts:900
	// poolOneAppId = AppID.fromUint64(this.validatorList(validatorId).value.pools[0].poolAppId)
	intc 5 // 268
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 2 // poolOneAppId: uint64

	// examples/reti/validatorRegistry.algo.ts:902
	// tokenRewardBal = poolOneAppId.address.assetBalance(AssetID.fromUint64(rewardTokenId)) - rewardTokenHeldBack
	frame_dig 2 // poolOneAppId: uint64
	app_params_get AppAddress
	pop
	frame_dig 0 // rewardTokenId: uint64
	asset_holding_get AssetBalance
	pop
	frame_dig 1 // rewardTokenHeldBack: uint64
	-
	frame_bury 3 // tokenRewardBal: uint64

	// examples/reti/validatorRegistry.algo.ts:905
	// sendMethodCall<typeof StakingPool.prototype.payTokenReward>({
	//       applicationID: poolOneAppId,
	//       methodArgs: [receiver, rewardTokenId, tokenRewardBal],
	//     })
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	bytec 13 //  method "payTokenReward(address,uint64,uint64)void"
	itxn_field ApplicationArgs

	// examples/reti/validatorRegistry.algo.ts:906
	// applicationID: poolOneAppId
	frame_dig 2 // poolOneAppId: uint64
	itxn_field ApplicationID

	// examples/reti/validatorRegistry.algo.ts:907
	// methodArgs: [receiver, rewardTokenId, tokenRewardBal]
	frame_dig -2 // receiver: Address
	itxn_field ApplicationArgs
	frame_dig 0 // rewardTokenId: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 3 // tokenRewardBal: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/validatorRegistry.algo.ts:909
	// assert(
	//       poolOneAppId.address.assetBalance(AssetID.fromUint64(rewardTokenId)) === rewardTokenHeldBack,
	//       'balance of remaining reward tokens should match the held back amount'
	//     )
	frame_dig 2 // poolOneAppId: uint64
	app_params_get AppAddress
	pop
	frame_dig 0 // rewardTokenId: uint64
	asset_holding_get AssetBalance
	pop
	frame_dig 1 // rewardTokenHeldBack: uint64
	==

	// balance of remaining reward tokens should match the held back amount
	assert

	// examples/reti/validatorRegistry.algo.ts:913
	// return tokenRewardBal;
	frame_dig 3 // tokenRewardBal: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 3
	retsub

// callerMustBeOwner(validatorId: ValidatorIdType): void
callerMustBeOwner:
	proto 1 0

	// examples/reti/validatorRegistry.algo.ts:1006
	// assert(
	//       this.txn.sender === this.validatorList(validatorId).value.config.owner,
	//       'can only be called by validator owner'
	//     )
	txn Sender
	intc 2 // 8
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	==

	// can only be called by validator owner
	assert
	retsub

// callerMustBeOwnerOrManager(validatorId: ValidatorIdType): void
callerMustBeOwnerOrManager:
	proto 1 0

	// examples/reti/validatorRegistry.algo.ts:1013
	// assert(
	//       this.txn.sender === this.validatorList(validatorId).value.config.owner ||
	//         this.txn.sender === this.validatorList(validatorId).value.config.manager,
	//       'can only be called by owner or manager of validator'
	//     )
	txn Sender
	intc 2 // 8
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	==
	dup
	bnz *skip_or3
	txn Sender
	intc 20 // 40
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	==
	||

*skip_or3:
	// can only be called by owner or manager of validator
	assert
	retsub

// verifyPoolKeyCaller(poolKey: ValidatorPoolKey): void
//
// verifyPoolKeyCaller verifies the passed in key (from a staking pool calling us to update metrics) is valid
// and matches the information we have in our state.  'Fake' pools could call us to update our data, but they
// can't fake the ids and most importantly application id(!) of the caller that has to match.
verifyPoolKeyCaller:
	proto 1 0

	// examples/reti/validatorRegistry.algo.ts:1026
	// assert(this.validatorList(poolKey.id).exists, "the specified validator id isn't valid")
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	box_len
	swap
	pop

	// the specified validator id isn't valid
	assert

	// examples/reti/validatorRegistry.algo.ts:1027
	// assert(poolKey.poolId <= MAX_POOLS, 'pool id not in valid range')
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 3 // 24
	<=

	// pool id not in valid range
	assert

	// examples/reti/validatorRegistry.algo.ts:1028
	// assert(
	//       poolKey.poolId > 0 && (poolKey.poolId as uint16) <= this.validatorList(poolKey.id).value.state.numPools,
	//       'pool id outside of range of pools created for this validator'
	//     )
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 0 // 0
	>
	dup
	bz *skip_and3
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 9 // 242
	intc 10 // 2
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	<=
	&&

*skip_and3:
	// pool id outside of range of pools created for this validator
	assert

	// examples/reti/validatorRegistry.algo.ts:1034
	// assert(
	//       poolKey.poolAppId === this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].poolAppId,
	//       "The passed in app id doesn't match the passed in ids"
	//     )
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	intc 5 //  headOffset
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 0 // 0
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	==

	// The passed in app id doesn't match the passed in ids
	assert

	// examples/reti/validatorRegistry.algo.ts:1039
	// assert(this.txn.sender === AppID.fromUint64(poolKey.poolAppId).address)
	txn Sender
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	app_params_get AppAddress
	pop
	==
	assert

	// examples/reti/validatorRegistry.algo.ts:1041
	// assert(poolKey.id === (AppID.fromUint64(poolKey.poolAppId).globalState('validatorId') as uint64))
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	pushbytes 0x76616c696461746f724964 // "validatorId"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(poolKey.poolAppId).globalState('validatorId')
	assert
	==
	assert

	// examples/reti/validatorRegistry.algo.ts:1042
	// assert(poolKey.poolId === (AppID.fromUint64(poolKey.poolAppId).globalState('poolId') as uint64))
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	pushbytes 0x706f6f6c4964 // "poolId"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(poolKey.poolAppId).globalState('poolId')
	assert
	==
	assert
	retsub

// reverifyNFDOwnership(validatorId: ValidatorIdType): void
//
// This method verifies the ownership of NFD (Named Function Data) by a validator.
// If the ownership is no longer valid, it removes the NFD from the validator's configuration.
//
// @param {ValidatorIdType} validatorId - The id of the validator whose data should be re-evaluated.
reverifyNFDOwnership:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dup

	// examples/reti/validatorRegistry.algo.ts:1052
	// validatorConfig = this.validatorList(validatorId).value.config
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	frame_bury 0 // storage key//validatorConfig

	// *if30_condition
	// examples/reti/validatorRegistry.algo.ts:1053
	// validatorConfig.nfdForInfo !== 0
	intc 21 // 72
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 0 // 0
	!=
	bz *if30_end

	// *if30_consequent
	// examples/reti/validatorRegistry.algo.ts:1056
	// nfdOwner = AppID.fromUint64(validatorConfig.nfdForInfo).globalState('i.owner.a') as Address
	intc 21 // 72
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	bytec 10 //  "i.owner.a"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(validatorConfig.nfdForInfo).globalState('i.owner.a')
	assert
	frame_bury 1 // nfdOwner: address

	// *if31_condition
	// examples/reti/validatorRegistry.algo.ts:1058
	// validatorConfig.owner !== nfdOwner && validatorConfig.manager !== nfdOwner
	intc 2 // 8
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_dig 1 // nfdOwner: address
	!=
	dup
	bz *skip_and4
	intc 20 // 40
	intc 6 // 32
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_dig 1 // nfdOwner: address
	!=
	&&

*skip_and4:
	bz *if31_end

	// *if31_consequent
	// examples/reti/validatorRegistry.algo.ts:1060
	// this.validatorList(validatorId).value.config.nfdForInfo = 0
	intc 21 // 72
	bytec 7 // 0x0000000000000000
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

*if31_end:

*if30_end:
	retsub

// validateConfig(config: ValidatorConfig): void
validateConfig:
	proto 1 0

	// examples/reti/validatorRegistry.algo.ts:1067
	// assert(config.owner !== Address.zeroAddress)
	frame_dig -1 // config: ValidatorConfig
	extract 8 32
	global ZeroAddress
	!=
	assert

	// examples/reti/validatorRegistry.algo.ts:1068
	// assert(config.manager !== Address.zeroAddress)
	frame_dig -1 // config: ValidatorConfig
	extract 40 32
	global ZeroAddress
	!=
	assert

	// examples/reti/validatorRegistry.algo.ts:1069
	// assert(this.txn.sender === config.owner, 'sender must be owner to add new validator')
	txn Sender
	frame_dig -1 // config: ValidatorConfig
	extract 8 32
	==

	// sender must be owner to add new validator
	assert

	// examples/reti/validatorRegistry.algo.ts:1071
	// assert(
	//       config.entryGatingType >= GATING_TYPE_NONE && config.entryGatingType <= GATING_TYPE_CONST_MAX,
	//       'gating type not valid'
	//     )
	frame_dig -1 // config: ValidatorConfig
	extract 80 1
	btoi
	intc 0 // 0
	>=
	dup
	bz *skip_and5
	frame_dig -1 // config: ValidatorConfig
	extract 80 1
	btoi
	intc 15 // 4
	<=
	&&

*skip_and5:
	// gating type not valid
	assert

	// examples/reti/validatorRegistry.algo.ts:1075
	// assert(
	//       config.epochRoundLength >= MIN_EPOCH_LENGTH && config.epochRoundLength <= MAX_EPOCH_LENGTH,
	//       'epoch length not in allowable range'
	//     )
	frame_dig -1 // config: ValidatorConfig
	extract 169 4
	btoi
	intc 1 // 1
	>=
	dup
	bz *skip_and6
	frame_dig -1 // config: ValidatorConfig
	extract 169 4
	btoi
	intc 24 // 1000000
	<=
	&&

*skip_and6:
	// epoch length not in allowable range
	assert

	// examples/reti/validatorRegistry.algo.ts:1079
	// assert(
	//       config.percentToValidator >= MIN_PCT_TO_VALIDATOR && config.percentToValidator <= MAX_PCT_TO_VALIDATOR,
	//       'commission percentage not valid'
	//     )
	frame_dig -1 // config: ValidatorConfig
	extract 173 4
	btoi
	intc 0 // 0
	>=
	dup
	bz *skip_and7
	frame_dig -1 // config: ValidatorConfig
	extract 173 4
	btoi
	intc 24 // 1000000
	<=
	&&

*skip_and7:
	// commission percentage not valid
	assert

	// *if32_condition
	// examples/reti/validatorRegistry.algo.ts:1083
	// config.percentToValidator !== 0
	frame_dig -1 // config: ValidatorConfig
	extract 173 4
	btoi
	intc 0 // 0
	!=
	bz *if32_end

	// *if32_consequent
	// examples/reti/validatorRegistry.algo.ts:1084
	// assert(
	//         config.validatorCommissionAddress !== Address.zeroAddress,
	//         'validatorCommissionAddress must be set if percent to validator is not 0'
	//       )
	frame_dig -1 // config: ValidatorConfig
	extract 177 32
	global ZeroAddress
	!=

	// validatorCommissionAddress must be set if percent to validator is not 0
	assert

*if32_end:
	// examples/reti/validatorRegistry.algo.ts:1089
	// assert(config.minEntryStake >= MIN_ALGO_STAKE_PER_POOL, 'staking pool must have minimum entry of 1 algo')
	frame_dig -1 // config: ValidatorConfig
	extract 209 8
	btoi
	intc 24 // 1000000
	>=

	// staking pool must have minimum entry of 1 algo
	assert

	// examples/reti/validatorRegistry.algo.ts:1091
	// assert(
	//       config.poolsPerNode > 0 && config.poolsPerNode <= MAX_POOLS_PER_NODE,
	//       'number of pools per node must be be between 1 and the maximum allowed number'
	//     )
	frame_dig -1 // config: ValidatorConfig
	extract 225 1
	btoi
	intc 0 // 0
	>
	dup
	bz *skip_and8
	frame_dig -1 // config: ValidatorConfig
	extract 225 1
	btoi
	intc 8 // 3
	<=
	&&

*skip_and8:
	// number of pools per node must be be between 1 and the maximum allowed number
	assert

	// *if33_condition
	// examples/reti/validatorRegistry.algo.ts:1095
	// config.sunsettingOn !== 0
	frame_dig -1 // config: ValidatorConfig
	extract 226 8
	btoi
	intc 0 // 0
	!=
	bz *if33_end

	// *if33_consequent
	// examples/reti/validatorRegistry.algo.ts:1096
	// assert(config.sunsettingOn > globals.latestTimestamp, 'sunsettingOn must be later than now if set')
	frame_dig -1 // config: ValidatorConfig
	extract 226 8
	btoi
	global LatestTimestamp
	>

	// sunsettingOn must be later than now if set
	assert

*if33_end:
	retsub

// callPoolAddStake(stakedAmountPayment: PayTxn, poolKey: ValidatorPoolKey, mbrAmtPaid: uint64, isNewStakerToValidator: boolean, isNewStakerToProtocol: boolean): void
//
// Adds a stakers amount of algo to a validator pool, transferring the algo we received from them (already verified
// by our caller) to the staking pool account, and then telling it about the amount being added for the specified
// staker.
//
// @param {PayTxn} stakedAmountPayment - payment coming from staker to place into a pool
// @param {ValidatorPoolKey} poolKey - The key of the validator pool.
// @param {uint64} mbrAmtPaid - Amount the user is leaving behind in the validator to pay for their staker MBR cost
// @param {boolean} isNewStakerToValidator - if this is a new, first-time staker to the validator
// @param {boolean} isNewStakerToProtocol - if this is a new, first-time staker to the protocol
callPoolAddStake:
	proto 5 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:1118
	// poolAppId = this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].poolAppId
	intc 5 //  headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 0 // 0
	+
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // poolAppId: uint64

	// examples/reti/validatorRegistry.algo.ts:1122
	// sendMethodCall<typeof StakingPool.prototype.addStake, uint64>({
	//       applicationID: AppID.fromUint64(poolAppId),
	//       methodArgs: [
	//         // =======
	//         // THIS IS A SEND of the amount received right back out and into the staking pool contract account.
	//         { amount: stakedAmountPayment.amount - mbrAmtPaid, receiver: AppID.fromUint64(poolAppId).address },
	//         // =======
	//         stakedAmountPayment.sender,
	//       ],
	//     })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// examples/reti/validatorRegistry.algo.ts:1127
	// amount: stakedAmountPayment.amount - mbrAmtPaid
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	itxn_field Amount

	// examples/reti/validatorRegistry.algo.ts:1127
	// receiver: AppID.fromUint64(poolAppId).address
	frame_dig 0 // poolAppId: uint64
	app_params_get AppAddress
	pop
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee
	itxn_next
	intc 7 //  appl
	itxn_field TypeEnum
	pushbytes 0xf9c70cbd // method "addStake(pay,address)uint64"
	itxn_field ApplicationArgs

	// examples/reti/validatorRegistry.algo.ts:1123
	// applicationID: AppID.fromUint64(poolAppId)
	frame_dig 0 // poolAppId: uint64
	itxn_field ApplicationID

	// examples/reti/validatorRegistry.algo.ts:1124
	// methodArgs: [
	//         // =======
	//         // THIS IS A SEND of the amount received right back out and into the staking pool contract account.
	//         { amount: stakedAmountPayment.amount - mbrAmtPaid, receiver: AppID.fromUint64(poolAppId).address },
	//         // =======
	//         stakedAmountPayment.sender,
	//       ]
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi

	// *if34_condition
	// examples/reti/validatorRegistry.algo.ts:1132
	// globals.opcodeBudget < 500
	global OpcodeBudget
	pushint 500
	<
	bz *if34_end

	// *if34_consequent
	// examples/reti/validatorRegistry.algo.ts:1133
	// increaseOpcodeBudget()
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 8 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 26 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if34_end:
	// examples/reti/validatorRegistry.algo.ts:1137
	// poolNumStakers = AppID.fromUint64(poolAppId).globalState('numStakers') as uint64
	frame_dig 0 // poolAppId: uint64
	bytec 6 //  "numStakers"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(poolAppId).globalState('numStakers')
	assert
	frame_bury 1 // poolNumStakers: uint64

	// examples/reti/validatorRegistry.algo.ts:1138
	// poolAlgoStaked = AppID.fromUint64(poolAppId).globalState('staked') as uint64
	frame_dig 0 // poolAppId: uint64
	bytec 4 //  "staked"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(poolAppId).globalState('staked')
	assert
	frame_bury 2 // poolAlgoStaked: uint64

	// examples/reti/validatorRegistry.algo.ts:1139
	// this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].totalStakers = poolNumStakers as uint16
	intc 5 //  headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 2 //  headOffset
	+
	frame_dig 1 // poolNumStakers: uint64
	itob
	extract 6 2
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:1140
	// this.validatorList(poolKey.id).value.pools[poolKey.poolId - 1].totalAlgoStaked = poolAlgoStaked
	intc 5 //  headOffset
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	-
	intc 4 // 18
	* // acc * typeLength
	+
	intc 11 //  headOffset
	+
	frame_dig 2 // poolAlgoStaked: uint64
	itob
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// *if35_condition
	// examples/reti/validatorRegistry.algo.ts:1143
	// isNewStakerToValidator
	frame_dig -4 // isNewStakerToValidator: boolean
	bz *if35_end

	// *if35_consequent
	// examples/reti/validatorRegistry.algo.ts:1144
	// this.validatorList(poolKey.id).value.state.totalStakers += 1
	intc 23 // 244
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	intc 1 // 1
	+
	itob
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

*if35_end:
	// *if36_condition
	// examples/reti/validatorRegistry.algo.ts:1146
	// isNewStakerToProtocol
	frame_dig -5 // isNewStakerToProtocol: boolean
	bz *if36_end

	// *if36_consequent
	// examples/reti/validatorRegistry.algo.ts:1147
	// this.numStakers.value += 1
	bytec 6 //  "numStakers"
	app_global_get
	intc 1 // 1
	+
	bytec 6 //  "numStakers"
	swap
	app_global_put

*if36_end:
	// examples/reti/validatorRegistry.algo.ts:1149
	// this.validatorList(poolKey.id).value.state.totalAlgoStaked += stakedAmountPayment.amount - mbrAmtPaid
	intc 12 // 252
	dup
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	+
	itob
	bytec 0 //  "v"
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:1150
	// this.totalAlgoStaked.value += stakedAmountPayment.amount - mbrAmtPaid
	bytec 4 //  "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -3 // mbrAmtPaid: uint64
	-
	+
	bytec 4 //  "staked"
	swap
	app_global_put
	retsub

// updateStakerPoolSet(staker: Address, poolKey: ValidatorPoolKey): void
updateStakerPoolSet:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:1154
	// assert(this.stakerPoolSet(staker).exists)
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	box_len
	swap
	pop
	assert

	// examples/reti/validatorRegistry.algo.ts:1156
	// poolSet = clone(this.stakerPoolSet(staker).value)
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	box_get

	// box value does not exist: this.stakerPoolSet(staker).value
	assert
	frame_bury 0 // poolSet: (uint64,uint64,uint64)[6]

	// examples/reti/validatorRegistry.algo.ts:1157
	// firstEmpty = 0
	intc 0 // 0
	frame_bury 1 // firstEmpty: uint64

	// examples/reti/validatorRegistry.algo.ts:1158
	// for (let i = 0; i < this.stakerPoolSet(staker).value.length; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_7:
	// examples/reti/validatorRegistry.algo.ts:1158
	// i < this.stakerPoolSet(staker).value.length
	frame_dig 2 // i: uint64
	intc 7 // 6
	<
	bz *for_7_end

	// *if37_condition
	// examples/reti/validatorRegistry.algo.ts:1159
	// poolSet[i] === poolKey
	frame_dig 0 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 3 // 24
	extract3
	frame_dig -2 // poolKey: ValidatorPoolKey
	==
	bz *if37_end

	// *if37_consequent
	// examples/reti/validatorRegistry.algo.ts:1161
	// return;
	retsub

*if37_end:
	// *if38_condition
	// examples/reti/validatorRegistry.algo.ts:1163
	// firstEmpty === 0 && poolSet[i].id === 0
	frame_dig 1 // firstEmpty: uint64
	intc 0 // 0
	==
	dup
	bz *skip_and9
	frame_dig 0 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 2 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	==
	&&

*skip_and9:
	bz *if38_end

	// *if38_consequent
	// examples/reti/validatorRegistry.algo.ts:1164
	// firstEmpty = i + 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // firstEmpty: uint64

*if38_end:

*for_7_continue:
	// examples/reti/validatorRegistry.algo.ts:1158
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_7

*for_7_end:
	// *if39_condition
	// examples/reti/validatorRegistry.algo.ts:1167
	// firstEmpty === 0
	frame_dig 1 // firstEmpty: uint64
	intc 0 // 0
	==
	bz *if39_end

	// *if39_consequent
	// No empty slot available in the staker pool set
	err

*if39_end:
	// examples/reti/validatorRegistry.algo.ts:1170
	// this.stakerPoolSet(staker).value[firstEmpty - 1] = poolKey
	frame_dig 1 // firstEmpty: uint64
	intc 1 // 1
	-
	intc 3 // 24
	* // acc * typeLength
	frame_dig -2 // poolKey: ValidatorPoolKey
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	cover 2
	box_replace
	retsub

// removeFromStakerPoolSet(staker: Address, poolKey: ValidatorPoolKey): [boolean, boolean]
//
// Removes a pool key from the staker's active pool set - fails if not found (!)
//
// @param {Address} staker - The address of the staker.
// @param {ValidatorPoolKey} poolKey - The pool key they should be stored in
//
// @return [boolean, boolean] [is the staker gone from ALL pools of the given VALIDATOR, and is staker gone from ALL pools]
removeFromStakerPoolSet:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 4

	// examples/reti/validatorRegistry.algo.ts:1183
	// inSameValidatorPoolCount = 0
	intc 0 // 0
	frame_bury 0 // inSameValidatorPoolCount: uint64

	// examples/reti/validatorRegistry.algo.ts:1184
	// inAnyPoolCount = 0
	intc 0 // 0
	frame_bury 1 // inAnyPoolCount: uint64

	// examples/reti/validatorRegistry.algo.ts:1185
	// found = false
	intc 0 // 0
	frame_bury 2 // found: bool

	// examples/reti/validatorRegistry.algo.ts:1187
	// poolSet = clone(this.stakerPoolSet(staker).value)
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	box_get

	// box value does not exist: this.stakerPoolSet(staker).value
	assert
	frame_bury 3 // poolSet: (uint64,uint64,uint64)[6]

	// examples/reti/validatorRegistry.algo.ts:1188
	// for (let i = 0; i < this.stakerPoolSet(staker).value.length; i += 1)
	intc 0 // 0
	frame_bury 4 // i: uint64

*for_8:
	// examples/reti/validatorRegistry.algo.ts:1188
	// i < this.stakerPoolSet(staker).value.length
	frame_dig 4 // i: uint64
	intc 7 // 6
	<
	bz *for_8_end

	// *if40_condition
	// examples/reti/validatorRegistry.algo.ts:1189
	// poolSet[i].id === 0
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	==
	bz *if40_end

	// *if40_consequent
	b *for_8_continue

*if40_end:
	// examples/reti/validatorRegistry.algo.ts:1192
	// inAnyPoolCount += 1
	frame_dig 1 // inAnyPoolCount: uint64
	intc 1 // 1
	+
	frame_bury 1 // inAnyPoolCount: uint64

	// *if41_condition
	// examples/reti/validatorRegistry.algo.ts:1193
	// poolSet[i].id === poolKey.id
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 0 // 0
	+
	intc 2 // 8
	extract3
	btoi
	frame_dig -2 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	==
	bz *if41_end

	// *if41_consequent
	// *if42_condition
	// examples/reti/validatorRegistry.algo.ts:1194
	// poolSet[i] === poolKey
	frame_dig 3 // poolSet: (uint64,uint64,uint64)[6]
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	intc 3 // 24
	extract3
	frame_dig -2 // poolKey: ValidatorPoolKey
	==
	bz *if42_else

	// *if42_consequent
	// examples/reti/validatorRegistry.algo.ts:1195
	// found = true
	intc 1 // 1
	frame_bury 2 // found: bool

	// examples/reti/validatorRegistry.algo.ts:1197
	// this.stakerPoolSet(staker).value[i] = { id: 0, poolId: 0, poolAppId: 0 }
	frame_dig 4 // i: uint64
	intc 3 // 24
	* // acc * typeLength
	pushbytes 0x000000000000000000000000000000000000000000000000
	bytec 3 //  "sps"
	frame_dig -1 // staker: Address
	concat
	cover 2
	box_replace
	b *if42_end

*if42_else:
	// examples/reti/validatorRegistry.algo.ts:1199
	// inSameValidatorPoolCount += 1
	frame_dig 0 // inSameValidatorPoolCount: uint64
	intc 1 // 1
	+
	frame_bury 0 // inSameValidatorPoolCount: uint64

*if42_end:

*if41_end:

*for_8_continue:
	// examples/reti/validatorRegistry.algo.ts:1188
	// i += 1
	frame_dig 4 // i: uint64
	intc 1 // 1
	+
	frame_bury 4 // i: uint64
	b *for_8

*for_8_end:
	// *if43_condition
	// examples/reti/validatorRegistry.algo.ts:1203
	// !found
	frame_dig 2 // found: bool
	!
	bz *if43_end

	// *if43_consequent
	// No matching slot found when told to remove a pool from the stakers set
	err

*if43_end:
	// examples/reti/validatorRegistry.algo.ts:1207
	// return [inSameValidatorPoolCount === 0, inAnyPoolCount === 0];
	bytec 5 // 0x00
	intc 0 // 0
	frame_dig 0 // inSameValidatorPoolCount: uint64
	intc 0 // 0
	==
	setbit
	intc 1 // 1
	frame_dig 1 // inAnyPoolCount: uint64
	intc 0 // 0
	==
	setbit

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// addPoolToNode(validatorId: ValidatorIdType, poolAppId: uint64, nodeNum: uint64): void
addPoolToNode:
	proto 3 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:1211
	// nodePoolAssignments = clone(this.validatorList(validatorId).value.nodePoolAssignments)
	intc 17 //  headOffset
	intc 22 // 192
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_bury 0 // nodePoolAssignments: ((uint64[3])[8])

	// examples/reti/validatorRegistry.algo.ts:1212
	// maxPoolsPerNodeForThisValidator = this.validatorList(validatorId).value.config.poolsPerNode as uint64
	pushint 225
	intc 1 // 1
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 1 // maxPoolsPerNodeForThisValidator: uint64

	// examples/reti/validatorRegistry.algo.ts:1214
	// assert(nodeNum >= 1 && nodeNum <= MAX_NODES, 'node number not in valid range')
	frame_dig -3 // nodeNum: uint64
	intc 1 // 1
	>=
	dup
	bz *skip_and10
	frame_dig -3 // nodeNum: uint64
	intc 2 // 8
	<=
	&&

*skip_and10:
	// node number not in valid range
	assert

	// examples/reti/validatorRegistry.algo.ts:1216
	// for (let i = 0; i < maxPoolsPerNodeForThisValidator; i += 1)
	intc 0 // 0
	frame_bury 2 // i: uint64

*for_9:
	// examples/reti/validatorRegistry.algo.ts:1216
	// i < maxPoolsPerNodeForThisValidator
	frame_dig 2 // i: uint64
	frame_dig 1 // maxPoolsPerNodeForThisValidator: uint64
	<
	bz *for_9_end

	// *if44_condition
	// examples/reti/validatorRegistry.algo.ts:1217
	// nodePoolAssignments.nodes[nodeNum - 1].poolAppIds[i] === 0
	frame_dig 0 // nodePoolAssignments: ((uint64[3])[8])
	intc 0 // 0
	frame_dig -3 // nodeNum: uint64
	intc 1 // 1
	-
	intc 3 // 24
	* // acc * typeLength
	+
	intc 0 // 0
	+
	frame_dig 2 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	intc 2 // 8
	extract3
	btoi
	intc 0 // 0
	==
	bz *if44_end

	// *if44_consequent
	// examples/reti/validatorRegistry.algo.ts:1219
	// this.validatorList(validatorId).value.nodePoolAssignments.nodes[nodeNum - 1].poolAppIds[i] = poolAppId
	intc 17 // 900
	frame_dig -3 // nodeNum: uint64
	intc 1 // 1
	-
	intc 3 // 24
	* // acc * typeLength
	+
	intc 0 // 0
	+
	frame_dig 2 // i: uint64
	intc 2 // 8
	* // acc * typeLength
	+
	frame_dig -2 // poolAppId: uint64
	itob
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_replace

	// examples/reti/validatorRegistry.algo.ts:1220
	// return;
	retsub

*if44_end:

*for_9_continue:
	// examples/reti/validatorRegistry.algo.ts:1216
	// i += 1
	frame_dig 2 // i: uint64
	intc 1 // 1
	+
	frame_bury 2 // i: uint64
	b *for_9

*for_9_end:
	// no available space in specified node for this pool
	err
	retsub

// doesStakerMeetGating(validatorId: ValidatorIdType, valueToVerify: uint64): void
//
// Checks if a staker meets the gating requirements specified by the validator.
//
// @param {ValidatorIdType} validatorId - The id of the validator.
// @param {uint64} valueToVerify - The value to verify against the gating requirements.
// @returns {void} or asserts if requirements not met.
doesStakerMeetGating:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 8

	// examples/reti/validatorRegistry.algo.ts:1234
	// type = this.validatorList(validatorId).value.config.entryGatingType
	intc 36 // 80
	intc 1 // 1
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 0 // type: uint8

	// *if45_condition
	// examples/reti/validatorRegistry.algo.ts:1235
	// type === GATING_TYPE_NONE
	frame_dig 0 // type: uint8
	intc 0 // 0
	==
	bz *if45_end

	// *if45_consequent
	// examples/reti/validatorRegistry.algo.ts:1236
	// return;
	retsub

*if45_end:
	// examples/reti/validatorRegistry.algo.ts:1238
	// staker = this.txn.sender
	txn Sender
	frame_bury 1 // staker: address

	// examples/reti/validatorRegistry.algo.ts:1239
	// config = clone(this.validatorList(validatorId).value.config)
	intc 0 // 0
	intc 9 // 242
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	frame_bury 2 // config: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// *if46_condition
	// examples/reti/validatorRegistry.algo.ts:1243
	// type === GATING_TYPE_ASSETS_CREATED_BY ||
	//       type === GATING_TYPE_ASSET_ID ||
	//       type === GATING_TYPE_CREATED_BY_NFD_ADDRESSES
	frame_dig 0 // type: uint8
	intc 1 // 1
	==
	dup
	bnz *skip_or4
	frame_dig 0 // type: uint8
	intc 10 // 2
	==
	||

*skip_or4:
	dup
	bnz *skip_or5
	frame_dig 0 // type: uint8
	intc 8 // 3
	==
	||

*skip_or5:
	bz *if46_end

	// *if46_consequent
	// examples/reti/validatorRegistry.algo.ts:1247
	// assert(valueToVerify !== 0)
	frame_dig -2 // valueToVerify: uint64
	intc 0 // 0
	!=
	assert

	// examples/reti/validatorRegistry.algo.ts:1248
	// balRequired = this.validatorList(validatorId).value.config.gatingAssetMinBalance
	intc 37 // 145
	intc 2 // 8
	bytec 0 //  "v"
	frame_dig -1 // validatorId: ValidatorIdType
	itob
	concat
	cover 2
	box_extract
	btoi
	frame_bury 3 // balRequired: uint64

	// *if47_condition
	// examples/reti/validatorRegistry.algo.ts:1249
	// balRequired === 0
	frame_dig 3 // balRequired: uint64
	intc 0 // 0
	==
	bz *if47_end

	// *if47_consequent
	// examples/reti/validatorRegistry.algo.ts:1250
	// balRequired = 1
	intc 1 // 1
	frame_bury 3 // balRequired: uint64

*if47_end:
	// examples/reti/validatorRegistry.algo.ts:1252
	// assert(
	//         staker.assetBalance(AssetID.fromUint64(valueToVerify)) >= balRequired,
	//         'must have required minimum balance of validator defined token to add stake'
	//       )
	frame_dig 1 // staker: address
	frame_dig -2 // valueToVerify: uint64
	asset_holding_get AssetBalance
	pop
	frame_dig 3 // balRequired: uint64
	>=

	// must have required minimum balance of validator defined token to add stake
	assert

*if46_end:
	// *if48_condition
	// examples/reti/validatorRegistry.algo.ts:1257
	// type === GATING_TYPE_ASSETS_CREATED_BY
	frame_dig 0 // type: uint8
	intc 1 // 1
	==
	bz *if48_end

	// *if48_consequent
	// examples/reti/validatorRegistry.algo.ts:1258
	// assert(
	//         AssetID.fromUint64(valueToVerify).creator === config.entryGatingAddress,
	//         'specified asset must be created by creator that the validator defined as a requirement to stake'
	//       )
	frame_dig -2 // valueToVerify: uint64
	asset_params_get AssetCreator
	pop
	frame_dig 2 // config: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 81 32
	==

	// specified asset must be created by creator that the validator defined as a requirement to stake
	assert

*if48_end:
	// *if49_condition
	// examples/reti/validatorRegistry.algo.ts:1263
	// type === GATING_TYPE_ASSET_ID
	frame_dig 0 // type: uint8
	intc 10 // 2
	==
	bz *if49_end

	// *if49_consequent
	// examples/reti/validatorRegistry.algo.ts:1264
	// found = false
	intc 0 // 0
	frame_bury 4 // found: bool

	// examples/reti/validatorRegistry.algo.ts:1265
	// config.entryGatingAssets
	frame_dig 2 // config: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 113 32
	dup
	frame_bury 5 // copy of the array we are iterating over
	extract 0 8
	btoi
	frame_bury 6 // assetId: uint64
	intc 0 // 0
	frame_bury 7 // the offset we are extracting the next element from

*forOf_0:
	// *if50_condition
	// examples/reti/validatorRegistry.algo.ts:1266
	// valueToVerify === assetId
	frame_dig -2 // valueToVerify: uint64
	frame_dig 6 // assetId: uint64
	==
	bz *if50_end

	// *if50_consequent
	// examples/reti/validatorRegistry.algo.ts:1267
	// found = true
	intc 1 // 1
	frame_bury 4 // found: bool
	b *forOf_0_end

*if50_end:

*forOf_0_continue:
	// increment offset and loop if not out of bounds
	frame_dig 7 // the offset we are extracting the next element from
	intc 2 // 8
	+
	dup
	intc 6 //  offset of last element
	<
	bz *forOf_0_end
	frame_bury 7 // the offset we are extracting the next element from
	frame_dig 5 // copy of the array we are iterating over
	frame_dig 7 // the offset we are extracting the next element from
	intc 2 // 8
	extract
	btoi
	frame_bury 6 // assetId: uint64
	b *forOf_0

*forOf_0_end:
	// examples/reti/validatorRegistry.algo.ts:1271
	// assert(found, 'specified asset must be identical to the asset id defined as a requirement to stake')
	frame_dig 4 // found: bool

	// specified asset must be identical to the asset id defined as a requirement to stake
	assert

*if49_end:
	// *if51_condition
	// examples/reti/validatorRegistry.algo.ts:1273
	// type === GATING_TYPE_CREATED_BY_NFD_ADDRESSES
	frame_dig 0 // type: uint8
	intc 8 // 3
	==
	bz *if51_end

	// *if51_consequent
	// examples/reti/validatorRegistry.algo.ts:1276
	// assert(
	//         this.isAddressInNFDCAAlgoList(config.entryGatingAssets[0], AssetID.fromUint64(valueToVerify).creator),
	//         'specified asset must be created by creator that is one of the linked addresses in an nfd'
	//       )
	frame_dig -2 // valueToVerify: uint64
	asset_params_get AssetCreator
	pop
	frame_dig 2 // config: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 113 8
	btoi
	callsub isAddressInNFDCAAlgoList

	// specified asset must be created by creator that is one of the linked addresses in an nfd
	assert

*if51_end:
	// *if52_condition
	// examples/reti/validatorRegistry.algo.ts:1281
	// type === GATING_TYPE_SEGMENT_OF_NFD
	frame_dig 0 // type: uint8
	intc 15 // 4
	==
	bz *if52_end

	// *if52_consequent
	// examples/reti/validatorRegistry.algo.ts:1283
	// userOfferedNFDAppID = valueToVerify
	frame_dig -2 // valueToVerify: uint64
	frame_bury 8 // userOfferedNFDAppID: uint64

	// examples/reti/validatorRegistry.algo.ts:1284
	// assert(this.isNFDAppIDValid(userOfferedNFDAppID), 'provided NFD must be valid')
	frame_dig 8 // userOfferedNFDAppID: uint64
	callsub isNFDAppIDValid

	// provided NFD must be valid
	assert

	// examples/reti/validatorRegistry.algo.ts:1287
	// assert(
	//         rawBytes(AppID.fromUint64(userOfferedNFDAppID).globalState('i.owner.a') as Address) === rawBytes(staker) ||
	//           this.isAddressInNFDCAAlgoList(userOfferedNFDAppID, staker),
	//         "provided nfd for entry isn't owned or linked to the staker"
	//       )
	frame_dig 8 // userOfferedNFDAppID: uint64
	bytec 10 //  "i.owner.a"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(userOfferedNFDAppID).globalState('i.owner.a')
	assert
	frame_dig 1 // staker: address
	==
	dup
	bnz *skip_or6
	frame_dig 1 // staker: address
	frame_dig 8 // userOfferedNFDAppID: uint64
	callsub isAddressInNFDCAAlgoList
	||

*skip_or6:
	// provided nfd for entry isn't owned or linked to the staker
	assert

	// examples/reti/validatorRegistry.algo.ts:1294
	// assert(
	//         btoi(AppID.fromUint64(userOfferedNFDAppID).globalState('i.parentAppID') as bytes) ===
	//           config.entryGatingAssets[0],
	//         'specified nfd must be a segment of the nfd the validator specified as a requirement'
	//       )
	frame_dig 8 // userOfferedNFDAppID: uint64
	pushbytes 0x692e706172656e744170704944 // "i.parentAppID"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(userOfferedNFDAppID).globalState('i.parentAppID')
	assert
	btoi
	frame_dig 2 // config: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 113 8
	btoi
	==

	// specified nfd must be a segment of the nfd the validator specified as a requirement
	assert

*if52_end:
	retsub

// isNFDAppIDValid(nfdAppID: uint64): boolean
//
// Checks if the given NFD App id is valid.  Using only the App id there's no validation against the name (ie: that nfd X is name Y)
// So it's assumed for the caller, the app id alone is fine.  The name is fetched from the specified app id and the two
// together are used for validity check call to the nfd registry.
//
// @param {uint64} nfdAppID - The NFD App id to verify.
//
// @returns {boolean} - Returns true if the NFD App id is valid, otherwise false.
isNFDAppIDValid:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// examples/reti/validatorRegistry.algo.ts:1313
	// userOfferedNFDName = AppID.fromUint64(nfdAppID).globalState('i.name') as string
	frame_dig -1 // nfdAppID: uint64
	pushbytes 0x692e6e616d65 // "i.name"
	app_global_get_ex

	// global state value does not exist: AppID.fromUint64(nfdAppID).globalState('i.name')
	assert
	frame_bury 0 // userOfferedNFDName: string

	// examples/reti/validatorRegistry.algo.ts:1315
	// return sendMethodCall<[string, uint64], boolean>({
	//       applicationID: AppID.fromUint64(this.nfdRegistryAppId),
	//       name: 'isValidNfdAppId',
	//       methodArgs: [userOfferedNFDName, nfdAppID],
	//     });
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum
	pushbytes 0x4be22fc6 // method "isValidNfdAppId(string,uint64)bool"
	itxn_field ApplicationArgs

	// examples/reti/validatorRegistry.algo.ts:1316
	// applicationID: AppID.fromUint64(this.nfdRegistryAppId)
	intc 28 // TMPL_nfdRegistryAppId
	itxn_field ApplicationID

	// examples/reti/validatorRegistry.algo.ts:1318
	// methodArgs: [userOfferedNFDName, nfdAppID]
	frame_dig 0 // userOfferedNFDName: string
	dup
	len
	itob
	extract 6 2
	swap
	concat
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppID: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	intc 0 // 0
	getbit

	// set the subroutine return value
	frame_bury 0
	retsub

// isAddressInNFDCAAlgoList(nfdAppID: uint64, addrToFind: Address): boolean
//
// Checks if the specified address is present in an NFDs list of verified addresses.
// The NFD is assumed to have already been validated as official.
//
// @param {uint64} nfdAppID - The NFD application id.
// @param {Address} addrToFind - The address to find in the v.caAlgo.0.as property
// @return {boolean} - \`true\` if the address is present, \`false\` otherwise.
isAddressInNFDCAAlgoList:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x
	dupn 2

	// examples/reti/validatorRegistry.algo.ts:1331
	// sendAppCall({
	//       applicationID: AppID.fromUint64(nfdAppID),
	//       applicationArgs: ['read_property', 'v.caAlgo.0.as'],
	//     })
	itxn_begin
	intc 7 //  appl
	itxn_field TypeEnum

	// examples/reti/validatorRegistry.algo.ts:1332
	// applicationID: AppID.fromUint64(nfdAppID)
	frame_dig -1 // nfdAppID: uint64
	itxn_field ApplicationID

	// examples/reti/validatorRegistry.algo.ts:1333
	// applicationArgs: ['read_property', 'v.caAlgo.0.as']
	pushbytes 0x726561645f70726f7065727479 // "read_property"
	itxn_field ApplicationArgs
	pushbytes 0x762e6361416c676f2e302e6173 // "v.caAlgo.0.as"
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/validatorRegistry.algo.ts:1335
	// caAlgoData = this.itxn.lastLog
	itxn LastLog
	frame_bury 0 // caAlgoData: byte[]

	// examples/reti/validatorRegistry.algo.ts:1336
	// for (let i = 0; i < caAlgoData.length; i += 32)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_10:
	// examples/reti/validatorRegistry.algo.ts:1336
	// i < caAlgoData.length
	frame_dig 1 // i: uint64
	frame_dig 0 // caAlgoData: byte[]
	len
	<
	bz *for_10_end

	// examples/reti/validatorRegistry.algo.ts:1337
	// addr = extract3(caAlgoData, i, 32)
	frame_dig 0 // caAlgoData: byte[]
	frame_dig 1 // i: uint64
	intc 6 // 32
	extract3
	frame_bury 2 // addr: byte[]

	// *if53_condition
	// examples/reti/validatorRegistry.algo.ts:1338
	// addr !== rawBytes(globals.zeroAddress) && addr === rawBytes(addrToFind)
	frame_dig 2 // addr: byte[]
	global ZeroAddress
	!=
	dup
	bz *skip_and11
	frame_dig 2 // addr: byte[]
	frame_dig -2 // addrToFind: Address
	==
	&&

*skip_and11:
	bz *if53_end

	// *if53_consequent
	// examples/reti/validatorRegistry.algo.ts:1339
	// return true;
	intc 1 // 1
	b *isAddressInNFDCAAlgoList*return

*if53_end:

*for_10_continue:
	// examples/reti/validatorRegistry.algo.ts:1336
	// i += 32
	frame_dig 1 // i: uint64
	intc 6 // 32
	+
	frame_bury 1 // i: uint64
	b *for_10

*for_10_end:
	// examples/reti/validatorRegistry.algo.ts:1342
	// return false;
	intc 0 // 0

*isAddressInNFDCAAlgoList*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 2
	retsub

// algoSaturationLevel(): uint64
//
// Returns the maximum allowed stake per validator based on a percentage of all current online stake before
// the validator is considered saturated - where rewards are diminished.
// NOTE: this function is defined twice - here and in staking pool contract.  Both must be identical.
algoSaturationLevel:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// examples/reti/validatorRegistry.algo.ts:1351
	// online = this.getCurrentOnlineStake()
	callsub getCurrentOnlineStake
	frame_bury 0 // online: uint64

	// examples/reti/validatorRegistry.algo.ts:1353
	// return wideRatio([online, MAX_VALIDATOR_SOFT_PCT_OF_ONLINE_1DECIMAL], [1000]);
	frame_dig 0 // online: uint64
	pushint 100
	mulw
	intc 0 // 0
	intc 32 // 1000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// maxAllowedStake(): uint64
//
// Returns the MAXIMUM allowed stake per validator based on a percentage of all current online stake.
// Adding stake is completely blocked at this amount.
maxAllowedStake:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// examples/reti/validatorRegistry.algo.ts:1361
	// online = this.getCurrentOnlineStake()
	callsub getCurrentOnlineStake
	frame_bury 0 // online: uint64

	// examples/reti/validatorRegistry.algo.ts:1363
	// return wideRatio([online, MAX_VALIDATOR_HARD_PCT_OF_ONLINE_1DECIMAL], [1000]);
	frame_dig 0 // online: uint64
	pushint 150
	mulw
	intc 0 // 0
	intc 32 // 1000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// maxAlgoAllowedPerPool(): uint64
//
// Returns the MAXIMUM allowed stake per pool and still receive incentives - we'll treat this as the 'max per pool'
maxAlgoAllowedPerPool:
	proto 0 1

	// examples/reti/validatorRegistry.algo.ts:1370
	// return globals.payoutsMaxBalance;
	global PayoutsMaxBalance
	retsub

// getCurrentOnlineStake(): uint64
getCurrentOnlineStake:
	proto 0 1

	// examples/reti/validatorRegistry.algo.ts:1374
	// return onlineStake();
	online_stake
	retsub

// minBalanceForAccount(contracts: uint64, extraPages: uint64, assets: uint64, localInts: uint64, localBytes: uint64, globalInts: uint64, globalBytes: uint64): uint64
minBalanceForAccount:
	proto 7 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 1 // 0x

	// examples/reti/validatorRegistry.algo.ts:1386
	// minBal = ALGORAND_ACCOUNT_MIN_BALANCE
	intc 16 // 100000
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1387
	// minBal += contracts * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -1 // contracts: uint64
	intc 16 // 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1388
	// minBal += extraPages * APPLICATION_BASE_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -2 // extraPages: uint64
	intc 16 // 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1389
	// minBal += assets * ASSET_HOLDING_FEE
	frame_dig 0 // minBal: uint64
	frame_dig -3 // assets: uint64
	intc 16 // 100000
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1390
	// minBal += localInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -4 // localInts: uint64
	intc 33 // 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1391
	// minBal += globalInts * SSC_VALUE_UINT
	frame_dig 0 // minBal: uint64
	frame_dig -6 // globalInts: uint64
	intc 33 // 28500
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1392
	// minBal += localBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -5 // localBytes: uint64
	intc 34 // 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1393
	// minBal += globalBytes * SSC_VALUE_BYTES
	frame_dig 0 // minBal: uint64
	frame_dig -7 // globalBytes: uint64
	intc 34 // 50000
	*
	+
	frame_bury 0 // minBal: uint64

	// examples/reti/validatorRegistry.algo.ts:1394
	// return minBal;
	frame_dig 0 // minBal: uint64

	// set the subroutine return value
	frame_bury 0
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// examples/reti/validatorRegistry.algo.ts:1401
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	pushint 2500
	frame_dig -1 // totalNumBytes: uint64
	pushint 400
	*
	+
	retsub

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x1b5e82c6 // method "initStakingContract(uint64)void"
	pushbytes 0x79472d83 // method "loadStakingContractData(uint64,byte[])void"
	pushbytes 0x5f7acfd9 // method "finalizeStakingContract()void"
	pushbytes 0x3172ca9d // method "gas()void"
	pushbytes 0x8a87142d // method "getMbrAmounts()(uint64,uint64,uint64,uint64)"
	pushbytes 0xd1366cc3 // method "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)"
	pushbytes 0x3b045c5c // method "getNumValidators()uint64"
	pushbytes 0x75aff61d // method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	pushbytes 0x1f2f0109 // method "getValidatorState(uint64)(uint16,uint64,uint64,uint64)"
	pushbytes 0x2fa22c4b // method "getValidatorOwnerAndManager(uint64)(address,address)"
	pushbytes 0x910e94ac // method "getPools(uint64)(uint64,uint16,uint64)[]"
	pushbytes 0x572767d1 // method "getPoolAppId(uint64,uint64)uint64"
	pushbytes 0x9b504aaf // method "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)"
	pushbytes 0xfbc63178 // method "getCurMaxStakePerPool(uint64)uint64"
	pushbytes 0x24498cf4 // method "doesStakerNeedToPayMBR(address)bool"
	pushbytes 0xf846dd7a // method "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]"
	pushbytes 0x83050501 // method "getTokenPayoutRatio(uint64)(uint64[24],uint64)"
	pushbytes 0x7bbb6c8d // method "getNodePoolAssignments(uint64)((uint64[3])[8])"
	pushbytes 0xf839414a // method "getNFDRegistryID()uint64"
	pushbytes 0x0c317cfb // method "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64"
	pushbytes 0x3e288972 // method "changeValidatorManager(uint64,address)void"
	pushbytes 0xdd5faada // method "changeValidatorSunsetInfo(uint64,uint64,uint64)void"
	pushbytes 0x18aac7a7 // method "changeValidatorNFD(uint64,uint64,string)void"
	pushbytes 0xf99ef54d // method "changeValidatorCommissionAddress(uint64,address)void"
	pushbytes 0x10809d4d // method "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void"
	pushbytes 0xe778dd5a // method "addPool(pay,uint64,uint64)(uint64,uint64,uint64)"
	pushbytes 0xbf5259d0 // method "addStake(pay,uint64,uint64)(uint64,uint64,uint64)"
	pushbytes 0x4df8d86e // method "setTokenPayoutRatio(uint64)(uint64[24],uint64)"
	pushbytes 0x418fcefc // method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void"
	pushbytes 0xa2dc51b5 // method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	pushbytes 0x2873f504 // method "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)"
	pushbytes 0x0547f4fe // method "movePoolToNode(uint64,uint64,uint64)void"
	pushbytes 0xcb668358 // method "emptyTokenRewards(uint64,address)uint64"
	txna ApplicationArgs 0
	match *abi_route_initStakingContract *abi_route_loadStakingContractData *abi_route_finalizeStakingContract *abi_route_gas *abi_route_getMbrAmounts *abi_route_getProtocolConstraints *abi_route_getNumValidators *abi_route_getValidatorConfig *abi_route_getValidatorState *abi_route_getValidatorOwnerAndManager *abi_route_getPools *abi_route_getPoolAppId *abi_route_getPoolInfo *abi_route_getCurMaxStakePerPool *abi_route_doesStakerNeedToPayMBR *abi_route_getStakedPoolsForAccount *abi_route_getTokenPayoutRatio *abi_route_getNodePoolAssignments *abi_route_getNFDRegistryID *abi_route_addValidator *abi_route_changeValidatorManager *abi_route_changeValidatorSunsetInfo *abi_route_changeValidatorNFD *abi_route_changeValidatorCommissionAddress *abi_route_changeValidatorRewardInfo *abi_route_addPool *abi_route_addStake *abi_route_setTokenPayoutRatio *abi_route_stakeUpdatedViaRewards *abi_route_stakeRemoved *abi_route_findPoolForStaker *abi_route_movePoolToNode *abi_route_emptyTokenRewards

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples ValidatorRegistry Artifacts Maintains program size 1`] = `6327`;

exports[`Examples ValidatorRegistry Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": [
    {
      "args": [
        {
          "desc": undefined,
          "name": "id",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "owner",
          "type": "address",
        },
        {
          "desc": undefined,
          "name": "manager",
          "type": "address",
        },
      ],
      "desc": "Logs the addition of a new validator to the system, its initial owner and manager",
      "name": "retiOP_addedValidator",
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "id",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "num",
          "type": "uint16",
        },
        {
          "desc": undefined,
          "name": "poolAppId",
          "type": "uint64",
        },
      ],
      "desc": "Logs the addition of a new pool to a particular validator ID",
      "name": "retiOP_validatorAddedPool",
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "id",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "poolNum",
          "type": "uint16",
        },
        {
          "desc": undefined,
          "name": "poolAppId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "staker",
          "type": "address",
        },
        {
          "desc": undefined,
          "name": "amountStaked",
          "type": "uint64",
        },
      ],
      "desc": "Logs how much stake was added by a staker to a particular staking pool",
      "name": "retiOP_stakeAdded",
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "id",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "poolNum",
          "type": "uint16",
        },
        {
          "desc": undefined,
          "name": "poolAppId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "validatorCommission",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "saturatedBurnToFeeSink",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "algoAdded",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "rewardTokenHeldBack",
          "type": "uint64",
        },
      ],
      "desc": 
"Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.
Commission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."
,
      "name": "retiOP_epochRewardUpdate",
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "id",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "poolNum",
          "type": "uint16",
        },
        {
          "desc": undefined,
          "name": "poolAppId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "staker",
          "type": "address",
        },
        {
          "desc": undefined,
          "name": "amountUnstaked",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "rewardTokensReceived",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "rewardTokenAssetId",
          "type": "uint64",
        },
      ],
      "desc": "Logs how much stake was removed by a staker from a particular staking pool",
      "name": "retiOP_stakeRemoved",
    },
  ],
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "approvalProgramSize",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "initStakingContract",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "offset",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "data",
          "type": "byte[]",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "loadStakingContractData",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "finalizeStakingContract",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
      "events": undefined,
      "name": "gas",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": 
"Returns the MBR amounts needed for various actions:
[
 addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
 addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
 poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
 addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
]"
,
      "events": undefined,
      "name": "getMbrAmounts",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64,uint64,uint64,uint64)",
      },
    },
    {
      "args": [],
      "desc": "Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.",
      "events": undefined,
      "name": "getProtocolConstraints",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
      },
    },
    {
      "args": [],
      "desc": "Returns the current number of validators",
      "events": undefined,
      "name": "getNumValidators",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "getValidatorConfig",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "getValidatorState",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint16,uint64,uint64,uint64)",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "getValidatorOwnerAndManager",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(address,address)",
      },
    },
    {
      "args": [
        {
          "desc": 
"PoolInfo[] - array of pools
Not callable from other contracts because 1K return but can be called w/ simulate which bumps log returns"
,
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": "Return list of all pools for this validator.",
      "events": undefined,
      "name": "getPools",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64,uint16,uint64)[]",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "poolId",
          "type": "uint64",
        },
      ],
      "desc": 
"getPoolAppId is useful for callers to determine app to call for removing stake if they don't have staking or
want to get staker list for an account.  The staking pool also uses it to get the app id of staking pool 1
(which contains reward tokens if being used) so that the amount available can be determined."
,
      "events": undefined,
      "name": "getPoolAppId",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "getPoolInfo",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64,uint16,uint64)",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator.",
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": 
"Calculate the maximum stake per pool for a given validator.
Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
as pools are added the max allowed per pool can reduce."
,
      "events": undefined,
      "name": "getCurMaxStakePerPool",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "staker",
          "type": "address",
        },
      ],
      "desc": "Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount",
      "events": undefined,
      "name": "doesStakerNeedToPayMBR",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "bool",
      },
    },
    {
      "args": [
        {
          "desc": 
"The account to retrieve staked pools for.
 ValidatorPoolKey[] - The array of staked pools for the account."
,
          "name": "staker",
          "type": "address",
        },
      ],
      "desc": "Retrieves the staked pools for an account.",
      "events": undefined,
      "name": "getStakedPoolsForAccount",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64,uint64,uint64)[]",
      },
    },
    {
      "args": [
        {
          "desc": 
"The id of the validator.
 PoolTokenPayoutRatio - The token payout ratio for the validator."
,
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": 
"Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
payouts across pools can be based on a stable snaphost of stake."
,
      "events": undefined,
      "name": "getTokenPayoutRatio",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "(uint64[24],uint64)",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "getNodePoolAssignments",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "((uint64[3])[8])",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "getNFDRegistryID",
      "readonly": true,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": "payment from caller which covers mbr increase of new validator storage",
          "name": "mbrPayment",
          "type": "pay",
        },
        {
          "desc": "(Optional) Name of nfd (used as double-check against id specified in config)",
          "name": "nfdName",
          "type": "string",
        },
        {
          "desc": "ValidatorConfig struct",
          "name": "config",
          "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
        },
      ],
      "desc": 
"Adds a new validator
Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds."
,
      "events": [
        {
          "args": [
            {
              "desc": undefined,
              "name": "id",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "owner",
              "type": "address",
            },
            {
              "desc": undefined,
              "name": "manager",
              "type": "address",
            },
          ],
          "desc": "Logs the addition of a new validator to the system, its initial owner and manager",
          "name": "retiOP_addedValidator",
        },
      ],
      "name": "addValidator",
      "readonly": undefined,
      "returns": {
        "desc": "uint64 validator id",
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator to change the manager for.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "The new manager address.",
          "name": "manager",
          "type": "address",
        },
      ],
      "desc": 
"Changes the Validator manager for a specific Validator id.
[ ONLY OWNER CAN CHANGE ]"
,
      "events": undefined,
      "name": "changeValidatorManager",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator to update.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "The new sunset timestamp.",
          "name": "sunsettingOn",
          "type": "uint64",
        },
        {
          "desc": "The new sunset to validator id.",
          "name": "sunsettingTo",
          "type": "uint64",
        },
      ],
      "desc": 
"Updates the sunset information for a given validator.
[ ONLY OWNER CAN CHANGE ]"
,
      "events": undefined,
      "name": "changeValidatorSunsetInfo",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator to update.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "The application id of the NFD to assign to the validator.",
          "name": "nfdAppID",
          "type": "uint64",
        },
        {
          "desc": "The name of the NFD (which must match)",
          "name": "nfdName",
          "type": "string",
        },
      ],
      "desc": 
"Changes the NFD for a validator in the validatorList contract.
[ ONLY OWNER CAN CHANGE ]"
,
      "events": undefined,
      "name": "changeValidatorNFD",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "commissionAddress",
          "type": "address",
        },
      ],
      "desc": 
"Change the commission address that validator rewards are sent to.
     [ ONLY OWNER CAN CHANGE ]"
,
      "events": undefined,
      "name": "changeValidatorCommissionAddress",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "EntryGatingType",
          "type": "uint8",
        },
        {
          "desc": undefined,
          "name": "EntryGatingAddress",
          "type": "address",
        },
        {
          "desc": undefined,
          "name": "EntryGatingAssets",
          "type": "uint64[4]",
        },
        {
          "desc": undefined,
          "name": "GatingAssetMinBalance",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "RewardPerPayout",
          "type": "uint64",
        },
      ],
      "desc": 
"Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
[ ONLY OWNER CAN CHANGE ]"
,
      "events": undefined,
      "name": "changeValidatorRewardInfo",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "payment from caller which covers mbr increase of adding a new pool",
          "name": "mbrPayment",
          "type": "pay",
        },
        {
          "desc": "is id of validator to pool to (must be owner or manager)",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "is node number to add to",
          "name": "nodeNum",
          "type": "uint64",
        },
      ],
      "desc": 
"Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.


[ ONLY OWNER OR MANAGER CAN call ]"
,
      "events": [
        {
          "args": [
            {
              "desc": undefined,
              "name": "id",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "num",
              "type": "uint16",
            },
            {
              "desc": undefined,
              "name": "poolAppId",
              "type": "uint64",
            },
          ],
          "desc": "Logs the addition of a new pool to a particular validator ID",
          "name": "retiOP_validatorAddedPool",
        },
      ],
      "name": "addPool",
      "readonly": undefined,
      "returns": {
        "desc": "ValidatorPoolKey pool key to created pool",
        "type": "(uint64,uint64,uint64)",
      },
    },
    {
      "args": [
        {
          "desc": "payment coming from staker to place into a pool",
          "name": "stakedAmountPayment",
          "type": "pay",
        },
        {
          "desc": "The id of the validator.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": 
"only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.
Txn sender is factored in as well if that is part of gating.
*"
,
          "name": "valueToVerify",
          "type": "uint64",
        },
      ],
      "desc": "Adds stake to a validator pool.",
      "events": [
        {
          "args": [
            {
              "desc": undefined,
              "name": "id",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "poolNum",
              "type": "uint16",
            },
            {
              "desc": undefined,
              "name": "poolAppId",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "staker",
              "type": "address",
            },
            {
              "desc": undefined,
              "name": "amountStaked",
              "type": "uint64",
            },
          ],
          "desc": "Logs how much stake was added by a staker to a particular staking pool",
          "name": "retiOP_stakeAdded",
        },
      ],
      "name": "addStake",
      "readonly": undefined,
      "returns": {
        "desc": "ValidatorPoolKey - The key of the validator pool.",
        "type": "(uint64,uint64,uint64)",
      },
    },
    {
      "args": [
        {
          "desc": "validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.",
          "name": "validatorId",
          "type": "uint64",
        },
      ],
      "desc": 
"setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
during the epoch updates across pools)


Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
times in same epoch.  Just return."
,
      "events": undefined,
      "name": "setTokenPayoutRatio",
      "readonly": undefined,
      "returns": {
        "desc": "PoolTokenPayoutRatio - the finished ratio data",
        "type": "(uint64[24],uint64)",
      },
    },
    {
      "args": [
        {
          "desc": "ValidatorPoolKey type",
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)",
        },
        {
          "desc": "amount this validator's total stake increased via rewards",
          "name": "algoToAdd",
          "type": "uint64",
        },
        {
          "desc": "amount this validator's total stake increased via rewards (that should be",
          "name": "rewardTokenAmountReserved",
          "type": "uint64",
        },
        {
          "desc": "the commission amount the validator was paid, if any",
          "name": "validatorCommission",
          "type": "uint64",
        },
        {
          "desc": 
"if the pool was in saturated state, the amount sent back to the fee sink.
seen as 'accounted for/pending spent')"
,
          "name": "saturatedBurnToFeeSink",
          "type": "uint64",
        },
      ],
      "desc": 
"stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
The calling App id is validated against our pool list as well."
,
      "events": [
        {
          "args": [
            {
              "desc": undefined,
              "name": "id",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "poolNum",
              "type": "uint16",
            },
            {
              "desc": undefined,
              "name": "poolAppId",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "validatorCommission",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "saturatedBurnToFeeSink",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "algoAdded",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "rewardTokenHeldBack",
              "type": "uint64",
            },
          ],
          "desc": 
"Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.
Commission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."
,
          "name": "retiOP_epochRewardUpdate",
        },
      ],
      "name": "stakeUpdatedViaRewards",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "calling us from which stake was removed",
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)",
        },
        {
          "desc": undefined,
          "name": "staker",
          "type": "address",
        },
        {
          "desc": "algo amount removed",
          "name": "amountRemoved",
          "type": "uint64",
        },
        {
          "desc": "if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)",
          "name": "rewardRemoved",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "stakerRemoved",
          "type": "bool",
        },
      ],
      "desc": 
"stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
The calling App id is validated against our pool list as well."
,
      "events": [
        {
          "args": [
            {
              "desc": undefined,
              "name": "id",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "poolNum",
              "type": "uint16",
            },
            {
              "desc": undefined,
              "name": "poolAppId",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "staker",
              "type": "address",
            },
            {
              "desc": undefined,
              "name": "amountUnstaked",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "rewardTokensReceived",
              "type": "uint64",
            },
            {
              "desc": undefined,
              "name": "rewardTokenAssetId",
              "type": "uint64",
            },
          ],
          "desc": "Logs how much stake was removed by a staker from a particular staking pool",
          "name": "retiOP_stakeRemoved",
        },
      ],
      "name": "stakeRemoved",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "The address of the staker.",
          "name": "staker",
          "type": "address",
        },
        {
          "desc": "The amount to stake.",
          "name": "amountToStake",
          "type": "uint64",
        },
      ],
      "desc": 
"Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
to new pool if necessary."
,
      "events": undefined,
      "name": "findPoolForStaker",
      "readonly": true,
      "returns": {
        "desc": 
"ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'
to this VALIDATOR, and true/false if staker is new to the protocol."
,
        "type": "((uint64,uint64,uint64),bool,bool)",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "poolAppId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "nodeNum",
          "type": "uint64",
        },
      ],
      "desc": 
"Find the specified pool (in any node number) and move it to the specified node.
The pool account is forced offline if moved so prior node will still run for 320 rounds but
new key goes online on new node soon after (320 rounds after it goes online)
No-op if success, asserts if not found or can't move  (no space in target)
[ ONLY OWNER OR MANAGER CAN CHANGE ]"
,
      "events": undefined,
      "name": "movePoolToNode",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The id of the validator.",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "the account to send the tokens to (must already be opted-in to the reward token)",
          "name": "receiver",
          "type": "address",
        },
      ],
      "desc": 
"Sends the reward tokens held in pool 1 to specified receiver.
This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
NOT be sent as they must be held back for stakers to later claim.
[ ONLY OWNER CAN CALL]"
,
      "events": undefined,
      "name": "emptyTokenRewards",
      "readonly": undefined,
      "returns": {
        "desc": "uint64 the amount of reward token sent",
        "type": "uint64",
      },
    },
  ],
  "name": "ValidatorRegistry",
}
`;

exports[`Examples ValidatorRegistry Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": [
      {
        "args": [
          {
            "desc": undefined,
            "name": "id",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "owner",
            "type": "address",
          },
          {
            "desc": undefined,
            "name": "manager",
            "type": "address",
          },
        ],
        "desc": "Logs the addition of a new validator to the system, its initial owner and manager",
        "name": "retiOP_addedValidator",
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "id",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "num",
            "type": "uint16",
          },
          {
            "desc": undefined,
            "name": "poolAppId",
            "type": "uint64",
          },
        ],
        "desc": "Logs the addition of a new pool to a particular validator ID",
        "name": "retiOP_validatorAddedPool",
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "id",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "poolNum",
            "type": "uint16",
          },
          {
            "desc": undefined,
            "name": "poolAppId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "staker",
            "type": "address",
          },
          {
            "desc": undefined,
            "name": "amountStaked",
            "type": "uint64",
          },
        ],
        "desc": "Logs how much stake was added by a staker to a particular staking pool",
        "name": "retiOP_stakeAdded",
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "id",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "poolNum",
            "type": "uint16",
          },
          {
            "desc": undefined,
            "name": "poolAppId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "validatorCommission",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "saturatedBurnToFeeSink",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "algoAdded",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "rewardTokenHeldBack",
            "type": "uint64",
          },
        ],
        "desc": 
"Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.
Commission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."
,
        "name": "retiOP_epochRewardUpdate",
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "id",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "poolNum",
            "type": "uint16",
          },
          {
            "desc": undefined,
            "name": "poolAppId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "staker",
            "type": "address",
          },
          {
            "desc": undefined,
            "name": "amountUnstaked",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "rewardTokensReceived",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "rewardTokenAssetId",
            "type": "uint64",
          },
        ],
        "desc": "Logs how much stake was removed by a staker from a particular staking pool",
        "name": "retiOP_stakeRemoved",
      },
    ],
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "approvalProgramSize",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "initStakingContract",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "offset",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "data",
            "type": "byte[]",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "loadStakingContractData",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "finalizeStakingContract",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "events": undefined,
        "name": "gas",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": 
"Returns the MBR amounts needed for various actions:
[
 addValidatorMbr: uint64 - mbr needed to add a new validator - paid to validator contract
 addPoolMbr: uint64 - mbr needed to add a new pool - paid to validator
 poolInitMbr: uint64 - mbr needed to initStorage() of pool - paid to pool itself
 addStakerMbr: uint64 - mbr staker needs to add to first staking payment (stays w/ validator)
]"
,
        "events": undefined,
        "name": "getMbrAmounts",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64,uint64,uint64,uint64)",
        },
      },
      {
        "args": [],
        "desc": "Returns the protocol constraints so that UIs can limit what users specify for validator configuration parameters.",
        "events": undefined,
        "name": "getProtocolConstraints",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)",
        },
      },
      {
        "args": [],
        "desc": "Returns the current number of validators",
        "events": undefined,
        "name": "getNumValidators",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "getValidatorConfig",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "getValidatorState",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint16,uint64,uint64,uint64)",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "getValidatorOwnerAndManager",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(address,address)",
        },
      },
      {
        "args": [
          {
            "desc": 
"PoolInfo[] - array of pools
Not callable from other contracts because 1K return but can be called w/ simulate which bumps log returns"
,
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": "Return list of all pools for this validator.",
        "events": undefined,
        "name": "getPools",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64,uint16,uint64)[]",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "poolId",
            "type": "uint64",
          },
        ],
        "desc": 
"getPoolAppId is useful for callers to determine app to call for removing stake if they don't have staking or
want to get staker list for an account.  The staking pool also uses it to get the app id of staking pool 1
(which contains reward tokens if being used) so that the amount available can be determined."
,
        "events": undefined,
        "name": "getPoolAppId",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "getPoolInfo",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64,uint16,uint64)",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator.",
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": 
"Calculate the maximum stake per pool for a given validator.
Normally this would be maxAlgoPerPool, but it should also never go above MaxAllowedStake / numPools so
as pools are added the max allowed per pool can reduce."
,
        "events": undefined,
        "name": "getCurMaxStakePerPool",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "staker",
            "type": "address",
          },
        ],
        "desc": "Helper callers can call w/ simulate to determine if 'AddStaker' MBR should be included w/ staking amount",
        "events": undefined,
        "name": "doesStakerNeedToPayMBR",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "bool",
        },
      },
      {
        "args": [
          {
            "desc": 
"The account to retrieve staked pools for.
 ValidatorPoolKey[] - The array of staked pools for the account."
,
            "name": "staker",
            "type": "address",
          },
        ],
        "desc": "Retrieves the staked pools for an account.",
        "events": undefined,
        "name": "getStakedPoolsForAccount",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64,uint64,uint64)[]",
        },
      },
      {
        "args": [
          {
            "desc": 
"The id of the validator.
 PoolTokenPayoutRatio - The token payout ratio for the validator."
,
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": 
"Retrieves the token payout ratio for a given validator - returning the pool ratios of whole so that token
payouts across pools can be based on a stable snaphost of stake."
,
        "events": undefined,
        "name": "getTokenPayoutRatio",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "(uint64[24],uint64)",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "getNodePoolAssignments",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "((uint64[3])[8])",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "getNFDRegistryID",
        "readonly": true,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": "payment from caller which covers mbr increase of new validator storage",
            "name": "mbrPayment",
            "type": "pay",
          },
          {
            "desc": "(Optional) Name of nfd (used as double-check against id specified in config)",
            "name": "nfdName",
            "type": "string",
          },
          {
            "desc": "ValidatorConfig struct",
            "name": "config",
            "type": "(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)",
          },
        ],
        "desc": 
"Adds a new validator
Requires at least 10 ALGO as the 'fee' for the transaction to help dissuade spammed validator adds."
,
        "events": [
          {
            "args": [
              {
                "desc": undefined,
                "name": "id",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "owner",
                "type": "address",
              },
              {
                "desc": undefined,
                "name": "manager",
                "type": "address",
              },
            ],
            "desc": "Logs the addition of a new validator to the system, its initial owner and manager",
            "name": "retiOP_addedValidator",
          },
        ],
        "name": "addValidator",
        "readonly": undefined,
        "returns": {
          "desc": "uint64 validator id",
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator to change the manager for.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "The new manager address.",
            "name": "manager",
            "type": "address",
          },
        ],
        "desc": 
"Changes the Validator manager for a specific Validator id.
[ ONLY OWNER CAN CHANGE ]"
,
        "events": undefined,
        "name": "changeValidatorManager",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator to update.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "The new sunset timestamp.",
            "name": "sunsettingOn",
            "type": "uint64",
          },
          {
            "desc": "The new sunset to validator id.",
            "name": "sunsettingTo",
            "type": "uint64",
          },
        ],
        "desc": 
"Updates the sunset information for a given validator.
[ ONLY OWNER CAN CHANGE ]"
,
        "events": undefined,
        "name": "changeValidatorSunsetInfo",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator to update.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "The application id of the NFD to assign to the validator.",
            "name": "nfdAppID",
            "type": "uint64",
          },
          {
            "desc": "The name of the NFD (which must match)",
            "name": "nfdName",
            "type": "string",
          },
        ],
        "desc": 
"Changes the NFD for a validator in the validatorList contract.
[ ONLY OWNER CAN CHANGE ]"
,
        "events": undefined,
        "name": "changeValidatorNFD",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "commissionAddress",
            "type": "address",
          },
        ],
        "desc": 
"Change the commission address that validator rewards are sent to.
     [ ONLY OWNER CAN CHANGE ]"
,
        "events": undefined,
        "name": "changeValidatorCommissionAddress",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "EntryGatingType",
            "type": "uint8",
          },
          {
            "desc": undefined,
            "name": "EntryGatingAddress",
            "type": "address",
          },
          {
            "desc": undefined,
            "name": "EntryGatingAssets",
            "type": "uint64[4]",
          },
          {
            "desc": undefined,
            "name": "GatingAssetMinBalance",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "RewardPerPayout",
            "type": "uint64",
          },
        ],
        "desc": 
"Allow the additional rewards (gating entry, additional token rewards) information be changed at will.
[ ONLY OWNER CAN CHANGE ]"
,
        "events": undefined,
        "name": "changeValidatorRewardInfo",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "payment from caller which covers mbr increase of adding a new pool",
            "name": "mbrPayment",
            "type": "pay",
          },
          {
            "desc": "is id of validator to pool to (must be owner or manager)",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "is node number to add to",
            "name": "nodeNum",
            "type": "uint64",
          },
        ],
        "desc": 
"Adds a new pool to a validator's pool set, returning the 'key' to reference the pool in the future for staking, etc.
The caller must pay the cost of the validators MBR increase as well as the MBR that will be needed for the pool itself.


[ ONLY OWNER OR MANAGER CAN call ]"
,
        "events": [
          {
            "args": [
              {
                "desc": undefined,
                "name": "id",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "num",
                "type": "uint16",
              },
              {
                "desc": undefined,
                "name": "poolAppId",
                "type": "uint64",
              },
            ],
            "desc": "Logs the addition of a new pool to a particular validator ID",
            "name": "retiOP_validatorAddedPool",
          },
        ],
        "name": "addPool",
        "readonly": undefined,
        "returns": {
          "desc": "ValidatorPoolKey pool key to created pool",
          "type": "(uint64,uint64,uint64)",
        },
      },
      {
        "args": [
          {
            "desc": "payment coming from staker to place into a pool",
            "name": "stakedAmountPayment",
            "type": "pay",
          },
          {
            "desc": "The id of the validator.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": 
"only if validator has gating to enter - this is asset id or nfd id that corresponds to gating.
Txn sender is factored in as well if that is part of gating.
*"
,
            "name": "valueToVerify",
            "type": "uint64",
          },
        ],
        "desc": "Adds stake to a validator pool.",
        "events": [
          {
            "args": [
              {
                "desc": undefined,
                "name": "id",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "poolNum",
                "type": "uint16",
              },
              {
                "desc": undefined,
                "name": "poolAppId",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "staker",
                "type": "address",
              },
              {
                "desc": undefined,
                "name": "amountStaked",
                "type": "uint64",
              },
            ],
            "desc": "Logs how much stake was added by a staker to a particular staking pool",
            "name": "retiOP_stakeAdded",
          },
        ],
        "name": "addStake",
        "readonly": undefined,
        "returns": {
          "desc": "ValidatorPoolKey - The key of the validator pool.",
          "type": "(uint64,uint64,uint64)",
        },
      },
      {
        "args": [
          {
            "desc": "validator id (and thus pool) calling us.  Verified so that sender MUST be pool 1 of this validator.",
            "name": "validatorId",
            "type": "uint64",
          },
        ],
        "desc": 
"setTokenPayoutRatio is called by Staking Pool # 1 (ONLY) to ask the validator (us) to calculate the ratios
of stake in the pools for subsequent token payouts (ie: 2 pools, '100' algo total staked, 60 in pool 1, and 40
in pool 2)  This is done so we have a stable snapshot of stake - taken once per epoch - only triggered by
pool 1 doing payout.  pools other than 1 doing payout call pool 1 to ask it do it first.
It would be 60/40% in the poolPctOfWhole values.  The token reward payouts then use these values instead of
their 'current' stake which changes as part of the payouts themselves (and people could be changing stake
during the epoch updates across pools)


Multiple pools will call us via pool 1 (pool2-pool1-validator, etc.) so don't assert on pool1 calling multiple
times in same epoch.  Just return."
,
        "events": undefined,
        "name": "setTokenPayoutRatio",
        "readonly": undefined,
        "returns": {
          "desc": "PoolTokenPayoutRatio - the finished ratio data",
          "type": "(uint64[24],uint64)",
        },
      },
      {
        "args": [
          {
            "desc": "ValidatorPoolKey type",
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
          },
          {
            "desc": "amount this validator's total stake increased via rewards",
            "name": "algoToAdd",
            "type": "uint64",
          },
          {
            "desc": "amount this validator's total stake increased via rewards (that should be",
            "name": "rewardTokenAmountReserved",
            "type": "uint64",
          },
          {
            "desc": "the commission amount the validator was paid, if any",
            "name": "validatorCommission",
            "type": "uint64",
          },
          {
            "desc": 
"if the pool was in saturated state, the amount sent back to the fee sink.
seen as 'accounted for/pending spent')"
,
            "name": "saturatedBurnToFeeSink",
            "type": "uint64",
          },
        ],
        "desc": 
"stakeUpdatedViaRewards is called by Staking pools to inform the validator (us) that a particular amount of total
stake has been added to the specified pool.  This is used to update the stats we have in our PoolInfo storage.
The calling App id is validated against our pool list as well."
,
        "events": [
          {
            "args": [
              {
                "desc": undefined,
                "name": "id",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "poolNum",
                "type": "uint16",
              },
              {
                "desc": undefined,
                "name": "poolAppId",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "validatorCommission",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "saturatedBurnToFeeSink",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "algoAdded",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "rewardTokenHeldBack",
                "type": "uint64",
              },
            ],
            "desc": 
"Logs how much algo was detected as being added to a staking pool as part of epoch reward calculations.
Commission amount to validator, excess burned if pool is saturated, and the amount of tokens held back are logged as well."
,
            "name": "retiOP_epochRewardUpdate",
          },
        ],
        "name": "stakeUpdatedViaRewards",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "calling us from which stake was removed",
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
          },
          {
            "desc": undefined,
            "name": "staker",
            "type": "address",
          },
          {
            "desc": "algo amount removed",
            "name": "amountRemoved",
            "type": "uint64",
          },
          {
            "desc": "if applicable, amount of token reward removed (by pool 1 caller) or TO remove and pay out (via pool 1 from different pool caller)",
            "name": "rewardRemoved",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "stakerRemoved",
            "type": "bool",
          },
        ],
        "desc": 
"stakeRemoved is called by Staking pools to inform the validator (us) that a particular amount of total stake has been removed
from the specified pool.  This is used to update the stats we have in our PoolInfo storage.
If any amount of rewardRemoved is specified, then that amount of reward is sent to the use
The calling App id is validated against our pool list as well."
,
        "events": [
          {
            "args": [
              {
                "desc": undefined,
                "name": "id",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "poolNum",
                "type": "uint16",
              },
              {
                "desc": undefined,
                "name": "poolAppId",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "staker",
                "type": "address",
              },
              {
                "desc": undefined,
                "name": "amountUnstaked",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "rewardTokensReceived",
                "type": "uint64",
              },
              {
                "desc": undefined,
                "name": "rewardTokenAssetId",
                "type": "uint64",
              },
            ],
            "desc": "Logs how much stake was removed by a staker from a particular staking pool",
            "name": "retiOP_stakeRemoved",
          },
        ],
        "name": "stakeRemoved",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "The address of the staker.",
            "name": "staker",
            "type": "address",
          },
          {
            "desc": "The amount to stake.",
            "name": "amountToStake",
            "type": "uint64",
          },
        ],
        "desc": 
"Finds the pool for a staker based on the provided validator id, staker address, and amount to stake.
First checks the stakers 'already staked list' for the validator preferring those (adding if possible) then adds
to new pool if necessary."
,
        "events": undefined,
        "name": "findPoolForStaker",
        "readonly": true,
        "returns": {
          "desc": 
"ValidatorPoolKey, boolean, boolean - The pool for the staker, true/false on whether the staker is 'new'
to this VALIDATOR, and true/false if staker is new to the protocol."
,
          "type": "((uint64,uint64,uint64),bool,bool)",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "poolAppId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "nodeNum",
            "type": "uint64",
          },
        ],
        "desc": 
"Find the specified pool (in any node number) and move it to the specified node.
The pool account is forced offline if moved so prior node will still run for 320 rounds but
new key goes online on new node soon after (320 rounds after it goes online)
No-op if success, asserts if not found or can't move  (no space in target)
[ ONLY OWNER OR MANAGER CAN CHANGE ]"
,
        "events": undefined,
        "name": "movePoolToNode",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The id of the validator.",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "the account to send the tokens to (must already be opted-in to the reward token)",
            "name": "receiver",
            "type": "address",
          },
        ],
        "desc": 
"Sends the reward tokens held in pool 1 to specified receiver.
This is intended to be used by the owner when they want to get reward tokens 'back' which they sent to
the first pool (likely because validator is sunsetting.  Any tokens currently 'reserved' for stakers to claim will
NOT be sent as they must be held back for stakers to later claim.
[ ONLY OWNER CAN CALL]"
,
        "events": undefined,
        "name": "emptyTokenRewards",
        "readonly": undefined,
        "returns": {
          "desc": "uint64 the amount of reward token sent",
          "type": "uint64",
        },
      },
    ],
    "name": "ValidatorRegistry",
  },
  "hints": {
    "addPool(pay,uint64,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "addStake(pay,uint64,uint64)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "addValidator(pay,string,(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64))uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "changeValidatorCommissionAddress(uint64,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "changeValidatorManager(uint64,address)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "changeValidatorNFD(uint64,uint64,string)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "changeValidatorRewardInfo(uint64,uint8,address,uint64[4],uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "changeValidatorSunsetInfo(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "doesStakerNeedToPayMBR(address)bool": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "emptyTokenRewards(uint64,address)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "finalizeStakingContract()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "findPoolForStaker(uint64,address,uint64)((uint64,uint64,uint64),bool,bool)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getCurMaxStakePerPool(uint64)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getMbrAmounts()(uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getNFDRegistryID()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getNodePoolAssignments(uint64)((uint64[3])[8])": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getNumValidators()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getPoolAppId(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getPoolInfo((uint64,uint64,uint64))(uint64,uint16,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getPools(uint64)(uint64,uint16,uint64)[]": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getProtocolConstraints()(uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getStakedPoolsForAccount(address)(uint64,uint64,uint64)[]": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getTokenPayoutRatio(uint64)(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getValidatorOwnerAndManager(uint64)(address,address)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getValidatorState(uint64)(uint16,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "initStakingContract(uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "loadStakingContractData(uint64,byte[])void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "movePoolToNode(uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "setTokenPayoutRatio(uint64)(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "numStakers": {
          "key": "numStakers",
          "type": "uint64",
        },
        "numValidators": {
          "key": "numV",
          "type": "uint64",
        },
        "stakingPoolInitialized": {
          "key": "init",
          "type": "bytes",
        },
        "totalAlgoStaked": {
          "key": "staked",
          "type": "uint64",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 3,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

exports[`Examples StakingPool Artifacts Generates TEAL 1`] = `
"#pragma version 11
intcblock 0 1 6 64 32 16 128 200 5 1_000_000 300 1000 4 2_100_000 8 100000 400 30857 2 40 48 TMPL_nfdRegistryAppId
bytecblock 0x 0x63726561746f72417070 0x7374616b657273 0x76616c696461746f724964 0x706f6f6c4964 0x0a8101 0x7374616b6564 0x726f756e6473506572446179 0x7374616b65416363756d756c61746f72 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF 0x0000000000000000 0x62696e526f756e645374617274 0x726577617264416363756d756c61746f72 0x6e756d5374616b657273 0x6c6173745061796f7574 0x75aff61d 0x00000000000000000000000000000000 0x00000000000000000000000000000064 0x6d696e456e7472795374616b65 0x65706f63684e756d626572 0x65776d61 0x151f7c75 0xa2dc51b5 0x572767d1 0x4df8d86e 0x0c2245e1 0x00

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// createApplication(uint64,uint64,uint64,uint64)void
*abi_route_createApplication:
	// minEntryStake: uint64
	txna ApplicationArgs 4
	btoi

	// poolId: uint64
	txna ApplicationArgs 3
	btoi

	// validatorId: uint64
	txna ApplicationArgs 2
	btoi

	// creatingContractId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64,uint64,uint64,uint64)void
	callsub createApplication
	intc 1 // 1
	return

// createApplication(creatingContractId: AppID, validatorId: uint64, poolId: uint64, minEntryStake: uint64): void
//
// Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.
// @param {uint64} creatingContractId - id of contract that constructed us - the validator application (single global instance)
// @param {uint64} validatorId - id of validator we're a staking pool of
// @param {uint64} poolId - which pool id are we
// @param {uint64} minEntryStake - minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)
createApplication:
	proto 4 0

	// *if0_condition
	// examples/reti/stakingPool.algo.ts:102
	// creatingContractId === AppID.fromUint64(0)
	frame_dig -1 // creatingContractId: AppID
	intc 0 // 0
	==
	bz *if0_else

	// *if0_consequent
	// examples/reti/stakingPool.algo.ts:104
	// assert(validatorId === 0)
	frame_dig -2 // validatorId: uint64
	intc 0 // 0
	==
	assert

	// examples/reti/stakingPool.algo.ts:105
	// assert(poolId === 0)
	frame_dig -3 // poolId: uint64
	intc 0 // 0
	==
	assert
	b *if0_end

*if0_else:
	// examples/reti/stakingPool.algo.ts:107
	// assert(validatorId !== 0)
	frame_dig -2 // validatorId: uint64
	intc 0 // 0
	!=
	assert

	// examples/reti/stakingPool.algo.ts:108
	// assert(poolId !== 0)
	frame_dig -3 // poolId: uint64
	intc 0 // 0
	!=
	assert

*if0_end:
	// examples/reti/stakingPool.algo.ts:110
	// assert(minEntryStake >= MIN_ALGO_STAKE_PER_POOL, 'staking pool must have minimum entry of 1 algo')
	frame_dig -4 // minEntryStake: uint64
	pushint 1000000
	>=

	// staking pool must have minimum entry of 1 algo
	assert

	// examples/reti/stakingPool.algo.ts:111
	// this.creatingValidatorContractAppId.value = creatingContractId
	bytec 1 //  "creatorApp"
	frame_dig -1 // creatingContractId: AppID
	app_global_put

	// examples/reti/stakingPool.algo.ts:112
	// this.validatorId.value = validatorId
	bytec 3 //  "validatorId"
	frame_dig -2 // validatorId: uint64
	app_global_put

	// examples/reti/stakingPool.algo.ts:113
	// this.poolId.value = poolId
	bytec 4 //  "poolId"
	frame_dig -3 // poolId: uint64
	app_global_put

	// examples/reti/stakingPool.algo.ts:114
	// this.numStakers.value = 0
	bytec 13 //  "numStakers"
	intc 0 // 0
	app_global_put

	// examples/reti/stakingPool.algo.ts:115
	// this.totalAlgoStaked.value = 0
	bytec 6 //  "staked"
	intc 0 // 0
	app_global_put

	// examples/reti/stakingPool.algo.ts:116
	// this.minEntryStake.value = minEntryStake
	bytec 18 //  "minEntryStake"
	frame_dig -4 // minEntryStake: uint64
	app_global_put

	// examples/reti/stakingPool.algo.ts:117
	// this.lastPayout.value = globals.round
	bytec 14 //  "lastPayout"
	global Round
	app_global_put

	// examples/reti/stakingPool.algo.ts:118
	// this.epochNumber.value = 0
	bytec 19 //  "epochNumber"
	intc 0 // 0
	app_global_put

	// examples/reti/stakingPool.algo.ts:120
	// this.setRoundsPerDay()
	callsub setRoundsPerDay

	// examples/reti/stakingPool.algo.ts:121
	// this.binRoundStart.value = globals.round - (globals.round % this.roundsPerDay.value)
	bytec 11 //  "binRoundStart"
	global Round
	global Round
	bytec 7 //  "roundsPerDay"
	app_global_get
	%
	-
	app_global_put

	// examples/reti/stakingPool.algo.ts:122
	// this.stakeAccumulator.value = 0 as uint128
	bytec 8 //  "stakeAccumulator"
	bytec 16 // 0x00000000000000000000000000000000
	app_global_put

	// examples/reti/stakingPool.algo.ts:123
	// this.rewardAccumulator.value = 0
	bytec 12 //  "rewardAccumulator"
	intc 0 // 0
	app_global_put

	// examples/reti/stakingPool.algo.ts:124
	// this.weightedMovingAverage.value = 0 as uint128
	bytec 20 //  "ewma"
	bytec 16 // 0x00000000000000000000000000000000
	app_global_put
	retsub

// gas()void
*abi_route_gas:
	// execute gas()void
	callsub gas
	intc 1 // 1
	return

// gas(): void
//
// gas is a dummy no-op call that can be used to pool-up resource references and opcode cost
gas:
	proto 0 0
	retsub

// costForBoxStorage(totalNumBytes: uint64): uint64
costForBoxStorage:
	proto 1 1

	// examples/reti/stakingPool.algo.ts:136
	// return SCBOX_PERBOX + totalNumBytes * SCBOX_PERBYTE;
	pushint 2500
	frame_dig -1 // totalNumBytes: uint64
	intc 16 // 400
	*
	+
	retsub

// initStorage(pay)void
*abi_route_initStorage:
	// mbrPayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 0 (mbrPayment) for initStorage must be a pay transaction
	assert

	// execute initStorage(pay)void
	callsub initStorage
	intc 1 // 1
	return

// initStorage(mbrPayment: PayTxn): void
//
// Called after we're created and then funded, so we can create our large stakers ledger storage
// Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
// If this is pool 1 AND the validator has specified a reward token, opt-in to that token
// so that the validator can seed the pool with future rewards of that token.
// @param mbrPayment payment from caller which covers mbr increase of new staking pools' storage
initStorage:
	proto 1 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// examples/reti/stakingPool.algo.ts:147
	// assert(!this.stakers.exists, 'staking pool already initialized')
	bytec 2 //  "stakers"
	box_len
	swap
	pop
	!

	// staking pool already initialized
	assert

	// examples/reti/stakingPool.algo.ts:150
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [this.validatorId.value],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 15 //  method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:151
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:152
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:154
	// isTokenEligible = validatorConfig.rewardTokenId !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	intc 0 // 0
	!=
	frame_bury 1 // isTokenEligible: bool

	// examples/reti/stakingPool.algo.ts:155
	// extraMBR = isTokenEligible && this.poolId.value === 1 ? ASSET_HOLDING_FEE : 0
	frame_dig 1 // isTokenEligible: bool
	dup
	bz *skip_and0
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==
	&&

*skip_and0:
	bz *ternary0_false
	intc 15 // 100000
	b *ternary0_end

*ternary0_false:
	intc 0 // 0

*ternary0_end:
	frame_bury 2 // extraMBR: uint64

	// examples/reti/stakingPool.algo.ts:156
	// PoolInitMbr =
	//       ALGORAND_ACCOUNT_MIN_BALANCE +
	//       extraMBR +
	//       this.costForBoxStorage(7 /* 'stakers' name */ + len<StakedInfo>() * MAX_STAKERS_PER_POOL)
	intc 15 // 100000
	frame_dig 2 // extraMBR: uint64
	+
	pushint 12807
	callsub costForBoxStorage
	+
	frame_bury 3 // PoolInitMbr: uint64

	// examples/reti/stakingPool.algo.ts:162
	// verifyPayTxn(mbrPayment, { receiver: this.app.address, amount: PoolInitMbr })
	// verify receiver
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // mbrPayment: PayTxn
	gtxns Amount
	frame_dig 3 // PoolInitMbr: uint64
	==

	// transaction verification failed: {"txn":"mbrPayment","field":"amount","expected":"PoolInitMbr"}
	assert

	// examples/reti/stakingPool.algo.ts:163
	// this.stakers.create()
	bytec 2 //  "stakers"
	pushint 12800
	box_create
	pop

	// *if1_condition
	// examples/reti/stakingPool.algo.ts:165
	// isTokenEligible && this.poolId.value === 1
	frame_dig 1 // isTokenEligible: bool
	dup
	bz *skip_and1
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==
	&&

*skip_and1:
	bz *if1_end

	// *if1_consequent
	// examples/reti/stakingPool.algo.ts:167
	// sendAssetTransfer({
	//         xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId),
	//         assetReceiver: this.app.address,
	//         assetAmount: 0,
	//       })
	itxn_begin
	intc 12 //  axfer
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:168
	// xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId)
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	itxn_field XferAsset

	// examples/reti/stakingPool.algo.ts:169
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// examples/reti/stakingPool.algo.ts:170
	// assetAmount: 0
	intc 0 // 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if1_end:
	retsub

// addStake(pay,address)uint64
*abi_route_addStake:
	// The ABI return prefix
	bytec 21 // 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (staker) for addStake must be a address
	assert

	// stakedAmountPayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 1 (stakedAmountPayment) for addStake must be a pay transaction
	assert

	// execute addStake(pay,address)uint64
	callsub addStake
	itob
	concat
	log
	intc 1 // 1
	return

// addStake(stakedAmountPayment: PayTxn, staker: Address): uint64
//
// Adds stake to the given account.
// Can ONLY be called by the validator contract that created us
// Must receive payment from the validator contract for amount being staked.
//
// @param {PayTxn} stakedAmountPayment prior payment coming from validator contract to us on behalf of staker.
// @param {Address} staker - The account adding new stake
// @throws {Error} - Throws an error if the staking pool is full.
// @returns {uint64} new 'entry round' round number of stake add
addStake:
	proto 2 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// examples/reti/stakingPool.algo.ts:186
	// assert(this.stakers.exists, 'staking pool must be initialized first')
	bytec 2 //  "stakers"
	box_len
	swap
	pop

	// staking pool must be initialized first
	assert

	// examples/reti/stakingPool.algo.ts:189
	// assert(
	//       this.txn.sender === this.creatingValidatorContractAppId.value.address,
	//       'stake can only be added via the validator contract'
	//     )
	txn Sender
	bytec 1 //  "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// stake can only be added via the validator contract
	assert

	// examples/reti/stakingPool.algo.ts:193
	// assert(staker !== globals.zeroAddress)
	frame_dig -2 // staker: Address
	global ZeroAddress
	!=
	assert

	// examples/reti/stakingPool.algo.ts:196
	// this.checkIfBinClosed()
	callsub checkIfBinClosed

	// examples/reti/stakingPool.algo.ts:200
	// verifyPayTxn(stakedAmountPayment, {
	//       sender: this.creatingValidatorContractAppId.value.address,
	//       receiver: this.app.address,
	//       amount: stakedAmountPayment.amount,
	//     })
	// verify sender
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Sender
	bytec 1 //  "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"sender","expected":"this.creatingValidatorContractAppId.value.address"}
	assert

	// verify receiver
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	==

	// transaction verification failed: {"txn":"stakedAmountPayment","field":"amount","expected":"stakedAmountPayment.amount"}
	assert

	// examples/reti/stakingPool.algo.ts:209
	// entryRound = globals.round + ALGORAND_STAKING_BLOCK_DELAY
	global Round
	pushint 320
	+
	frame_bury 0 // entryRound: uint64

	// examples/reti/stakingPool.algo.ts:210
	// firstEmpty = 0
	intc 0 // 0
	frame_bury 1 // firstEmpty: uint64

	// examples/reti/stakingPool.algo.ts:212
	// this.totalAlgoStaked.value += stakedAmountPayment.amount
	bytec 6 //  "staked"
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	bytec 6 //  "staked"
	swap
	app_global_put

	// examples/reti/stakingPool.algo.ts:214
	// roundsLeftInBin = this.binRoundStart.value + this.roundsPerDay.value - globals.round
	bytec 11 //  "binRoundStart"
	app_global_get
	bytec 7 //  "roundsPerDay"
	app_global_get
	+
	global Round
	-
	frame_bury 2 // roundsLeftInBin: uint64

	// examples/reti/stakingPool.algo.ts:215
	// this.stakeAccumulator.value =
	//       this.stakeAccumulator.value + (stakedAmountPayment.amount as uint128) * (roundsLeftInBin as uint128)
	bytec 8 //  "stakeAccumulator"
	dup
	app_global_get
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	frame_dig 2 // roundsLeftInBin: uint64
	itob
	b*
	b+
	dup
	bitlen
	intc 6 // 128
	<=

	// this.stakeAccumulator.value + (stakedAmountPayment.amount as uint128) * (roundsLeftInBin as uint128) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	app_global_put

	// examples/reti/stakingPool.algo.ts:219
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 3 // i: uint64

*for_0:
	// examples/reti/stakingPool.algo.ts:219
	// i < this.stakers.value.length
	frame_dig 3 // i: uint64
	intc 7 // 200
	<
	bz *for_0_end

	// *if2_condition
	// examples/reti/stakingPool.algo.ts:220
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 10 // 300
	<
	bz *if2_end

	// *if2_consequent
	// examples/reti/stakingPool.algo.ts:221
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if2_end:
	// examples/reti/stakingPool.algo.ts:223
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 3 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 3 // 64
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if3_condition
	// examples/reti/stakingPool.algo.ts:224
	// cmpStaker.account === staker
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -2 // staker: Address
	==
	bz *if3_end

	// *if3_consequent
	// examples/reti/stakingPool.algo.ts:226
	// cmpStaker.balance += stakedAmountPayment.amount
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 4 //  headOffset
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	+
	itob
	replace3
	frame_bury 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:227
	// cmpStaker.entryRound = entryRound
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	pushint 56 // headOffset
	frame_dig 0 // entryRound: uint64
	itob
	replace3
	frame_bury 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:230
	// this.stakers.value[i] = cmpStaker
	frame_dig 3 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// examples/reti/stakingPool.algo.ts:232
	// return entryRound;
	frame_dig 0 // entryRound: uint64
	b *addStake*return

*if3_end:
	// *if4_condition
	// examples/reti/stakingPool.algo.ts:234
	// firstEmpty === 0 && cmpStaker.account === globals.zeroAddress
	frame_dig 1 // firstEmpty: uint64
	intc 0 // 0
	==
	dup
	bz *skip_and2
	frame_dig 4 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	==
	&&

*skip_and2:
	bz *if4_end

	// *if4_consequent
	// examples/reti/stakingPool.algo.ts:235
	// firstEmpty = i + 1
	frame_dig 3 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // firstEmpty: uint64

*if4_end:

*for_0_continue:
	// examples/reti/stakingPool.algo.ts:219
	// i += 1
	frame_dig 3 // i: uint64
	intc 1 // 1
	+
	frame_bury 3 // i: uint64
	b *for_0

*for_0_end:
	// *if5_condition
	// examples/reti/stakingPool.algo.ts:239
	// firstEmpty === 0
	frame_dig 1 // firstEmpty: uint64
	intc 0 // 0
	==
	bz *if5_end

	// *if5_consequent
	// Staking pool full
	err

*if5_end:
	// examples/reti/stakingPool.algo.ts:246
	// assert(stakedAmountPayment.amount >= this.minEntryStake.value, 'must stake at least the minimum for this pool')
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	bytec 18 //  "minEntryStake"
	app_global_get
	>=

	// must stake at least the minimum for this pool
	assert

	// examples/reti/stakingPool.algo.ts:248
	// assert(this.stakers.value[firstEmpty - 1].account === globals.zeroAddress)
	frame_dig 1 // firstEmpty: uint64
	intc 1 // 1
	-
	intc 3 // 64
	* // acc * typeLength
	intc 0 // 0
	+
	intc 4 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	global ZeroAddress
	==
	assert

	// examples/reti/stakingPool.algo.ts:249
	// this.stakers.value[firstEmpty - 1] = {
	//       account: staker,
	//       balance: stakedAmountPayment.amount,
	//       totalRewarded: 0,
	//       rewardTokenBalance: 0,
	//       entryRound: entryRound,
	//     }
	frame_dig 1 // firstEmpty: uint64
	intc 1 // 1
	-
	intc 3 // 64
	* // acc * typeLength
	frame_dig -2 // staker: Address
	frame_dig -1 // stakedAmountPayment: PayTxn
	gtxns Amount
	itob
	concat
	bytec 10 // 0x0000000000000000
	concat
	bytec 10 // 0x0000000000000000
	concat
	frame_dig 0 // entryRound: uint64
	itob
	concat
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// examples/reti/stakingPool.algo.ts:256
	// this.numStakers.value += 1
	bytec 13 //  "numStakers"
	app_global_get
	intc 1 // 1
	+
	bytec 13 //  "numStakers"
	swap
	app_global_put

	// examples/reti/stakingPool.algo.ts:257
	// return entryRound;
	frame_dig 0 // entryRound: uint64

*addStake*return:
	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 4
	retsub

// removeStake(address,uint64)void
*abi_route_removeStake:
	// amountToUnstake: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 1 (staker) for removeStake must be a address
	assert

	// execute removeStake(address,uint64)void
	callsub removeStake
	intc 1 // 1
	return

// removeStake(staker: Address, amountToUnstake: uint64): void
//
// Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
// full. Also notifies the validator contract for this pools validator of the staker / balance changes.
//
// @param {Address} staker - account to remove.  normally same as sender, but the validator owner or manager can also call
// this to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is
// so a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer
// meet the gating requirements (determined by the node daemon).
// @param {uint64} amountToUnstake - The amount of stake to be removed.  Specify 0 to remove all stake.
// @throws {Error} If the account has insufficient balance or if the account is not found.
removeStake:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 6

	// *if6_condition
	// examples/reti/stakingPool.algo.ts:274
	// staker !== this.txn.sender
	frame_dig -1 // staker: Address
	txn Sender
	!=
	bz *if6_end

	// *if6_consequent
	// examples/reti/stakingPool.algo.ts:275
	// assert(
	//         this.isOwnerOrManagerCaller(),
	//         'If staker is not sender in removeStake call, then sender MUST be owner or manager of validator'
	//       )
	callsub isOwnerOrManagerCaller

	// If staker is not sender in removeStake call, then sender MUST be owner or manager of validator
	assert

*if6_end:
	// examples/reti/stakingPool.algo.ts:281
	// this.checkIfBinClosed()
	callsub checkIfBinClosed

	// examples/reti/stakingPool.algo.ts:283
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_1:
	// examples/reti/stakingPool.algo.ts:283
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	intc 7 // 200
	<
	bz *for_1_end

	// *if7_condition
	// examples/reti/stakingPool.algo.ts:284
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 10 // 300
	<
	bz *if7_end

	// *if7_consequent
	// examples/reti/stakingPool.algo.ts:285
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if7_end:
	// examples/reti/stakingPool.algo.ts:287
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 0 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 3 // 64
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if8_condition
	// examples/reti/stakingPool.algo.ts:288
	// cmpStaker.account === staker
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig -1 // staker: Address
	==
	bz *if8_end

	// *if8_consequent
	// *if9_condition
	// examples/reti/stakingPool.algo.ts:289
	// amountToUnstake === 0
	frame_dig -2 // amountToUnstake: uint64
	intc 0 // 0
	==
	bz *if9_end

	// *if9_consequent
	// examples/reti/stakingPool.algo.ts:291
	// amountToUnstake = cmpStaker.balance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_bury -2 // amountToUnstake: uint64

*if9_end:
	// *if10_condition
	// examples/reti/stakingPool.algo.ts:293
	// cmpStaker.balance < amountToUnstake
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -2 // amountToUnstake: uint64
	<
	bz *if10_end

	// *if10_consequent
	// Insufficient balance
	err

*if10_end:
	// examples/reti/stakingPool.algo.ts:296
	// cmpStaker.balance -= amountToUnstake
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 4 //  headOffset
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig -2 // amountToUnstake: uint64
	-
	itob
	replace3
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:297
	// this.totalAlgoStaked.value -= amountToUnstake
	bytec 6 //  "staked"
	app_global_get
	frame_dig -2 // amountToUnstake: uint64
	-
	bytec 6 //  "staked"
	swap
	app_global_put

	// examples/reti/stakingPool.algo.ts:299
	// amountRewardTokenRemoved = 0
	intc 0 // 0
	frame_bury 2 // amountRewardTokenRemoved: uint64

	// *if11_condition
	// examples/reti/stakingPool.algo.ts:300
	// cmpStaker.rewardTokenBalance > 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	intc 0 // 0
	>
	bz *if11_end

	// *if11_consequent
	// *if12_condition
	// examples/reti/stakingPool.algo.ts:302
	// this.poolId.value === 1
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==
	bz *if12_else

	// *if12_consequent
	// examples/reti/stakingPool.algo.ts:303
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//               applicationID: this.creatingValidatorContractAppId.value,
	//               methodArgs: [this.validatorId.value],
	//             })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 15 //  method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:304
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:305
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 3 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:311
	// sendAssetTransfer({
	//               xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId),
	//               assetReceiver: staker,
	//               assetAmount: cmpStaker.rewardTokenBalance,
	//             })
	itxn_begin
	intc 12 //  axfer
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:312
	// xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId)
	frame_dig 3 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	itxn_field XferAsset

	// examples/reti/stakingPool.algo.ts:313
	// assetReceiver: staker
	frame_dig -1 // staker: Address
	itxn_field AssetReceiver

	// examples/reti/stakingPool.algo.ts:314
	// assetAmount: cmpStaker.rewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/stakingPool.algo.ts:316
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 2 // amountRewardTokenRemoved: uint64

	// examples/reti/stakingPool.algo.ts:317
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 10 // 0x0000000000000000
	replace2 48
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	b *if12_end

*if12_else:
	// examples/reti/stakingPool.algo.ts:322
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 2 // amountRewardTokenRemoved: uint64

	// examples/reti/stakingPool.algo.ts:323
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 10 // 0x0000000000000000
	replace2 48
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

*if12_end:

*if11_end:
	// examples/reti/stakingPool.algo.ts:328
	// assert(
	//           cmpStaker.balance === 0 || cmpStaker.balance >= this.minEntryStake.value,
	//           'cannot reduce balance below minimum allowed stake unless all is removed'
	//         )
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	intc 0 // 0
	==
	dup
	bnz *skip_or0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	bytec 18 //  "minEntryStake"
	app_global_get
	>=
	||

*skip_or0:
	// cannot reduce balance below minimum allowed stake unless all is removed
	assert

	// examples/reti/stakingPool.algo.ts:336
	// sendPayment({
	//           amount: amountToUnstake,
	//           receiver: staker,
	//           note: 'unstaked',
	//         })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:337
	// amount: amountToUnstake
	frame_dig -2 // amountToUnstake: uint64
	itxn_field Amount

	// examples/reti/stakingPool.algo.ts:338
	// receiver: staker
	frame_dig -1 // staker: Address
	itxn_field Receiver

	// examples/reti/stakingPool.algo.ts:339
	// note: 'unstaked'
	pushbytes 0x756e7374616b6564 // "unstaked"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/stakingPool.algo.ts:341
	// stakerRemoved = false
	intc 0 // 0
	frame_bury 4 // stakerRemoved: bool

	// *if13_condition
	// examples/reti/stakingPool.algo.ts:342
	// cmpStaker.balance === 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	intc 0 // 0
	==
	bz *if13_end

	// *if13_consequent
	// examples/reti/stakingPool.algo.ts:344
	// this.numStakers.value -= 1
	bytec 13 //  "numStakers"
	app_global_get
	intc 1 // 1
	-
	bytec 13 //  "numStakers"
	swap
	app_global_put

	// examples/reti/stakingPool.algo.ts:345
	// cmpStaker.account = globals.zeroAddress
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 0 // 0
	global ZeroAddress
	replace3
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:346
	// cmpStaker.totalRewarded = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 10 // 0x0000000000000000
	replace2 40
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:347
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 10 // 0x0000000000000000
	replace2 48
	frame_bury 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:348
	// stakerRemoved = true
	intc 1 // 1
	frame_bury 4 // stakerRemoved: bool

*if13_end:
	// examples/reti/stakingPool.algo.ts:351
	// this.stakers.value[i] = cmpStaker
	frame_dig 0 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	frame_dig 1 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// examples/reti/stakingPool.algo.ts:353
	// roundsLeftInBin = this.binRoundStart.value + this.roundsPerDay.value - globals.round
	bytec 11 //  "binRoundStart"
	app_global_get
	bytec 7 //  "roundsPerDay"
	app_global_get
	+
	global Round
	-
	frame_bury 5 // roundsLeftInBin: uint64

	// examples/reti/stakingPool.algo.ts:354
	// subtractAmount: uint128 = (amountToUnstake as uint128) * (roundsLeftInBin as uint128)
	frame_dig -2 // amountToUnstake: uint64
	itob
	frame_dig 5 // roundsLeftInBin: uint64
	itob
	b*
	dup
	bitlen
	intc 6 // 128
	<=

	// (amountToUnstake as uint128) * (roundsLeftInBin as uint128) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	frame_bury 6 // subtractAmount: uint128

	// examples/reti/stakingPool.algo.ts:355
	// this.stakeAccumulator.value = this.stakeAccumulator.value - subtractAmount
	bytec 8 //  "stakeAccumulator"
	dup
	app_global_get
	frame_dig 6 // subtractAmount: uint128
	b-
	dup
	bitlen
	intc 6 // 128
	<=

	// this.stakeAccumulator.value - subtractAmount overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	app_global_put

	// examples/reti/stakingPool.algo.ts:360
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeRemoved>({
	//           applicationID: this.creatingValidatorContractAppId.value,
	//           methodArgs: [
	//             { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//             staker,
	//             amountToUnstake,
	//             amountRewardTokenRemoved,
	//             stakerRemoved,
	//           ],
	//         })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 22 //  method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:361
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:362
	// methodArgs: [
	//             { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//             staker,
	//             amountToUnstake,
	//             amountRewardTokenRemoved,
	//             stakerRemoved,
	//           ]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	bytec 4 //  "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig -1 // staker: Address
	itxn_field ApplicationArgs
	frame_dig -2 // amountToUnstake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 2 // amountRewardTokenRemoved: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 4 // stakerRemoved: bool
	bytec 26 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/stakingPool.algo.ts:370
	// return;
	retsub

*if8_end:

*for_1_continue:
	// examples/reti/stakingPool.algo.ts:283
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_1

*for_1_end:
	// account not found
	err
	retsub

// claimTokens()void
*abi_route_claimTokens:
	// execute claimTokens()void
	callsub claimTokens
	intc 1 // 1
	return

// claimTokens(): void
//
// Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
// pool 1 (either directly, or via validator->pool1 to pay it out)
// Also notifies the validator contract for this pools validator of the staker / balance changes.
claimTokens:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// examples/reti/stakingPool.algo.ts:385
	// staker = this.txn.sender
	txn Sender
	frame_bury 0 // staker: address

	// examples/reti/stakingPool.algo.ts:387
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 1 // i: uint64

*for_2:
	// examples/reti/stakingPool.algo.ts:387
	// i < this.stakers.value.length
	frame_dig 1 // i: uint64
	intc 7 // 200
	<
	bz *for_2_end

	// *if14_condition
	// examples/reti/stakingPool.algo.ts:388
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 10 // 300
	<
	bz *if14_end

	// *if14_consequent
	// examples/reti/stakingPool.algo.ts:389
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if14_end:
	// examples/reti/stakingPool.algo.ts:391
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 1 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 3 // 64
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if15_condition
	// examples/reti/stakingPool.algo.ts:392
	// cmpStaker.account === staker
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	frame_dig 0 // staker: address
	==
	bz *if15_end

	// *if15_consequent
	// *if16_condition
	// examples/reti/stakingPool.algo.ts:393
	// cmpStaker.rewardTokenBalance === 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	intc 0 // 0
	==
	bz *if16_end

	// *if16_consequent
	// examples/reti/stakingPool.algo.ts:394
	// return;
	retsub

*if16_end:
	// examples/reti/stakingPool.algo.ts:396
	// amountRewardTokenRemoved = 0
	intc 0 // 0
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// *if17_condition
	// examples/reti/stakingPool.algo.ts:398
	// this.poolId.value === 1
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==
	bz *if17_else

	// *if17_consequent
	// examples/reti/stakingPool.algo.ts:399
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//             applicationID: this.creatingValidatorContractAppId.value,
	//             methodArgs: [this.validatorId.value],
	//           })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 15 //  method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:400
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:401
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 4 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:406
	// sendAssetTransfer({
	//             xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId),
	//             assetReceiver: staker,
	//             assetAmount: cmpStaker.rewardTokenBalance,
	//           })
	itxn_begin
	intc 12 //  axfer
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:407
	// xferAsset: AssetID.fromUint64(validatorConfig.rewardTokenId)
	frame_dig 4 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	itxn_field XferAsset

	// examples/reti/stakingPool.algo.ts:408
	// assetReceiver: staker
	frame_dig 0 // staker: address
	itxn_field AssetReceiver

	// examples/reti/stakingPool.algo.ts:409
	// assetAmount: cmpStaker.rewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/stakingPool.algo.ts:411
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// examples/reti/stakingPool.algo.ts:412
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 10 // 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	b *if17_end

*if17_else:
	// examples/reti/stakingPool.algo.ts:417
	// amountRewardTokenRemoved = cmpStaker.rewardTokenBalance
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_bury 3 // amountRewardTokenRemoved: uint64

	// examples/reti/stakingPool.algo.ts:418
	// cmpStaker.rewardTokenBalance = 0
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 10 // 0x0000000000000000
	replace2 48
	frame_bury 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)

*if17_end:
	// examples/reti/stakingPool.algo.ts:422
	// this.stakers.value[i] = cmpStaker
	frame_dig 1 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	frame_dig 2 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

	// examples/reti/stakingPool.algo.ts:427
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeRemoved>({
	//           applicationID: this.creatingValidatorContractAppId.value,
	//           methodArgs: [
	//             { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//             staker,
	//             0, // no algo removed
	//             amountRewardTokenRemoved,
	//             false, // staker isn't being removed.
	//           ],
	//         })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 22 //  method "stakeRemoved((uint64,uint64,uint64),address,uint64,uint64,bool)void"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:428
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:429
	// methodArgs: [
	//             { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//             staker,
	//             0, // no algo removed
	//             amountRewardTokenRemoved,
	//             false, // staker isn't being removed.
	//           ]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	bytec 4 //  "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 0 // staker: address
	itxn_field ApplicationArgs
	bytec 10 // 0x0000000000000000
	itxn_field ApplicationArgs
	frame_dig 3 // amountRewardTokenRemoved: uint64
	itob
	itxn_field ApplicationArgs
	intc 0 // 0
	bytec 26 // 0x00
	intc 0 // 0
	uncover 2
	setbit
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/stakingPool.algo.ts:437
	// return;
	retsub

*if15_end:

*for_2_continue:
	// examples/reti/stakingPool.algo.ts:387
	// i += 1
	frame_dig 1 // i: uint64
	intc 1 // 1
	+
	frame_bury 1 // i: uint64
	b *for_2

*for_2_end:
	// account not found
	err
	retsub

// getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
*abi_route_getStakerInfo:
	// The ABI return prefix
	bytec 21 // 0x151f7c75

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 0 (staker) for getStakerInfo must be a address
	assert

	// execute getStakerInfo(address)(address,uint64,uint64,uint64,uint64)
	callsub getStakerInfo
	concat
	log
	intc 1 // 1
	return

// getStakerInfo(staker: Address): StakedInfo
//
// Retrieves the staked information for a given staker.
//
// @param {Address} staker - The address of the staker.
// @returns {StakedInfo} - The staked information for the given staker.
// @throws {Error} - If the staker's account is not found.
getStakerInfo:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/reti/stakingPool.algo.ts:452
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 0 // i: uint64

*for_3:
	// examples/reti/stakingPool.algo.ts:452
	// i < this.stakers.value.length
	frame_dig 0 // i: uint64
	intc 7 // 200
	<
	bz *for_3_end

	// *if18_condition
	// examples/reti/stakingPool.algo.ts:453
	// globals.opcodeBudget < 200
	global OpcodeBudget
	intc 7 // 200
	<
	bz *if18_end

	// *if18_consequent
	// examples/reti/stakingPool.algo.ts:454
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if18_end:
	// *if19_condition
	// examples/reti/stakingPool.algo.ts:456
	// this.stakers.value[i].account === staker
	frame_dig 0 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 0 // 0
	+
	intc 4 // 32
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_dig -1 // staker: Address
	==
	bz *if19_end

	// *if19_consequent
	// examples/reti/stakingPool.algo.ts:457
	// return this.stakers.value[i];
	frame_dig 0 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 3 // 64
	bytec 2 //  "stakers"
	cover 2
	box_extract
	b *getStakerInfo*return

*if19_end:

*for_3_continue:
	// examples/reti/stakingPool.algo.ts:452
	// i += 1
	frame_dig 0 // i: uint64
	intc 1 // 1
	+
	frame_bury 0 // i: uint64
	b *for_3

*for_3_end:
	// account not found
	err

*getStakerInfo*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// payTokenReward(address,uint64,uint64)void
*abi_route_payTokenReward:
	// amountToSend: uint64
	txna ApplicationArgs 3
	btoi

	// rewardToken: uint64
	txna ApplicationArgs 2
	btoi

	// staker: address
	txna ApplicationArgs 1
	dup
	len
	intc 4 // 32
	==

	// argument 2 (staker) for payTokenReward must be a address
	assert

	// execute payTokenReward(address,uint64,uint64)void
	callsub payTokenReward
	intc 1 // 1
	return

// payTokenReward(staker: Address, rewardToken: uint64, amountToSend: uint64): void
//
// [Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
// This can ONLY be called by our validator and only if we're pool 1 - with the token.
// Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
// somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
// It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored.
// @param staker - the staker account to send rewards to
// @param rewardToken - id of reward token (to avoid re-entrancy in calling validator back to get id)
// @param amountToSend - amount to send the staker (there is significant trust here(!) - also why only validator can call us
payTokenReward:
	proto 3 0

	// examples/reti/stakingPool.algo.ts:475
	// assert(
	//       this.txn.sender === this.creatingValidatorContractAppId.value.address,
	//       'this can only be called via the validator contract'
	//     )
	txn Sender
	bytec 1 //  "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	==

	// this can only be called via the validator contract
	assert

	// examples/reti/stakingPool.algo.ts:479
	// assert(this.poolId.value === 1, 'must be pool 1 in order to be called to pay out token rewards')
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==

	// must be pool 1 in order to be called to pay out token rewards
	assert

	// examples/reti/stakingPool.algo.ts:480
	// assert(rewardToken !== 0, 'can only claim token rewards from validator that has them')
	frame_dig -2 // rewardToken: uint64
	intc 0 // 0
	!=

	// can only claim token rewards from validator that has them
	assert

	// examples/reti/stakingPool.algo.ts:483
	// sendAssetTransfer({
	//       xferAsset: AssetID.fromUint64(rewardToken),
	//       assetReceiver: staker,
	//       assetAmount: amountToSend,
	//     })
	itxn_begin
	intc 12 //  axfer
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:484
	// xferAsset: AssetID.fromUint64(rewardToken)
	frame_dig -2 // rewardToken: uint64
	itxn_field XferAsset

	// examples/reti/stakingPool.algo.ts:485
	// assetReceiver: staker
	frame_dig -1 // staker: Address
	itxn_field AssetReceiver

	// examples/reti/stakingPool.algo.ts:486
	// assetAmount: amountToSend
	frame_dig -3 // amountToSend: uint64
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// updateAlgodVer(string)void
*abi_route_updateAlgodVer:
	// algodVer: string
	txna ApplicationArgs 1
	extract 2 0

	// execute updateAlgodVer(string)void
	callsub updateAlgodVer
	intc 1 // 1
	return

// updateAlgodVer(algodVer: string): void
//
// Update the (honor system) algod version for the node associated to this pool.  The node management daemon
// should compare its current nodes version to the version stored in global state, updating when different.
// The reti node daemon composes its own version string using format:
// {major}.{minor}.{build} {branch} [{commit hash}],
// ie: 3.22.0 rel/stable [6b508975]
// [ ONLY OWNER OR MANAGER CAN CALL ]
// @param {string} algodVer - string representing the algorand node daemon version (reti node daemon composes its own meta version)
updateAlgodVer:
	proto 1 0

	// examples/reti/stakingPool.algo.ts:500
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

	// examples/reti/stakingPool.algo.ts:501
	// this.algodVer.value = algodVer
	pushbytes 0x616c676f64566572 // "algodVer"
	frame_dig -1 // algodVer: string
	app_global_put
	retsub

// epochBalanceUpdate()void
*abi_route_epochBalanceUpdate:
	// execute epochBalanceUpdate()void
	callsub epochBalanceUpdate
	intc 1 // 1
	return

// epochBalanceUpdate(): void
//
// Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
// stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
// compounds over time and staker can remove that amount at will.
// The validator is paid their percentage each epoch payout.
//
// Note: ANYONE can call this.
epochBalanceUpdate:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 39

	// examples/reti/stakingPool.algo.ts:514
	// validatorConfig = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorConfig>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [this.validatorId.value],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 15 //  method "getValidatorConfig(uint64)(uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:515
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:516
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:523
	// epochRoundLength = validatorConfig.epochRoundLength as uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 169 4
	btoi
	frame_bury 1 // epochRoundLength: uint64

	// examples/reti/stakingPool.algo.ts:524
	// curRound = globals.round
	global Round
	frame_bury 2 // curRound: uint64

	// examples/reti/stakingPool.algo.ts:525
	// thisEpochBegin = curRound - (curRound % epochRoundLength)
	frame_dig 2 // curRound: uint64
	frame_dig 2 // curRound: uint64
	frame_dig 1 // epochRoundLength: uint64
	%
	-
	frame_bury 3 // thisEpochBegin: uint64

	// examples/reti/stakingPool.algo.ts:528
	// lastPayoutEpoch = this.lastPayout.value - (this.lastPayout.value % epochRoundLength)
	bytec 14 //  "lastPayout"
	app_global_get
	bytec 14 //  "lastPayout"
	app_global_get
	frame_dig 1 // epochRoundLength: uint64
	%
	-
	frame_bury 4 // lastPayoutEpoch: uint64

	// examples/reti/stakingPool.algo.ts:530
	// assert(lastPayoutEpoch !== thisEpochBegin, "can't call epochBalanceUpdate in same epoch as prior call")
	frame_dig 4 // lastPayoutEpoch: uint64
	frame_dig 3 // thisEpochBegin: uint64
	!=

	// can't call epochBalanceUpdate in same epoch as prior call
	assert

	// examples/reti/stakingPool.algo.ts:532
	// this.checkIfBinClosed()
	callsub checkIfBinClosed

	// examples/reti/stakingPool.algo.ts:535
	// this.lastPayout.value = curRound
	bytec 14 //  "lastPayout"
	frame_dig 2 // curRound: uint64
	app_global_put

	// examples/reti/stakingPool.algo.ts:536
	// this.epochNumber.value += 1
	bytec 19 //  "epochNumber"
	app_global_get
	intc 1 // 1
	+
	bytec 19 //  "epochNumber"
	swap
	app_global_put

	// examples/reti/stakingPool.algo.ts:541
	// isTokenEligible = validatorConfig.rewardTokenId !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	intc 0 // 0
	!=
	frame_bury 5 // isTokenEligible: bool

	// examples/reti/stakingPool.algo.ts:542
	// poolOneAppID = this.app.id
	txna Applications 0
	frame_bury 6 // poolOneAppID: uint64

	// examples/reti/stakingPool.algo.ts:543
	// poolOneAddress = this.app.address
	global CurrentApplicationAddress
	frame_bury 7 // poolOneAddress: address

	// *if20_condition
	// examples/reti/stakingPool.algo.ts:548
	// isTokenEligible
	frame_dig 5 // isTokenEligible: bool
	bz *if20_end

	// *if20_consequent
	// *if21_condition
	// examples/reti/stakingPool.algo.ts:549
	// this.poolId.value !== 1
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	!=
	bz *if21_end

	// *if21_consequent
	// examples/reti/stakingPool.algo.ts:551
	// poolOneAppID = sendMethodCall<typeof ValidatorRegistry.prototype.getPoolAppId>({
	//           applicationID: this.creatingValidatorContractAppId.value,
	//           methodArgs: [this.validatorId.value, 1],
	//         })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 23 //  method "getPoolAppId(uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:552
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:553
	// methodArgs: [this.validatorId.value, 1]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs
	pushbytes 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 6 // poolOneAppID: uint64

	// examples/reti/stakingPool.algo.ts:555
	// poolOneAddress = AppID.fromUint64(poolOneAppID).address
	frame_dig 6 // poolOneAppID: uint64
	app_params_get AppAddress
	pop
	frame_bury 7 // poolOneAddress: address

*if21_end:
	// *if22_condition
	// examples/reti/stakingPool.algo.ts:560
	// this.poolId.value === 1
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==
	bz *if22_else

	// *if22_consequent
	// examples/reti/stakingPool.algo.ts:561
	// tokenPayoutRatio = sendMethodCall<typeof ValidatorRegistry.prototype.setTokenPayoutRatio>({
	//           applicationID: this.creatingValidatorContractAppId.value,
	//           methodArgs: [this.validatorId.value],
	//         })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "setTokenPayoutRatio(uint64)(uint64[24],uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:562
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:563
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 8 // tokenPayoutRatio: PoolTokenPayoutRatio
	b *if22_end

*if22_else:
	// examples/reti/stakingPool.algo.ts:567
	// tokenPayoutRatio = sendMethodCall<typeof StakingPool.prototype.proxiedSetTokenPayoutRatio>({
	//           applicationID: AppID.fromUint64(poolOneAppID),
	//           methodArgs: [{ id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id }],
	//         })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 25 //  method "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:568
	// applicationID: AppID.fromUint64(poolOneAppID)
	frame_dig 6 // poolOneAppID: uint64
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:569
	// methodArgs: [{ id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id }]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	bytec 4 //  "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 8 // tokenPayoutRatio: PoolTokenPayoutRatio

*if22_end:

*if20_end:
	// examples/reti/stakingPool.algo.ts:576
	// validatorState = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorState>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [this.validatorId.value],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x1f2f0109 // method "getValidatorState(uint64)(uint16,uint64,uint64,uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:577
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:578
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 9 // validatorState: (uint16,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:580
	// rewardTokenHeldBack = validatorState.rewardTokenHeldBack
	frame_dig 9 // validatorState: (uint16,uint64,uint64,uint64)
	extract 18 8
	btoi
	frame_bury 10 // rewardTokenHeldBack: uint64

	// examples/reti/stakingPool.algo.ts:586
	// algoRewardAvail = this.app.address.balance - this.totalAlgoStaked.value - this.app.address.minBalance
	global CurrentApplicationAddress
	acct_params_get AcctBalance
	pop
	bytec 6 //  "staked"
	app_global_get
	-
	global CurrentApplicationAddress
	acct_params_get AcctMinBalance
	pop
	-
	frame_bury 11 // algoRewardAvail: uint64

	// examples/reti/stakingPool.algo.ts:587
	// isPoolSaturated = false
	intc 0 // 0
	frame_bury 12 // isPoolSaturated: bool

	// examples/reti/stakingPool.algo.ts:588
	// algoSaturationAmt = this.algoSaturationLevel()
	callsub algoSaturationLevel
	frame_bury 13 // algoSaturationAmt: uint64

	// *if23_condition
	// examples/reti/stakingPool.algo.ts:596
	// validatorState.totalAlgoStaked > algoSaturationAmt
	frame_dig 9 // validatorState: (uint16,uint64,uint64,uint64)
	extract 10 8
	btoi
	frame_dig 13 // algoSaturationAmt: uint64
	>
	bz *if23_end

	// *if23_consequent
	// examples/reti/stakingPool.algo.ts:597
	// isPoolSaturated = true
	intc 1 // 1
	frame_bury 12 // isPoolSaturated: bool

*if23_end:
	// examples/reti/stakingPool.algo.ts:603
	// tokenRewardAvail = 0
	intc 0 // 0
	frame_bury 14 // tokenRewardAvail: uint64

	// examples/reti/stakingPool.algo.ts:604
	// tokenRewardPaidOut = 0
	intc 0 // 0
	frame_bury 15 // tokenRewardPaidOut: uint64

	// examples/reti/stakingPool.algo.ts:605
	// validatorCommissionPaidOut = 0
	intc 0 // 0
	frame_bury 16 // validatorCommissionPaidOut: uint64

	// examples/reti/stakingPool.algo.ts:606
	// excessToFeeSink = 0
	intc 0 // 0
	frame_bury 17 // excessToFeeSink: uint64

	// *if24_condition
	// examples/reti/stakingPool.algo.ts:607
	// isTokenEligible
	frame_dig 5 // isTokenEligible: bool
	bz *if24_end

	// *if24_consequent
	// examples/reti/stakingPool.algo.ts:608
	// tokenRewardBal =
	//         poolOneAddress.assetBalance(AssetID.fromUint64(validatorConfig.rewardTokenId)) - rewardTokenHeldBack
	frame_dig 7 // poolOneAddress: address
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 153 8
	btoi
	asset_holding_get AssetBalance
	pop
	frame_dig 10 // rewardTokenHeldBack: uint64
	-
	frame_bury 18 // tokenRewardBal: uint64

	// *if25_condition
	// examples/reti/stakingPool.algo.ts:613
	// tokenRewardBal >= validatorConfig.rewardPerPayout
	frame_dig 18 // tokenRewardBal: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 161 8
	btoi
	>=
	bz *if25_end

	// *if25_consequent
	// examples/reti/stakingPool.algo.ts:619
	// ourPoolPctOfWhole = tokenPayoutRatio.poolPctOfWhole[this.poolId.value - 1]
	frame_dig 8 // tokenPayoutRatio: PoolTokenPayoutRatio
	intc 0 // 0
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	-
	intc 14 // 8
	* // acc * typeLength
	+
	intc 14 // 8
	extract3
	btoi
	frame_bury 19 // ourPoolPctOfWhole: uint64

	// examples/reti/stakingPool.algo.ts:622
	// tokenRewardAvail = wideRatio([validatorConfig.rewardPerPayout, ourPoolPctOfWhole], [1_000_000])
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 161 8
	btoi
	frame_dig 19 // ourPoolPctOfWhole: uint64
	mulw
	intc 0 // 0
	intc 9 // 1_000_000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 14 // tokenRewardAvail: uint64

*if25_end:

*if24_end:
	// *if26_condition
	// examples/reti/stakingPool.algo.ts:625
	// tokenRewardAvail === 0
	frame_dig 14 // tokenRewardAvail: uint64
	intc 0 // 0
	==
	bz *if26_end

	// *if26_consequent
	// *if27_condition
	// examples/reti/stakingPool.algo.ts:630
	// algoRewardAvail < 1_000_000
	frame_dig 11 // algoRewardAvail: uint64
	intc 9 // 1_000_000
	<
	bz *if27_end

	// *if27_consequent
	// examples/reti/stakingPool.algo.ts:631
	// log('!token&&!noalgo to pay')
	pushbytes 0x21746f6b656e2626216e6f616c676f20746f20706179 // "!token&&!noalgo to pay"
	log

	// examples/reti/stakingPool.algo.ts:632
	// return;
	retsub

*if27_end:

*if26_end:
	// *if28_condition
	// examples/reti/stakingPool.algo.ts:636
	// isPoolSaturated
	frame_dig 12 // isPoolSaturated: bool
	bz *if28_elseif1_condition

	// *if28_consequent
	// examples/reti/stakingPool.algo.ts:642
	// normalValidatorCommission = wideRatio(
	//         [algoRewardAvail, validatorConfig.percentToValidator as uint64],
	//         [1_000_000]
	//       )
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 173 4
	btoi
	mulw
	intc 0 // 0
	intc 9 // 1_000_000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 20 // normalValidatorCommission: uint64

	// examples/reti/stakingPool.algo.ts:647
	// diminishedReward = wideRatio([algoRewardAvail, algoSaturationAmt], [validatorState.totalAlgoStaked])
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 13 // algoSaturationAmt: uint64
	mulw
	intc 0 // 0
	frame_dig 9 // validatorState: (uint16,uint64,uint64,uint64)
	extract 10 8
	btoi
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 21 // diminishedReward: uint64

	// *if29_condition
	// examples/reti/stakingPool.algo.ts:649
	// diminishedReward > algoRewardAvail - normalValidatorCommission
	frame_dig 21 // diminishedReward: uint64
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 20 // normalValidatorCommission: uint64
	-
	>
	bz *if29_end

	// *if29_consequent
	// examples/reti/stakingPool.algo.ts:650
	// diminishedReward = algoRewardAvail - normalValidatorCommission
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 20 // normalValidatorCommission: uint64
	-
	frame_bury 21 // diminishedReward: uint64

*if29_end:
	// examples/reti/stakingPool.algo.ts:653
	// excessToFeeSink = algoRewardAvail - diminishedReward
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 21 // diminishedReward: uint64
	-
	frame_bury 17 // excessToFeeSink: uint64

	// examples/reti/stakingPool.algo.ts:654
	// sendPayment({
	//         amount: excessToFeeSink,
	//         receiver: blocks[this.txn.firstValid - 1].feeSink,
	//         note: 'pool saturated, excess to fee sink',
	//       })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:655
	// amount: excessToFeeSink
	frame_dig 17 // excessToFeeSink: uint64
	itxn_field Amount

	// examples/reti/stakingPool.algo.ts:656
	// receiver: blocks[this.txn.firstValid - 1].feeSink
	txn FirstValid
	intc 1 // 1
	-
	block BlkFeeSink
	itxn_field Receiver

	// examples/reti/stakingPool.algo.ts:657
	// note: 'pool saturated, excess to fee sink'
	pushbytes 0x706f6f6c207361747572617465642c2065786365737320746f206665652073696e6b // "pool saturated, excess to fee sink"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

	// examples/reti/stakingPool.algo.ts:660
	// algoRewardAvail = diminishedReward
	frame_dig 21 // diminishedReward: uint64
	frame_bury 11 // algoRewardAvail: uint64
	b *if28_end

*if28_elseif1_condition:
	// examples/reti/stakingPool.algo.ts:661
	// validatorConfig.percentToValidator !== 0
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 173 4
	btoi
	intc 0 // 0
	!=
	bz *if28_end

	// *if28_elseif1_consequent
	// examples/reti/stakingPool.algo.ts:664
	// validatorCommissionPaidOut = wideRatio(
	//         [algoRewardAvail, validatorConfig.percentToValidator as uint64],
	//         [1_000_000]
	//       )
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 173 4
	btoi
	mulw
	intc 0 // 0
	intc 9 // 1_000_000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 16 // validatorCommissionPaidOut: uint64

	// examples/reti/stakingPool.algo.ts:670
	// algoRewardAvail -= validatorCommissionPaidOut
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 16 // validatorCommissionPaidOut: uint64
	-
	frame_bury 11 // algoRewardAvail: uint64

	// *if30_condition
	// examples/reti/stakingPool.algo.ts:677
	// validatorCommissionPaidOut > 0
	frame_dig 16 // validatorCommissionPaidOut: uint64
	intc 0 // 0
	>
	bz *if30_end

	// *if30_consequent
	// examples/reti/stakingPool.algo.ts:680
	// managerTopOff = 0
	intc 0 // 0
	frame_bury 22 // managerTopOff: uint64

	// *if31_condition
	// examples/reti/stakingPool.algo.ts:682
	// validatorConfig.manager !== validatorConfig.validatorCommissionAddress &&
	//           validatorConfig.manager.balance - validatorConfig.manager.minBalance < 2_100_000
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 177 32
	!=
	dup
	bz *skip_and3
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	acct_params_get AcctBalance
	pop
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	acct_params_get AcctMinBalance
	pop
	-
	intc 13 // 2_100_000
	<
	&&

*skip_and3:
	bz *if31_end

	// *if31_consequent
	// examples/reti/stakingPool.algo.ts:685
	// managerTopOff = validatorCommissionPaidOut < 2_100_000 ? validatorCommissionPaidOut : 2_100_000
	frame_dig 16 // validatorCommissionPaidOut: uint64
	intc 13 // 2_100_000
	<
	bz *ternary1_false
	frame_dig 16 // validatorCommissionPaidOut: uint64
	b *ternary1_end

*ternary1_false:
	intc 13 // 2_100_000

*ternary1_end:
	frame_bury 22 // managerTopOff: uint64

	// examples/reti/stakingPool.algo.ts:686
	// sendPayment({
	//             amount: managerTopOff,
	//             receiver: validatorConfig.manager,
	//             note: 'validator reward to manager for funding epoch updates',
	//           })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:687
	// amount: managerTopOff
	frame_dig 22 // managerTopOff: uint64
	itxn_field Amount

	// examples/reti/stakingPool.algo.ts:688
	// receiver: validatorConfig.manager
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 40 32
	itxn_field Receiver

	// examples/reti/stakingPool.algo.ts:689
	// note: 'validator reward to manager for funding epoch updates'
	pushbytes 0x76616c696461746f722072657761726420746f206d616e6167657220666f722066756e64696e672065706f63682075706461746573 // "validator reward to manager for funding epoch updates"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if31_end:
	// *if32_condition
	// examples/reti/stakingPool.algo.ts:692
	// validatorCommissionPaidOut - managerTopOff > 0
	frame_dig 16 // validatorCommissionPaidOut: uint64
	frame_dig 22 // managerTopOff: uint64
	-
	intc 0 // 0
	>
	bz *if32_end

	// *if32_consequent
	// examples/reti/stakingPool.algo.ts:693
	// sendPayment({
	//             amount: validatorCommissionPaidOut - managerTopOff,
	//             receiver: validatorConfig.validatorCommissionAddress,
	//             note: 'validator reward',
	//           })
	itxn_begin
	intc 1 //  pay
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:694
	// amount: validatorCommissionPaidOut - managerTopOff
	frame_dig 16 // validatorCommissionPaidOut: uint64
	frame_dig 22 // managerTopOff: uint64
	-
	itxn_field Amount

	// examples/reti/stakingPool.algo.ts:695
	// receiver: validatorConfig.validatorCommissionAddress
	frame_dig 0 // validatorConfig: (uint64,address,address,uint64,uint8,address,uint64[4],uint64,uint64,uint64,uint32,uint32,address,uint64,uint64,uint8,uint64,uint64)
	extract 177 32
	itxn_field Receiver

	// examples/reti/stakingPool.algo.ts:696
	// note: 'validator reward'
	pushbytes 0x76616c696461746f7220726577617264 // "validator reward"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit

*if32_end:

*if30_end:

*if28_end:
	// examples/reti/stakingPool.algo.ts:708
	// increasedStake = 0
	intc 0 // 0
	frame_bury 23 // increasedStake: uint64

	// *if33_condition
	// examples/reti/stakingPool.algo.ts:732
	// algoRewardAvail !== 0 || tokenRewardAvail !== 0
	frame_dig 11 // algoRewardAvail: uint64
	intc 0 // 0
	!=
	dup
	bnz *skip_or1
	frame_dig 14 // tokenRewardAvail: uint64
	intc 0 // 0
	!=
	||

*skip_or1:
	bz *if33_end

	// *if33_consequent
	// examples/reti/stakingPool.algo.ts:733
	// partialStakersTotalStake: uint64 = 0
	intc 0 // 0
	frame_bury 24 // partialStakersTotalStake: uint64

	// examples/reti/stakingPool.algo.ts:734
	// origAlgoReward = algoRewardAvail
	frame_dig 11 // algoRewardAvail: uint64
	frame_bury 25 // origAlgoReward: uint64

	// examples/reti/stakingPool.algo.ts:736
	// origTokenReward = tokenRewardAvail
	frame_dig 14 // tokenRewardAvail: uint64
	frame_bury 26 // origTokenReward: uint64

	// examples/reti/stakingPool.algo.ts:737
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 27 // i: uint64

*for_4:
	// examples/reti/stakingPool.algo.ts:737
	// i < this.stakers.value.length
	frame_dig 27 // i: uint64
	intc 7 // 200
	<
	bz *for_4_end

	// *if34_condition
	// examples/reti/stakingPool.algo.ts:738
	// globals.opcodeBudget < 400
	global OpcodeBudget
	intc 16 // 400
	<
	bz *if34_end

	// *if34_consequent
	// examples/reti/stakingPool.algo.ts:739
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if34_end:
	// examples/reti/stakingPool.algo.ts:741
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 27 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 3 // 64
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if35_condition
	// examples/reti/stakingPool.algo.ts:742
	// cmpStaker.account !== globals.zeroAddress
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	bz *if35_end

	// *if35_consequent
	// *if36_condition
	// examples/reti/stakingPool.algo.ts:743
	// cmpStaker.entryRound >= thisEpochBegin
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 3 // thisEpochBegin: uint64
	>=
	bz *if36_else

	// *if36_consequent
	// examples/reti/stakingPool.algo.ts:746
	// partialStakersTotalStake += cmpStaker.balance
	frame_dig 24 // partialStakersTotalStake: uint64
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 24 // partialStakersTotalStake: uint64
	b *if36_end

*if36_else:
	// examples/reti/stakingPool.algo.ts:750
	// timeInPool = thisEpochBegin - cmpStaker.entryRound
	frame_dig 3 // thisEpochBegin: uint64
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 29 // timeInPool: uint64

	// *if37_condition
	// examples/reti/stakingPool.algo.ts:754
	// timeInPool < epochRoundLength
	frame_dig 29 // timeInPool: uint64
	frame_dig 1 // epochRoundLength: uint64
	<
	bz *if37_end

	// *if37_consequent
	// examples/reti/stakingPool.algo.ts:755
	// partialStakersTotalStake += cmpStaker.balance
	frame_dig 24 // partialStakersTotalStake: uint64
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	+
	frame_bury 24 // partialStakersTotalStake: uint64

	// examples/reti/stakingPool.algo.ts:756
	// timePercentage = (timeInPool * 1000) / epochRoundLength
	frame_dig 29 // timeInPool: uint64
	intc 11 // 1000
	*
	frame_dig 1 // epochRoundLength: uint64
	/
	frame_bury 30 // timePercentage: uint64

	// *if38_condition
	// examples/reti/stakingPool.algo.ts:758
	// tokenRewardAvail > 0
	frame_dig 14 // tokenRewardAvail: uint64
	intc 0 // 0
	>
	bz *if38_end

	// *if38_consequent
	// examples/reti/stakingPool.algo.ts:760
	// stakerTokenReward = wideRatio(
	//                   [cmpStaker.balance, origTokenReward, timePercentage],
	//                   [this.totalAlgoStaked.value, 1000]
	//                 )
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 26 // origTokenReward: uint64
	mulw
	frame_dig 30 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	bytec 6 //  "staked"
	app_global_get
	intc 11 // 1000
	mulw
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 31 // stakerTokenReward: uint64

	// examples/reti/stakingPool.algo.ts:767
	// tokenRewardAvail -= stakerTokenReward
	frame_dig 14 // tokenRewardAvail: uint64
	frame_dig 31 // stakerTokenReward: uint64
	-
	frame_bury 14 // tokenRewardAvail: uint64

	// examples/reti/stakingPool.algo.ts:768
	// cmpStaker.rewardTokenBalance += stakerTokenReward
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 20 //  headOffset
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 31 // stakerTokenReward: uint64
	+
	itob
	replace3
	frame_bury 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:769
	// tokenRewardPaidOut += stakerTokenReward
	frame_dig 15 // tokenRewardPaidOut: uint64
	frame_dig 31 // stakerTokenReward: uint64
	+
	frame_bury 15 // tokenRewardPaidOut: uint64

*if38_end:
	// examples/reti/stakingPool.algo.ts:772
	// stakerReward = wideRatio(
	//                 [cmpStaker.balance, origAlgoReward, timePercentage],
	//                 [this.totalAlgoStaked.value, 1000]
	//               )
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 25 // origAlgoReward: uint64
	mulw
	frame_dig 30 // timePercentage: uint64
	uncover 2
	dig 1
	*
	cover 2
	mulw
	cover 2
	+
	swap
	bytec 6 //  "staked"
	app_global_get
	intc 11 // 1000
	mulw
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 32 // stakerReward: uint64

	// examples/reti/stakingPool.algo.ts:778
	// algoRewardAvail -= stakerReward
	frame_dig 11 // algoRewardAvail: uint64
	frame_dig 32 // stakerReward: uint64
	-
	frame_bury 11 // algoRewardAvail: uint64

	// examples/reti/stakingPool.algo.ts:781
	// cmpStaker.balance += stakerReward
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 4 //  headOffset
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 32 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:782
	// cmpStaker.totalRewarded += stakerReward
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 19 //  headOffset
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 32 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:783
	// increasedStake += stakerReward
	frame_dig 23 // increasedStake: uint64
	frame_dig 32 // stakerReward: uint64
	+
	frame_bury 23 // increasedStake: uint64

	// examples/reti/stakingPool.algo.ts:785
	// this.stakers.value[i] = cmpStaker
	frame_dig 27 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	frame_dig 28 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

*if37_end:

*if36_end:

*if35_end:

*for_4_continue:
	// examples/reti/stakingPool.algo.ts:737
	// i += 1
	frame_dig 27 // i: uint64
	intc 1 // 1
	+
	frame_bury 27 // i: uint64
	b *for_4

*for_4_end:
	// examples/reti/stakingPool.algo.ts:793
	// newPoolTotalStake = this.totalAlgoStaked.value - partialStakersTotalStake
	bytec 6 //  "staked"
	app_global_get
	frame_dig 24 // partialStakersTotalStake: uint64
	-
	frame_bury 33 // newPoolTotalStake: uint64

	// *if39_condition
	// examples/reti/stakingPool.algo.ts:797
	// newPoolTotalStake > 0
	frame_dig 33 // newPoolTotalStake: uint64
	intc 0 // 0
	>
	bz *if39_end

	// *if39_consequent
	// examples/reti/stakingPool.algo.ts:799
	// for (let i = 0; i < this.stakers.value.length; i += 1)
	intc 0 // 0
	frame_bury 34 // i: uint64

*for_5:
	// examples/reti/stakingPool.algo.ts:799
	// i < this.stakers.value.length
	frame_dig 34 // i: uint64
	intc 7 // 200
	<
	bz *for_5_end

	// *if40_condition
	// examples/reti/stakingPool.algo.ts:800
	// globals.opcodeBudget < 200
	global OpcodeBudget
	intc 7 // 200
	<
	bz *if40_end

	// *if40_consequent
	// examples/reti/stakingPool.algo.ts:801
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if40_end:
	// examples/reti/stakingPool.algo.ts:803
	// cmpStaker = clone(this.stakers.value[i])
	frame_dig 34 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	intc 3 // 64
	bytec 2 //  "stakers"
	cover 2
	box_extract
	frame_bury 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// *if41_condition
	// examples/reti/stakingPool.algo.ts:804
	// cmpStaker.account !== globals.zeroAddress && cmpStaker.entryRound < thisEpochBegin
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 0 32
	global ZeroAddress
	!=
	dup
	bz *skip_and4
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	frame_dig 3 // thisEpochBegin: uint64
	<
	&&

*skip_and4:
	bz *if41_end

	// *if41_consequent
	// examples/reti/stakingPool.algo.ts:805
	// timeInPool = thisEpochBegin - cmpStaker.entryRound
	frame_dig 3 // thisEpochBegin: uint64
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 56 8
	btoi
	-
	frame_bury 36 // timeInPool: uint64

	// *if42_condition
	// examples/reti/stakingPool.algo.ts:807
	// timeInPool >= epochRoundLength
	frame_dig 36 // timeInPool: uint64
	frame_dig 1 // epochRoundLength: uint64
	>=
	bz *if42_end

	// *if42_consequent
	// *if43_condition
	// examples/reti/stakingPool.algo.ts:812
	// tokenRewardAvail > 0
	frame_dig 14 // tokenRewardAvail: uint64
	intc 0 // 0
	>
	bz *if43_end

	// *if43_consequent
	// examples/reti/stakingPool.algo.ts:813
	// stakerTokenReward = wideRatio([cmpStaker.balance, tokenRewardAvail], [newPoolTotalStake])
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 14 // tokenRewardAvail: uint64
	mulw
	intc 0 // 0
	frame_dig 33 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 37 // stakerTokenReward: uint64

	// examples/reti/stakingPool.algo.ts:815
	// cmpStaker.rewardTokenBalance += stakerTokenReward
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 20 //  headOffset
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 48 8
	btoi
	frame_dig 37 // stakerTokenReward: uint64
	+
	itob
	replace3
	frame_bury 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:816
	// tokenRewardPaidOut += stakerTokenReward
	frame_dig 15 // tokenRewardPaidOut: uint64
	frame_dig 37 // stakerTokenReward: uint64
	+
	frame_bury 15 // tokenRewardPaidOut: uint64

*if43_end:
	// *if44_condition
	// examples/reti/stakingPool.algo.ts:818
	// algoRewardAvail > 0
	frame_dig 11 // algoRewardAvail: uint64
	intc 0 // 0
	>
	bz *if44_end

	// *if44_consequent
	// examples/reti/stakingPool.algo.ts:819
	// stakerReward = wideRatio([cmpStaker.balance, algoRewardAvail], [newPoolTotalStake])
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 11 // algoRewardAvail: uint64
	mulw
	intc 0 // 0
	frame_dig 33 // newPoolTotalStake: uint64
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert
	frame_bury 38 // stakerReward: uint64

	// examples/reti/stakingPool.algo.ts:822
	// cmpStaker.balance += stakerReward
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 4 //  headOffset
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 32 8
	btoi
	frame_dig 38 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:823
	// cmpStaker.totalRewarded += stakerReward
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	intc 19 //  headOffset
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	extract 40 8
	btoi
	frame_dig 38 // stakerReward: uint64
	+
	itob
	replace3
	frame_bury 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)

	// examples/reti/stakingPool.algo.ts:824
	// increasedStake += stakerReward
	frame_dig 23 // increasedStake: uint64
	frame_dig 38 // stakerReward: uint64
	+
	frame_bury 23 // increasedStake: uint64

*if44_end:
	// examples/reti/stakingPool.algo.ts:828
	// this.stakers.value[i] = cmpStaker
	frame_dig 34 // i: uint64
	intc 3 // 64
	* // acc * typeLength
	frame_dig 35 // cmpStaker: (address,uint64,uint64,uint64,uint64)
	bytec 2 //  "stakers"
	cover 2
	box_replace

*if42_end:

*if41_end:

*for_5_continue:
	// examples/reti/stakingPool.algo.ts:799
	// i += 1
	frame_dig 34 // i: uint64
	intc 1 // 1
	+
	frame_bury 34 // i: uint64
	b *for_5

*for_5_end:

*if39_end:

*if33_end:
	// examples/reti/stakingPool.algo.ts:838
	// roundsLeftInBin = this.binRoundStart.value + this.roundsPerDay.value - globals.round
	bytec 11 //  "binRoundStart"
	app_global_get
	bytec 7 //  "roundsPerDay"
	app_global_get
	+
	global Round
	-
	frame_bury 39 // roundsLeftInBin: uint64

	// examples/reti/stakingPool.algo.ts:839
	// this.totalAlgoStaked.value += increasedStake
	bytec 6 //  "staked"
	app_global_get
	frame_dig 23 // increasedStake: uint64
	+
	bytec 6 //  "staked"
	swap
	app_global_put

	// examples/reti/stakingPool.algo.ts:840
	// this.stakeAccumulator.value =
	//       this.stakeAccumulator.value + (increasedStake as uint128) * (roundsLeftInBin as uint128)
	bytec 8 //  "stakeAccumulator"
	dup
	app_global_get
	frame_dig 23 // increasedStake: uint64
	itob
	frame_dig 39 // roundsLeftInBin: uint64
	itob
	b*
	b+
	dup
	bitlen
	intc 6 // 128
	<=

	// this.stakeAccumulator.value + (increasedStake as uint128) * (roundsLeftInBin as uint128) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	app_global_put

	// examples/reti/stakingPool.algo.ts:842
	// this.rewardAccumulator.value = this.rewardAccumulator.value + increasedStake
	bytec 12 //  "rewardAccumulator"
	dup
	app_global_get
	frame_dig 23 // increasedStake: uint64
	+
	app_global_put

	// examples/reti/stakingPool.algo.ts:848
	// sendMethodCall<typeof ValidatorRegistry.prototype.stakeUpdatedViaRewards>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [
	//         { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//         increasedStake,
	//         tokenRewardPaidOut,
	//         validatorCommissionPaidOut,
	//         excessToFeeSink,
	//       ],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x418fcefc // method "stakeUpdatedViaRewards((uint64,uint64,uint64),uint64,uint64,uint64,uint64)void"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:849
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:850
	// methodArgs: [
	//         { id: this.validatorId.value, poolId: this.poolId.value, poolAppId: this.app.id },
	//         increasedStake,
	//         tokenRewardPaidOut,
	//         validatorCommissionPaidOut,
	//         excessToFeeSink,
	//       ]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	bytec 4 //  "poolId"
	app_global_get
	itob
	concat
	txna Applications 0
	itob
	concat
	itxn_field ApplicationArgs
	frame_dig 23 // increasedStake: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 15 // tokenRewardPaidOut: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 16 // validatorCommissionPaidOut: uint64
	itob
	itxn_field ApplicationArgs
	frame_dig 17 // excessToFeeSink: uint64
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
*abi_route_goOnline:
	// voteKeyDilution: uint64
	txna ApplicationArgs 6
	btoi

	// voteLast: uint64
	txna ApplicationArgs 5
	btoi

	// voteFirst: uint64
	txna ApplicationArgs 4
	btoi

	// stateProofPK: byte[]
	txna ApplicationArgs 3
	extract 2 0

	// selectionPK: byte[]
	txna ApplicationArgs 2
	extract 2 0

	// votePK: byte[]
	txna ApplicationArgs 1
	extract 2 0

	// feePayment: pay
	txn GroupIndex
	intc 1 // 1
	-
	dup
	gtxns TypeEnum
	intc 1 //  pay
	==

	// argument 6 (feePayment) for goOnline must be a pay transaction
	assert

	// execute goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void
	callsub goOnline
	intc 1 // 1
	return

// goOnline(feePayment: PayTxn, votePK: bytes, selectionPK: bytes, stateProofPK: bytes, voteFirst: uint64, voteLast: uint64, voteKeyDilution: uint64): void
//
// Registers a staking pool key online against a participation key.
// [ ONLY OWNER OR MANAGER CAN CALL ]
//
// @param {PayTxn} feePayment - payment to cover extra fee of going online if offline - or 0 if not renewal
// @param {bytes} votePK - The vote public key.
// @param {bytes} selectionPK - The selection public key.
// @param {bytes} stateProofPK - The state proof public key.
// @param {uint64} voteFirst - The first vote index.
// @param {uint64} voteLast - The last vote index.
// @param {uint64} voteKeyDilution - The vote key dilution value.
// @throws {Error} Will throw an error if the caller is not the owner or a manager.
goOnline:
	proto 7 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/reti/stakingPool.algo.ts:882
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

	// examples/reti/stakingPool.algo.ts:883
	// extraFee = this.getGoOnlineFee()
	callsub getGoOnlineFee
	frame_bury 0 // extraFee: uint64

	// examples/reti/stakingPool.algo.ts:884
	// verifyPayTxn(feePayment, { receiver: this.app.address, amount: extraFee })
	// verify receiver
	frame_dig -1 // feePayment: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"feePayment","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // feePayment: PayTxn
	gtxns Amount
	frame_dig 0 // extraFee: uint64
	==

	// transaction verification failed: {"txn":"feePayment","field":"amount","expected":"extraFee"}
	assert

	// examples/reti/stakingPool.algo.ts:885
	// sendOnlineKeyRegistration({
	//       votePK: votePK,
	//       selectionPK: selectionPK,
	//       stateProofPK: stateProofPK,
	//       voteFirst: voteFirst,
	//       voteLast: voteLast,
	//       voteKeyDilution: voteKeyDilution,
	//       fee: extraFee,
	//     })
	itxn_begin
	intc 18 //  keyreg
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:886
	// votePK: votePK
	frame_dig -2 // votePK: bytes
	itxn_field VotePK

	// examples/reti/stakingPool.algo.ts:887
	// selectionPK: selectionPK
	frame_dig -3 // selectionPK: bytes
	itxn_field SelectionPK

	// examples/reti/stakingPool.algo.ts:888
	// stateProofPK: stateProofPK
	frame_dig -4 // stateProofPK: bytes
	itxn_field StateProofPK

	// examples/reti/stakingPool.algo.ts:889
	// voteFirst: voteFirst
	frame_dig -5 // voteFirst: uint64
	itxn_field VoteFirst

	// examples/reti/stakingPool.algo.ts:890
	// voteLast: voteLast
	frame_dig -6 // voteLast: uint64
	itxn_field VoteLast

	// examples/reti/stakingPool.algo.ts:891
	// voteKeyDilution: voteKeyDilution
	frame_dig -7 // voteKeyDilution: uint64
	itxn_field VoteKeyDilution

	// examples/reti/stakingPool.algo.ts:892
	// fee: extraFee
	frame_dig 0 // extraFee: uint64
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// goOffline()void
*abi_route_goOffline:
	// execute goOffline()void
	callsub goOffline
	intc 1 // 1
	return

// goOffline(): void
//
// Marks a staking pool key OFFLINE.
// [ ONLY OWNER OR MANAGER CAN CALL ]
goOffline:
	proto 0 0

	// *if45_condition
	// examples/reti/stakingPool.algo.ts:904
	// this.txn.sender !== this.creatingValidatorContractAppId.value.address
	txn Sender
	bytec 1 //  "creatorApp"
	app_global_get
	app_params_get AppAddress
	pop
	!=
	bz *if45_end

	// *if45_consequent
	// examples/reti/stakingPool.algo.ts:905
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

*if45_end:
	// examples/reti/stakingPool.algo.ts:908
	// sendOfflineKeyRegistration({})
	itxn_begin
	intc 18 //  keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// linkToNFD(uint64,string)void
*abi_route_linkToNFD:
	// nfdName: string
	txna ApplicationArgs 2
	extract 2 0

	// nfdAppId: uint64
	txna ApplicationArgs 1
	btoi

	// execute linkToNFD(uint64,string)void
	callsub linkToNFD
	intc 1 // 1
	return

// linkToNFD(nfdAppId: uint64, nfdName: string): void
linkToNFD:
	proto 2 0

	// examples/reti/stakingPool.algo.ts:915
	// assert(this.isOwnerOrManagerCaller(), 'can only be called by owner or manager of validator')
	callsub isOwnerOrManagerCaller

	// can only be called by owner or manager of validator
	assert

	// examples/reti/stakingPool.algo.ts:917
	// sendAppCall({
	//       applicationID: AppID.fromUint64(this.nfdRegistryAppId),
	//       applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)],
	//       applications: [AppID.fromUint64(nfdAppId)],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum

	// examples/reti/stakingPool.algo.ts:918
	// applicationID: AppID.fromUint64(this.nfdRegistryAppId)
	intc 21 // TMPL_nfdRegistryAppId
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:919
	// applicationArgs: ['verify_nfd_addr', nfdName, itob(nfdAppId), rawBytes(this.app.address)]
	pushbytes 0x7665726966795f6e66645f61646472 // "verify_nfd_addr"
	itxn_field ApplicationArgs
	frame_dig -2 // nfdName: string
	itxn_field ApplicationArgs
	frame_dig -1 // nfdAppId: uint64
	itob
	itxn_field ApplicationArgs
	global CurrentApplicationAddress
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:920
	// applications: [AppID.fromUint64(nfdAppId)]
	frame_dig -1 // nfdAppId: uint64
	itxn_field Applications

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)
*abi_route_proxiedSetTokenPayoutRatio:
	// The ABI return prefix
	bytec 21 // 0x151f7c75

	// poolKey: (uint64,uint64,uint64)
	txna ApplicationArgs 1
	dup
	len
	pushint 24
	==

	// argument 0 (poolKey) for proxiedSetTokenPayoutRatio must be a (uint64,uint64,uint64)
	assert

	// execute proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)
	callsub proxiedSetTokenPayoutRatio
	concat
	log
	intc 1 // 1
	return

// proxiedSetTokenPayoutRatio(poolKey: ValidatorPoolKey): PoolTokenPayoutRatio
//
// proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
// We need to verify that we are in fact being called by another of OUR pools (not us)
// and then we'll call the validator on their behalf to update the token payouts
// @param poolKey - ValidatorPoolKey tuple
proxiedSetTokenPayoutRatio:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/reti/stakingPool.algo.ts:931
	// assert(this.validatorId.value === poolKey.id, 'caller must be part of same validator set!')
	bytec 3 //  "validatorId"
	app_global_get
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	==

	// caller must be part of same validator set!
	assert

	// examples/reti/stakingPool.algo.ts:932
	// assert(this.poolId.value === 1, 'callee must be pool 1')
	bytec 4 //  "poolId"
	app_global_get
	intc 1 // 1
	==

	// callee must be pool 1
	assert

	// examples/reti/stakingPool.algo.ts:933
	// assert(poolKey.poolId !== 1, 'caller must NOT be pool 1')
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	intc 1 // 1
	!=

	// caller must NOT be pool 1
	assert

	// examples/reti/stakingPool.algo.ts:935
	// callerPoolAppID = sendMethodCall<typeof ValidatorRegistry.prototype.getPoolAppId>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [poolKey.id, poolKey.poolId],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 23 //  method "getPoolAppId(uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:936
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:937
	// methodArgs: [poolKey.id, poolKey.poolId]
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 0 8
	btoi
	itob
	itxn_field ApplicationArgs
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 8 8
	btoi
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	frame_bury 0 // callerPoolAppID: uint64

	// examples/reti/stakingPool.algo.ts:939
	// assert(callerPoolAppID === poolKey.poolAppId)
	frame_dig 0 // callerPoolAppID: uint64
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	==
	assert

	// examples/reti/stakingPool.algo.ts:940
	// assert(this.txn.sender === AppID.fromUint64(poolKey.poolAppId).address)
	txn Sender
	frame_dig -1 // poolKey: ValidatorPoolKey
	extract 16 8
	btoi
	app_params_get AppAddress
	pop
	==
	assert

	// examples/reti/stakingPool.algo.ts:942
	// return sendMethodCall<typeof ValidatorRegistry.prototype.setTokenPayoutRatio>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [this.validatorId.value],
	//     });
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 24 //  method "setTokenPayoutRatio(uint64)(uint64[24],uint64)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:943
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:944
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0

	// set the subroutine return value
	frame_bury 0
	retsub

// isOwnerOrManagerCaller(): boolean
isOwnerOrManagerCaller:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/reti/stakingPool.algo.ts:949
	// OwnerAndManager = sendMethodCall<typeof ValidatorRegistry.prototype.getValidatorOwnerAndManager>({
	//       applicationID: this.creatingValidatorContractAppId.value,
	//       methodArgs: [this.validatorId.value],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x2fa22c4b // method "getValidatorOwnerAndManager(uint64)(address,address)"
	itxn_field ApplicationArgs

	// examples/reti/stakingPool.algo.ts:950
	// applicationID: this.creatingValidatorContractAppId.value
	bytec 1 //  "creatorApp"
	app_global_get
	itxn_field ApplicationID

	// examples/reti/stakingPool.algo.ts:951
	// methodArgs: [this.validatorId.value]
	bytec 3 //  "validatorId"
	app_global_get
	itob
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 0 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 1 // 1
	-
	itxnas Logs
	extract 4 0
	frame_bury 0 // OwnerAndManager: (address,address)

	// examples/reti/stakingPool.algo.ts:953
	// return this.txn.sender === OwnerAndManager[0] || this.txn.sender === OwnerAndManager[1];
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 0 32
	==
	dup
	bnz *skip_or2
	txn Sender
	frame_dig 0 // OwnerAndManager: (address,address)
	extract 32 32
	==
	||

*skip_or2:
	// set the subroutine return value
	frame_bury 0
	retsub

// algoSaturationLevel(): uint64
//
// Returns the maximum allowed stake per validator based on a percentage of all current online stake before
// the validator is considered saturated - where rewards are diminished.
algoSaturationLevel:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// examples/reti/stakingPool.algo.ts:961
	// online = this.getCurrentOnlineStake()
	callsub getCurrentOnlineStake
	frame_bury 0 // online: uint64

	// examples/reti/stakingPool.algo.ts:963
	// return wideRatio([online, MAX_VALIDATOR_SOFT_PCT_OF_ONLINE_1DECIMAL], [1000]);
	frame_dig 0 // online: uint64
	pushint 100
	mulw
	intc 0 // 0
	intc 11 // 1000
	divmodw
	pop
	pop
	swap
	!

	// wideRatio failed
	assert

	// set the subroutine return value
	frame_bury 0
	retsub

// getGoOnlineFee(): uint64
getGoOnlineFee:
	proto 0 1

	// *if46_condition
	// examples/reti/stakingPool.algo.ts:968
	// !this.app.address.incentiveEligible
	global CurrentApplicationAddress
	acct_params_get AcctIncentiveEligible
	pop
	!
	bz *if46_end

	// *if46_consequent
	// examples/reti/stakingPool.algo.ts:969
	// return globals.payoutsGoOnlineFee;
	global PayoutsGoOnlineFee
	retsub

*if46_end:
	// examples/reti/stakingPool.algo.ts:971
	// return 0;
	intc 0 // 0
	retsub

// getCurrentOnlineStake(): uint64
getCurrentOnlineStake:
	proto 0 1

	// examples/reti/stakingPool.algo.ts:975
	// return onlineStake();
	online_stake
	retsub

// checkIfBinClosed(): void
//
// Checks if the current round is in a 'new calculation bin' (approximately daily)
checkIfBinClosed:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 4

	// examples/reti/stakingPool.algo.ts:982
	// currentBinSize = this.roundsPerDay.value as uint128
	bytec 7 //  "roundsPerDay"
	app_global_get
	itob
	frame_bury 0 // currentBinSize: unsafe uint128

	// *if47_condition
	// examples/reti/stakingPool.algo.ts:983
	// globals.round >= this.binRoundStart.value + (currentBinSize as uint64)
	global Round
	bytec 11 //  "binRoundStart"
	app_global_get
	frame_dig 0 // currentBinSize: unsafe uint128
	dup
	bitlen
	intc 3 // 64
	<=

	// currentBinSize as uint64 overflowed 64 bits
	assert
	pushbytes 0xFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 14 // 8
	-
	swap
	substring3
	btoi
	+
	>=
	bz *if47_end

	// *if47_consequent
	// *if48_condition
	// examples/reti/stakingPool.algo.ts:984
	// globals.opcodeBudget < 300
	global OpcodeBudget
	intc 10 // 300
	<
	bz *if48_end

	// *if48_consequent
	// examples/reti/stakingPool.algo.ts:985
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 0 // 0
	itxn_field Fee
	bytec 5 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 8 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

*if48_end:
	// examples/reti/stakingPool.algo.ts:987
	// approxRoundsPerYear: uint128 = currentBinSize * (365 as uint128)
	frame_dig 0 // currentBinSize: unsafe uint128
	pushbytes 0x0000000000000000000000000000016d
	b*
	dup
	bitlen
	intc 6 // 128
	<=

	// currentBinSize * (365 as uint128) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	frame_bury 1 // approxRoundsPerYear: uint128

	// examples/reti/stakingPool.algo.ts:988
	// avgStake: uint128 = this.stakeAccumulator.value / currentBinSize
	bytec 8 //  "stakeAccumulator"
	app_global_get
	frame_dig 0 // currentBinSize: unsafe uint128
	b/
	dup
	bitlen
	intc 6 // 128
	<=

	// this.stakeAccumulator.value / currentBinSize overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	frame_bury 2 // avgStake: uint128

	// *if49_condition
	// examples/reti/stakingPool.algo.ts:989
	// avgStake !== 0
	frame_dig 2 // avgStake: uint128
	bytec 16 // 0x00000000000000000000000000000000
	b!=
	bz *if49_end

	// *if49_consequent
	// examples/reti/stakingPool.algo.ts:993
	// apr: uint128 =
	//           (((this.rewardAccumulator.value as uint128) * (10000 as uint128)) / avgStake) *
	//           (approxRoundsPerYear / currentBinSize)
	bytec 12 //  "rewardAccumulator"
	app_global_get
	itob
	pushbytes 0x00000000000000000000000000002710
	b*
	frame_dig 2 // avgStake: uint128
	b/
	frame_dig 1 // approxRoundsPerYear: uint128
	frame_dig 0 // currentBinSize: unsafe uint128
	b/
	b*
	dup
	bitlen
	intc 6 // 128
	<=

	// (((this.rewardAccumulator.value as uint128) * (10000 as uint128)) / avgStake) *\n          (approxRoundsPerYear / currentBinSize) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	frame_bury 3 // apr: uint128

	// examples/reti/stakingPool.algo.ts:997
	// alpha: uint128 = 10 as uint128
	pushbytes 0x0000000000000000000000000000000a
	frame_bury 4 // alpha: unsafe uint128

	// *if50_condition
	// examples/reti/stakingPool.algo.ts:999
	// avgStake > 300000000000
	frame_dig 2 // avgStake: uint128
	pushbytes 0x000000000000000000000045d964b800
	b>
	bz *if50_end

	// *if50_consequent
	// examples/reti/stakingPool.algo.ts:1000
	// alpha = 90 as uint128
	pushbytes 0x0000000000000000000000000000005a
	frame_bury 4 // alpha: unsafe uint128

*if50_end:
	// examples/reti/stakingPool.algo.ts:1002
	// this.weightedMovingAverage.value =
	//           (this.weightedMovingAverage.value * ((100 as uint128) - alpha)) / (100 as uint128) +
	//           (apr * alpha) / (100 as uint128)
	bytec 20 //  "ewma"
	dup
	app_global_get
	bytec 17 // 0x00000000000000000000000000000064
	frame_dig 4 // alpha: unsafe uint128
	b-
	b*
	bytec 17 // 0x00000000000000000000000000000064
	b/
	frame_dig 3 // apr: uint128
	frame_dig 4 // alpha: unsafe uint128
	b*
	bytec 17 // 0x00000000000000000000000000000064
	b/
	b+
	dup
	bitlen
	intc 6 // 128
	<=

	// (this.weightedMovingAverage.value * ((100 as uint128) - alpha)) / (100 as uint128) +\n          (apr * alpha) / (100 as uint128) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	app_global_put

*if49_end:
	// examples/reti/stakingPool.algo.ts:1008
	// this.setRoundsPerDay()
	callsub setRoundsPerDay

	// examples/reti/stakingPool.algo.ts:1009
	// this.stakeAccumulator.value = (this.totalAlgoStaked.value as uint128) * (this.roundsPerDay.value as uint128)
	bytec 8 //  "stakeAccumulator"
	bytec 6 //  "staked"
	app_global_get
	itob
	bytec 7 //  "roundsPerDay"
	app_global_get
	itob
	b*
	dup
	bitlen
	intc 6 // 128
	<=

	// (this.totalAlgoStaked.value as uint128) * (this.roundsPerDay.value as uint128) overflowed 128 bits
	assert
	bytec 9 // 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 5 // 16
	-
	swap
	substring3
	app_global_put

	// examples/reti/stakingPool.algo.ts:1010
	// this.rewardAccumulator.value = 0
	bytec 12 //  "rewardAccumulator"
	intc 0 // 0
	app_global_put

	// examples/reti/stakingPool.algo.ts:1011
	// this.binRoundStart.value = globals.round - (globals.round % this.roundsPerDay.value)
	bytec 11 //  "binRoundStart"
	global Round
	global Round
	bytec 7 //  "roundsPerDay"
	app_global_get
	%
	-
	app_global_put

*if47_end:
	retsub

// setRoundsPerDay(): void
setRoundsPerDay:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if51_condition
	// examples/reti/stakingPool.algo.ts:1020
	// this.txn.firstValid < 12
	txn FirstValid
	pushint 12
	<
	bz *if51_end

	// *if51_consequent
	// examples/reti/stakingPool.algo.ts:1022
	// this.roundsPerDay.value = APPROX_AVG_ROUNDS_PER_DAY
	bytec 7 //  "roundsPerDay"
	intc 17 // 30857
	app_global_put

	// examples/reti/stakingPool.algo.ts:1023
	// return;
	retsub

*if51_end:
	// examples/reti/stakingPool.algo.ts:1026
	// avgBlockTimeTenths = blocks[this.txn.firstValid - 1].timestamp - blocks[this.txn.firstValid - 11].timestamp
	txn FirstValid
	intc 1 // 1
	-
	block BlkTimestamp
	txn FirstValid
	pushint 11
	-
	block BlkTimestamp
	-
	frame_bury 0 // avgBlockTimeTenths: uint64

	// *if52_condition
	// examples/reti/stakingPool.algo.ts:1027
	// avgBlockTimeTenths === 0
	frame_dig 0 // avgBlockTimeTenths: uint64
	intc 0 // 0
	==
	bz *if52_end

	// *if52_consequent
	// examples/reti/stakingPool.algo.ts:1029
	// this.roundsPerDay.value = APPROX_AVG_ROUNDS_PER_DAY
	bytec 7 //  "roundsPerDay"
	intc 17 // 30857
	app_global_put

	// examples/reti/stakingPool.algo.ts:1030
	// return;
	retsub

*if52_end:
	// examples/reti/stakingPool.algo.ts:1035
	// this.roundsPerDay.value = (24 * 60 * 60 * 10) / avgBlockTimeTenths
	bytec 7 //  "roundsPerDay"
	pushint 864000
	frame_dig 0 // avgBlockTimeTenths: uint64
	/
	app_global_put
	retsub

*create_NoOp:
	pushbytes 0x59e90aa6 // method "createApplication(uint64,uint64,uint64,uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x3172ca9d // method "gas()void"
	pushbytes 0x47cfcc04 // method "initStorage(pay)void"
	pushbytes 0xf9c70cbd // method "addStake(pay,address)uint64"
	pushbytes 0x421b5abe // method "removeStake(address,uint64)void"
	pushbytes 0xf5892d56 // method "claimTokens()void"
	pushbytes 0x5cfbb057 // method "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)"
	pushbytes 0x63f3f28b // method "payTokenReward(address,uint64,uint64)void"
	pushbytes 0x86a3725c // method "updateAlgodVer(string)void"
	pushbytes 0xefc2608d // method "epochBalanceUpdate()void"
	pushbytes 0x400e14fb // method "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void"
	pushbytes 0x51ef3b21 // method "goOffline()void"
	pushbytes 0xa24e2717 // method "linkToNFD(uint64,string)void"
	bytec 25 //  method "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)"
	txna ApplicationArgs 0
	match *abi_route_gas *abi_route_initStorage *abi_route_addStake *abi_route_removeStake *abi_route_claimTokens *abi_route_getStakerInfo *abi_route_payTokenReward *abi_route_updateAlgodVer *abi_route_epochBalanceUpdate *abi_route_goOnline *abi_route_goOffline *abi_route_linkToNFD *abi_route_proxiedSetTokenPayoutRatio

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Examples StakingPool Artifacts Maintains program size 1`] = `4553`;

exports[`Examples StakingPool Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [
        {
          "desc": "id of contract that constructed us - the validator application (single global instance)",
          "name": "creatingContractId",
          "type": "uint64",
        },
        {
          "desc": "id of validator we're a staking pool of",
          "name": "validatorId",
          "type": "uint64",
        },
        {
          "desc": "which pool id are we",
          "name": "poolId",
          "type": "uint64",
        },
        {
          "desc": "minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)",
          "name": "minEntryStake",
          "type": "uint64",
        },
      ],
      "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.",
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
      "events": undefined,
      "name": "gas",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "payment from caller which covers mbr increase of new staking pools' storage",
          "name": "mbrPayment",
          "type": "pay",
        },
      ],
      "desc": 
"Called after we're created and then funded, so we can create our large stakers ledger storage
Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
If this is pool 1 AND the validator has specified a reward token, opt-in to that token
so that the validator can seed the pool with future rewards of that token."
,
      "events": undefined,
      "name": "initStorage",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "prior payment coming from validator contract to us on behalf of staker.",
          "name": "stakedAmountPayment",
          "type": "pay",
        },
        {
          "desc": "The account adding new stake",
          "name": "staker",
          "type": "address",
        },
      ],
      "desc": 
"Adds stake to the given account.
Can ONLY be called by the validator contract that created us
Must receive payment from the validator contract for amount being staked."
,
      "events": undefined,
      "name": "addStake",
      "readonly": undefined,
      "returns": {
        "desc": "uint64 new 'entry round' round number of stake add",
        "type": "uint64",
      },
    },
    {
      "args": [
        {
          "desc": 
"account to remove.  normally same as sender, but the validator owner or manager can also call
this to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is
so a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer
meet the gating requirements (determined by the node daemon)."
,
          "name": "staker",
          "type": "address",
        },
        {
          "desc": "The amount of stake to be removed.  Specify 0 to remove all stake.",
          "name": "amountToUnstake",
          "type": "uint64",
        },
      ],
      "desc": 
"Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
full. Also notifies the validator contract for this pools validator of the staker / balance changes."
,
      "events": undefined,
      "name": "removeStake",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": 
"Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
pool 1 (either directly, or via validator-pool1 to pay it out)
Also notifies the validator contract for this pools validator of the staker / balance changes."
,
      "events": undefined,
      "name": "claimTokens",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "The address of the staker.",
          "name": "staker",
          "type": "address",
        },
      ],
      "desc": "Retrieves the staked information for a given staker.",
      "events": undefined,
      "name": "getStakerInfo",
      "readonly": true,
      "returns": {
        "desc": "StakedInfo - The staked information for the given staker.",
        "type": "(address,uint64,uint64,uint64,uint64)",
      },
    },
    {
      "args": [
        {
          "desc": "the staker account to send rewards to",
          "name": "staker",
          "type": "address",
        },
        {
          "desc": "id of reward token (to avoid re-entrancy in calling validator back to get id)",
          "name": "rewardToken",
          "type": "uint64",
        },
        {
          "desc": "amount to send the staker (there is significant trust here(!) - also why only validator can call us",
          "name": "amountToSend",
          "type": "uint64",
        },
      ],
      "desc": 
"[Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
This can ONLY be called by our validator and only if we're pool 1 - with the token.
Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored."
,
      "events": undefined,
      "name": "payTokenReward",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "string representing the algorand node daemon version (reti node daemon composes its own meta version)",
          "name": "algodVer",
          "type": "string",
        },
      ],
      "desc": 
"Update the (honor system) algod version for the node associated to this pool.  The node management daemon
should compare its current nodes version to the version stored in global state, updating when different.
The reti node daemon composes its own version string using format:
major.minor.build branch [commit hash],
ie: 3.22.0 rel/stable [6b508975]
[ ONLY OWNER OR MANAGER CAN CALL ]"
,
      "events": undefined,
      "name": "updateAlgodVer",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": 
"Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
compounds over time and staker can remove that amount at will.
The validator is paid their percentage each epoch payout.


Note: ANYONE can call this."
,
      "events": undefined,
      "name": "epochBalanceUpdate",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "payment to cover extra fee of going online if offline - or 0 if not renewal",
          "name": "feePayment",
          "type": "pay",
        },
        {
          "desc": "The vote public key.",
          "name": "votePK",
          "type": "byte[]",
        },
        {
          "desc": "The selection public key.",
          "name": "selectionPK",
          "type": "byte[]",
        },
        {
          "desc": "The state proof public key.",
          "name": "stateProofPK",
          "type": "byte[]",
        },
        {
          "desc": "The first vote index.",
          "name": "voteFirst",
          "type": "uint64",
        },
        {
          "desc": "The last vote index.",
          "name": "voteLast",
          "type": "uint64",
        },
        {
          "desc": "The vote key dilution value.",
          "name": "voteKeyDilution",
          "type": "uint64",
        },
      ],
      "desc": 
"Registers a staking pool key online against a participation key.
[ ONLY OWNER OR MANAGER CAN CALL ]"
,
      "events": undefined,
      "name": "goOnline",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": 
"Marks a staking pool key OFFLINE.
[ ONLY OWNER OR MANAGER CAN CALL ]"
,
      "events": undefined,
      "name": "goOffline",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "nfdAppId",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "nfdName",
          "type": "string",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "linkToNFD",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": "ValidatorPoolKey tuple",
          "name": "poolKey",
          "type": "(uint64,uint64,uint64)",
        },
      ],
      "desc": 
"proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
We need to verify that we are in fact being called by another of OUR pools (not us)
and then we'll call the validator on their behalf to update the token payouts"
,
      "events": undefined,
      "name": "proxiedSetTokenPayoutRatio",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "(uint64[24],uint64)",
      },
    },
  ],
  "name": "StakingPool",
}
`;

exports[`Examples StakingPool Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [
          {
            "desc": "id of contract that constructed us - the validator application (single global instance)",
            "name": "creatingContractId",
            "type": "uint64",
          },
          {
            "desc": "id of validator we're a staking pool of",
            "name": "validatorId",
            "type": "uint64",
          },
          {
            "desc": "which pool id are we",
            "name": "poolId",
            "type": "uint64",
          },
          {
            "desc": "minimum amount to be in pool, but also minimum amount balance can't go below (without removing all!)",
            "name": "minEntryStake",
            "type": "uint64",
          },
        ],
        "desc": "Initialize the staking pool w/ owner and manager, but can only be created by the validator contract.",
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": "gas is a dummy no-op call that can be used to pool-up resource references and opcode cost",
        "events": undefined,
        "name": "gas",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "payment from caller which covers mbr increase of new staking pools' storage",
            "name": "mbrPayment",
            "type": "pay",
          },
        ],
        "desc": 
"Called after we're created and then funded, so we can create our large stakers ledger storage
Caller has to get MBR amounts from ValidatorRegistry to know how much to fund us to cover the box storage cost
If this is pool 1 AND the validator has specified a reward token, opt-in to that token
so that the validator can seed the pool with future rewards of that token."
,
        "events": undefined,
        "name": "initStorage",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "prior payment coming from validator contract to us on behalf of staker.",
            "name": "stakedAmountPayment",
            "type": "pay",
          },
          {
            "desc": "The account adding new stake",
            "name": "staker",
            "type": "address",
          },
        ],
        "desc": 
"Adds stake to the given account.
Can ONLY be called by the validator contract that created us
Must receive payment from the validator contract for amount being staked."
,
        "events": undefined,
        "name": "addStake",
        "readonly": undefined,
        "returns": {
          "desc": "uint64 new 'entry round' round number of stake add",
          "type": "uint64",
        },
      },
      {
        "args": [
          {
            "desc": 
"account to remove.  normally same as sender, but the validator owner or manager can also call
this to remove the specified staker explicitly. The removed stake MUST only go to the staker of course.  This is
so a validator can shut down a poool and refund the stakers.  It can also be used to kick out stakers who no longer
meet the gating requirements (determined by the node daemon)."
,
            "name": "staker",
            "type": "address",
          },
          {
            "desc": "The amount of stake to be removed.  Specify 0 to remove all stake.",
            "name": "amountToUnstake",
            "type": "uint64",
          },
        ],
        "desc": 
"Removes stake on behalf of caller (removing own stake).  If any token rewards exist, those are always sent in
full. Also notifies the validator contract for this pools validator of the staker / balance changes."
,
        "events": undefined,
        "name": "removeStake",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": 
"Claims all the available reward tokens a staker has available, sending their entire balance to the staker from
pool 1 (either directly, or via validator-pool1 to pay it out)
Also notifies the validator contract for this pools validator of the staker / balance changes."
,
        "events": undefined,
        "name": "claimTokens",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "The address of the staker.",
            "name": "staker",
            "type": "address",
          },
        ],
        "desc": "Retrieves the staked information for a given staker.",
        "events": undefined,
        "name": "getStakerInfo",
        "readonly": true,
        "returns": {
          "desc": "StakedInfo - The staked information for the given staker.",
          "type": "(address,uint64,uint64,uint64,uint64)",
        },
      },
      {
        "args": [
          {
            "desc": "the staker account to send rewards to",
            "name": "staker",
            "type": "address",
          },
          {
            "desc": "id of reward token (to avoid re-entrancy in calling validator back to get id)",
            "name": "rewardToken",
            "type": "uint64",
          },
          {
            "desc": "amount to send the staker (there is significant trust here(!) - also why only validator can call us",
            "name": "amountToSend",
            "type": "uint64",
          },
        ],
        "desc": 
"[Internal protocol method] Remove a specified amount of 'community token' rewards for a staker.
This can ONLY be called by our validator and only if we're pool 1 - with the token.
Note: this can also be called by validator as part of OWNER wanting to send the reward tokens
somewhere else (ie if they're sunsetting their validator and need the reward tokens back).
It's up to the validator to ensure that the balance in rewardTokenHeldBack is honored."
,
        "events": undefined,
        "name": "payTokenReward",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "string representing the algorand node daemon version (reti node daemon composes its own meta version)",
            "name": "algodVer",
            "type": "string",
          },
        ],
        "desc": 
"Update the (honor system) algod version for the node associated to this pool.  The node management daemon
should compare its current nodes version to the version stored in global state, updating when different.
The reti node daemon composes its own version string using format:
major.minor.build branch [commit hash],
ie: 3.22.0 rel/stable [6b508975]
[ ONLY OWNER OR MANAGER CAN CALL ]"
,
        "events": undefined,
        "name": "updateAlgodVer",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": 
"Updates the balance of stakers in the pool based on the received 'rewards' (current balance vs known staked balance)
stakers outstanding balance is adjusted based on their % of stake and time in the current epoch - so that balance
compounds over time and staker can remove that amount at will.
The validator is paid their percentage each epoch payout.


Note: ANYONE can call this."
,
        "events": undefined,
        "name": "epochBalanceUpdate",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "payment to cover extra fee of going online if offline - or 0 if not renewal",
            "name": "feePayment",
            "type": "pay",
          },
          {
            "desc": "The vote public key.",
            "name": "votePK",
            "type": "byte[]",
          },
          {
            "desc": "The selection public key.",
            "name": "selectionPK",
            "type": "byte[]",
          },
          {
            "desc": "The state proof public key.",
            "name": "stateProofPK",
            "type": "byte[]",
          },
          {
            "desc": "The first vote index.",
            "name": "voteFirst",
            "type": "uint64",
          },
          {
            "desc": "The last vote index.",
            "name": "voteLast",
            "type": "uint64",
          },
          {
            "desc": "The vote key dilution value.",
            "name": "voteKeyDilution",
            "type": "uint64",
          },
        ],
        "desc": 
"Registers a staking pool key online against a participation key.
[ ONLY OWNER OR MANAGER CAN CALL ]"
,
        "events": undefined,
        "name": "goOnline",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": 
"Marks a staking pool key OFFLINE.
[ ONLY OWNER OR MANAGER CAN CALL ]"
,
        "events": undefined,
        "name": "goOffline",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "nfdAppId",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "nfdName",
            "type": "string",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "linkToNFD",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": "ValidatorPoolKey tuple",
            "name": "poolKey",
            "type": "(uint64,uint64,uint64)",
          },
        ],
        "desc": 
"proxiedSetTokenPayoutRatio is meant to be called by pools != 1 - calling US, pool #1
We need to verify that we are in fact being called by another of OUR pools (not us)
and then we'll call the validator on their behalf to update the token payouts"
,
        "events": undefined,
        "name": "proxiedSetTokenPayoutRatio",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "(uint64[24],uint64)",
        },
      },
    ],
    "name": "StakingPool",
  },
  "hints": {
    "addStake(pay,address)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "claimTokens()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication(uint64,uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "epochBalanceUpdate()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "gas()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getStakerInfo(address)(address,uint64,uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "goOffline()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "goOnline(pay,byte[],byte[],byte[],uint64,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "initStorage(pay)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "linkToNFD(uint64,string)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "payTokenReward(address,uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "proxiedSetTokenPayoutRatio((uint64,uint64,uint64))(uint64[24],uint64)": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "removeStake(address,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "updateAlgodVer(string)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "algodVer": {
          "key": "algodVer",
          "type": "bytes",
        },
        "binRoundStart": {
          "key": "binRoundStart",
          "type": "uint64",
        },
        "creatingValidatorContractAppId": {
          "key": "creatorApp",
          "type": "uint64",
        },
        "epochNumber": {
          "key": "epochNumber",
          "type": "uint64",
        },
        "lastPayout": {
          "key": "lastPayout",
          "type": "uint64",
        },
        "minEntryStake": {
          "key": "minEntryStake",
          "type": "uint64",
        },
        "numStakers": {
          "key": "numStakers",
          "type": "uint64",
        },
        "poolId": {
          "key": "poolId",
          "type": "uint64",
        },
        "rewardAccumulator": {
          "key": "rewardAccumulator",
          "type": "uint64",
        },
        "roundsPerDay": {
          "key": "roundsPerDay",
          "type": "uint64",
        },
        "stakeAccumulator": {
          "key": "stakeAccumulator",
          "type": "bytes",
        },
        "totalAlgoStaked": {
          "key": "staked",
          "type": "uint64",
        },
        "validatorId": {
          "key": "validatorId",
          "type": "uint64",
        },
        "weightedMovingAverage": {
          "key": "ewma",
          "type": "bytes",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEx",
  },
  "state": {
    "global": {
      "num_byte_slices": 3,
      "num_uints": 11,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

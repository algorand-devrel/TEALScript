// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`General GeneralTest Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 6 2 5 123 1337 4 3 32 10 100_000 1338
bytecblock 0x 0x0a8101 0x151f7c75 0x0000000000000000000000000000000000000000000000000000000000000000 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 0x666f6f 0x000000000000000100000000000000020000000000000003 0x73746f726167654172726179 0x000000000000000000 0x0000000000000001 0x706167654f6e65 0x7061676554776f 0x674b6579 0x2c636eeb 0x626172 0x627965 0x0000 0x30

// https://github.com/algorandfoundation/TEALScript

// !!!! WARNING: This contract is *NOT* ARC4 compliant. It may contain ABI methods, but it also allows app calls where the first argument does NOT match an ABI selector

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// txnTypeEnum()void
*abi_route_txnTypeEnum:
	// execute txnTypeEnum()void
	callsub txnTypeEnum
	intc 0 // 1
	return

// txnTypeEnum(): void
txnTypeEnum:
	proto 0 0

	// tests/contracts/general.algo.ts:69
	// assert(this.txnGroup[0].typeEnum === TransactionType.ApplicationCall)
	intc 1 // 0
	gtxns TypeEnum
	intc 2 //  appl
	==
	assert
	retsub

// txnGroupLength()void
*abi_route_txnGroupLength:
	// execute txnGroupLength()void
	callsub txnGroupLength
	intc 0 // 1
	return

// txnGroupLength(): void
txnGroupLength:
	proto 0 0

	// tests/contracts/general.algo.ts:73
	// assert(this.txnGroup.length === 1)
	global GroupSize
	intc 0 // 1
	==
	assert
	retsub

// asserts(bool,bool)void
*abi_route_asserts:
	// arg2: bool
	txna ApplicationArgs 2
	dup
	len
	intc 0 // 1
	==

	// argument 0 (arg2) for asserts must be a bool
	assert
	intc 1 // 0
	getbit

	// arg1: bool
	txna ApplicationArgs 1
	dup
	len
	intc 0 // 1
	==

	// argument 1 (arg1) for asserts must be a bool
	assert
	intc 1 // 0
	getbit

	// execute asserts(bool,bool)void
	callsub asserts
	intc 0 // 1
	return

// asserts(arg1: boolean, arg2: boolean): void
asserts:
	proto 2 0

	// tests/contracts/general.algo.ts:77
	// asserts(arg1, arg2, arg1 === arg2)
	frame_dig -1 // arg1: boolean

	// asserts failed: asserts(arg1, arg2, arg1 === arg2)
	assert
	frame_dig -2 // arg2: boolean

	// asserts failed: asserts(arg1, arg2, arg1 === arg2)
	assert
	frame_dig -1 // arg1: boolean
	frame_dig -2 // arg2: boolean
	==

	// asserts failed: asserts(arg1, arg2, arg1 === arg2)
	assert
	retsub

// verifyTxnFromArg(pay)void
*abi_route_verifyTxnFromArg:
	// somePay: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (somePay) for verifyTxnFromArg must be a pay transaction
	assert

	// execute verifyTxnFromArg(pay)void
	callsub verifyTxnFromArg
	intc 0 // 1
	return

// verifyTxnFromArg(somePay: PayTxn): void
verifyTxnFromArg:
	proto 1 0

	// tests/contracts/general.algo.ts:81
	// verifyTxn(somePay, { receiver: this.app.address, amount: 100_000 })
	// verify receiver
	frame_dig -1 // somePay: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"somePay","field":"receiver","expected":"this.app.address"}
	assert

	// verify amount
	frame_dig -1 // somePay: PayTxn
	gtxns Amount
	intc 11 // 100_000
	==

	// transaction verification failed: {"txn":"somePay","field":"amount","expected":"100_000"}
	assert
	retsub

// verifyTxnFromTxnGroup()void
*abi_route_verifyTxnFromTxnGroup:
	// execute verifyTxnFromTxnGroup()void
	callsub verifyTxnFromTxnGroup
	intc 0 // 1
	return

// verifyTxnFromTxnGroup(): void
verifyTxnFromTxnGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:85
	// verifyTxn(this.txnGroup[0], { sender: this.txn.sender })
	// verify sender
	intc 1 // 0
	gtxns Sender
	txn Sender
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"sender","expected":"this.txn.sender"}
	assert
	retsub

// verifyTxnCondition()void
*abi_route_verifyTxnCondition:
	// execute verifyTxnCondition()void
	callsub verifyTxnCondition
	intc 0 // 1
	return

// verifyTxnCondition(): void
verifyTxnCondition:
	proto 0 0

	// tests/contracts/general.algo.ts:89
	// verifyTxn(this.txn, {
	//       applicationID: { greaterThan: 1 },
	//     })
	// verify applicationID
	txn ApplicationID
	intc 0 // 1
	>

	// transaction verification failed: {"txn":"this.txn","field":"applicationID","condition":"greaterThan","expected":">1"}
	assert
	retsub

// verifyTxnIncludedIn()void
*abi_route_verifyTxnIncludedIn:
	// execute verifyTxnIncludedIn()void
	callsub verifyTxnIncludedIn
	intc 0 // 1
	return

// verifyTxnIncludedIn(): void
verifyTxnIncludedIn:
	proto 0 0

	// tests/contracts/general.algo.ts:95
	// verifyTxn(this.txn, {
	//       sender: { includedIn: [this.txn.sender] },
	//     })
	// verify sender
	txn Sender
	txn Sender
	==

	// transaction verification failed: {"txn":{"txnText":"this.txn"},"field":"sender","condition":"includedIn","expected":"[this.txn.sender]"}
	assert
	retsub

// verifyTxnNotIncludedIn()void
*abi_route_verifyTxnNotIncludedIn:
	// execute verifyTxnNotIncludedIn()void
	callsub verifyTxnNotIncludedIn
	intc 0 // 1
	return

// verifyTxnNotIncludedIn(): void
verifyTxnNotIncludedIn:
	proto 0 0

	// tests/contracts/general.algo.ts:101
	// verifyTxn(this.txn, {
	//       sender: { notIncludedIn: [globals.zeroAddress] },
	//     })
	// verify sender
	txn Sender
	global ZeroAddress
	!=

	// transaction verification failed: {"txn":{"txnText":"this.txn"},"field":"sender","condition":"notIncludedIn","expected":"[globals.zeroAddress]"}
	assert
	retsub

// submitPendingGroup()void
*abi_route_submitPendingGroup:
	// execute submitPendingGroup()void
	callsub submitPendingGroup
	intc 0 // 1
	return

// submitPendingGroup(): void
submitPendingGroup:
	proto 0 0

	// tests/contracts/general.algo.ts:107
	// this.pendingGroup.addPayment({ amount: 0, receiver: this.app.address, isFirstTxn: true })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:107
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// tests/contracts/general.algo.ts:107
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:108
	// this.pendingGroup.addPayment({ amount: 0, receiver: this.app.address, note: 'foo' })
	itxn_next
	intc 0 //  pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:108
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// tests/contracts/general.algo.ts:108
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// tests/contracts/general.algo.ts:108
	// note: 'foo'
	bytec 5 //  "foo"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// tests/contracts/general.algo.ts:109
	// this.pendingGroup.submit()
	itxn_submit
	retsub

// methodWithTxnArgs()void
*abi_route_methodWithTxnArgs:
	// execute methodWithTxnArgs()void
	callsub methodWithTxnArgs
	intc 0 // 1
	return

// methodWithTxnArgs(): void
methodWithTxnArgs:
	proto 0 0

	// tests/contracts/general.algo.ts:113
	// sendMethodCall<[PayTxn, MethodCall<[uint64], void>], void>({
	//       name: 'foo',
	//       methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: AppID.fromUint64(1337),
	//           methodArgs: [1],
	//         },
	//       ],
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:116
	// amount: 100_000
	intc 11 // 100_000
	itxn_field Amount

	// tests/contracts/general.algo.ts:116
	// receiver: this.txn.sender
	txn Sender
	itxn_field Receiver

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x0e8cb9f6 // method "bar(uint64)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:119
	// applicationID: AppID.fromUint64(1337)
	intc 6 // 1337
	itxn_field ApplicationID

	// tests/contracts/general.algo.ts:120
	// methodArgs: [1]
	bytec 9 // 0x0000000000000001
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x6c6f7a08 // method "foo(pay,appl)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:115
	// methodArgs: [
	//         { amount: 100_000, receiver: this.txn.sender },
	//         {
	//           name: 'bar',
	//           applicationID: AppID.fromUint64(1337),
	//           methodArgs: [1],
	//         },
	//       ]
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// shift()void
*abi_route_shift:
	// execute shift()void
	callsub shift
	intc 0 // 1
	return

// shift(): void
shift:
	proto 0 0

	// tests/contracts/general.algo.ts:127
	// assert(1 << 2 === 4)
	intc 0 // 1
	intc 3 // 2
	shl
	intc 7 // 4
	==
	assert

	// tests/contracts/general.algo.ts:128
	// assert(4 >> 1 === 2)
	intc 7 // 4
	intc 0 // 1
	shr
	intc 3 // 2
	==
	assert
	retsub

// fromBytes()void
*abi_route_fromBytes:
	// execute fromBytes()void
	callsub fromBytes
	intc 0 // 1
	return

// fromBytes(): void
fromBytes:
	proto 0 0

	// tests/contracts/general.algo.ts:132
	// assert(Address.fromBytes('abc').minBalance)
	pushbytes 0x616263 // "abc"
	acct_params_get AcctMinBalance
	pop
	assert
	retsub

// fromUint64()void
*abi_route_fromUint64:
	// execute fromUint64()void
	callsub fromUint64
	intc 0 // 1
	return

// fromUint64(): void
fromUint64:
	proto 0 0

	// tests/contracts/general.algo.ts:136
	// log(AppID.fromUint64(123).creator)
	intc 5 // 123
	app_params_get AppCreator
	pop
	log

	// tests/contracts/general.algo.ts:137
	// log(AssetID.fromUint64(123).creator)
	intc 5 // 123
	asset_params_get AssetCreator
	pop
	log
	retsub

// bzeroFunction()void
*abi_route_bzeroFunction:
	// execute bzeroFunction()void
	callsub bzeroFunction
	intc 0 // 1
	return

// bzeroFunction(): void
bzeroFunction:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 2

	// tests/contracts/general.algo.ts:142
	// x: bytes = bzero(2)
	bytec 16 // 0x0000
	frame_bury 0 // x: bytes

	// tests/contracts/general.algo.ts:143
	// y: bytes = bzero(n)
	intc 0 // 1
	bzero
	frame_bury 1 // y: bytes

	// tests/contracts/general.algo.ts:144
	// z: [uint64, uint<8>] = bzero<[uint64, uint<8>]>()
	bytec 8 // 0x000000000000000000
	frame_bury 2 // z: [uint64, uint<8>]

	// tests/contracts/general.algo.ts:145
	// assert(len(x + y + z) === 12)
	bytec 16 //  x: bytes
	frame_dig 1 // y: bytes
	concat
	bytec 8 //  z: [uint64, uint<8>]
	concat
	len
	pushint 12
	==
	assert
	retsub

// events()void
*abi_route_events:
	// execute events()void
	callsub events
	intc 0 // 1
	return

// events(): void
events:
	proto 0 0

	// tests/contracts/general.algo.ts:160
	// this.myEvent.log({ app: this.app, num: 1 })
	pushbytes 0x87528196 // myEvent(uint64,uint64)
	txna Applications 0
	itob
	bytec 9 // 0x0000000000000001
	concat
	concat
	log
	retsub

// letOptimization(uint64[])uint64[]
*abi_route_letOptimization:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// a: uint64[]
	txna ApplicationArgs 1
	extract 2 0

	// execute letOptimization(uint64[])uint64[]
	callsub letOptimization
	dup
	len
	pushint 8
	/
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// letOptimization(a: uint64[]): uint64[]
letOptimization:
	proto 1 1

	// tests/contracts/general.algo.ts:164
	// assert(a[0])
	frame_dig -1 // a: uint64[]
	store 255 // full array
	load 255 // full array
	extract 0 8
	btoi
	assert

	// tests/contracts/general.algo.ts:166
	// b = [1, 2, 3]
	bytec 6 // 0x000000000000000100000000000000020000000000000003
	frame_bury -1 // b: uint64[]

	// tests/contracts/general.algo.ts:168
	// return b;
	frame_dig -1 // a: uint64[]
	retsub

// staticContractProperties()void
*abi_route_staticContractProperties:
	// execute staticContractProperties()void
	callsub staticContractProperties
	intc 0 // 1
	return

// staticContractProperties(): void
staticContractProperties:
	proto 0 0

	// tests/contracts/general.algo.ts:172
	// sendAppCall({
	//       onCompletion: OnCompletion.NoOp,
	//       approvalProgram: DummyContract.approvalProgram(),
	//       clearStateProgram: DummyContract.clearProgram(),
	//       localNumByteSlice: DummyContract.schema.local.numByteSlice,
	//       localNumUint: DummyContract.schema.local.numUint,
	//       globalNumByteSlice: DummyContract.schema.global.numByteSlice,
	//       globalNumUint: DummyContract.schema.global.numUint,
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:173
	// onCompletion: OnCompletion.NoOp
	intc 1 //  NoOp
	itxn_field OnCompletion

	// tests/contracts/general.algo.ts:174
	// approvalProgram: DummyContract.approvalProgram()
	pushbytes 0x0a31181481060b3119088d0c000000000000000000000000000400000000000000000000008101438004b8447b36361a008e01fff000
	itxn_field ApprovalProgram

	// tests/contracts/general.algo.ts:175
	// clearStateProgram: DummyContract.clearProgram()
	pushbytes 0x0a
	itxn_field ClearStateProgram

	// tests/contracts/general.algo.ts:176
	// localNumByteSlice: DummyContract.schema.local.numByteSlice
	intc 1 // 0
	itxn_field LocalNumByteSlice

	// tests/contracts/general.algo.ts:177
	// localNumUint: DummyContract.schema.local.numUint
	intc 1 // 0
	itxn_field LocalNumUint

	// tests/contracts/general.algo.ts:178
	// globalNumByteSlice: DummyContract.schema.global.numByteSlice
	intc 1 // 0
	itxn_field GlobalNumByteSlice

	// tests/contracts/general.algo.ts:179
	// globalNumUint: DummyContract.schema.global.numUint
	intc 1 // 0
	itxn_field GlobalNumUint

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// numberToString()void
*abi_route_numberToString:
	// execute numberToString()void
	callsub numberToString
	intc 0 // 1
	return

// numberToString(): void
numberToString:
	proto 0 0

	// tests/contracts/general.algo.ts:186
	// assert(n.toString() === s)
	intc 0 // 1
	callsub *itoa
	pushbytes "1"
	==
	assert
	retsub

// methodOnParens()void
*abi_route_methodOnParens:
	// execute methodOnParens()void
	callsub methodOnParens
	intc 0 // 1
	return

// methodOnParens(): void
methodOnParens:
	proto 0 0

	// tests/contracts/general.algo.ts:190
	// assert((1 + 2).toString() === '3')
	intc 8 // 3
	callsub *itoa
	pushbytes 0x33 // "3"
	==
	assert
	retsub

// stringSubstring()void
*abi_route_stringSubstring:
	// execute stringSubstring()void
	callsub stringSubstring
	intc 0 // 1
	return

// stringSubstring(): void
stringSubstring:
	proto 0 0

	// tests/contracts/general.algo.ts:195
	// assert(s.substring(1, 3) === 'bc')
	pushbytes "abcdef"
	substring 1 3
	pushbytes 0x6263 // "bc"
	==
	assert
	retsub

// idProperty()void
*abi_route_idProperty:
	// execute idProperty()void
	callsub idProperty
	intc 0 // 1
	return

// idProperty(): void
idProperty:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/general.algo.ts:199
	// app = AppID.zeroIndex
	intc 1 // 0
	frame_bury 0 // app: uint64

	// tests/contracts/general.algo.ts:200
	// assert(AppID.fromUint64(app.id) === app)
	intc 1 //  app: uint64
	dup
	==
	assert

	// tests/contracts/general.algo.ts:202
	// asa = AssetID.zeroIndex
	intc 1 // 0
	frame_bury 1 // asa: uint64

	// tests/contracts/general.algo.ts:203
	// assert(AssetID.fromUint64(asa.id) === asa)
	intc 1 //  asa: uint64
	dup
	==
	assert
	retsub

// scratchSlot()void
*abi_route_scratchSlot:
	// execute scratchSlot()void
	callsub scratchSlot
	intc 0 // 1
	return

// scratchSlot(): void
scratchSlot:
	proto 0 0

	// tests/contracts/general.algo.ts:207
	// this.scratch.value = 1337
	intc 6 // 1337
	store 0

	// tests/contracts/general.algo.ts:208
	// assert(this.scratch.value === 1337)
	load 0
	intc 6 // 1337
	==
	assert
	retsub

// ecdsa()void
*abi_route_ecdsa:
	// execute ecdsa()void
	callsub ecdsa
	intc 0 // 1
	return

// ecdsa(): void
ecdsa:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dupn 3

	// tests/contracts/general.algo.ts:212
	// ecdsaVerify('Secp256k1', '' as bytes32, '' as bytes32, '' as bytes32, '' as bytes32, '' as bytes32)
	bytec 3 //  ""
	dupn 4
	ecdsa_verify Secp256k1

	// tests/contracts/general.algo.ts:213
	// d = ecdsaPkDecompress('Secp256k1', '' as bytes<33>)
	pushbytes 0x000000000000000000000000000000000000000000000000000000000000000000 // ""
	ecdsa_pk_decompress Secp256k1
	frame_bury 0 // d y component: byte[]
	frame_bury 1 // d x component: byte[]

	// tests/contracts/general.algo.ts:214
	// log(d.y)
	frame_dig 0 // d y component: byte[]
	log

	// tests/contracts/general.algo.ts:215
	// log(d.x)
	frame_dig 1 // d x component: byte[]
	log

	// tests/contracts/general.algo.ts:217
	// r = ecdsaPkRecover('Secp256k1', '' as bytes32, 1, '' as bytes32, '' as bytes32)
	bytec 3 //  ""
	intc 0 // 1
	bytec 3 //  ""
	dup
	ecdsa_pk_recover Secp256k1
	frame_bury 2 // r y component: byte[]
	frame_bury 3 // r x component: byte[]

	// tests/contracts/general.algo.ts:218
	// log(r.y)
	frame_dig 2 // r y component: byte[]
	log

	// tests/contracts/general.algo.ts:219
	// log(r.x)
	frame_dig 3 // r x component: byte[]
	log
	retsub

// verifyTxnTypes()void
*abi_route_verifyTxnTypes:
	// execute verifyTxnTypes()void
	callsub verifyTxnTypes
	intc 0 // 1
	return

// verifyTxnTypes(): void
verifyTxnTypes:
	proto 0 0

	// tests/contracts/general.algo.ts:223
	// verifyPayTxn(this.txnGroup[0], {
	//       amount: { greaterThan: 0 },
	//     })
	// verify pay
	intc 1 // 0
	gtxns TypeEnum
	intc 0 //  pay
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"typeEnum","expected":"pay"}
	assert

	// verify amount
	intc 1 // 0
	gtxns Amount
	intc 1 // 0
	>

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"amount","condition":"greaterThan","expected":">0"}
	assert

	// tests/contracts/general.algo.ts:227
	// verifyAppCallTxn(this.txnGroup[0], {
	//       applicationID: AppID.fromUint64(0),
	//       applicationArgs: {
	//         0: 'foo',
	//         1: {
	//           includedIn: ['bar', 'baz'],
	//         },
	//       },
	//     })
	// verify appl
	intc 1 // 0
	gtxns TypeEnum
	intc 2 //  appl
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"typeEnum","expected":"appl"}
	assert

	// verify applicationID
	intc 1 // 0
	gtxns ApplicationID
	intc 1 // 0
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"applicationID","expected":"AppID.fromUint64(0)"}
	assert

	// verify applicationArgs
	// verify applicationArgs 0
	intc 1 // 0
	gtxns ApplicationArgs 0
	bytec 5 //  "foo"
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"applicationArgs","index":"0","expected":"'foo'"}
	assert

	// verify applicationArgs 1
	intc 1 // 0
	gtxns ApplicationArgs 1
	bytec 14 //  "bar"
	==
	intc 1 // 0
	gtxns ApplicationArgs 1
	pushbytes 0x62617a // "baz"
	==
	||

	// transaction verification failed: {"txn":{"txnText":"this.txnGroup[0]"},"field":"applicationArgs 1","condition":"includedIn","expected":"['bar', 'baz']"}
	assert

	// tests/contracts/general.algo.ts:237
	// verifyAssetTransferTxn(this.txnGroup[0], {
	//       assetReceiver: this.app.address,
	//     })
	// verify axfer
	intc 1 // 0
	gtxns TypeEnum
	intc 7 //  axfer
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"typeEnum","expected":"axfer"}
	assert

	// verify assetReceiver
	intc 1 // 0
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"assetReceiver","expected":"this.app.address"}
	assert

	// tests/contracts/general.algo.ts:241
	// verifyAssetConfigTxn(this.txnGroup[0], {
	//       configAsset: AssetID.fromUint64(0),
	//     })
	// verify acfg
	intc 1 // 0
	gtxns TypeEnum
	intc 8 //  acfg
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"typeEnum","expected":"acfg"}
	assert

	// verify configAsset
	intc 1 // 0
	gtxns ConfigAsset
	intc 1 // 0
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"configAsset","expected":"AssetID.fromUint64(0)"}
	assert

	// tests/contracts/general.algo.ts:245
	// verifyKeyRegTxn(this.txnGroup[0], {
	//       voteFirst: 1337,
	//     })
	// verify keyreg
	intc 1 // 0
	gtxns TypeEnum
	intc 3 //  keyreg
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"typeEnum","expected":"keyreg"}
	assert

	// verify voteFirst
	intc 1 // 0
	gtxns VoteFirst
	intc 6 // 1337
	==

	// transaction verification failed: {"txn":"this.txnGroup[0]","field":"voteFirst","expected":"1337"}
	assert
	retsub

// stringPlusEquals()void
*abi_route_stringPlusEquals:
	// execute stringPlusEquals()void
	callsub stringPlusEquals
	intc 0 // 1
	return

// stringPlusEquals(): void
stringPlusEquals:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:251
	// s = 'foo'
	bytec 5 //  "foo"
	frame_bury 0 // s: byte[]

	// tests/contracts/general.algo.ts:252
	// s += 'bar'
	frame_dig 0 // s: byte[]
	bytec 14 //  "bar"
	concat
	frame_bury 0 // s: byte[]

	// tests/contracts/general.algo.ts:253
	// assert(s === 'foobar')
	frame_dig 0 // s: byte[]
	pushbytes 0x666f6f626172 // "foobar"
	==
	assert
	retsub

// importedProgram()byte[]
*abi_route_importedProgram:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute importedProgram()byte[]
	callsub importedProgram
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// importedProgram(): bytes
importedProgram:
	proto 0 1

	// tests/contracts/general.algo.ts:257
	// return IfTest.approvalProgram();
	pushbytes 0x0a200401000220260904151f7c7502696604656c736503656e6403666f6f0009656c7365206966203109656c7365206966203207656c736520696631181481060b3119088d0c0324000000000000000000000316000000000000000000000028361a014915221244235388000c4915165706024c5050b022438a01018bff41000229892b8928361a014915221244235388000c4915165706024c5050b022438a01018bff41000529894200022a898928361a0249152212442353361a014915221244235388000c4915165706024c5050b022438a02018bff41000529894200088bfe4100032708892b8928361a0249152212442353361a014915221244235388000c4915165706024c5050b022438a02018bff410005298942000d8bfe4100062708894200022a898928361a0349152212442353361a0249152212442353361a014915221244235388000c4915165706024c5050b022438a03018bff41000529894200138bfe4100062706894200088bfd4100032707892b8928361a0349152212442353361a0249152212442353361a014915221244235388000c4915165706024c5050b022438a03018bff41000529894200188bfe41000627068942000d8bfd4100062707894200022a898928361a0249152212442353361a014915221244235388000c4915165706024c5050b022438a02018bff4100168bfe41000c80096e65737465642069668929894200022a898928361a014915221244235388000c4915165706024c5050b022438a01018bff41000529894200022a898928361a0249152212442353361a01491522124423538800051650b022438a02018bff4100042242000b8bfe4100042442000281038928361a015702008800051650b022438a01018bff2705a94100022289248928361a015702008800051650b022438a01018bff2705a9410004224200012489361a0149152412441788000222438a01008bff2705a94100032704b089361a02491524124417361a0149152412441788000222438a02008bff8bfe0e4100032704b089361a024915251244361a01491525124488000222438a02008bff8bfea64100032704b08928361a0249152212442353361a014915221244235388000c4915165706024c5050b022438a02018bff4100198bfe41000d80076120616e64206289420004800161894200168bfe4100078001628942000a80076e656974686572898922438004b8447b36361a008e01fff1008004436ec1c280041c7a0d5e80045e0fb6cf80045e1c6c50800458d0ba9280045d2f4f028004845729d980048fe76ca880041a3c7878800474bcc86880044212f905800495ddaebf80043147b866800442897f618004534be2b7361a008e0ffc60fc86fcb0fcebfd2afd7afdcefe13fe3dfe72fe90feb0fecdfef3ff1700
	retsub

// callPrivateDefinedLater()void
*abi_route_callPrivateDefinedLater:
	// execute callPrivateDefinedLater()void
	callsub callPrivateDefinedLater
	intc 0 // 1
	return

// callPrivateDefinedLater(): void
callPrivateDefinedLater:
	proto 0 0

	// tests/contracts/general.algo.ts:261
	// log(this.privateMethod('hello'))
	pushbytes 0x68656c6c6f // "hello"
	callsub privateMethod
	log
	retsub

// privateMethod(msg: string): string
privateMethod:
	proto 1 1

	// tests/contracts/general.algo.ts:265
	// return msg;
	frame_dig -1 // msg: string
	retsub

// interalPublicMethod(uint64,uint64)uint64
*abi_route_interalPublicMethod:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute interalPublicMethod(uint64,uint64)uint64
	callsub interalPublicMethod
	itob
	concat
	log
	intc 0 // 1
	return

// interalPublicMethod(a: uint64, b: uint64): uint64
interalPublicMethod:
	proto 2 1

	// tests/contracts/general.algo.ts:269
	// return a + b;
	frame_dig -1 // a: uint64
	frame_dig -2 // b: uint64
	+
	retsub

// callInternalPublicMethod()void
*abi_route_callInternalPublicMethod:
	// execute callInternalPublicMethod()void
	callsub callInternalPublicMethod
	intc 0 // 1
	return

// callInternalPublicMethod(): void
callInternalPublicMethod:
	proto 0 0

	// tests/contracts/general.algo.ts:273
	// assert(this.interalPublicMethod(1, 2) === 3)
	intc 3 // 2
	intc 0 // 1
	callsub interalPublicMethod
	intc 8 // 3
	==
	assert
	retsub

// appLoadScratch()void
*abi_route_appLoadScratch:
	// execute appLoadScratch()void
	callsub appLoadScratch
	intc 0 // 1
	return

// appLoadScratch(): void
appLoadScratch:
	proto 0 0

	// tests/contracts/general.algo.ts:277
	// log(this.txnGroup[1].loadScratch(2) as bytes)
	gload 1 2
	log
	retsub

// uintNWithUnderscore()uint256
*abi_route_uintNWithUnderscore:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute uintNWithUnderscore()uint256
	callsub uintNWithUnderscore
	dup
	bitlen
	pushint 256
	<=

	// uintNWithUnderscore return value overflowed 256 bits
	assert
	pushbytes 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
	b&
	dup
	len
	dup
	intc 9 // 32
	-
	swap
	substring3
	concat
	log
	intc 0 // 1
	return

// uintNWithUnderscore(): uint256
uintNWithUnderscore:
	proto 0 1

	// tests/contracts/general.algo.ts:281
	// return <uint256>123_456;
	pushbytes 0x000000000000000000000000000000000000000000000000000000000001e240
	retsub

// opUp()void
*abi_route_opUp:
	// execute opUp()void
	callsub opUp
	intc 0 // 1
	return

// opUp(): void
opUp:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:285
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:286
	// for (let i = 1; i < 75; i += 1)
	intc 0 // 1
	frame_bury 0 // i: uint64

*for_0:
	// tests/contracts/general.algo.ts:286
	// i < 75
	frame_dig 0 // i: uint64
	pushint 75
	<
	bz *for_0_end

	// tests/contracts/general.algo.ts:287
	// assert(i)
	frame_dig 0 // i: uint64
	assert

*for_0_continue:
	// tests/contracts/general.algo.ts:286
	// i += 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64
	b *for_0

*for_0_end:
	retsub

// returnValueOnAssignment()string
*abi_route_returnValueOnAssignment:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute returnValueOnAssignment()string
	callsub returnValueOnAssignment
	dup
	len
	itob
	extract 6 2
	swap
	concat
	concat
	log
	intc 0 // 1
	return

// returnValueOnAssignment(): string
returnValueOnAssignment:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:292
	// message = 'hi'
	pushbytes 0x6869 // "hi"
	frame_bury 0 // message: byte[]

	// *if0_condition
	// tests/contracts/general.algo.ts:294
	// this.txn.sender === this.app.address
	txn Sender
	global CurrentApplicationAddress
	==
	bz *if0_end

	// *if0_consequent
	// tests/contracts/general.algo.ts:295
	// message = 'in block'
	pushbytes 0x696e20626c6f636b // "in block"
	frame_bury 0 // message: byte[]

*if0_end:
	// tests/contracts/general.algo.ts:298
	// return (message = 'bye');
	bytec 15 //  "bye"
	dup
	frame_bury 0 // message: byte[]

	// set the subroutine return value
	frame_bury 0
	retsub

// returnArrayValueOnAssignment()uint64
*abi_route_returnArrayValueOnAssignment:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute returnArrayValueOnAssignment()uint64
	callsub returnArrayValueOnAssignment
	itob
	concat
	log
	intc 0 // 1
	return

// returnArrayValueOnAssignment(): uint64
returnArrayValueOnAssignment:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:302
	// a: StaticArray<uint64, 3> = [1, 2, 3]
	bytec 6 // 0x000000000000000100000000000000020000000000000003
	frame_bury 0 // a: StaticArray<uint64, 3>

	// tests/contracts/general.algo.ts:304
	// return (a[0] = 4);
	frame_dig 0 // a: StaticArray<uint64, 3>
	intc 1 // 0
	intc 7 // 4
	dup
	store 245 // assignment value
	itob
	replace3
	frame_bury 0 // a: StaticArray<uint64, 3>
	load 245 // assignment value

	// set the subroutine return value
	frame_bury 0
	retsub

// returnStorageValueOnAssignment()uint64
*abi_route_returnStorageValueOnAssignment:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute returnStorageValueOnAssignment()uint64
	callsub returnStorageValueOnAssignment
	itob
	concat
	log
	intc 0 // 1
	return

// returnStorageValueOnAssignment(): uint64
returnStorageValueOnAssignment:
	proto 0 1

	// tests/contracts/general.algo.ts:308
	// this.gKey.value = 1
	bytec 12 //  "gKey"
	intc 0 // 1
	app_global_put

	// tests/contracts/general.algo.ts:310
	// return (this.gKey.value = 2);
	bytec 12 //  "gKey"
	intc 3 // 2
	dup
	store 245 // assignment value
	app_global_put
	load 245 // assignment value
	retsub

// returnOperatorAssignmentValue()uint64
*abi_route_returnOperatorAssignmentValue:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute returnOperatorAssignmentValue()uint64
	callsub returnOperatorAssignmentValue
	itob
	concat
	log
	intc 0 // 1
	return

// returnOperatorAssignmentValue(): uint64
returnOperatorAssignmentValue:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:314
	// a = 1
	intc 0 // 1
	frame_bury 0 // a: uint64

	// tests/contracts/general.algo.ts:316
	// return (a += 2);
	frame_dig 0 // a: uint64
	intc 3 // 2
	+
	dup
	store 245 // assignment value
	frame_bury 0 // a: uint64
	load 245 // assignment value

	// set the subroutine return value
	frame_bury 0
	retsub

// returnArrayValueOnOperatorAssignment()uint64
*abi_route_returnArrayValueOnOperatorAssignment:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute returnArrayValueOnOperatorAssignment()uint64
	callsub returnArrayValueOnOperatorAssignment
	itob
	concat
	log
	intc 0 // 1
	return

// returnArrayValueOnOperatorAssignment(): uint64
returnArrayValueOnOperatorAssignment:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:320
	// a: StaticArray<uint64, 3> = [1, 2, 3]
	bytec 6 // 0x000000000000000100000000000000020000000000000003
	frame_bury 0 // a: StaticArray<uint64, 3>

	// tests/contracts/general.algo.ts:322
	// return (a[0] += 4);
	frame_dig 0 // a: StaticArray<uint64, 3>
	intc 1 // 0
	frame_dig 0 // a: StaticArray<uint64, 3>
	extract 0 8
	btoi
	intc 7 // 4
	+
	dup
	store 245 // assignment value
	itob
	replace3
	frame_bury 0 // a: StaticArray<uint64, 3>
	load 245 // assignment value

	// set the subroutine return value
	frame_bury 0
	retsub

// returnArrayInStorageValueOnOperatorAssignment()uint64
*abi_route_returnArrayInStorageValueOnOperatorAssignment:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute returnArrayInStorageValueOnOperatorAssignment()uint64
	callsub returnArrayInStorageValueOnOperatorAssignment
	itob
	concat
	log
	intc 0 // 1
	return

// returnArrayInStorageValueOnOperatorAssignment(): uint64
returnArrayInStorageValueOnOperatorAssignment:
	proto 0 1

	// tests/contracts/general.algo.ts:326
	// this.storageArray.value = [1, 2, 3]
	bytec 7 //  "storageArray"
	bytec 6 // 0x000000000000000100000000000000020000000000000003
	app_global_put

	// tests/contracts/general.algo.ts:328
	// return (this.storageArray.value[0] += 4);
	bytec 7 //  "storageArray"
	app_global_get
	intc 1 // 0
	bytec 7 //  "storageArray"
	app_global_get
	extract 0 8
	btoi
	intc 7 // 4
	+
	dup
	store 245 // assignment value
	itob
	replace3
	bytec 7 //  "storageArray"
	swap
	app_global_put
	load 245 // assignment value
	retsub

// consts()void
*abi_route_consts:
	// execute consts()void
	callsub consts
	intc 0 // 1
	return

// consts(): void
consts:
	proto 0 0

	// tests/contracts/general.algo.ts:332
	// assert(STRING_CONST === 'foo')
	pushbytes "foo"
	bytec 5 //  "foo"
	==
	assert

	// tests/contracts/general.algo.ts:333
	// assert(NUM_CONST === 123)
	intc 5 // 123
	dup
	==
	assert

	// tests/contracts/general.algo.ts:334
	// assert(NESTED_CONST === 123)
	intc 5 // 123
	dup
	==
	assert
	retsub

// assertWithMessage()void
*abi_route_assertWithMessage:
	// execute assertWithMessage()void
	callsub assertWithMessage
	intc 0 // 1
	return

// assertWithMessage(): void
assertWithMessage:
	proto 0 0

	// tests/contracts/general.algo.ts:338
	// assert(false, 'this is false')
	intc 1 // 0

	// this is false
	assert
	retsub

// opcodeAliases()void
*abi_route_opcodeAliases:
	// execute opcodeAliases()void
	callsub opcodeAliases
	intc 0 // 1
	return

// opcodeAliases(): void
opcodeAliases:
	proto 0 0

	// tests/contracts/general.algo.ts:342
	// extractUint16(bzero(64), 0)
	bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	intc 1 // 0
	extract_uint16

	// tests/contracts/general.algo.ts:343
	// extractUint32(bzero(64), 0)
	bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	intc 1 // 0
	extract_uint32

	// tests/contracts/general.algo.ts:344
	// extractUint64(bzero(64), 0)
	bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	intc 1 // 0
	extract_uint64

	// tests/contracts/general.algo.ts:345
	// ed25519VerifyBare(bzero(64), bzero(64), bzero(32))
	bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	dup
	bytec 3 // 0x0000000000000000000000000000000000000000000000000000000000000000
	ed25519verify_bare

	// tests/contracts/general.algo.ts:346
	// ed25519Verify(bzero(64), bzero(64), bzero(32))
	bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	dup
	bytec 3 // 0x0000000000000000000000000000000000000000000000000000000000000000
	ed25519verify
	retsub

// vrfVerifyOp()void
*abi_route_vrfVerifyOp:
	// execute vrfVerifyOp()void
	callsub vrfVerifyOp
	intc 0 // 1
	return

// vrfVerifyOp(): void
vrfVerifyOp:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/general.algo.ts:350
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:351
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:352
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:353
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:354
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:355
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:356
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:357
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:358
	// increaseOpcodeBudget()
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	intc 1 // 0
	itxn_field Fee
	bytec 1 //  #pragma version 10; int 1
	dup
	itxn_field ApprovalProgram
	itxn_field ClearStateProgram
	intc 4 //  DeleteApplication
	itxn_field OnCompletion
	itxn_submit

	// tests/contracts/general.algo.ts:360
	// r = vrfVefiry('VrfAlgorand', bzero(32) as bytes, bzero(80), bzero(32))
	bytec 3 // 0x0000000000000000000000000000000000000000000000000000000000000000
	pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	bytec 3 // 0x0000000000000000000000000000000000000000000000000000000000000000
	vrf_verify VrfAlgorand
	frame_bury 0 // r verified: bool
	frame_bury 1 // r output: byte[]

	// tests/contracts/general.algo.ts:361
	// assert(!r.verified)
	frame_dig 0 // r verified: bool
	!
	assert

	// tests/contracts/general.algo.ts:362
	// log(r.output)
	frame_dig 1 // r output: byte[]
	log
	retsub

// ecMath()void
*abi_route_ecMath:
	// execute ecMath()void
	callsub ecMath
	intc 0 // 1
	return

// ecMath(): void
ecMath:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:366
	// ecScalarMul('BN254g1', '', '')
	bytec 0 //  ""
	dup
	ec_scalar_mul BN254g1

	// tests/contracts/general.algo.ts:367
	// ecPairingCheck('BN254g1', '', '')
	bytec 0 //  ""
	dup
	ec_pairing_check BN254g1

	// tests/contracts/general.algo.ts:368
	// scalars: bytes32[] = [bzero(32), bzero(32)]
	bytec 4 // 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
	frame_bury 0 // scalars: bytes32[]

	// tests/contracts/general.algo.ts:369
	// ecMultiScalarMul('BN254g1', '', scalars)
	bytec 0 //  ""
	bytec 4 //  scalars: bytes32[]
	ec_multi_scalar_mul BN254g1

	// tests/contracts/general.algo.ts:370
	// ecSubgroupCheck('BN254g1', '')
	bytec 0 //  ""
	ec_subgroup_check BN254g1

	// tests/contracts/general.algo.ts:371
	// ecMapTo('BN254g1', '')
	bytec 0 //  ""
	ec_map_to BN254g1

	// tests/contracts/general.algo.ts:372
	// ecAdd('BN254g1', '', '')
	bytec 0 //  ""
	dup
	ec_add BN254g1
	retsub

// gitxn()void
*abi_route_gitxn:
	// execute gitxn()void
	callsub gitxn
	intc 0 // 1
	return

// gitxn(): void
gitxn:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:376
	// log(this.lastInnerGroup[0].sender)
	gitxn 0 Sender
	log

	// tests/contracts/general.algo.ts:378
	// anotherTxn = this.lastInnerGroup[1]
	intc 0 // 1
	frame_bury 0 // anotherTxn: gitxn

	// tests/contracts/general.algo.ts:380
	// log(anotherTxn.sender)
	gitxn 1 Sender
	log
	retsub

// getSetBytes()void
*abi_route_getSetBytes:
	// execute getSetBytes()void
	callsub getSetBytes
	intc 0 // 1
	return

// getSetBytes(): void
getSetBytes:
	proto 0 0

	// tests/contracts/general.algo.ts:384
	// log(setbit('foo', 0, true))
	bytec 5 //  "foo"
	intc 1 // 0
	intc 0 // 1
	setbit
	log

	// tests/contracts/general.algo.ts:385
	// getbit('foo', 0)
	bytec 5 //  "foo"
	intc 1 // 0
	getbit

	// tests/contracts/general.algo.ts:386
	// getbyte('foo', 0)
	bytec 5 //  "foo"
	intc 1 // 0
	getbyte

	// tests/contracts/general.algo.ts:387
	// setbyte('foo', 0, 1)
	bytec 5 //  "foo"
	intc 1 // 0
	intc 0 // 1
	setbyte
	retsub

// getSetUint64()void
*abi_route_getSetUint64:
	// execute getSetUint64()void
	callsub getSetUint64
	intc 0 // 1
	return

// getSetUint64(): void
getSetUint64:
	proto 0 0

	// tests/contracts/general.algo.ts:391
	// assert(setbit(123, 0, true))
	intc 5 // 123
	intc 1 // 0
	intc 0 // 1
	setbit
	assert

	// tests/contracts/general.algo.ts:392
	// getbit(123, 0)
	intc 5 // 123
	intc 1 // 0
	getbit
	retsub

// blockOp()void
*abi_route_blockOp:
	// execute blockOp()void
	callsub blockOp
	intc 0 // 1
	return

// blockOp(): void
blockOp:
	proto 0 0

	// tests/contracts/general.algo.ts:396
	// log(blocks[globals.round - 1].seed)
	global Round
	intc 0 // 1
	-
	block BlkSeed
	log

	// tests/contracts/general.algo.ts:397
	// assert(blocks[globals.round - 1].timestamp)
	global Round
	intc 0 // 1
	-
	block BlkTimestamp
	assert
	retsub

// b64()void
*abi_route_b64:
	// execute b64()void
	callsub b64
	intc 0 // 1
	return

// b64(): void
b64:
	proto 0 0

	// tests/contracts/general.algo.ts:401
	// log(base64Decode('StdEncoding', ''))
	bytec 0 //  ""
	base64_decode StdEncoding
	log
	retsub

// json()void
*abi_route_json:
	// execute json()void
	callsub json
	intc 0 // 1
	return

// json(): void
json:
	proto 0 0

	// tests/contracts/general.algo.ts:405
	// log(jsonRef('JSONObject', '', ''))
	bytec 0 //  ""
	dup
	json_ref JSONObject
	log

	// tests/contracts/general.algo.ts:406
	// log(jsonRef('JSONString', '', ''))
	bytec 0 //  ""
	dup
	json_ref JSONString
	log

	// tests/contracts/general.algo.ts:407
	// assert(jsonRef('JSONUint64', '', ''))
	bytec 0 //  ""
	dup
	json_ref JSONUint64
	assert
	retsub

// bitlenOp()void
*abi_route_bitlenOp:
	// execute bitlenOp()void
	callsub bitlenOp
	intc 0 // 1
	return

// bitlenOp(): void
bitlenOp:
	proto 0 0

	// tests/contracts/general.algo.ts:411
	// bitlen(123)
	intc 5 // 123
	bitlen

	// tests/contracts/general.algo.ts:412
	// bitlen('foo')
	bytec 5 //  "foo"
	bitlen
	retsub

// computedConst()void
*abi_route_computedConst:
	// execute computedConst()void
	callsub computedConst
	intc 0 // 1
	return

// computedConst(): void
computedConst:
	proto 0 0

	// tests/contracts/general.algo.ts:416
	// assert(COMPUTED_CONST)
	pushint 246
	assert
	retsub

// multiComputedConst()void
*abi_route_multiComputedConst:
	// execute multiComputedConst()void
	callsub multiComputedConst
	intc 0 // 1
	return

// multiComputedConst(): void
multiComputedConst:
	proto 0 0

	// tests/contracts/general.algo.ts:420
	// assert(MUTLI_COMPUTED_CONST)
	pushint 30381
	assert
	retsub

// readSchema()void
*abi_route_readSchema:
	// execute readSchema()void
	callsub readSchema
	intc 0 // 1
	return

// readSchema(): void
readSchema:
	proto 0 0

	// tests/contracts/general.algo.ts:424
	// assert(SchemaContract.schema.global.numUint === 1)
	intc 0 // 1
	dup
	==
	assert

	// tests/contracts/general.algo.ts:425
	// assert(SchemaContract.schema.global.numByteSlice === 2)
	intc 3 // 2
	dup
	==
	assert

	// tests/contracts/general.algo.ts:426
	// assert(SchemaContract.schema.local.numUint === 3)
	intc 8 // 3
	dup
	==
	assert

	// tests/contracts/general.algo.ts:427
	// assert(SchemaContract.schema.local.numByteSlice === 4)
	intc 7 // 4
	dup
	==
	assert
	retsub

// comparisonOr()bool
*abi_route_comparisonOr:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute comparisonOr()bool
	callsub comparisonOr
	pushbytes 0x00
	intc 1 // 0
	uncover 2
	setbit
	concat
	log
	intc 0 // 1
	return

// comparisonOr(): boolean
comparisonOr:
	proto 0 1

	// tests/contracts/general.algo.ts:431
	// return this.txn.sender === globals.zeroAddress || this.txn.sender === globals.zeroAddress;
	txn Sender
	global ZeroAddress
	==
	dup
	bnz *skip_or0
	txn Sender
	global ZeroAddress
	==
	||

*skip_or0:
	retsub

// txnArgsMethod(pay)void
*abi_route_txnArgsMethod:
	// _pay1: pay
	txn GroupIndex
	intc 0 // 1
	-
	dup
	gtxns TypeEnum
	intc 0 //  pay
	==

	// argument 0 (_pay1) for txnArgsMethod must be a pay transaction
	assert

	// execute txnArgsMethod(pay)void
	callsub txnArgsMethod
	intc 0 // 1
	return

// txnArgsMethod(_pay1: PayTxn): void
txnArgsMethod:
	proto 1 0
	retsub

// callTxnArgsMethod()void
*abi_route_callTxnArgsMethod:
	// execute callTxnArgsMethod()void
	callsub callTxnArgsMethod
	intc 0 // 1
	return

// callTxnArgsMethod(): void
callTxnArgsMethod:
	proto 0 0

	// tests/contracts/general.algo.ts:438
	// sendMethodCall<typeof GeneralTest.prototype.txnArgsMethod>({
	//       methodArgs: [{ receiver: this.app.address, amount: 0 }],
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:439
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// tests/contracts/general.algo.ts:439
	// amount: 0
	intc 1 // 0
	itxn_field Amount

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	bytec 13 //  method "txnArgsMethod(pay)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:439
	// methodArgs: [{ receiver: this.app.address, amount: 0 }]
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// staticValueLen(uint256)void
*abi_route_staticValueLen:
	// x: uint256
	txna ApplicationArgs 1
	dup
	len
	intc 9 // 32
	==

	// argument 0 (x) for staticValueLen must be a uint256
	assert

	// execute staticValueLen(uint256)void
	callsub staticValueLen
	intc 0 // 1
	return

// staticValueLen(x: uint256): void
staticValueLen:
	proto 1 0

	// tests/contracts/general.algo.ts:444
	// assert(len(x))
	intc 9 // 32
	assert
	retsub

// staticTypeLen()void
*abi_route_staticTypeLen:
	// execute staticTypeLen()void
	callsub staticTypeLen
	intc 0 // 1
	return

// staticTypeLen(): void
staticTypeLen:
	proto 0 0

	// tests/contracts/general.algo.ts:448
	// assert(len<uint256>())
	intc 9 // 32
	assert
	retsub

// dynamicScratchSlot()void
*abi_route_dynamicScratchSlot:
	// execute dynamicScratchSlot()void
	callsub dynamicScratchSlot
	intc 0 // 1
	return

// dynamicScratchSlot(): void
dynamicScratchSlot:
	proto 0 0

	// tests/contracts/general.algo.ts:452
	// this.dynamicScratch(1).value = 1337
	intc 0 // 1
	intc 6 // 1337
	stores

	// tests/contracts/general.algo.ts:453
	// assert(this.dynamicScratch(1).value === 1337)
	intc 0 // 1
	loads
	intc 6 // 1337
	==
	assert
	retsub

// incrementScratchSlot()void
*abi_route_incrementScratchSlot:
	// execute incrementScratchSlot()void
	callsub incrementScratchSlot
	intc 0 // 1
	return

// incrementScratchSlot(): void
incrementScratchSlot:
	proto 0 0

	// tests/contracts/general.algo.ts:457
	// this.scratch.value = 1337
	intc 6 // 1337
	store 0

	// tests/contracts/general.algo.ts:458
	// this.scratch.value += 1
	load 0
	intc 0 // 1
	+
	store 0

	// tests/contracts/general.algo.ts:459
	// assert(this.scratch.value === 1338)
	load 0
	intc 12 // 1338
	==
	assert
	retsub

// incrementDynamicScratchSlot()void
*abi_route_incrementDynamicScratchSlot:
	// execute incrementDynamicScratchSlot()void
	callsub incrementDynamicScratchSlot
	intc 0 // 1
	return

// incrementDynamicScratchSlot(): void
incrementDynamicScratchSlot:
	proto 0 0

	// tests/contracts/general.algo.ts:463
	// this.dynamicScratch(2).value = 1337
	intc 3 // 2
	intc 6 // 1337
	stores

	// tests/contracts/general.algo.ts:464
	// this.dynamicScratch(2).value += 1
	intc 3 // 2
	loads
	intc 0 // 1
	+
	intc 3 // 2
	swap
	stores

	// tests/contracts/general.algo.ts:465
	// assert(this.dynamicScratch(2).value === 1338)
	intc 3 // 2
	loads
	intc 12 // 1338
	==
	assert
	retsub

// fromAddress()void
*abi_route_fromAddress:
	// execute fromAddress()void
	callsub fromAddress
	intc 0 // 1
	return

// fromAddress(): void
fromAddress:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:469
	// a = Address.fromAddress('AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ')
	bytec 3 //  addr "AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ"
	frame_bury 0 // a: address

	// tests/contracts/general.algo.ts:470
	// assert(a === Address.zeroAddress)
	frame_dig 0 // a: address
	global ZeroAddress
	==
	assert
	retsub

// earlyReturn(uint64)uint64
*abi_route_earlyReturn:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute earlyReturn(uint64)uint64
	callsub earlyReturn
	itob
	concat
	log
	intc 0 // 1
	return

// earlyReturn(a: uint64): uint64
earlyReturn:
	proto 1 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// *if1_condition
	// tests/contracts/general.algo.ts:474
	// a === 1
	frame_dig -1 // a: uint64
	intc 0 // 1
	==
	bz *if1_end

	// *if1_consequent
	// tests/contracts/general.algo.ts:475
	// return 2;
	intc 3 // 2
	b *earlyReturn*return

*if1_end:
	// tests/contracts/general.algo.ts:477
	// b = a + 1
	frame_dig -1 // a: uint64
	intc 0 // 1
	+
	frame_bury 0 // b: uint64

	// tests/contracts/general.algo.ts:478
	// return b;
	frame_dig 0 // b: uint64

*earlyReturn*return:
	// set the subroutine return value
	frame_bury 0
	retsub

// assetMethodArgs()void
*abi_route_assetMethodArgs:
	// execute assetMethodArgs()void
	callsub assetMethodArgs
	intc 0 // 1
	return

// assetMethodArgs(): void
assetMethodArgs:
	proto 0 0

	// tests/contracts/general.algo.ts:482
	// sendMethodCall<[AssetReference], void>({
	//       name: 'foo',
	//       methodArgs: [AssetID.fromUint64(1)],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xa15316de // method "foo(asset)void"
	itxn_field ApplicationArgs

	// tests/contracts/general.algo.ts:484
	// methodArgs: [AssetID.fromUint64(1)]
	intc 0 // 1
	itxn_field Assets
	pushbytes 0x0000000000000000
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// multipleProgramPages()void
*abi_route_multipleProgramPages:
	// execute multipleProgramPages()void
	callsub multipleProgramPages
	intc 0 // 1
	return

// multipleProgramPages(): void
multipleProgramPages:
	proto 0 0

	// tests/contracts/general.algo.ts:493
	// sendAppCall({
	//       approvalProgram: [this.pageOne.value, this.pageTwo.value],
	//       clearStateProgram: [this.pageOne.value, this.pageTwo.value],
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum

	// tests/contracts/general.algo.ts:494
	// approvalProgram: [this.pageOne.value, this.pageTwo.value]
	bytec 10 //  "pageOne"
	box_get

	// box value does not exist: this.pageOne.value
	assert
	itxn_field ApprovalProgramPages
	bytec 11 //  "pageTwo"
	box_get

	// box value does not exist: this.pageTwo.value
	assert
	itxn_field ApprovalProgramPages

	// tests/contracts/general.algo.ts:495
	// clearStateProgram: [this.pageOne.value, this.pageTwo.value]
	bytec 10 //  "pageOne"
	box_get

	// box value does not exist: this.pageOne.value
	assert
	itxn_field ClearStateProgramPages
	bytec 11 //  "pageTwo"
	box_get

	// box value does not exist: this.pageTwo.value
	assert
	itxn_field ClearStateProgramPages

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assertComment()void
*abi_route_assertComment:
	// execute assertComment()void
	callsub assertComment
	intc 0 // 1
	return

// assertComment(): void
assertComment:
	proto 0 0

	// tests/contracts/general.algo.ts:500
	// assert(false, 'this is false')
	intc 1 // 0

	// this is false
	assert
	retsub

// throwErrorMessage()void
*abi_route_throwErrorMessage:
	// execute throwErrorMessage()void
	callsub throwErrorMessage
	intc 0 // 1
	return

// throwErrorMessage(): void
throwErrorMessage:
	proto 0 0

	// this is an error
	err
	retsub

// orLiteralType(uint64,uint64)void
*abi_route_orLiteralType:
	// b: uint64
	txna ApplicationArgs 2
	btoi

	// a: uint64
	txna ApplicationArgs 1
	btoi

	// execute orLiteralType(uint64,uint64)void
	callsub orLiteralType
	intc 0 // 1
	return

// orLiteralType(a: uint64, b: uint64): void
orLiteralType:
	proto 2 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/general.algo.ts:508
	// foo = a && b === 1 ? 2 : 0
	frame_dig -1 // a: uint64
	dup
	bz *skip_and0
	frame_dig -2 // b: uint64
	intc 0 // 1
	==
	&&

*skip_and0:
	bz *ternary0_false
	intc 3 // 2
	b *ternary0_end

*ternary0_false:
	intc 1 // 0

*ternary0_end:
	frame_bury 0 // foo: uint64

	// tests/contracts/general.algo.ts:509
	// assert(foo)
	frame_dig 0 // foo: uint64
	assert

	// tests/contracts/general.algo.ts:511
	// bar = a && b === 0 ? '2' : '0'
	frame_dig -1 // a: uint64
	dup
	bz *skip_and1
	frame_dig -2 // b: uint64
	intc 1 // 0
	==
	&&

*skip_and1:
	bz *ternary1_false
	pushbytes 0x32 // "2"
	b *ternary1_end

*ternary1_false:
	bytec 17 //  "0"

*ternary1_end:
	frame_bury 1 // bar: byte[]

	// tests/contracts/general.algo.ts:512
	// log(bar)
	frame_dig 1 // bar: byte[]
	log
	retsub

// nonAbi(): void
nonAbi:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x

	// tests/contracts/general.algo.ts:517
	// assert(this.txn.applicationArgs!.length)
	txn NumAppArgs
	assert

	// tests/contracts/general.algo.ts:519
	// for (let i = 0; i < this.txn.applicationArgs!.length; i += 1)
	intc 1 // 0
	frame_bury 0 // i: uint64

*for_1:
	// tests/contracts/general.algo.ts:519
	// i < this.txn.applicationArgs!.length
	frame_dig 0 // i: uint64
	txn NumAppArgs
	<
	bz *for_1_end

	// tests/contracts/general.algo.ts:520
	// log(this.txn.applicationArgs![i])
	frame_dig 0 // i: uint64
	txnas ApplicationArgs
	log

*for_1_continue:
	// tests/contracts/general.algo.ts:519
	// i += 1
	frame_dig 0 // i: uint64
	intc 0 // 1
	+
	frame_bury 0 // i: uint64
	b *for_1

*for_1_end:
	retsub

// multilineFunctionCall()void
*abi_route_multilineFunctionCall:
	// execute multilineFunctionCall()void
	callsub multilineFunctionCall
	intc 0 // 1
	return

// multilineFunctionCall(): void
multilineFunctionCall:
	proto 0 0

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/general.algo.ts:525
	// app = AppID.zeroIndex
	intc 1 // 0
	frame_bury 0 // app: uint64

	// tests/contracts/general.algo.ts:526
	// addr = Address.zeroAddress
	global ZeroAddress
	frame_bury 1 // addr: address

	// tests/contracts/general.algo.ts:528
	// app.localState(
	//       addr,
	//       'key'
	//     )
	frame_dig 1 // addr: address
	intc 1 //  app: uint64
	pushbytes 0x6b6579 // "key"
	app_local_get_ex

	// local state value does not exist: app.localState( addr, 'key' )
	assert
	retsub

// a()uint64
*abi_route_a:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute a()uint64
	callsub a
	itob
	concat
	log
	intc 0 // 1
	return

// a(): uint64
a:
	proto 0 1

	// tests/contracts/general.algo.ts:535
	// return 3;
	intc 8 // 3
	retsub

// b()uint64
*abi_route_b:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute b()uint64
	callsub b
	itob
	concat
	log
	intc 0 // 1
	return

// b(): uint64
b:
	proto 0 1

	// tests/contracts/general.algo.ts:539
	// return 5;
	intc 4 // 5
	retsub

// unusedMethodValue()uint64
*abi_route_unusedMethodValue:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute unusedMethodValue()uint64
	callsub unusedMethodValue
	itob
	concat
	log
	intc 0 // 1
	return

// unusedMethodValue(): uint64
unusedMethodValue:
	proto 0 1

	// tests/contracts/general.algo.ts:543
	// this.a()
	callsub a
	pop

	// tests/contracts/general.algo.ts:544
	// return this.b();
	callsub b
	retsub

// reassignedNonFirstVar()uint64
*abi_route_reassignedNonFirstVar:
	// The ABI return prefix
	bytec 2 // 0x151f7c75

	// execute reassignedNonFirstVar()uint64
	callsub reassignedNonFirstVar
	itob
	concat
	log
	intc 0 // 1
	return

// reassignedNonFirstVar(): uint64
reassignedNonFirstVar:
	proto 0 1

	// Push empty bytes after the frame pointer to reserve space for local variables
	bytec 0 // 0x
	dup

	// tests/contracts/general.algo.ts:555
	// a = 1 as uint64
	intc 0 // 1
	frame_bury 0 // a: uint64

	// tests/contracts/general.algo.ts:556
	// b = this.app.id
	txna Applications 0
	frame_bury 1 // b: uint64

	// *if2_condition
	// tests/contracts/general.algo.ts:557
	// a
	frame_dig 0 // a: uint64
	bz *if2_end

	// *if2_consequent
	// tests/contracts/general.algo.ts:558
	// b = 2
	intc 3 // 2
	frame_bury 1 // b: uint64

*if2_end:
	// tests/contracts/general.algo.ts:561
	// return b;
	frame_dig 1 // b: uint64

	// set the subroutine return value
	frame_bury 0

	// pop all local variables from the stack
	popn 1
	retsub

// fvLv()void
*abi_route_fvLv:
	// execute fvLv()void
	callsub fvLv
	intc 0 // 1
	return

// fvLv(): void
fvLv:
	proto 0 0

	// tests/contracts/general.algo.ts:565
	// assert(this.txn.firstValid)
	txn FirstValid
	assert

	// tests/contracts/general.algo.ts:566
	// assert(this.txn.lastValid)
	txn LastValid
	assert
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x624264a3 // method "txnTypeEnum()void"
	pushbytes 0xb205edc9 // method "txnGroupLength()void"
	pushbytes 0xe6e97d5b // method "asserts(bool,bool)void"
	pushbytes 0xdd6fa7c8 // method "verifyTxnFromArg(pay)void"
	pushbytes 0x0ea644fb // method "verifyTxnFromTxnGroup()void"
	pushbytes 0xec0d9094 // method "verifyTxnCondition()void"
	pushbytes 0x68848d97 // method "verifyTxnIncludedIn()void"
	pushbytes 0x18bd23dc // method "verifyTxnNotIncludedIn()void"
	pushbytes 0x806bfb93 // method "submitPendingGroup()void"
	pushbytes 0x3be5f82e // method "methodWithTxnArgs()void"
	pushbytes 0x1295d683 // method "shift()void"
	pushbytes 0xb3b8c472 // method "fromBytes()void"
	pushbytes 0x53e0b6f0 // method "fromUint64()void"
	pushbytes 0x4b3eb877 // method "bzeroFunction()void"
	pushbytes 0xdac2e7a5 // method "events()void"
	pushbytes 0xa3db6704 // method "letOptimization(uint64[])uint64[]"
	pushbytes 0xae21c172 // method "staticContractProperties()void"
	pushbytes 0xdab4d1c4 // method "numberToString()void"
	pushbytes 0xa7b4ae9a // method "methodOnParens()void"
	pushbytes 0x6d4485ba // method "stringSubstring()void"
	pushbytes 0xef6262e9 // method "idProperty()void"
	pushbytes 0x8d2b668b // method "scratchSlot()void"
	pushbytes 0xe6c154fc // method "ecdsa()void"
	pushbytes 0xa9764197 // method "verifyTxnTypes()void"
	pushbytes 0x9dbbc42c // method "stringPlusEquals()void"
	pushbytes 0x4c0ddec1 // method "importedProgram()byte[]"
	pushbytes 0x30ecfb41 // method "callPrivateDefinedLater()void"
	pushbytes 0x14a49919 // method "interalPublicMethod(uint64,uint64)uint64"
	pushbytes 0xb71c179a // method "callInternalPublicMethod()void"
	pushbytes 0x98481093 // method "appLoadScratch()void"
	pushbytes 0xf572d1c1 // method "uintNWithUnderscore()uint256"
	pushbytes 0x854dede0 // method "opUp()void"
	pushbytes 0x681599fa // method "returnValueOnAssignment()string"
	pushbytes 0x5e1477e8 // method "returnArrayValueOnAssignment()uint64"
	pushbytes 0xe07b3be9 // method "returnStorageValueOnAssignment()uint64"
	pushbytes 0x16e46657 // method "returnOperatorAssignmentValue()uint64"
	pushbytes 0x2c836f46 // method "returnArrayValueOnOperatorAssignment()uint64"
	pushbytes 0xa93c56f9 // method "returnArrayInStorageValueOnOperatorAssignment()uint64"
	pushbytes 0xf936952d // method "consts()void"
	pushbytes 0x88f39c99 // method "assertWithMessage()void"
	pushbytes 0x58794cf4 // method "opcodeAliases()void"
	pushbytes 0x35044ad8 // method "vrfVerifyOp()void"
	pushbytes 0x7d279e8e // method "ecMath()void"
	pushbytes 0x3dfa18c8 // method "gitxn()void"
	pushbytes 0x78ca5c4e // method "getSetBytes()void"
	pushbytes 0x0e67e957 // method "getSetUint64()void"
	pushbytes 0x3b446eef // method "blockOp()void"
	pushbytes 0xae82e875 // method "b64()void"
	pushbytes 0xd69af530 // method "json()void"
	pushbytes 0x4d52f33d // method "bitlenOp()void"
	pushbytes 0x2c0cd201 // method "computedConst()void"
	pushbytes 0x70e0afe5 // method "multiComputedConst()void"
	pushbytes 0x30a2fef4 // method "readSchema()void"
	pushbytes 0xf3971dca // method "comparisonOr()bool"
	bytec 13 //  method "txnArgsMethod(pay)void"
	pushbytes 0x9e40d34b // method "callTxnArgsMethod()void"
	pushbytes 0x91cf2b58 // method "staticValueLen(uint256)void"
	pushbytes 0xb1c8b45c // method "staticTypeLen()void"
	pushbytes 0x9c0e1bdb // method "dynamicScratchSlot()void"
	pushbytes 0x0a319504 // method "incrementScratchSlot()void"
	pushbytes 0x84b260fa // method "incrementDynamicScratchSlot()void"
	pushbytes 0x4a908856 // method "fromAddress()void"
	pushbytes 0x8deb32d3 // method "earlyReturn(uint64)uint64"
	pushbytes 0x67de156f // method "assetMethodArgs()void"
	pushbytes 0x1e428412 // method "multipleProgramPages()void"
	pushbytes 0x278fd8b8 // method "assertComment()void"
	pushbytes 0xbfc36208 // method "throwErrorMessage()void"
	pushbytes 0x04eedf79 // method "orLiteralType(uint64,uint64)void"
	pushbytes 0x35d5fbc7 // method "multilineFunctionCall()void"
	pushbytes 0xf9522e2f // method "a()uint64"
	pushbytes 0x8c9379e6 // method "b()uint64"
	pushbytes 0xf9a13552 // method "unusedMethodValue()uint64"
	pushbytes 0x94f2049a // method "reassignedNonFirstVar()uint64"
	pushbytes 0x56264215 // method "fvLv()void"
	txna ApplicationArgs 0
	match *abi_route_txnTypeEnum *abi_route_txnGroupLength *abi_route_asserts *abi_route_verifyTxnFromArg *abi_route_verifyTxnFromTxnGroup *abi_route_verifyTxnCondition *abi_route_verifyTxnIncludedIn *abi_route_verifyTxnNotIncludedIn *abi_route_submitPendingGroup *abi_route_methodWithTxnArgs *abi_route_shift *abi_route_fromBytes *abi_route_fromUint64 *abi_route_bzeroFunction *abi_route_events *abi_route_letOptimization *abi_route_staticContractProperties *abi_route_numberToString *abi_route_methodOnParens *abi_route_stringSubstring *abi_route_idProperty *abi_route_scratchSlot *abi_route_ecdsa *abi_route_verifyTxnTypes *abi_route_stringPlusEquals *abi_route_importedProgram *abi_route_callPrivateDefinedLater *abi_route_interalPublicMethod *abi_route_callInternalPublicMethod *abi_route_appLoadScratch *abi_route_uintNWithUnderscore *abi_route_opUp *abi_route_returnValueOnAssignment *abi_route_returnArrayValueOnAssignment *abi_route_returnStorageValueOnAssignment *abi_route_returnOperatorAssignmentValue *abi_route_returnArrayValueOnOperatorAssignment *abi_route_returnArrayInStorageValueOnOperatorAssignment *abi_route_consts *abi_route_assertWithMessage *abi_route_opcodeAliases *abi_route_vrfVerifyOp *abi_route_ecMath *abi_route_gitxn *abi_route_getSetBytes *abi_route_getSetUint64 *abi_route_blockOp *abi_route_b64 *abi_route_json *abi_route_bitlenOp *abi_route_computedConst *abi_route_multiComputedConst *abi_route_readSchema *abi_route_comparisonOr *abi_route_txnArgsMethod *abi_route_callTxnArgsMethod *abi_route_staticValueLen *abi_route_staticTypeLen *abi_route_dynamicScratchSlot *abi_route_incrementScratchSlot *abi_route_incrementDynamicScratchSlot *abi_route_fromAddress *abi_route_earlyReturn *abi_route_assetMethodArgs *abi_route_multipleProgramPages *abi_route_assertComment *abi_route_throwErrorMessage *abi_route_orLiteralType *abi_route_multilineFunctionCall *abi_route_a *abi_route_b *abi_route_unusedMethodValue *abi_route_reassignedNonFirstVar *abi_route_fvLv

	// !!!! WARNING: non-ABI routing
	callsub nonAbi
	intc 0 // 1
	return

*intToAscii:
	proto 1 1
	pushbytes 0x30313233343536373839 // "0123456789"
	frame_dig -1 // i: uint64
	intc 0 // 1
	extract3
	retsub
	

*itoa:
	proto 1 1
	frame_dig -1 // i: uint64
	intc 1 // 0
	==
	bz *itoa_if_end
	bytec 17 // 0x30
	retsub

*itoa_if_end:
	frame_dig -1 // i: uint64
	intc 10 // 10
	/
	intc 1 // 0
	>
	bz *itoa_ternary_false
	frame_dig -1 // i: uint64
	intc 10 // 10
	/
	callsub *itoa
	b *itoa_ternary_end

*itoa_ternary_false:
	bytec 0 //  ""

*itoa_ternary_end:
	frame_dig -1 // i: uint64
	intc 10 // 10
	%
	callsub *intToAscii
	concat
	retsub"
`;

exports[`General GeneralTest Artifacts Maintains program size 1`] = `4461`;

exports[`General GeneralTest Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": [
    {
      "args": [
        {
          "desc": "Some app",
          "name": "app",
          "type": "uint64",
        },
        {
          "desc": "Some number",
          "name": "num",
          "type": "uint64",
        },
      ],
      "desc": 
"This is my event
It has some args"
,
      "name": "myEvent",
    },
  ],
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "txnTypeEnum",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "txnGroupLength",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "arg1",
          "type": "bool",
        },
        {
          "desc": undefined,
          "name": "arg2",
          "type": "bool",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "asserts",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "somePay",
          "type": "pay",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "verifyTxnFromArg",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "verifyTxnFromTxnGroup",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "verifyTxnCondition",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "verifyTxnIncludedIn",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "verifyTxnNotIncludedIn",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "submitPendingGroup",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "methodWithTxnArgs",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "shift",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "fromBytes",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "fromUint64",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "bzeroFunction",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": [
        {
          "args": [
            {
              "desc": "Some app",
              "name": "app",
              "type": "uint64",
            },
            {
              "desc": "Some number",
              "name": "num",
              "type": "uint64",
            },
          ],
          "desc": 
"This is my event
It has some args"
,
          "name": "myEvent",
        },
      ],
      "name": "events",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64[]",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "letOptimization",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64[]",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "staticContractProperties",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "numberToString",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "methodOnParens",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "stringSubstring",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "idProperty",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "scratchSlot",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "ecdsa",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "verifyTxnTypes",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "stringPlusEquals",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "importedProgram",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "byte[]",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "callPrivateDefinedLater",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "interalPublicMethod",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "callInternalPublicMethod",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "appLoadScratch",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "uintNWithUnderscore",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint256",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "opUp",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "returnValueOnAssignment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "string",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "returnArrayValueOnAssignment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "returnStorageValueOnAssignment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "returnOperatorAssignmentValue",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "returnArrayValueOnOperatorAssignment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "returnArrayInStorageValueOnOperatorAssignment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "consts",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assertWithMessage",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "opcodeAliases",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "vrfVerifyOp",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "ecMath",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "gitxn",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "getSetBytes",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "getSetUint64",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "blockOp",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "b64",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "json",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "bitlenOp",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "computedConst",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "multiComputedConst",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "readSchema",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "comparisonOr",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "bool",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "_pay1",
          "type": "pay",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "txnArgsMethod",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "callTxnArgsMethod",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "x",
          "type": "uint256",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "staticValueLen",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "staticTypeLen",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "dynamicScratchSlot",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "incrementScratchSlot",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "incrementDynamicScratchSlot",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "fromAddress",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "earlyReturn",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assetMethodArgs",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "multipleProgramPages",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assertComment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "throwErrorMessage",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [
        {
          "desc": undefined,
          "name": "a",
          "type": "uint64",
        },
        {
          "desc": undefined,
          "name": "b",
          "type": "uint64",
        },
      ],
      "desc": undefined,
      "events": undefined,
      "name": "orLiteralType",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "multilineFunctionCall",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "a",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "b",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "unusedMethodValue",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "reassignedNonFirstVar",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "fvLv",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "GeneralTest",
}
`;

exports[`General GeneralTest Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": [
      {
        "args": [
          {
            "desc": "Some app",
            "name": "app",
            "type": "uint64",
          },
          {
            "desc": "Some number",
            "name": "num",
            "type": "uint64",
          },
        ],
        "desc": 
"This is my event
It has some args"
,
        "name": "myEvent",
      },
    ],
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "txnTypeEnum",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "txnGroupLength",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "arg1",
            "type": "bool",
          },
          {
            "desc": undefined,
            "name": "arg2",
            "type": "bool",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "asserts",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "somePay",
            "type": "pay",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "verifyTxnFromArg",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "verifyTxnFromTxnGroup",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "verifyTxnCondition",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "verifyTxnIncludedIn",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "verifyTxnNotIncludedIn",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "submitPendingGroup",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "methodWithTxnArgs",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "shift",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "fromBytes",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "fromUint64",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "bzeroFunction",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": [
          {
            "args": [
              {
                "desc": "Some app",
                "name": "app",
                "type": "uint64",
              },
              {
                "desc": "Some number",
                "name": "num",
                "type": "uint64",
              },
            ],
            "desc": 
"This is my event
It has some args"
,
            "name": "myEvent",
          },
        ],
        "name": "events",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64[]",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "letOptimization",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64[]",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "staticContractProperties",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "numberToString",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "methodOnParens",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "stringSubstring",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "idProperty",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "scratchSlot",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "ecdsa",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "verifyTxnTypes",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "stringPlusEquals",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "importedProgram",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "byte[]",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "callPrivateDefinedLater",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "interalPublicMethod",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "callInternalPublicMethod",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "appLoadScratch",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "uintNWithUnderscore",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint256",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "opUp",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "returnValueOnAssignment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "string",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "returnArrayValueOnAssignment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "returnStorageValueOnAssignment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "returnOperatorAssignmentValue",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "returnArrayValueOnOperatorAssignment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "returnArrayInStorageValueOnOperatorAssignment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "consts",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assertWithMessage",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "opcodeAliases",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "vrfVerifyOp",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "ecMath",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "gitxn",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "getSetBytes",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "getSetUint64",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "blockOp",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "b64",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "json",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "bitlenOp",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "computedConst",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "multiComputedConst",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "readSchema",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "comparisonOr",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "bool",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "_pay1",
            "type": "pay",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "txnArgsMethod",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "callTxnArgsMethod",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "x",
            "type": "uint256",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "staticValueLen",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "staticTypeLen",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "dynamicScratchSlot",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "incrementScratchSlot",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "incrementDynamicScratchSlot",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "fromAddress",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "earlyReturn",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assetMethodArgs",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "multipleProgramPages",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assertComment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "throwErrorMessage",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [
          {
            "desc": undefined,
            "name": "a",
            "type": "uint64",
          },
          {
            "desc": undefined,
            "name": "b",
            "type": "uint64",
          },
        ],
        "desc": undefined,
        "events": undefined,
        "name": "orLiteralType",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "multilineFunctionCall",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "a",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "b",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "unusedMethodValue",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "reassignedNonFirstVar",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "fvLv",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "GeneralTest",
  },
  "hints": {
    "a()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "appLoadScratch()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assertComment()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assertWithMessage()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "asserts(bool,bool)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assetMethodArgs()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "b()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "b64()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "bitlenOp()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "blockOp()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "bzeroFunction()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "callInternalPublicMethod()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "callPrivateDefinedLater()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "callTxnArgsMethod()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "comparisonOr()bool": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "computedConst()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "consts()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "dynamicScratchSlot()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "earlyReturn(uint64)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "ecMath()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "ecdsa()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "events()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "fromAddress()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "fromBytes()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "fromUint64()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "fvLv()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getSetBytes()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "getSetUint64()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "gitxn()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "idProperty()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "importedProgram()byte[]": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "incrementDynamicScratchSlot()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "incrementScratchSlot()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "interalPublicMethod(uint64,uint64)uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "json()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "letOptimization(uint64[])uint64[]": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "methodOnParens()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "methodWithTxnArgs()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "multiComputedConst()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "multilineFunctionCall()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "multipleProgramPages()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "numberToString()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "opUp()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "opcodeAliases()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "orLiteralType(uint64,uint64)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "readSchema()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "reassignedNonFirstVar()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "returnArrayInStorageValueOnOperatorAssignment()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "returnArrayValueOnAssignment()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "returnArrayValueOnOperatorAssignment()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "returnOperatorAssignmentValue()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "returnStorageValueOnAssignment()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "returnValueOnAssignment()string": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "scratchSlot()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "shift()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "staticContractProperties()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "staticTypeLen()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "staticValueLen(uint256)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "stringPlusEquals()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "stringSubstring()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "submitPendingGroup()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "throwErrorMessage()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "txnArgsMethod(pay)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "txnGroupLength()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "txnTypeEnum()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "uintNWithUnderscore()uint256": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "unusedMethodValue()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyTxnCondition()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyTxnFromArg(pay)void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyTxnFromTxnGroup()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyTxnIncludedIn()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyTxnNotIncludedIn()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "verifyTxnTypes()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "vrfVerifyOp()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {
        "gKey": {
          "key": "gKey",
          "type": "uint64",
        },
        "storageArray": {
          "key": "storageArray",
          "type": "bytes",
        },
      },
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 1,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;

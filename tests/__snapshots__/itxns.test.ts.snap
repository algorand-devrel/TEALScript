// Bun Snapshot v1, https://goo.gl/fbAQLP

exports[`Inner Transactions ItxnsTest Artifacts Generates TEAL 1`] = `
"#pragma version 10
intcblock 1 0 6 3 2
bytecblock 0x6161616161616161616161616161616161616161616161616161616161616161 0x151f7c75

// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
intc 2 // 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	// The requested action is not implemented in this contract. Are you using the correct OnComplete? Did you set your app ID?
	err

// payment()void
*abi_route_payment:
	// execute payment()void
	callsub payment
	intc 0 // 1
	return

// payment(): void
payment:
	proto 0 0

	// tests/contracts/itxns.algo.ts:6
	// sendPayment({
	//       amount: 100,
	//       receiver: this.app.address,
	//       closeRemainderTo: globals.zeroAddress,
	//       sender: this.app.address,
	//       rekeyTo: globals.zeroAddress,
	//       note: 'Hello World!',
	//     })
	itxn_begin
	intc 0 //  pay
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:7
	// amount: 100
	pushint 100
	itxn_field Amount

	// tests/contracts/itxns.algo.ts:8
	// receiver: this.app.address
	global CurrentApplicationAddress
	itxn_field Receiver

	// tests/contracts/itxns.algo.ts:9
	// closeRemainderTo: globals.zeroAddress
	global ZeroAddress
	itxn_field CloseRemainderTo

	// tests/contracts/itxns.algo.ts:10
	// sender: this.app.address
	global CurrentApplicationAddress
	itxn_field Sender

	// tests/contracts/itxns.algo.ts:11
	// rekeyTo: globals.zeroAddress
	global ZeroAddress
	itxn_field RekeyTo

	// tests/contracts/itxns.algo.ts:12
	// note: 'Hello World!'
	pushbytes 0x48656c6c6f20576f726c6421 // "Hello World!"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assetCreation()uint64
*abi_route_assetCreation:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute assetCreation()uint64
	callsub assetCreation
	itob
	concat
	log
	intc 0 // 1
	return

// assetCreation(): AssetID
assetCreation:
	proto 0 1

	// tests/contracts/itxns.algo.ts:17
	// return sendAssetCreation({
	//       configAssetName: 'name',
	//       configAssetUnitName: 'unit',
	//       configAssetTotal: 1,
	//       configAssetManager: this.app.address,
	//       configAssetReserve: this.app.address,
	//       configAssetFreeze: this.app.address,
	//       configAssetClawback: this.app.address,
	//       configAssetDefaultFrozen: 0,
	//       configAssetURL: 'url',
	//       configAssetMetadataHash: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
	//     });
	itxn_begin
	intc 3 //  acfg
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:18
	// configAssetName: 'name'
	pushbytes 0x6e616d65 // "name"
	itxn_field ConfigAssetName

	// tests/contracts/itxns.algo.ts:19
	// configAssetUnitName: 'unit'
	pushbytes 0x756e6974 // "unit"
	itxn_field ConfigAssetUnitName

	// tests/contracts/itxns.algo.ts:20
	// configAssetTotal: 1
	intc 0 // 1
	itxn_field ConfigAssetTotal

	// tests/contracts/itxns.algo.ts:21
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// tests/contracts/itxns.algo.ts:22
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// tests/contracts/itxns.algo.ts:23
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// tests/contracts/itxns.algo.ts:24
	// configAssetClawback: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetClawback

	// tests/contracts/itxns.algo.ts:25
	// configAssetDefaultFrozen: 0
	intc 1 // 0
	itxn_field ConfigAssetDefaultFrozen

	// tests/contracts/itxns.algo.ts:26
	// configAssetURL: 'url'
	pushbytes 0x75726c // "url"
	itxn_field ConfigAssetURL

	// tests/contracts/itxns.algo.ts:27
	// configAssetMetadataHash: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
	bytec 0 //  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	itxn_field ConfigAssetMetadataHash

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn CreatedAssetID
	retsub

// appCall()void
*abi_route_appCall:
	// execute appCall()void
	callsub appCall
	intc 0 // 1
	return

// appCall(): void
appCall:
	proto 0 0

	// tests/contracts/itxns.algo.ts:32
	// sendAppCall({
	//       accounts: [this.app.address],
	//       applicationArgs: ['arg1', 'arg2'],
	//       applicationID: this.app,
	//       applications: [this.app],
	//       approvalProgram: 'approval',
	//       assets: [AssetID.zeroIndex],
	//       clearStateProgram: 'clear',
	//       globalNumByteSlice: 1,
	//       globalNumUint: 1,
	//       localNumByteSlice: 1,
	//       localNumUint: 1,
	//       note: 'note',
	//     })
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:33
	// accounts: [this.app.address]
	global CurrentApplicationAddress
	itxn_field Accounts

	// tests/contracts/itxns.algo.ts:34
	// applicationArgs: ['arg1', 'arg2']
	pushbytes 0x61726731 // "arg1"
	itxn_field ApplicationArgs
	pushbytes 0x61726732 // "arg2"
	itxn_field ApplicationArgs

	// tests/contracts/itxns.algo.ts:35
	// applicationID: this.app
	txna Applications 0
	itxn_field ApplicationID

	// tests/contracts/itxns.algo.ts:36
	// applications: [this.app]
	txna Applications 0
	itxn_field Applications

	// tests/contracts/itxns.algo.ts:37
	// approvalProgram: 'approval'
	pushbytes 0x617070726f76616c // "approval"
	itxn_field ApprovalProgram

	// tests/contracts/itxns.algo.ts:38
	// assets: [AssetID.zeroIndex]
	intc 1 // 0
	itxn_field Assets

	// tests/contracts/itxns.algo.ts:39
	// clearStateProgram: 'clear'
	pushbytes 0x636c656172 // "clear"
	itxn_field ClearStateProgram

	// tests/contracts/itxns.algo.ts:40
	// globalNumByteSlice: 1
	intc 0 // 1
	itxn_field GlobalNumByteSlice

	// tests/contracts/itxns.algo.ts:41
	// globalNumUint: 1
	intc 0 // 1
	itxn_field GlobalNumUint

	// tests/contracts/itxns.algo.ts:42
	// localNumByteSlice: 1
	intc 0 // 1
	itxn_field LocalNumByteSlice

	// tests/contracts/itxns.algo.ts:43
	// localNumUint: 1
	intc 0 // 1
	itxn_field LocalNumUint

	// tests/contracts/itxns.algo.ts:44
	// note: 'note'
	pushbytes 0x6e6f7465 // "note"
	itxn_field Note

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assetConfig()void
*abi_route_assetConfig:
	// execute assetConfig()void
	callsub assetConfig
	intc 0 // 1
	return

// assetConfig(): void
assetConfig:
	proto 0 0

	// tests/contracts/itxns.algo.ts:49
	// sendAssetConfig({
	//       configAsset: AssetID.zeroIndex,
	//       configAssetManager: this.app.address,
	//       configAssetReserve: this.app.address,
	//       configAssetFreeze: this.app.address,
	//       configAssetClawback: this.app.address,
	//     })
	itxn_begin
	intc 3 //  acfg
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:50
	// configAsset: AssetID.zeroIndex
	intc 1 // 0
	itxn_field ConfigAsset

	// tests/contracts/itxns.algo.ts:51
	// configAssetManager: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetManager

	// tests/contracts/itxns.algo.ts:52
	// configAssetReserve: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetReserve

	// tests/contracts/itxns.algo.ts:53
	// configAssetFreeze: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetFreeze

	// tests/contracts/itxns.algo.ts:54
	// configAssetClawback: this.app.address
	global CurrentApplicationAddress
	itxn_field ConfigAssetClawback

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assetFreeze()void
*abi_route_assetFreeze:
	// execute assetFreeze()void
	callsub assetFreeze
	intc 0 // 1
	return

// assetFreeze(): void
assetFreeze:
	proto 0 0

	// tests/contracts/itxns.algo.ts:59
	// sendAssetFreeze({
	//       freezeAssetFrozen: true,
	//       freezeAssetAccount: this.app.address,
	//       freezeAsset: AssetID.zeroIndex,
	//     })
	itxn_begin
	pushint 5 // afrz
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:60
	// freezeAssetFrozen: true
	intc 0 // 1
	itxn_field FreezeAssetFrozen

	// tests/contracts/itxns.algo.ts:61
	// freezeAssetAccount: this.app.address
	global CurrentApplicationAddress
	itxn_field FreezeAssetAccount

	// tests/contracts/itxns.algo.ts:62
	// freezeAsset: AssetID.zeroIndex
	intc 1 // 0
	itxn_field FreezeAsset

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// assetTransfer()void
*abi_route_assetTransfer:
	// execute assetTransfer()void
	callsub assetTransfer
	intc 0 // 1
	return

// assetTransfer(): void
assetTransfer:
	proto 0 0

	// tests/contracts/itxns.algo.ts:67
	// sendAssetTransfer({
	//       assetAmount: 1,
	//       assetCloseTo: this.app.address,
	//       assetReceiver: this.app.address,
	//       assetSender: this.app.address,
	//       xferAsset: AssetID.zeroIndex,
	//     })
	itxn_begin
	pushint 4 // axfer
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:68
	// assetAmount: 1
	intc 0 // 1
	itxn_field AssetAmount

	// tests/contracts/itxns.algo.ts:69
	// assetCloseTo: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetCloseTo

	// tests/contracts/itxns.algo.ts:70
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// tests/contracts/itxns.algo.ts:71
	// assetSender: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetSender

	// tests/contracts/itxns.algo.ts:72
	// xferAsset: AssetID.zeroIndex
	intc 1 // 0
	itxn_field XferAsset

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// methodCall()uint64
*abi_route_methodCall:
	// The ABI return prefix
	bytec 1 // 0x151f7c75

	// execute methodCall()uint64
	callsub methodCall
	itob
	concat
	log
	intc 0 // 1
	return

// methodCall(): AssetID
methodCall:
	proto 0 1

	// tests/contracts/itxns.algo.ts:77
	// return sendMethodCall<[AppID, AssetID], AssetID>({
	//       name: 'method',
	//       methodArgs: [this.app, AssetID.zeroIndex],
	//     });
	itxn_begin
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0xa66d559c // method "method(uint64,uint64)uint64"
	itxn_field ApplicationArgs

	// tests/contracts/itxns.algo.ts:79
	// methodArgs: [this.app, AssetID.zeroIndex]
	txna Applications 0
	itob
	itxn_field ApplicationArgs
	pushbytes 0x0000000000000000
	itxn_field ApplicationArgs

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	itxn NumLogs
	intc 0 // 1
	-
	itxnas Logs
	extract 4 0
	btoi
	retsub

// onlineKeyRegistration()void
*abi_route_onlineKeyRegistration:
	// execute onlineKeyRegistration()void
	callsub onlineKeyRegistration
	intc 0 // 1
	return

// onlineKeyRegistration(): void
onlineKeyRegistration:
	proto 0 0

	// tests/contracts/itxns.algo.ts:84
	// sendOnlineKeyRegistration({
	//       selectionPK: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
	//       stateProofPK: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
	//       voteFirst: 1,
	//       voteKeyDilution: 1,
	//       voteLast: 1,
	//       votePK: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa',
	//     })
	itxn_begin
	intc 4 //  keyreg
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:85
	// selectionPK: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
	bytec 0 //  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	itxn_field SelectionPK

	// tests/contracts/itxns.algo.ts:86
	// stateProofPK: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
	bytec 0 //  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	itxn_field StateProofPK

	// tests/contracts/itxns.algo.ts:87
	// voteFirst: 1
	intc 0 // 1
	itxn_field VoteFirst

	// tests/contracts/itxns.algo.ts:88
	// voteKeyDilution: 1
	intc 0 // 1
	itxn_field VoteKeyDilution

	// tests/contracts/itxns.algo.ts:89
	// voteLast: 1
	intc 0 // 1
	itxn_field VoteLast

	// tests/contracts/itxns.algo.ts:90
	// votePK: 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'
	bytec 0 //  "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"
	itxn_field VotePK

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// offlineKeyRegistration()void
*abi_route_offlineKeyRegistration:
	// execute offlineKeyRegistration()void
	callsub offlineKeyRegistration
	intc 0 // 1
	return

// offlineKeyRegistration(): void
offlineKeyRegistration:
	proto 0 0

	// tests/contracts/itxns.algo.ts:95
	// sendOfflineKeyRegistration({})
	itxn_begin
	intc 4 //  keyreg
	itxn_field TypeEnum

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// innerGeneric()void
*abi_route_innerGeneric:
	// execute innerGeneric()void
	callsub innerGeneric
	intc 0 // 1
	return

// innerGeneric(): void
innerGeneric:
	proto 0 0

	// tests/contracts/itxns.algo.ts:99
	// sendMethodCall<[InnerTxn<InnerAssetCreation>], void>({
	//       name: 'foo',
	//       methodArgs: [{ configAssetTotal: 1 }],
	//     })
	itxn_begin
	intc 3 //  acfg
	itxn_field TypeEnum

	// tests/contracts/itxns.algo.ts:101
	// configAssetTotal: 1
	intc 0 // 1
	itxn_field ConfigAssetTotal

	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee
	itxn_next
	intc 2 //  appl
	itxn_field TypeEnum
	pushbytes 0x090924e8 // method "foo(txn)void"
	itxn_field ApplicationArgs

	// tests/contracts/itxns.algo.ts:101
	// methodArgs: [{ configAssetTotal: 1 }]
	// Fee field not set, defaulting to 0
	intc 1 // 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*abi_route_createApplication:
	intc 0 // 1
	return

*create_NoOp:
	pushbytes 0xb8447b36 // method "createApplication()void"
	txna ApplicationArgs 0
	match *abi_route_createApplication

	// this contract does not implement the given ABI method for create NoOp
	err

*call_NoOp:
	pushbytes 0x7a2ecb1c // method "payment()void"
	pushbytes 0xdf9b38ad // method "assetCreation()uint64"
	pushbytes 0x690ce8b6 // method "appCall()void"
	pushbytes 0x8f310534 // method "assetConfig()void"
	pushbytes 0xf834bee8 // method "assetFreeze()void"
	pushbytes 0x1f4418b7 // method "assetTransfer()void"
	pushbytes 0x70adfa23 // method "methodCall()uint64"
	pushbytes 0xe6ec46fc // method "onlineKeyRegistration()void"
	pushbytes 0x1172301a // method "offlineKeyRegistration()void"
	pushbytes 0x7a33897d // method "innerGeneric()void"
	txna ApplicationArgs 0
	match *abi_route_payment *abi_route_assetCreation *abi_route_appCall *abi_route_assetConfig *abi_route_assetFreeze *abi_route_assetTransfer *abi_route_methodCall *abi_route_onlineKeyRegistration *abi_route_offlineKeyRegistration *abi_route_innerGeneric

	// this contract does not implement the given ABI method for call NoOp
	err"
`;

exports[`Inner Transactions ItxnsTest Artifacts Maintains program size 1`] = `646`;

exports[`Inner Transactions ItxnsTest Artifacts Generates ABI JSON 1`] = `
{
  "desc": "",
  "events": undefined,
  "methods": [
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "payment",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assetCreation",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "appCall",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assetConfig",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assetFreeze",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "assetTransfer",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "methodCall",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "uint64",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "onlineKeyRegistration",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "offlineKeyRegistration",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "innerGeneric",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
    {
      "args": [],
      "desc": undefined,
      "events": undefined,
      "name": "createApplication",
      "readonly": undefined,
      "returns": {
        "desc": undefined,
        "type": "void",
      },
    },
  ],
  "name": "ItxnsTest",
}
`;

exports[`Inner Transactions ItxnsTest Artifacts Generates ARC32 1`] = `
{
  "bare_call_config": {
    "close_out": "NEVER",
    "delete_application": "NEVER",
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "update_application": "NEVER",
  },
  "contract": {
    "desc": "",
    "events": undefined,
    "methods": [
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "payment",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assetCreation",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "appCall",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assetConfig",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assetFreeze",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "assetTransfer",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "methodCall",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "uint64",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "onlineKeyRegistration",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "offlineKeyRegistration",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "innerGeneric",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
      {
        "args": [],
        "desc": undefined,
        "events": undefined,
        "name": "createApplication",
        "readonly": undefined,
        "returns": {
          "desc": undefined,
          "type": "void",
        },
      },
    ],
    "name": "ItxnsTest",
  },
  "hints": {
    "appCall()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assetConfig()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assetCreation()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assetFreeze()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "assetTransfer()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE",
      },
    },
    "innerGeneric()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "methodCall()uint64": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "offlineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "onlineKeyRegistration()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
    "payment()void": {
      "call_config": {
        "no_op": "CALL",
      },
    },
  },
  "schema": {
    "global": {
      "declared": {},
      "reserved": {},
    },
    "local": {
      "declared": {},
      "reserved": {},
    },
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw",
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0,
    },
  },
}
`;
